[
  {
    "objectID": "project/index.html",
    "href": "project/index.html",
    "title": "Projects",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nDCGAN on MNIST\n\n\n\nGAN\n\n\nCNN\n\n\nKeras\n\n\n\nA Keras implementation of Deep Convolutional Generative Adversarial Networks (DCGAN) trained on MNIST dataset.\n\n\n\nJun, 2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nD3 Force Layout - Biological Networks\n\n\n\nd3\n\n\ngraph\n\n\nprotein-networks\n\n\nvisualization\n\n\n\nAn interactive graph visualization of protein-protein interaction networks.\n\n\n\nSep, 2017\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Musings from My Corner of the World",
    "section": "",
    "text": "Custom Loss Functions for LightGBM and CatBoost\n\n\n\n\n\n\nML\n\n\nLightGBM\n\n\nCatBoost\n\n\nGBT\n\n\n\nGuide on how to implement custom loss functions and evaluation metrics for LightGBM and CatBoost\n\n\n\n\n\nAug 11, 2024\n\n\nNima Sarang\n\n\n\n\n\n\n\n\n\n\n\n\nMulti-Layer LSTM from Scratch using NumPy\n\n\n\n\n\n\nml\n\n\nanalysis\n\n\n\nIn this post, we will implement a multi-layer LSTM model from scratch in pure NumPy, and train it on the Shakespeare dataset. We’ll also implement the AdamW optimizer and the necessary data modules.\n\n\n\n\n\nJun 15, 2024\n\n\nNima Sarang\n\n\n\n\n\n\nNo matching items\n\nReuseCC BY-SA 4.0"
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "About Me",
    "section": "",
    "text": "CV\n  \n  \n    \n     GitHub\n  \n  \n    \n     LinkedIn\n  \n  \n    \n     Twitter\n  \n\n  \n  \n\n👋 Hey there!\n\n\nI’m Nima Sarang. I’m a Machine Learning Scientist at Expedia Group. I build and manage machine learning models for Search Engine Marketing (SEM), for Expedia Group’s global brands, like Expedia, Hotels.com and Vrbo.\nI’m addicted to learning and sharing knowledge, and am enthusiastic about applying statistical and machine learning techniques to solve real-world problems."
  },
  {
    "objectID": "about/index.html#about-me",
    "href": "about/index.html#about-me",
    "title": "About Me",
    "section": "About Me",
    "text": "About Me\nPrior to working at Expedia Group, I was a Machine Learning Engineer at Divar, where I worked on pricing and computer vision models for the largest e-commerce platform in Iran. I had the joy and fortune of working with a lot of talented people, and learned how to build and deploy machine learning models at scale.\nI completed my master’s degree in Computer Science at Concordia University, where I was a member of the Immersive & Creative Technologies Lab. I worked on applying deep reinforement learning to satellite imagery data for extracting road networks using controllable agents.\nI’m a passionate about solving problems. In my free time, I often participate in Kaggle-like competitions to learn about applying ML techniques to different problems. I try to keep up with the latest research in the field, and am always looking for ways to improve my skills. One of the reason I started this website is to write about things I discover and share cool stuff.\n\nLet’s do something awesome together!\nIf you’re interested in working with me, please drop me a line at contact@nimasarang.com!\n\n\nA little bit more about me…\n\nHere is a timeline of my professional experience and the projects I’ve worked on: \n\n    \n        2022 - Present\n        \n          \n          Expedia Group\n          Machine Learning Scientist\n        \n        Capital Allocation\n            Capital optimization for search ads bidding on Expedia Group's global brands. My team manages a $100M+ annual budget.\n        \n        Sparisty-Aware ML Models\n            Novel ML, bayesian and tree-based methods for training on large-scale and highly sparse data.\n        \n        Real-time Controllers\n            Developed control-loop systems for real-time bidding on search engine marketing platforms.\n        \n    \n\n    \n        Sep 2021 - Mar 2022\n        \n          \n          Concordia University\n          Instructor\n        \n        Ericsson ML/AI Upskill Training Program\n            I taught PyTorch and Computer Vision tutorials to Ericsson employees.\n            I also mentored three teams throughout the program,\n             guiding them through the implementation and debugging of their projects.\n        \n    \n\n    \n        2020 - 2022\n        \n          \n          Immersive & Creative Technologies Lab\n          ML Researcher\n        \n        Tractable Large-scale Deep Reinforcement Learning\n            Leveraged deep reinforcement learning to solve massive-scale environments and developed an automatic extraction system for urban road networks from high-resolution aerial imagery, in collaboration with CAE.\n        \n    \n\n    \n        2021\n        \n          Stock Trading Agent\n          I spent a good chunk of my free time developing a stock trading agent that uses reinforcement learning and forecasting models to make trading decisions. Even though it wasn't able to beat the B&H strategy, I learned a lot about trading, forecasting, scalability, and offline policy evaluation.\n        \n    \n\n    \n        2019 - 2020\n        \n          \n          Divar\n          Machine Learning Engineer\n        \n        \n          License Plate Detection and Anonymization\n          Developed a real-time pose estimation model for automatically hiding vehicle license plates in images, and published an educational technical blog on the implementation details. This is an example in action.\n        \n        \n          Used Vehicle Price Estimation Model\n          Developed a used-car price valuation model that was deployed as a free SaaS to all users.\n        \n        \n          Client-Side ML for Merchandise Valuation\n          Developed a client-side multi-task AI model for image classification and price estimation of merchandise and commodities in real-time. Deployed on Android using Java and TensorFlow Lite. Used fastText and TF-IDF to automatically tag unlabeled data.\n        \n    \n\n    \n        2019\n        \n          Augmented Reality Soccer Using Deep Learning\n          As my Bachelor's thesis, I developed an two-player augmented reality soccer game played witha virtual ball and field.\n          Built using Unity, an optimized semantic segmentation model, and an object tracking algorithm.\n        \n    \n\n    \n        2017 - 2018\n        Computational Biology Research Center\n        Research Assistant\n        \n          Protein Design\n          Worked on designing protein sequences that can fold into a given tertiary structure using AI and evolutionary profiles.\n        \n    \n\n    \n        2016 - 2017\n        \n          \n          Amirkabir University\n          Competitive Programmer\n        \n        ICPC - ACM International Collegiate Programming Contest\n            I was a member of the university's competitive programming team, and participated in the ACM ICPC regional contest. The algorithmic problems we solved varied from graph theory and dynamic programming, to computational\n            geometry and greedy."
  },
  {
    "objectID": "publication/index.html",
    "href": "publication/index.html",
    "title": "Publications",
    "section": "",
    "text": "Tractable large-scale deep reinforcement learning\n\n\nThis work presents a reinforcement learning framework for road extraction from satellite images, offering reduced computational costs and improved stability through novel techniques and self-supervised loss\n\n\n\nReinforcement Learning\n\n\nComputer Vision\n\n\nSattelite Imagery\n\n\n\n\n\n\nJul 1, 2023\n\n\nNima Sarang, Charalambos Poullis\n\n\n\n\n\n\n\nProtein design using native secondary sub-structures and solvent accessibility\n\n\nAdvancing protein design through an improved genetic algorithm. This work builds on GAPSSIF, adding solvent accessibility to enhance sequence space exploration\n\n\n\nResearch\n\n\nProtein Design\n\n\nGenetic Algorithm\n\n\nSolvent Accessibility\n\n\n\n\n\n\nJan 3, 2018\n\n\nFatemeh Zare-Mirakabad, Marziyeh Movahedi, Nima Sarang, S. Shahriar Arab\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "publication/2018-01-03-protein-design/index.html",
    "href": "publication/2018-01-03-protein-design/index.html",
    "title": "Protein design using native secondary sub-structures and solvent accessibility",
    "section": "",
    "text": "According to structure-dependent function of proteins, two main challenging problems called Protein Structure Prediction (PSP) and Inverse Protein Folding (IPF) are investigated. In spite of IPF essential applications, it has not been studied as much as PSP problem. In fact, the ultimate goal of IPF problem or protein design is to create proteins with enhanced properties or even novel functions. One of the major computational challenges in protein design is large protein sequence space, namely searching through all plausible sequences is impossible. In our previous research, we introduced a genetic algorithm called GAPSSIF for designing protein secondary structure. This algorithm benefits from evolutionary information obtained by solved protein structures in PDB. Therefore, we constructed a repository of protein secondary sub-structures to accelerate convergence of the algorithm. The secondary structures of designed sequences by GAPSSIF are comparable with those obtained by Evolver and EvoDesign. In this paper, we modify GAPSSIF so it considers solvent accessibility. Therefore, the simple fitness function of GAPSSIF is improved by a multi-featured one to search through the sequence space more precisely."
  },
  {
    "objectID": "publication/2018-01-03-protein-design/index.html#abstract",
    "href": "publication/2018-01-03-protein-design/index.html#abstract",
    "title": "Protein design using native secondary sub-structures and solvent accessibility",
    "section": "",
    "text": "According to structure-dependent function of proteins, two main challenging problems called Protein Structure Prediction (PSP) and Inverse Protein Folding (IPF) are investigated. In spite of IPF essential applications, it has not been studied as much as PSP problem. In fact, the ultimate goal of IPF problem or protein design is to create proteins with enhanced properties or even novel functions. One of the major computational challenges in protein design is large protein sequence space, namely searching through all plausible sequences is impossible. In our previous research, we introduced a genetic algorithm called GAPSSIF for designing protein secondary structure. This algorithm benefits from evolutionary information obtained by solved protein structures in PDB. Therefore, we constructed a repository of protein secondary sub-structures to accelerate convergence of the algorithm. The secondary structures of designed sequences by GAPSSIF are comparable with those obtained by Evolver and EvoDesign. In this paper, we modify GAPSSIF so it considers solvent accessibility. Therefore, the simple fitness function of GAPSSIF is improved by a multi-featured one to search through the sequence space more precisely."
  },
  {
    "objectID": "blog/2024-06-15-lstm-from-scratch/index.html",
    "href": "blog/2024-06-15-lstm-from-scratch/index.html",
    "title": "Multi-Layer LSTM from Scratch using NumPy",
    "section": "",
    "text": "In this post, I will implement the Long-Short Term Memory (LSTM) model in NumPy. This is to serve as a learning excercise to understand the inner working of the neural network, backpropagation, and the optimization process. I try to strike a balance between readability and efficeincy. So, we’ll be going over the imeplemntation of:\n\nMulti-layer LSTM Model\n\nAdamW Optimizer\n\nDataset and Dataloader\n\nTraining on the Shakespeare dataset\n\nall in NumPy!\nBy the end of this post, should you have a good grasp of how LSTM works on both the forward and backward pass, what is the AdamW optimizer, and how to train a model on a text dataset."
  },
  {
    "objectID": "blog/2024-06-15-lstm-from-scratch/index.html#introduction",
    "href": "blog/2024-06-15-lstm-from-scratch/index.html#introduction",
    "title": "Multi-Layer LSTM from Scratch using NumPy",
    "section": "",
    "text": "In this post, I will implement the Long-Short Term Memory (LSTM) model in NumPy. This is to serve as a learning excercise to understand the inner working of the neural network, backpropagation, and the optimization process. I try to strike a balance between readability and efficeincy. So, we’ll be going over the imeplemntation of:\n\nMulti-layer LSTM Model\n\nAdamW Optimizer\n\nDataset and Dataloader\n\nTraining on the Shakespeare dataset\n\nall in NumPy!\nBy the end of this post, should you have a good grasp of how LSTM works on both the forward and backward pass, what is the AdamW optimizer, and how to train a model on a text dataset."
  },
  {
    "objectID": "blog/2024-06-15-lstm-from-scratch/index.html#multi-layer-lstm",
    "href": "blog/2024-06-15-lstm-from-scratch/index.html#multi-layer-lstm",
    "title": "Multi-Layer LSTM from Scratch using NumPy",
    "section": "2 Multi-Layer LSTM",
    "text": "2 Multi-Layer LSTM\nLong Short-Term Memory (LSTM) is a type of recurrent neural network (RNN) architecture specifically designed to handle long-term dependencies in sequential data. It incorporates a memory state, a hidden state, and three gating mechanisms: the input gate, forget gate, and output gate. These gates control the flow of information into, out of, and within the memory and hidden states, allowing the LSTM to selectively remember or forget information at each time step.\nThe memory state in an LSTM acts as a long-term storage unit, allowing the network to retain information over long sequences. The input gate determines how much new information should be stored in the memory state, while the forget gate controls the amount of old information to be discarded. The output gate regulates the flow of information from the memory state and hidden state to the next time step.\n\n\n\nLSTM Architecture [1]\n\n\nThe LSTM cell consists of the following components: \\[\n\\begin{aligned}\nf_t &= \\sigma(W_{if}x_t + b_{if} + W_{hf}h_{t-1} + b_{hf}) \\\\\ni_t &= \\sigma(W_{ii}x_t + b_{ii} + W_{hi}h_{t-1} + b_{hi}) \\\\\no_t &= \\sigma(W_{io}x_t + b_{io} + W_{ho}h_{t-1} + b_{ho}) \\\\\n\\tilde{C}_t &= \\tanh(W_{ic}x_t + b_{ic} + W_{hc}h_{t-1} + b_{hc}) \\\\\nC_t &= f_t \\odot C_{t-1} + i_t \\odot \\tilde{C}_t \\\\\nh_t &= o_t \\odot \\tanh(C_t)\n\\end{aligned}\n\\]\nwhere \\(f_t\\), \\(i_t\\), and \\(o_t\\) are the forget, input, and output gates, respectively. \\(\\tilde{C}_t\\) is the candidate memory state, \\(C_t\\) is the memory state, and \\(h_t\\) is the hidden state at time step \\(t\\). \\(x_t\\) is the input at time step \\(t\\), \\(h_{t-1}\\) is the hidden state at time step \\(t-1\\), and \\(W\\) and \\(b\\) are the weights and biases of each gate.\nA multi-latyer LSTM is simply stacking multiple LSTM cells on top of each other. The output of the previous LSTM cell is fed as input to the next LSTM cell. The hidden state of the last LSTM cell is the input to the classification layer.\n\n\n\nMulti-layer LSTM Example [2]. Each row of the green rectangles represent an LSTM cell.\n\n\nNow let’s get into the implementation, step by step.\n\n&gt; lstm.py\n\n\n\n        \n            \n            \n        \n            \n                \n                    #\n                \n                Import the dependencies.  \nThe activation functions are defined in a separate module\n\n            \n            \n                1import numpy as np\n2from collections import defaultdict\n3from copy import deepcopy\n4from op import sigmoid, tanh, softmax\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                LSTM Classifier\nMulti-layer LSTM classifier for sequence classification tasks.\nIt consists of an embedding layer, multiple LSTM cells, and a classification head.\nThe model is used to process input sequences and generate output logits.\n\n            \n            \n                5class LSTMClassifier:\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \n            \n            \n                6    def __init__(\n7        self, embed_size, hidden_size, vocab_size, n_cells=1, dropout=0\n8    ) -&gt; None:\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Define internal variables\n\n            \n            \n                 9        self.embed_size = embed_size\n10        self.hidden_size = hidden_size\n11        self.vocab_size = vocab_size\n12        self.n_cells = n_cells\n13        self.layers = dict()\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Embedding layer\n\n            \n            \n                14        self.layers[\"embedding\"] = np.empty((vocab_size, embed_size))\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Create LSTM layers\n\n            \n            \n                15        for cell_index in range(n_cells):\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                forget, output, and cell gates\n\n            \n            \n                16            for layer_name in [\"f\", \"o\", \"c\"]:\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                The input size of the first layer is embed_size + hidden_size, since the input is the concatenation of the input features and the previous hidden state. For subsequent layers, the input size is 2 x hidden_size.\n\n            \n            \n                17                linp_sz = hidden_size + (\n18                    embed_size if cell_index == 0 else hidden_size\n19                )\n20                self.layers[f\"W{layer_name}_{cell_index}\"] = np.empty(\n21                    (linp_sz, hidden_size)\n22                )\n23                self.layers[f\"b{layer_name}_{cell_index}\"] = np.empty(\n24                    (hidden_size)\n25                )\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Classification head (projection layer) to generate the output logits\n\n            \n            \n                26        self.layers[\"W_head\"] = np.empty((hidden_size, vocab_size))\n27        self.layers[\"b_head\"] = np.empty((vocab_size))\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Initialize gradients\n\n            \n            \n                28        self.grad = {k: np.empty_like(v) for k, v in self.layers.items()}\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Initialize weights\n\n            \n            \n                29        self.init_weights()\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Calculate the total number of parameters in the model.\nThe size property of a numpy array returns the number of elements in the array.\n\n            \n            \n                30    @property\n31    def num_parameters(self):\n32        return sum(l.size for l in self.layers.values())\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Glorot/Xavier initialization\nThe weights are initialized from a uniform distribution in the range \\([-d, d]\\), where\n\\(d = \\sqrt{\\frac{6.0}{(r + c)}}\\), and \\(r\\) and \\(c\\) are the number of rows and columns\nin the weight matrix. This makes the variance of the weights inversely proportional to the\nnumber the units, and helps in preventing the gradients from vanishing or exploding during\ntraining. The biases are initialized to zero.\n\n            \n            \n                33    def init_weights(self):\n34        for name, layer in self.layers.items():\n35            if layer.ndim == 1:\n36                self.layers[name] = np.zeros((layer.shape[0]))\n37            elif layer.ndim == 2:\n38                r, c = layer.shape\n39                d = np.sqrt(6.0 / (r + c))\n40                self.layers[name] = np.random.uniform(-d, d, (r, c))\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Initialize the hidden and cell states for the LSTM layers.\n\n            \n            \n                41    def init_state(self, batch_size):\n42        state = dict()\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                For each LSTM cell, initialize the hidden and cell states to zeros\n\n            \n            \n                43        state[\"h\"] = np.zeros((self.n_cells, batch_size, self.hidden_size))\n44        state[\"c\"] = np.zeros((self.n_cells, batch_size, self.hidden_size))\n45        return state\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Forward pass through the LSTM model.\n\ninputs: Input sequences of shape (batch_size, seq_len, features)\nstate: Hidden and cell states of the LSTM layers. If None, initialize the states to zeros.\nteacher_forcing: If True, use inputs as the input at each timestep.\nIf False, inputs is used as the prefix.\ngeneration_length: Length of the generated sequence when teacher_forcing is False.\n\n\n            \n            \n                46    def forward(\n47        self, inputs, state=None, teacher_forcing=True, generation_length=0\n48    ):\n49        batch_sz, seq_len = inputs.shape[:2]\n50\n51        if teacher_forcing is True:\n52            assert generation_length == 0\n53\n54        n_timestamps = seq_len + generation_length\n55        activations = defaultdict(lambda: defaultdict(list))\n56        outputs = np.zeros((batch_sz, n_timestamps, self.vocab_size))\n57\n58        if state is None:\n59            state = self.init_state(batch_sz)\n60        else:\n61            state = state.copy()  # make a shallow copy\n62        for k in [\"h\", \"c\"]:\n63            activations[k][-1] = state[k]\n64\n65        for timestep in range(n_timestamps):\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                If teacher forcing is False and the prefix is consumed, use the previous prediction as the input\nfor the next timestep\n\n            \n            \n                66            if teacher_forcing is False and timestep &gt;= 1:\n67                word_indices = np.argmax(outputs[:, timestep - 1], axis=1)\n68            else:\n69                word_indices = inputs[:, timestep]\n70            features = self.layers[\"embedding\"][word_indices]\n71            activations[\"input\"][timestep] = word_indices\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Forward pass through the LSTM cells\n\n            \n            \n                72            for cell_idx in range(self.n_cells):\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Previous cell states\n\n            \n            \n                73                h_prev = state[\"h\"][cell_idx]\n74                c_prev = state[\"c\"][cell_idx]\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Concatenate the input features and the previous hidden state\n\n            \n            \n                75                X = np.concatenate((features, h_prev), axis=-1)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Apply the gates, which are linear operations followed by activation functions\n\n            \n            \n                76                f = sigmoid(\n77                    X @ self.layers[f\"Wf_{cell_idx}\"]\n78                    + self.layers[f\"bf_{cell_idx}\"]\n79                )\n80                o = sigmoid(\n81                    X @ self.layers[f\"Wo_{cell_idx}\"]\n82                    + self.layers[f\"bo_{cell_idx}\"]\n83                )\n84                c_bar = tanh(\n85                    X @ self.layers[f\"Wc_{cell_idx}\"]\n86                    + self.layers[f\"bc_{cell_idx}\"]\n87                )\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                New cell states\n\n            \n            \n                88                c = f * c_prev + (1 - f) * c_bar\n89                h = o * tanh(c)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Classification head\n\n            \n            \n                90                if cell_idx == self.n_cells - 1:\n91                    logits = (\n92                        h @ self.layers[\"W_head\"] + self.layers[\"b_head\"]\n93                    )\n94                    probs = softmax(logits, axis=1)\n95                    outputs[:, timestep] = probs\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Update the state for the next timestep\n\n            \n            \n                96                state[\"c\"][cell_idx] = c\n97                state[\"h\"][cell_idx] = h\n98                features = h\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Save the activations for backpropagation\n\n            \n            \n                 99                for k, v in zip(\n100                    [\"x\", \"f\", \"o\", \"c_bar\", \"c\", \"h\"],\n101                    [X, f, o, c_bar, c, h],\n102                ):\n103                    activations[k][timestep].append(v)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \n            \n            \n                104        return outputs, state, activations\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Alias for the forward method, similar to PyTorch's nn.Module.\nThis enables model(inputs) \\(\\equiv\\) model.forward(inputs)\n\n            \n            \n                105    __call__ = forward\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Backward pass to compute the gradients.\n\ngrad: Gradient of the loss with respect to the output of the model, i.e. logits (pre-softmax scores)\nactivations: Activations from the forward pass.\n\n\n            \n            \n                106    def backward(self, grad, activations):\n107        batch_sz, seq_len = grad.shape[:2]\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Intialize the gradients of the next timestep to zeros. This will be updated as we move backward in time.\n\n            \n            \n                108        grad_next = {\n109            k: np.zeros((self.n_cells, batch_sz, self.hidden_size))\n110            for k in [\"h\", \"c\"]\n111        }\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Helper function to compute the gradients of the linear layer.\nThe gradients are computed with respect to the input, weights, and biases respectively.\n\nX: Input to the linear layer\nW: Weights of the linear layer\ndY: Gradient of the loss with respect to the output of the linear layer\n\n\n            \n            \n                112        def _lin_grad(X, W, dY):\n113            return (dY @ W.T, X.T @ dY, dY)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Backpropagation through time\n\n            \n            \n                114        for timestep in reversed(range(seq_len)):\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Classification head\n\n            \n            \n                115            dout_t = grad[:, timestep]\n116            h_t = activations[\"h\"][timestep][-1]\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \\(\\text{logits}_t = h_t \\mathbf{W}_{\\text{head}} + \\mathbf{b}_{\\text{head}}\\)\n\n            \n            \n                117            dh_t, dW_head, db_head = _lin_grad(\n118                X=h_t, W=self.layers[\"W_head\"], dY=dout_t\n119            )\n120            self.grad[f\"W_head\"] += dW_head\n121            self.grad[f\"b_head\"] += np.sum(db_head, axis=0)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Iterate over the LSTM cells in reverse order\n\n            \n            \n                122            for cell_idx in reversed(range(self.n_cells)):\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Get the activations for the current timestep\n\n            \n            \n                123                x, f, o, c_bar, c_t = (\n124                    activations[key][timestep][cell_idx]\n125                    for key in [\"x\", \"f\", \"o\", \"c_bar\", \"c\"]\n126                )\n127                c_p = activations[\"c\"][timestep - 1][cell_idx]\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Gradients flowing from the next timestep. The gradient of the hidden state \\(h_t\\) is the sum of\nthe gradients from the next cell and the next timestep.\n\n            \n            \n                128                dh_t += grad_next[\"h\"][cell_idx]\n129                dc_t = grad_next[\"c\"][cell_idx]\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \\(h_t = o * tanh(c_t)\\)\n\n            \n            \n                130                do = dh_t * tanh(c_t)\n131                dc_t = dh_t * o * tanh(c_t, grad=True)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \\(c_t = f \\times c_p + (1 - f) \\times c_{\\text{bar}}\\)\n\n            \n            \n                132                df = dc_t * (c_p - c_bar)\n133                dc_p = dc_t * f\n134                dc_bar = dc_t * (1 - f)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Pre-activation gradients\n\n            \n            \n                135                dc_bar *= tanh(c_bar, grad=True)\n136                do *= sigmoid(o, grad=True)\n137                df *= sigmoid(f, grad=True)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                f, o, c Gates\nSince all the gates are linear operations, the calculation will be similar\n\n            \n            \n                138                dinp, dh_prev = 0, 0\n139                for gate, doutput in zip(\n140                    [\"f\", \"o\", \"c\"], [df, do, dc_bar]\n141                ):\n142                    dX, dW, db = _lin_grad(\n143                        X=x,\n144                        W=self.layers[f\"W{gate}_{cell_idx}\"],\n145                        dY=doutput,\n146                    )\n147                    self.grad[f\"W{gate}_{cell_idx}\"] += dW\n148                    self.grad[f\"b{gate}_{cell_idx}\"] += np.sum(db, axis=0)\n149                    dinp_gate, dh_prev_gate = (\n150                        dX[:, : -self.hidden_size],\n151                        dX[:, -self.hidden_size :],\n152                    )\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Accumulate the gradients for the input and the hidden state,\nsince they are shared between the gates\n\n            \n            \n                153                    dinp += dinp_gate\n154                    dh_prev += dh_prev_gate\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Update the gradients for the previous timestep\n\n            \n            \n                155                dh_t = dinp\n156                grad_next[\"c\"][cell_idx] = dc_p\n157                grad_next[\"h\"][cell_idx] = dh_prev\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Embedding layer\n\n            \n            \n                158            word_indices = activations[\"input\"][timestep]\n159            self.grad[\"embedding\"][word_indices] += dinp\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Helper method to serialize the model state, similar to PyTorch's state_dict.\nThe state dictionary contains the model configuration, weights, and gradients.\nIt can be used to save and load the model.\n\n            \n            \n                160    @property\n161    def state_dict(self):\n162        return dict(\n163            config=dict(\n164                embed_size=self.embed_size,\n165                hidden_size=self.hidden_size,\n166                vocab_size=self.vocab_size,\n167                n_cells=self.n_cells,\n168            ),\n169            weights=deepcopy(self.layers),\n170            grad=deepcopy(self.grad),\n171        )\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \n            \n            \n                172    @classmethod\n173    def from_state_dict(cls, state_dict):\n174        obj = cls(**state_dict[\"config\"])\n175        for src, tgt in zip(\n176            [state_dict[\"weights\"], state_dict[\"grad\"]],\n177            [obj.layers, obj.grad],\n178        ):\n179            for k, v in src.items():\n180                tgt[k][:] = v\n181        return obj"
  },
  {
    "objectID": "blog/2024-06-15-lstm-from-scratch/index.html#activation-and-loss-functions",
    "href": "blog/2024-06-15-lstm-from-scratch/index.html#activation-and-loss-functions",
    "title": "Multi-Layer LSTM from Scratch using NumPy",
    "section": "3 Activation and Loss Functions",
    "text": "3 Activation and Loss Functions\nThe activation functions used in LSTM are the sigmoid, tanh (hyperbolic tangent), and softmax functions.\n\nSigmoid is used to compute the gates, which are values between 0 and 1 that control the flow of information.\n\ntanh function is used to compute the candidate memory state.\n\nSoftmax is used to compute the output probabilities.\n\nThe loss function used is the cross-entropy loss, which is suitable for classification tasks. Next token prediction is indeed a classification task where the model predicts the probability distribution over the vocabulary for the next token in the sequence.\n\n&gt; op.py\n\n\n\n        \n            \n            \n        \n            \n                \n                    #\n                \n                Sigmoid function\nThe sigmoid squashes the input to the range [0, 1].\n\nIf the flag grad is False, returns the sigmoid of x: $$\\sigma(x) = \\frac{1}{1 + e^{-x}}$$\nOtherwise, \\(x = \\sigma(z)\\) and the derivate \\(\\frac{\\partial \\sigma(z)}{\\partial z}\\) is returned:\n$$\\frac{\\partial \\sigma(z)}{\\partial z} = \\sigma(z) * (1 - \\sigma(z))= x(1-x)$$.\n\n\n            \n            \n                1import numpy as np\n2\n3\n4def sigmoid(x, grad=False):\n5    if not grad:\n6        return 1 / (1 + np.exp(-x))\n7    return x * (1 - x)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Hyperbolic tangent function\nThe tanh function squashes the input to the range [-1, 1]. It's defined as:\n$$\\tanh(x) = \\frac{e^{x} - e^{-x}}{e^{x} + e^{-x}}$$\n\n            \n            \n                 8def tanh(x, grad=False):\n 9    if not grad:\n10        return np.tanh(x)\n11    return 1 - x**2\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Softmax function\nApplies the softmax function to the input array along the specified axis. Softmax converts\na vector of real numbers into a probability distribution. The logits are first exponentiated\nto make them positive and increase their separation. It's defined as:\n$$\\text{softmax}(x_i) = \\frac{e^{x_i}}{\\sum_{j} e^{x_j}}$$\n\n            \n            \n                12def softmax(x, axis):\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Subtracting the maximum value for numerical stability. Softmax is invariant to to a constant shift\n\n            \n            \n                13    exps = np.exp(x - np.max(x, axis=axis, keepdims=True))\n14    return exps / np.sum(exps, axis=axis, keepdims=True)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Cross-entropy loss function\nComputes the cross-entropy loss between the predicted and target distributions. The cross-entropy loss is defined as:\n$$H(y, p) = -\\sum_{i} y_i \\log(p_i)$$\n\nprediction: The predicted array of probabilities of shape (batch_size, num_classes).\ntarget: The target array of shape (batch_size,) containing the class indices.\n\n\n            \n            \n                15def cross_entropy(prediction, target, reduction=\"mean\"):\n16    eps = np.finfo(prediction.dtype).eps\n17    prediction = np.clip(prediction, eps, 1 - eps)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Take the negative log of the predicted probability of the target class\n\n            \n            \n                18    loss = -np.take_along_axis(\n19        np.log(prediction), target[..., np.newaxis], axis=-1\n20    )\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Aggregate the loss\n\n            \n            \n                21    if reduction == \"mean\":\n22        loss = loss.mean()\n23    elif reduction == \"sum\":\n24        loss = loss.sum()\n25    return loss"
  },
  {
    "objectID": "blog/2024-06-15-lstm-from-scratch/index.html#adamw",
    "href": "blog/2024-06-15-lstm-from-scratch/index.html#adamw",
    "title": "Multi-Layer LSTM from Scratch using NumPy",
    "section": "4 AdamW",
    "text": "4 AdamW\nAdamW is a variant of the Adam optimizer that decouples weight penalty from the optimization steps, where the weight penalty is applied directly to the gradients. Adam optimizer uses both the first and second moments of the gradients to adapt the learning rate tailored to each parameter. The benefit of Adam/AdamW is that it requires little tuning of hyperparameters compared to RMSprop and SGD. We’ll go over each step of the optimization in the implementation.\n\n&gt; optim.py\n\n\n\n        \n            \n            \n        \n            \n                \n                    #\n                \n                Import NumPy\n\n            \n            \n                1import numpy as np\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \n            \n            \n                2class AdamW:\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                AdamW Optimizer\nParameters:\n\nparams (dict): Dictionary referencing the model parameters\ngrads (dict): Dictionary referencing the gradients of the model parameters\nlr (float): Learning rate\nbetas (Tuple[float, float]): Coefficients used for computing running averages of gradient and its square\neps (float): Term added to the denominator to improve numerical stability\nweight_decay (float): Weight decay (L2 penalty) coefficient\namsgrad (bool): Whether to use the AMSGrad variant of the algorithm\n\n\n            \n            \n                 3    def __init__(\n 4        self,\n 5        params: dict,\n 6        grads: dict,\n 7        lr=0.001,\n 8        betas: tuple[float, float] = (0.9, 0.999),\n 9        eps: float = 1e-8,\n10        weight_decay: float = 1e-2,\n11        amsgrad: bool = False,\n12    ):\n13        self.params = params\n14        self.grads = grads\n15        self.lr = lr\n16        self.betas = betas\n17        self.eps = eps\n18        self.weight_decay = weight_decay\n19        self.amsgrad = amsgrad\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Counter for the number of iterations\n\n            \n            \n                20        self.n_iters = 0\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Initialize first moment vector (mean of gradients) for each parameter\n\n            \n            \n                21        self.m = {k: np.zeros_like(v) for k, v in params.items()}\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Initialize second moment vector (uncentered variance of gradients) for each parameter\n\n            \n            \n                22        self.v = {k: np.zeros_like(v) for k, v in params.items()}\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Initialize maximum of second moment vector for AMSGrad if needed\n\n            \n            \n                23        self.v_m = (\n24            {k: np.zeros_like(v) for k, v in params.items()}\n25            if amsgrad\n26            else None\n27        )\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Resets all gradients to zero. This is typically used before computing new\ngradients in the training loop.\n\n            \n            \n                28    def zero_grad(self):\n29        for v in self.grads.values():\n30            v[:] = 0\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Perform a single optimization step.\nUpdates the parameters of the model using the AdamW update rule, which\nincludes bias correction, optional AMSGrad, and weight decay.\n\n            \n            \n                31    def step(self):\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Increment the iteration counter\n\n            \n            \n                32        self.n_iters += 1\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Unpack the beta values\n\n            \n            \n                33        beta1, beta2 = self.betas\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Iterate over the parameters and their gradients\n\n            \n            \n                34        for (name, param), grad in zip(\n35            self.params.items(), self.grads.values()\n36        ):\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Update the first moment estimate:\n$$m_t = \\beta_1 \\cdot m_{t-1} + (1 - \\beta_1) \\cdot g_t$$\nwhere \\(\\beta_1\\) is the exponential decay rate for the first moment estimates,\nand \\(g_t\\) is the gradient at time step \\(t\\).  \n\\(m_{t}\\) is simply an exponential moving average (EMA) of the past gradients.\n\n            \n            \n                37            m_t = self.m[name] = (\n38                beta1 * self.m[name] + (1 - beta1) * grad\n39            )\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Update the second moment estimate:\n$$v_t = \\beta_2 \\cdot v_{t-1} + (1 - \\beta_2) \\cdot g_t^2$$\nwhere \\(\\beta_2\\) is the exponential decay rate for the second moment estimates.\n\n            \n            \n                40            v_t = self.v[name] = beta2 * self.v[name] + (\n41                1 - beta2\n42            ) * (grad**2)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Compute bias-corrected first moment estimate:\n$$\\hat{m}_t = \\frac{m_t}{1 - \\beta_1^t}$$\nWithout correction, the bias causes the algorithm to move very slowly at the beginning of training,\nas the moment estimates are underestimated. In the early iterations, \\(t\\) is small, so \\(\\beta_1^t\\) is close to 1,\nmaking \\(1 - \\beta_1^t\\) a small number. Dividing by this small number effectively increases the estimate.\n\n            \n            \n                43            m_t_hat = m_t / (1 - beta1**self.n_iters)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Compute bias-corrected second moment estimate:\n$$\\hat{v}_t = \\frac{v_t}{1 - \\beta_2^t}$$\n\n            \n            \n                44            v_t_hat = v_t / (1 - beta2**self.n_iters)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                AMSGrad update:\n$$\\hat{v}_t = \\max(\\hat{v}_t, v_{t-1})$$\nwhere \\(v_{t-1}\\) is the previous second moment estimate.\nThis ensures \\(v_t\\) is always non-decreasing, preventing the learning rate from growing too large.\n\n            \n            \n                45            if self.amsgrad:\n46                v_t_hat = self.v_m[name] = np.maximum(\n47                    self.v_m[name], v_t_hat\n48                )\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Adjusted gradient:\n$$\\hat{g} = \\frac{\\hat{m}_t}{\\sqrt{\\hat{v}_t} + \\epsilon}$$\nwhere \\(\\epsilon\\) is a small constant to avoid division by zero.  \n\\(\\frac{\\hat{m}_t}{\\sqrt{\\hat{v}_t}}\\) can be thought of as the signal-to-noise ratio of the gradient.\nI'll leave the intuition behind this to another blog post.\n\n            \n            \n                49            g_hat = m_t_hat / (np.sqrt(v_t_hat) + self.eps)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Add weight penalty to the update:\n$$\\text{update} = \\hat{g} + \\lambda \\cdot p$$\nwhere \\(\\lambda\\) is the weight_decay coefficient.\nThis is equivalent to adding the L2 penalty to the loss function, which penalizes large weights.\n\n            \n            \n                50            update = g_hat + self.weight_decay * param\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Update the parameters in the direction of the negative gradient, scaled by the learning rate:\n$$ p_t = p_{t-1} - \\eta \\cdot \\text{update}$$\nwhere \\(p_{t-1}\\) is the previous parameter value.\n\n            \n            \n                51            self.params[name] -= self.lr * update"
  },
  {
    "objectID": "blog/2024-06-15-lstm-from-scratch/index.html#data-utilities",
    "href": "blog/2024-06-15-lstm-from-scratch/index.html#data-utilities",
    "title": "Multi-Layer LSTM from Scratch using NumPy",
    "section": "5 Data Utilities",
    "text": "5 Data Utilities\nIn this section we’ll implement the Dataset and Dataloader classes to handle the Shakespeare dataset. We follow the best practices of PyTorch’s Dataset and DataLoader classes to make the implementation more modular and reusable.\n\nThe Dataset class implements the __getitem__ method, which returns a single sample from the dataset.\nThe DataLoader class will be used to sample mini-batches from the dataset, by calling the __getitem__ method of the Dataset.\n\n\n&gt; data.py\n\n\n\n        \n            \n            \n        \n            \n                \n                    #\n                \n                Import NumPy\n\n            \n            \n                1import numpy as np\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Dataset\nA dataset for next character prediction tasks.\nFor a sequence of characters \\([c_1, c_2, ..., c_n]\\) and a given sequence length \\(l\\),\nthis dataset creates input/target pairs of the form:\n\nInput \\(x_i\\):  \\([c_i, c_{i+1}, ..., c_{i+l-1}]\\)\nTarget \\(y_i\\): \\([c_{i+1}, c_{i+2}, ..., c_{i+l}]\\)\n\nwhere \\(i\\) ranges from 1 to \\(n-l\\).\nEach item in the dataset is a tuple \\((x_i, y_i)\\) where both \\(x_i\\) and \\(y_i\\) have length \\(l\\).\nThe task is to predict each character in \\(y_i\\) given the corresponding prefix in \\(x_i\\).\nFor example, given \\(x_i = [c_i, c_{i+1}, c_{i+2}]\\), the model would aim to predict:\n\n\\(c_{i+1}\\) given \\([c_i]\\)\n\\(c_{i+2}\\) given \\([c_i, c_{i+1}]\\)\n\\(c_{i+3}\\) given \\([c_i, c_{i+1}, c_{i+2}]\\)\n\n\n            \n            \n                2class NextCharDataset:\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \n            \n            \n                3    def __init__(self, data, seq_length):\n4        self.data = data.copy()\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Create a sliding window view of the data\n\n            \n            \n                5        self.window_view = np.lib.stride_tricks.sliding_window_view(\n6            self.data, window_shape=seq_length + 1\n7        )\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \n            \n            \n                8    def __len__(self):\n9        return len(self.window_view)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \\(\\text{Input}_i\\):  \\([c_i, c_{i+1}, ..., c_{i+l-1}]\\)\n\\(\\text{Target}_i\\): \\([c_{i+1}, c_{i+2}, ..., c_{i+l}]\\)\n\n            \n            \n                10    def __getitem__(self, idx):\n11        x, y = self.window_view[idx, :-1], self.window_view[idx, 1:]\n12        return x, y\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                DataLoader\nA simple DataLoader to iterate over a dataset in batches.\n\n            \n            \n                13class DataLoader:\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \n            \n            \n                14    def __init__(\n15        self, dataset, batch_size, shuffle=False, drop_last=False\n16    ):\n17        self.dataset = dataset\n18        self.batch_size = batch_size\n19        self.shuffle = shuffle\n20        self.drop_last = drop_last\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                The __iter__ method returns an iterator that yields batches of data. It's mainly\nused in a for loop to iterate over the dataset. e.g.:\nfor inputs, targets in dataloader:\n    ...\n\n\n\n            \n            \n                21    @property\n22    def __iter__(self):\n23        indices = np.arange(len(self.dataset))\n24\n25        if self.shuffle:\n26            np.random.shuffle(indices)\n27\n28        if self.drop_last:\n29            remainder = len(self.dataset) % self.batch_size\n30            if remainder:\n31                indices = indices[:-remainder]\n32\n33        for i in range(0, len(indices), self.batch_size):\n34            batch_indices = indices[i : i + self.batch_size]\n35            batch = [self.dataset[j] for j in batch_indices]\n36            yield self.collate_fn(batch)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \n            \n            \n                37    def __len__(self):\n38        if self.drop_last:\n39            return len(self.dataset) // self.batch_size\n40        else:\n41            return np.ceil(\n42                len(self.dataset) / self.batch_size\n43            ).astype(int)\n44\n45    def collate_fn(self, batch):\n46        if isinstance(batch[0], (tuple, list)):\n47            return [np.array(samples) for samples in zip(*batch)]\n48        elif isinstance(batch[0], dict):\n49            return {\n50                key: np.array([d[key] for d in batch])\n51                for key in batch[0]\n52            }\n53        else:\n54            return np.array(batch)"
  },
  {
    "objectID": "blog/2024-06-15-lstm-from-scratch/index.html#training-on-shakespeare-dataset",
    "href": "blog/2024-06-15-lstm-from-scratch/index.html#training-on-shakespeare-dataset",
    "title": "Multi-Layer LSTM from Scratch using NumPy",
    "section": "6 Training on Shakespeare dataset",
    "text": "6 Training on Shakespeare dataset\nNow it’s time to put everything together and train the model on the a dataset. We’ll use the Shakespeare dataset, which consists of a collection of Shakespeare’s plays. The model will be trained to predict the next character in the sequence given a sequence of characters.\nAn important distinction to make between the text generation at training time and inference time is that at training time, we feed the ground truth characters to the model to predict the next character; This is called teacher forcing. At inference time, we feed the model’s prediction at time step \\(t\\) as the input at time step \\(t+1\\) to predict the next character.\n\n6.1 Load\n\nimport numpy as np\nimport matplotlib.pylab as plt\n\nDownload the Shakespeare dataset which is a single text file from the following link: Shakespeare dataset\n\nwith open(\"shakespeare.txt\") as file:\n    data = file.read()\n\n\nprint(data[:200])\n\nFirst Citizen:\nBefore we proceed any further, hear me speak.\n\nAll:\nSpeak, speak.\n\nFirst Citizen:\nYou are all resolved rather to die than to famish?\n\nAll:\nResolved. resolved.\n\nFirst Citizen:\nFirst, you\n\n\n\n\n6.2 Preprocess\nWe need to convert the text data into numerical data. Using scikit-learn’s LabelEncoder we can map each character to a unique integer. The same encoder will be used to inverse transform the predictions back to characters.\n\nfrom sklearn.preprocessing import LabelEncoder\n\nchar_data = np.array(list(data))\nencoder = LabelEncoder()\nindices_data = encoder.fit_transform(char_data)\n\n\nvocabulary = encoder.classes_\nvocabulary\n\narray(['\\n', ' ', '!', '$', '&', \"'\", ',', '-', '.', '3', ':', ';', '?',\n       'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n       'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n       'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n       'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='&lt;U1')\n\n\nAn example of the mapped data:\n\nindices_data[:200]\n\narray([18, 47, 56, 57, 58,  1, 15, 47, 58, 47, 64, 43, 52, 10,  0, 14, 43,\n       44, 53, 56, 43,  1, 61, 43,  1, 54, 56, 53, 41, 43, 43, 42,  1, 39,\n       52, 63,  1, 44, 59, 56, 58, 46, 43, 56,  6,  1, 46, 43, 39, 56,  1,\n       51, 43,  1, 57, 54, 43, 39, 49,  8,  0,  0, 13, 50, 50, 10,  0, 31,\n       54, 43, 39, 49,  6,  1, 57, 54, 43, 39, 49,  8,  0,  0, 18, 47, 56,\n       57, 58,  1, 15, 47, 58, 47, 64, 43, 52, 10,  0, 37, 53, 59,  1, 39,\n       56, 43,  1, 39, 50, 50,  1, 56, 43, 57, 53, 50, 60, 43, 42,  1, 56,\n       39, 58, 46, 43, 56,  1, 58, 53,  1, 42, 47, 43,  1, 58, 46, 39, 52,\n        1, 58, 53,  1, 44, 39, 51, 47, 57, 46, 12,  0,  0, 13, 50, 50, 10,\n        0, 30, 43, 57, 53, 50, 60, 43, 42,  8,  1, 56, 43, 57, 53, 50, 60,\n       43, 42,  8,  0,  0, 18, 47, 56, 57, 58,  1, 15, 47, 58, 47, 64, 43,\n       52, 10,  0, 18, 47, 56, 57, 58,  6,  1, 63, 53, 59])\n\n\n\n\n6.3 Initialize\nNow let’s define the dataloader, the model and the optimizer. I used the following hyperparameters below, but feel free to experiment with different values.\n\nSEQUENCE_LENGTH = 128\nBATCH_SIZE = 32\nVOCAB_SIZE = len(vocabulary)\nTRAIN_SPLIT = 0.8\nLEARNING_RATE = 0.001\nSHUFFLE_TRAIN = True\n\nEMBED_SIZE = 256\nHIDDEN_SIZE = 512\nNUM_LAYERS = 2\nNUM_EPOCHS = 5\n\nDefine the train and test data loaders\n\nfrom data import NextCharDataset, DataLoader\n\ntrainset_size = int(len(indices_data) * TRAIN_SPLIT)\ntrain_data = indices_data[:trainset_size]\ntest_data = indices_data[trainset_size:]\n\ntrainset = NextCharDataset(train_data, SEQUENCE_LENGTH)\ntestset = NextCharDataset(test_data, SEQUENCE_LENGTH)\n\ntrainloader = DataLoader(trainset, batch_size=BATCH_SIZE, shuffle=SHUFFLE_TRAIN)\ntestloader = DataLoader(testset, batch_size=BATCH_SIZE, shuffle=False)\n\nDefine the model and optimizer\n\nfrom lstm import LSTMClassifier\nfrom optim import AdamW\n\nmodel = LSTMClassifier(EMBED_SIZE, HIDDEN_SIZE, VOCAB_SIZE, NUM_LAYERS)\noptimizer = AdamW(params=model.layers, grads=model.grad, lr=LEARNING_RATE)\n\n\n\n6.4 Training loop\n\nfrom tqdm.auto import tqdm\nfrom collections import defaultdict\nfrom op import cross_entropy\n\nstate = None\ntrain_losses = defaultdict(list)\ntest_losses = defaultdict(list)\n\nfor epoch in tqdm(range(NUM_EPOCHS), desc=\"Epoch\"):\n    # training loop\n    for inputs, targets in (pbar := tqdm(trainloader, leave=False)):\n        if SHUFFLE_TRAIN:\n            state = None\n        probabilities, state, activations = model.forward(inputs, state)\n\n        # cross entropy loss\n        loss = cross_entropy(probabilities, targets)\n        # accuracy\n        accuracy = np.mean(np.argmax(probabilities, axis=-1) == targets)\n\n        # loss gradient w.r.t logits (before softmax)\n        gradient = np.copy(probabilities)\n        # Subtract 1 from the probabilities of the true classes\n        # Since the gradient is p_i - y_i\n        gradient[np.arange(targets.shape[0])[:, None], np.arange(targets.shape[1]), targets] -= 1\n        # Subtract 1 from the probabilities of the true classes\n        gradient /= gradient.shape[0]\n\n        # backpropagate and update\n        optimizer.zero_grad()\n        model.backward(gradient, activations)\n        optimizer.step()\n\n        # log\n        pbar.set_postfix({\"loss\": f\"{loss:.5f}\", \"accuracy\": f\"{accuracy*100:.2f}\"})\n        train_losses[epoch].append(loss)\n\n    # testing loop\n    loss_sum = 0\n    accuracy_sum = 0\n    for iter, (inputs, targets) in (pbar := tqdm(enumerate(testloader), leave=False)):\n        probabilities, state, _ = model.forward(\n            inputs, state=None, teacher_forcing=False\n        )\n        loss = cross_entropy(probabilities, targets)\n        accuracy = np.mean(np.argmax(probabilities, axis=-1) == targets)\n\n        loss_sum += loss\n        accuracy_sum += accuracy\n        pbar.set_postfix(\n            {\n                \"loss\": f\"{loss_sum / (iter + 1):.5f}\",\n                \"accuracy\": f\"{accuracy_sum / (iter + 1)*100:.2f}\",\n            }\n        )\n        test_losses[epoch].append(loss)\n\nFor checkpointing, we can save the model to disk:\n\nckpt = model.state_dict\nnp.save(\"checkpoint.npy\", ckpt)\n\nTo reload from the checkpoint, use the from_state_dict method:\n\nstate_dict = np.load(\"checkpoint.npy\", allow_pickle=True).item()\nmodel = LSTMClassifier.from_state_dict(state_dict)\n\nstate_dict.keys()\n\ndict_keys(['config', 'weights', 'grad'])\n\n\n\n\n6.5 Generating text\nAt inference time, we feed the model a prefix text and let it generate the next characters. We can control the number of characters to generate by setting the generate_length parameter in forward. I used greedy decoding to generate the text, but there are other methods like beam search and Top-K sampling.\n\ndef generate(model, prefix: str, length: int):\n    inputs = np.array(list(prefix))\n    inputs = encoder.transform(inputs)\n    inputs = inputs[np.newaxis]\n    state = None\n\n    probabilities, state, _ = model.forward(\n        inputs, state, teacher_forcing=False, generation_length=length\n    )\n    tokens = np.argmax(probabilities[0, len(prefix) - 1 :], axis=-1)\n\n    output = prefix + \"\".join(encoder.inverse_transform(tokens))\n    return output\n\n\nprint(generate(model, prefix=\"I will\", length=400))\n\nI will rest blood that bear blood at all,\nAnd stay the king to the consulships?\n\nMENENIUS:\nNay, then he will stay the king to the cause of my son's exile is banished.\n\nROMEO:\nAnd stay the common people: there is no need, that I may call thee back.\n\nNORTHUMBERLAND:\nHere comes the county strict ready to give me leave to see him as he fall be thine, my lord.\n\nKING RICHARD II:\nNorfolk, throw down the coronat"
  },
  {
    "objectID": "blog/2024-08-11-gbt-custom-loss/index.html",
    "href": "blog/2024-08-11-gbt-custom-loss/index.html",
    "title": "Custom Loss Functions for LightGBM and CatBoost",
    "section": "",
    "text": "As a data scientist, I’ve often found myself pushing the boundaries of popular gradient boosting frameworks. Recently I’ve been exploring the implementation of custom loss functions in LightGBM and CatBoost, two powerful tools in learning from tabular data. These frameworks offer a wide range of built-in loss functions, but sometimes you need to optimize for a specific metric or tackle a unique problem that requires a custom loss.\nIn this blog post, I’ll walk through the process of creating custom loss functions, using Mean Squared Error (MSE) and Mean Squared Logarithmic Error (MSLE) as practical examples. We’ll start by deriving the gradients and Hessians for these functions, to provide the mathematical foundation for our implementations. Then we’ll move on to the code, showing how to integrate these custom losses into LightGBM and CatBoost. Each of these frameworks has its own API for custom losses, so we’ll cover the specifics for each one separately."
  },
  {
    "objectID": "blog/2024-08-11-gbt-custom-loss/index.html#introduction",
    "href": "blog/2024-08-11-gbt-custom-loss/index.html#introduction",
    "title": "Custom Loss Functions for LightGBM and CatBoost",
    "section": "",
    "text": "As a data scientist, I’ve often found myself pushing the boundaries of popular gradient boosting frameworks. Recently I’ve been exploring the implementation of custom loss functions in LightGBM and CatBoost, two powerful tools in learning from tabular data. These frameworks offer a wide range of built-in loss functions, but sometimes you need to optimize for a specific metric or tackle a unique problem that requires a custom loss.\nIn this blog post, I’ll walk through the process of creating custom loss functions, using Mean Squared Error (MSE) and Mean Squared Logarithmic Error (MSLE) as practical examples. We’ll start by deriving the gradients and Hessians for these functions, to provide the mathematical foundation for our implementations. Then we’ll move on to the code, showing how to integrate these custom losses into LightGBM and CatBoost. Each of these frameworks has its own API for custom losses, so we’ll cover the specifics for each one separately."
  },
  {
    "objectID": "blog/2024-08-11-gbt-custom-loss/index.html#lightgbm",
    "href": "blog/2024-08-11-gbt-custom-loss/index.html#lightgbm",
    "title": "Custom Loss Functions for LightGBM and CatBoost",
    "section": "2 LightGBM",
    "text": "2 LightGBM\n\n2.1 Interface\nThe loss function and the evaluation metric must have the following structure:\n\n\n\n        \n            \n            \n        \n            \n                \n                    #\n                \n                Objective Function\nCalculate the gradient and hessian of a custom loss function for LightGBM.\nParameters:\n\ntarget (np.ndarray) : The true target values\nprediction (np.ndarray) : The predicted values from the model\nweight (np.ndarray), optional : Sample weights. If None, uniform weights are assumed.\n\nReturns:\n\ngrad (np.ndarray) : First order gradient of the loss with respect to the predictions.\nhess (np.ndarray) : Second order gradient (Hessian) of the loss with respect to the predictions.\n\n\n            \n            \n                1def lgbm_objective_function(\n2    target: np.ndarray,\n3    prediction: np.ndarray,\n4    weight: np.ndarray = None,\n5):\n6    ...\n7\n8    return grad, hess\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Evaluation Metric\nCalculate a custom evaluation metric for LightGBM.\nParameters:\nSame as loss_function.\nReturns:\nA tuple containing three elements:\n\neval_name (str): The name of the metric.\neval_result (float): The value of the metric.\nis_higher_better (bool): Whether a higher value of the metric is better.\n\n\n            \n            \n                 9def lgbm_evaluation_metric(\n10    target: np.ndarray,\n11    prediction: np.ndarray,\n12    weight: np.ndarray = None,\n13):\n14    ...\n15\n16    return eval_name, eval_result, is_higher_better\n\n            \n        \n    \n        \n    \n\n\n\n\n2.2 Mean Squared Error\nMean Squared Error (MSE) is a commonly used loss function for regression and forecasting problems. It is defined as the average of the squared differences between the predicted and actual values: \\[\n\\text{MSE}(y, p) \\;=\\; {\\frac{1}{|\\mathcal{D}|} \\sum_{i=1}^{|\\mathcal{D}|} (y_i - p_i)^2}\n\\tag{1}\\]\nwhere \\(y_i\\) and \\(p_i\\) are the target and predicted values for the \\(i\\)-th sample respectively, and \\(|\\mathcal{D}|\\) is the number of samples in the dataset.\nTo implement MSE as a loss function, we need to derive the gradient and hessian of the loss value with respect to the predicted values.\nThe gradient for sample \\(i\\), ignoring the constant factor of \\(\\frac{1}{|\\mathcal{D}|}\\), is: \\[\n\\frac{\\partial}{\\partial p_i} \\text{MSE}(y, p) \\;=\\; \\frac{\\partial}{\\partial p_i} (y_i - p_i)^2 \\;=\\; -2(y_i - p_i) \\;=\\; 2 (p_i - y_i) \\;\\propto\\; p_i - y_i\n\\tag{2}\\]\nThe reason we can ignore the constant factors is that it will not affect the optimum solution, and its effect will be absorbed by the learning rate.\nThe hessian for sample \\(i\\) is: \\[\n\\frac{\\partial^2}{\\partial p_i^2} \\text{MSE}(y, p) \\;\\propto\\; \\frac{\\partial}{\\partial p_i} p_i - y_i \\;=\\; 1\n\\tag{3}\\]\n\n\n\n        \n            \n            \n        \n            \n                \n                    #\n                \n                MSE Objective Function\n\n            \n            \n                 1import numpy as np\n 2\n 3\n 4def lgbm_mse_objective_function(\n 5    target: np.ndarray,\n 6    prediction: np.ndarray,\n 7    weight: np.ndarray = None,\n 8):\n 9    gradient = prediction - target\n10    hessian = np.ones_like(gradient)\n11    return gradient, hessian\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                MSE Metric\n\n            \n            \n                12def lgbm_mse_metric(\n13    target: np.ndarray,\n14    prediction: np.ndarray,\n15    weight: np.ndarray = None,\n16):\n17    squared_error = (prediction - target) ** 2\n18    mse = np.average(squared_error, weights=weight)\n19    return \"MSE\", mse, False\n\n            \n        \n    \n        \n    \n\n\n\n\n2.3 Mean Squared Logarithmic Error\nMean Squared Logarithmic Error (MSLE) is defined as the average of the squared differences between the logarithm of the predicted and actual values. It’s an scale-invariant metric that is commonly used in regression problems where the target values have a wide range of values. I think it’s a good metric for modeling ratios or percentages.\n\\[\n\\text{MSLE}(y, p) \\;=\\; \\frac{1}{|\\mathcal{D}|} \\sum_{i=1}^{|\\mathcal{D}|} (\\log_e (1 + y_i) - \\log_e (1 + p_i) )^2\n\\tag{4}\\]\nwhere \\(y_i\\) and \\(p_i\\) are the target and predicted values for the \\(i\\)-th sample respectively, and \\(|\\mathcal{D}|\\) is the number of samples in the dataset. The +1 in the logarithm means the target values must be greater than -1, otherwise the logarithm will be undefined. If your target values are in a different range, you can either add a constant to the target values or use a different constant in the logarithm.\nThe gradient for sample \\(i\\) is:\n\\[\n\\begin{aligned}\n\\frac{\\partial}{\\partial p_i} \\text{MSLE}(y, p)\n&= \\frac{\\partial}{\\partial p_i} \\Big(\\log_e (1 + y_i) - \\log_e (1 + p_i) \\Big)^2 \\\\[3ex]\n&= \\frac{-2}{1 + p_i} \\Big(\\log_e (1 + y_i) - \\log_e (1 + p_i)\\Big) \\\\[3ex]\n&\\propto \\frac{\\log_e (1 + p_i) - \\log_e (1 + y_i)}{1 + p_i} \\end{aligned}\n\\tag{5}\\]\nThe hessian is calculated by taking another derivative of the gradient:\n\\[\n\\begin{aligned}\n    \\frac{\\partial^2}{\\partial p_i^2} \\text{MSLE}(y, p)\n     & = \\frac{\\partial}{\\partial p_i} \\frac{\\log_e (1 + p_i) - \\log_e (1 + y_i)}{1 + p_i}                                                                                                              \\\\[3ex]\n     & = \\frac{(1 + p_i)\\frac{\\partial \\Big(\\log_e (1 + p_i) - \\log_e (1 + y_i)\\Big)}{\\partial p_i} - \\Big(\\log_e (1 + p_i) - \\log_e (1 + y_i)\\Big) \\frac{\\partial (1 + p_i)}{\\partial p_i}}{(1 + p_i)^2} \\\\[3ex]\n     & = \\frac{1 - \\log_e (1 + p_i) + \\log_e (1 + y_i)}{(1 + p_i)^2}                                                                                                                    \\\\[3ex]\n\\end{aligned}\n\\tag{6}\\]\n\n\n\n        \n            \n            \n        \n            \n                \n                    #\n                \n                MSLE Objective Function\n\n            \n            \n                1import numpy as np\n2\n3\n4def lgbm_msle_objective(\n5    target: np.ndarray,\n6    prediction: np.ndarray,\n7    weight: np.ndarray = None,\n8):\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Ensure predictions are at least -1 + 1e-6\n\n            \n            \n                9    prediction = np.maximum(prediction, -1 + 1e-6)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Gradient\n\n            \n            \n                10    gradient = (np.log1p(prediction) - np.log1p(target)) / (\n11        prediction + 1\n12    )\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Hessian\n\n            \n            \n                13    hessian = (-np.log1p(prediction) + np.log1p(target) + 1) / (\n14        (prediction + 1) ** 2\n15    )\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Apply sample weights\n\n            \n            \n                16    if weight is not None:\n17        gradient *= weight\n18        hessian *= weight\n19\n20    return gradient, hessian\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                MSLE Metric\n\n            \n            \n                21def lgbm_msle_metric(\n22    target: np.ndarray,\n23    prediction: np.ndarray,\n24    weight: np.ndarray = None,\n25):\n26    preds = np.maximum(prediction, -1 + 1e-6)\n27    squared_log_error = (np.log1p(preds) - np.log1p(target)) ** 2\n28    msle = np.average(squared_log_error, weights=weight)\n29    return \"MSLE\", msle, False\n\n            \n        \n    \n        \n    \n\n\n\n\n2.4 Usage\nNow we can use the loss functions in LightGBM by setting the objective parameter in the model, and the evaluation metric by setting the eval_metric parameter in the fit method.\nimport lightgbm as lgb\n\nregressor = lgb.LGBMRegressor(objective=lgbm_msle_objective)\nregressor.fit(X_train, y_train, eval_set=[(X_val, y_val)], eval_metric=lgbm_msle_metric)"
  },
  {
    "objectID": "blog/2024-08-11-gbt-custom-loss/index.html#catboost",
    "href": "blog/2024-08-11-gbt-custom-loss/index.html#catboost",
    "title": "Custom Loss Functions for LightGBM and CatBoost",
    "section": "3 CatBoost",
    "text": "3 CatBoost\n\n3.1 Interface\nThe CatBoost interface has a few differences with LightGBM:\n\nThe objective function and the evaluation metric are implemented as as class rather than a function, and must implement a few specific methods.\n\nCatBoost expects the negative gradient and hessian to be returned by the loss function.\n\nIt’s not necessary to use NumPy arrays for doing vectorized operations. Using for loops will suffice, since under the hood CatBoost will convert our function into machine code using Numba.\n\n\nThe overall interface is as follows:\n\n\n\n        \n            \n            \n        \n            \n                \n                    #\n                \n                Objective Function\nCustom loss function for CatBoost.\n\n            \n            \n                1class CatBoostObjectiveFunction:\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Calculate the derivatives (gradient and hessian) of the loss with respect to the predictions.\nParameters:\n\napproxes (list) : The predicted values from the model\ntargets (list) : The true target values\nweights (list), optional : Sample weights. If None, uniform weights are assumed\n\nReturns:\n\nList[Tuple[float, float]] : List of tuples, each containing the negative gradient and hessian for a sample\n\n\n            \n            \n                 2    def calc_ders_range(\n 3        self, approxes: list, targets: list, weights: list = None\n 4    ):\n 5        result = []\n 6        for index in range(len(targets)):\n 7            grad_i = ...\n 8            hess_i = ...\n 9\n10            result.append((-grad_i, -hess_i))\n11        return result\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Evaluation Metric\nCustom evaluation metric for CatBoost.\n\n            \n            \n                12class CatBoostEvalMetric:\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Parameters:\n\napproxes (List[List]) : List containing the predicted values from the model\ntarget (List) : The true target values\nweight (List), optional : Sample weights. If None, uniform weights are assumed.\n\nReturns:\nA tuple containing two elements:\n\nfloat : The accumulated weighted error\nfloat : The total weight\n\n\n            \n            \n                13    def evaluate(\n14        self, approxes: list[list], target: list, weight: list = None\n15    ) -&gt; tuple[float, float]:\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                I'm not sure why approxes is a list of lists in the first place, but\nwe'll just have to roll with it\n\n            \n            \n                16        assert len(approxes) == 1\n17        approx = approxes[0]\n18        assert len(target) == len(approx)\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Calculate the weighted error and total weight\n\n            \n            \n                19        error_sum = 0.0\n20        weight_sum = 0.0\n21\n22        for i in range(len(approx)):\n23            error_i = ...\n24            weight_i = 1.0 if weight is None else weight[i]\n25            weight_sum += weight_i\n26            error_sum += weight_i * error_i\n27\n28        return error_sum, weight_sum\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Calculate the final metric value from the accumulated error and total weight\nParameters:\n\nerror (float) : The accumulated weighted error\nweight (float) : The total weight\n\nReturns:\n\nfloat : The final metric value\n\n\n            \n            \n                29    def get_final_error(self, error: float, weight: float) -&gt; float:\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Indicate whether a higher metric value is better.\nReturns:\n\nbool : False, as lower MSLE values are better\n\n\n            \n            \n                30    def is_max_optimal(self) -&gt; bool:\n\n            \n        \n    \n        \n    \n\n\n\n\n3.2 Mean Squared Error\nWe previously derived the gradient (Equation 2) and hessian (Equation 3) of the MSE loss function for LightGBM. We can use the same equations for CatBoost, but we need to implement them as a class.\n\n\n\n        \n            \n            \n        \n            \n                \n                    #\n                \n                MSE Objective Function\nMean Squared Error objective function for CatBoost.\n\n            \n            \n                1class MSEObjective:\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \n            \n            \n                 2    def calc_ders_range(\n 3        self, approx: list, target: list, weights: list = None\n 4    ):\n 5        result = []\n 6        for i in range(len(target)):\n 7            grad_i = approx[i] - target[i]\n 8            hess_i = 1.0\n 9\n10            if weights is not None:\n11                grad_i *= weights[i]\n12                hess_i *= weights[i]\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Add the negation before appending to the result\n\n            \n            \n                13            result.append((-grad_i, -hess_i))\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \n            \n            \n                14        return result\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                MSE Evaluation Metric\nMean Squared Error metric for CatBoost.\n\n            \n            \n                15class MSEMetric:\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \n            \n            \n                16    def evaluate(\n17        self, approxes: list[list], target: list, weight: list = None\n18    ) -&gt; tuple[float, float]:\n19        assert len(approxes) == 1\n20        approx = approxes[0]\n21        assert len(target) == len(approx)\n22\n23        error_sum = 0.0\n24        weight_sum = 0.0\n25\n26        for i in range(len(approx)):\n27            error_i = (approx[i] - target[i]) ** 2\n28            weight_i = 1.0 if weight is None else weight[i]\n29            weight_sum += weight_i\n30            error_sum += weight_i * error_i\n31\n32        return error_sum, weight_sum\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Calculate the final metric value from the accumulated error and total weight\n\n            \n            \n                33    def get_final_error(self, error: float, weight: float) -&gt; float:\n34        return error / weight\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Indicate whether a higher metric value is better.\n\n            \n            \n                35    def is_max_optimal(self) -&gt; bool:\n36        return False\n\n            \n        \n    \n        \n    \n\n\n\n\n3.3 Mean Squared Logarithmic Error\nBased on the derivations from the LightGBM section (Equation 5 and Equation 6), we can implement the MSLE objective function for CatBoost:\n\n\n\n        \n            \n            \n        \n            \n                \n                    #\n                \n                MSLE Objective Function\nMean Squared Logarithmic Error objective function for CatBoost.\n\n            \n            \n                1import numpy as np\n2\n3\n4class MSLEObjective:\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \n            \n            \n                 5    def calc_ders_range(\n 6        self, approx: list, target: list, weights: list = None\n 7    ):\n 8        result = []\n 9        for i in range(len(target)):\n10            approx_i = max(approx[i], -1 + 1e-6)\n11            grad_i = (np.log1p(approx_i) - np.log1p(target[i])) / (\n12                approx_i + 1\n13            )\n14            hess_i = (\n15                -np.log1p(approx_i) + np.log1p(target[i]) + 1\n16            ) / ((approx_i + 1) ** 2)\n17\n18            if weights is not None:\n19                grad_i *= weights[i]\n20                hess_i *= weights[i]\n21\n22            result.append((-grad_i, -hess_i))\n23        return result\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                MSLE Evaluation Metric\nMean Squared Logarithmic Error metric for CatBoost.\n\n            \n            \n                24class MSLEMetric:\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                \n            \n            \n                25    def evaluate(\n26        self, approxes: list[list], target: list, weight: list = None\n27    ) -&gt; tuple[float, float]:\n28        assert len(approxes) == 1\n29        approx = approxes[0]\n30        assert len(target) == len(approx)\n31\n32        error_sum = 0.0\n33        weight_sum = 0.0\n34\n35        for i in range(len(approx)):\n36            approx_i = max(approx[i], -1 + 1e-6)\n37            error_i = (np.log1p(approx_i) - np.log1p(target[i])) ** 2\n38            weight_i = 1.0 if weight is None else weight[i]\n39\n40            weight_sum += weight_i\n41            error_sum += weight_i * error_i\n42\n43        return error_sum, weight_sum\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Calculate the final metric value from the accumulated error and total weight\n\n            \n            \n                44    def get_final_error(self, error: float, weight: float) -&gt; float:\n45        return error / weight\n\n            \n        \n    \n\n        \n            \n                \n                    #\n                \n                Indicate whether a higher metric value is better.\n\n            \n            \n                46    def is_max_optimal(self) -&gt; bool:\n47        return False\n\n            \n        \n    \n        \n    \n\n\n\n\n3.4 Usage\nTo use the custom loss functions in CatBoost, we need to pass it as a parameter during model initialization.\nimport catboost as cb\n\nregressor = cb.CatBoostRegressor(loss_function=MSLEObjective(), eval_metric=MSLEMetric())\nNote that since the functions are implemented as classes, we need to instantiate them before passing them to the model."
  },
  {
    "objectID": "publication/2023-07-01-tractable-reinforcement-learning/index.html",
    "href": "publication/2023-07-01-tractable-reinforcement-learning/index.html",
    "title": "Tractable large-scale deep reinforcement learning",
    "section": "",
    "text": "Reinforcement learning (RL) has emerged as one of the most promising and powerful techniques in deep learning. The training of intelligent agents requires a myriad of training examples which imposes a substantial computational cost. Consequently, RL is seldom applied to real-world problems and historically has been limited to computer vision tasks, similar to supervised learning. This work proposes an RL framework for complex, partially observable, large-scale environments. We introduce novel techniques for tractable training on commodity GPUs, and significantly reduce computational costs. Furthermore, we present a self-supervised loss that improves the learning stability in applications with a long-time horizon, shortening the training time. We demonstrate the effectiveness of the proposed solution on the application of road extraction from high-resolution satellite images. We present experiments on satellite images of fifteen cities that demonstrate comparable performance to state-of-the-art methods. To the best of our knowledge, this is the first time RL has been applied for extracting road networks. The code is publicly available at https://github.com/nsarang/road-extraction-rl."
  },
  {
    "objectID": "publication/2023-07-01-tractable-reinforcement-learning/index.html#abstract",
    "href": "publication/2023-07-01-tractable-reinforcement-learning/index.html#abstract",
    "title": "Tractable large-scale deep reinforcement learning",
    "section": "",
    "text": "Reinforcement learning (RL) has emerged as one of the most promising and powerful techniques in deep learning. The training of intelligent agents requires a myriad of training examples which imposes a substantial computational cost. Consequently, RL is seldom applied to real-world problems and historically has been limited to computer vision tasks, similar to supervised learning. This work proposes an RL framework for complex, partially observable, large-scale environments. We introduce novel techniques for tractable training on commodity GPUs, and significantly reduce computational costs. Furthermore, we present a self-supervised loss that improves the learning stability in applications with a long-time horizon, shortening the training time. We demonstrate the effectiveness of the proposed solution on the application of road extraction from high-resolution satellite images. We present experiments on satellite images of fifteen cities that demonstrate comparable performance to state-of-the-art methods. To the best of our knowledge, this is the first time RL has been applied for extracting road networks. The code is publicly available at https://github.com/nsarang/road-extraction-rl."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nima Sarang",
    "section": "",
    "text": "Welcome to my personal website! This is where I share what I’m up to - my latest projects, random musings, and adventures.\nI’m always eager to learn new things and connect with interesting people. So if you’re up for a collaboration or just want to chat, don’t hesitate to drop me a line.\nLearn more about me →"
  },
  {
    "objectID": "project/2019-06-12-dc-gan/index.html",
    "href": "project/2019-06-12-dc-gan/index.html",
    "title": "DCGAN on MNIST",
    "section": "",
    "text": "A Keras implementation of a custom Deep Convolutional Generative Adversarial Networks (DCGAN) on MNIST dataset. The code is based on the Francois Chollet’s Deep Learning with Python, page 308.\nDCGAN is an extension of the GAN architecture, where the generator and discriminator are deep convolutional networks. The discriminator that takes an image as input and outputs a single scalar value representing the probability that the input image is real (as opposed to fake). The generator takes a random vector as input and decodes it into a synthetic image, and is trained to generate images that the discriminator identifies as real.\nThe code is available on my GitHub.\n\nWhat worked\n\nUsing dropout in the discriminator\n\nAdding noise to the labels\n\nUsing strided convolutions\n\nNormalizing the data to \\([-1, 1]\\)\nRMSprop optimizer\n\n\n\nWhat didn’t work\n\nUsing high learning rates (&gt;1e-3)\nI initially normalized the data between 0 and 1, but since I was using “tanh” as the last layer of the generator’s output, it made the convergence a lot harder\nConstructing separate batches for real and fake images\nTraining the discriminator with more steps than the generator\nUsing SGD optimizer\n\n\n\nResults\nThis is the first 5000 iterations of the training history. The random vectors are fixed at the beginning of the training. As the training progresses, the generator learns to generate more realistic images."
  },
  {
    "objectID": "project/2017-09-17-d3-force-graph-bio-networks/index.html",
    "href": "project/2017-09-17-d3-force-graph-bio-networks/index.html",
    "title": "D3 Force Layout - Biological Networks",
    "section": "",
    "text": "While working as a research assistant at the Computational Biology Research Center at the Amirkabir University of Technology, I was tasked with implmenting an algorithm for Identification of large disjoint motifs in biological networks. We soon realized we needed a visualization tool to help us better understand the networks we were working with, and the motifs that were identified. This was when I stumbled on the D3.js library, and decided to use its force layout for interactive visualization. The tool below is based on the countless examples and tutrials I found, which I’ve lost track of, and should give a glimpse of the power of D3.js.\nThis example is a visualization of protein-protein interaction network. Its main features are:\nThe source code can be found here. The visualization code is in the output folder."
  },
  {
    "objectID": "project/2017-09-17-d3-force-graph-bio-networks/index.html#network-details",
    "href": "project/2017-09-17-d3-force-graph-bio-networks/index.html#network-details",
    "title": "D3 Force Layout - Biological Networks",
    "section": "Network Details",
    "text": "Network Details\nOrder: \nSize: \nComponents:"
  },
  {
    "objectID": "project/2017-09-17-d3-force-graph-bio-networks/index.html#pattern-details",
    "href": "project/2017-09-17-d3-force-graph-bio-networks/index.html#pattern-details",
    "title": "D3 Force Layout - Biological Networks",
    "section": "Pattern Details",
    "text": "Pattern Details\nOrder: \nSize: \nFrequency:"
  },
  {
    "objectID": "project/2017-09-17-d3-force-graph-bio-networks/index.html#settings",
    "href": "project/2017-09-17-d3-force-graph-bio-networks/index.html#settings",
    "title": "D3 Force Layout - Biological Networks",
    "section": "Settings",
    "text": "Settings\n\nNode Charge  \n\n\nLink Strength  \n\n\nNode Radius  \n\n\nLink Width  \n\n\nVelocity Decay  \n\n\nCenter Gravity  \n\n   Force Static   FishEye Distortion Zoom Function Pin on Drop"
  },
  {
    "objectID": "project/2017-09-17-d3-force-graph-bio-networks/index.html#infoTitle",
    "href": "project/2017-09-17-d3-force-graph-bio-networks/index.html#infoTitle",
    "title": "D3 Force Layout - Biological Networks",
    "section": "About",
    "text": "About"
  }
]