var pF=Object.defineProperty;var hF=(Mi,Zs,Va)=>Zs in Mi?pF(Mi,Zs,{enumerable:!0,configurable:!0,writable:!0,value:Va}):Mi[Zs]=Va;var ie=(Mi,Zs,Va)=>hF(Mi,typeof Zs!="symbol"?Zs+"":Zs,Va);(function(){"use strict";/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */var cP;const Mi=Symbol("Comlink.proxy"),Zs=Symbol("Comlink.endpoint"),Va=Symbol("Comlink.releaseProxy"),Gu=Symbol("Comlink.finalizer"),vl=Symbol("Comlink.thrown"),dm=e=>typeof e=="object"&&e!==null||typeof e=="function",DA={canHandle:e=>dm(e)&&e[Mi],serialize(e){const{port1:t,port2:r}=new MessageChannel;return Hu(e,t),[r,[r]]},deserialize(e){return e.start(),LA(e)}},zA={canHandle:e=>dm(e)&&vl in e,serialize({value:e}){let t;return e instanceof Error?t={isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:t={isError:!1,value:e},[t,[]]},deserialize(e){throw e.isError?Object.assign(new Error(e.value.message),e.value):e.value}},qu=new Map([["proxy",DA],["throw",zA]]);function FA(e,t){for(const r of e)if(t===r||r==="*"||r instanceof RegExp&&r.test(t))return!0;return!1}function Hu(e,t=globalThis,r=["*"]){t.addEventListener("message",function n(i){if(!i||!i.data)return;if(!FA(r,i.origin)){console.warn(`Invalid origin '${i.origin}' for comlink proxy`);return}const{id:s,type:a,path:o}=Object.assign({path:[]},i.data),l=(i.data.argumentList||[]).map(Zi);let u;try{const d=o.slice(0,-1).reduce((p,m)=>p[m],e),c=o.reduce((p,m)=>p[m],e);switch(a){case"GET":u=c;break;case"SET":d[o.slice(-1)[0]]=Zi(i.data.value),u=!0;break;case"APPLY":u=c.apply(d,l);break;case"CONSTRUCT":{const p=new c(...l);u=mm(p)}break;case"ENDPOINT":{const{port1:p,port2:m}=new MessageChannel;Hu(e,m),u=UA(p,[p])}break;case"RELEASE":u=void 0;break;default:return}}catch(d){u={value:d,[vl]:0}}Promise.resolve(u).catch(d=>({value:d,[vl]:0})).then(d=>{const[c,p]=Tl(d);t.postMessage(Object.assign(Object.assign({},c),{id:s}),p),a==="RELEASE"&&(t.removeEventListener("message",n),cm(t),Gu in e&&typeof e[Gu]=="function"&&e[Gu]())}).catch(d=>{const[c,p]=Tl({value:new TypeError("Unserializable return value"),[vl]:0});t.postMessage(Object.assign(Object.assign({},c),{id:s}),p)})}),t.start&&t.start()}function BA(e){return e.constructor.name==="MessagePort"}function cm(e){BA(e)&&e.close()}function LA(e,t){const r=new Map;return e.addEventListener("message",function(i){const{data:s}=i;if(!s||!s.id)return;const a=r.get(s.id);if(a)try{a(s)}finally{r.delete(s.id)}}),Ku(e,r,[],t)}function xl(e){if(e)throw new Error("Proxy has been released and is not useable")}function pm(e){return Ga(e,new Map,{type:"RELEASE"}).then(()=>{cm(e)})}const $l=new WeakMap,Ml="FinalizationRegistry"in globalThis&&new FinalizationRegistry(e=>{const t=($l.get(e)||0)-1;$l.set(e,t),t===0&&pm(e)});function RA(e,t){const r=($l.get(t)||0)+1;$l.set(t,r),Ml&&Ml.register(e,t,e)}function NA(e){Ml&&Ml.unregister(e)}function Ku(e,t,r=[],n=function(){}){let i=!1;const s=new Proxy(n,{get(a,o){if(xl(i),o===Va)return()=>{NA(s),pm(e),t.clear(),i=!0};if(o==="then"){if(r.length===0)return{then:()=>s};const l=Ga(e,t,{type:"GET",path:r.map(u=>u.toString())}).then(Zi);return l.then.bind(l)}return Ku(e,t,[...r,o])},set(a,o,l){xl(i);const[u,d]=Tl(l);return Ga(e,t,{type:"SET",path:[...r,o].map(c=>c.toString()),value:u},d).then(Zi)},apply(a,o,l){xl(i);const u=r[r.length-1];if(u===Zs)return Ga(e,t,{type:"ENDPOINT"}).then(Zi);if(u==="bind")return Ku(e,t,r.slice(0,-1));const[d,c]=hm(l);return Ga(e,t,{type:"APPLY",path:r.map(p=>p.toString()),argumentList:d},c).then(Zi)},construct(a,o){xl(i);const[l,u]=hm(o);return Ga(e,t,{type:"CONSTRUCT",path:r.map(d=>d.toString()),argumentList:l},u).then(Zi)}});return RA(s,e),s}function jA(e){return Array.prototype.concat.apply([],e)}function hm(e){const t=e.map(Tl);return[t.map(r=>r[0]),jA(t.map(r=>r[1]))]}const fm=new WeakMap;function UA(e,t){return fm.set(e,t),e}function mm(e){return Object.assign(e,{[Mi]:!0})}function Tl(e){for(const[t,r]of qu)if(r.canHandle(e)){const[n,i]=r.serialize(e);return[{type:"HANDLER",name:t,value:n},i]}return[{type:"RAW",value:e},fm.get(e)||[]]}function Zi(e){switch(e.type){case"HANDLER":return qu.get(e.name).deserialize(e.value);case"RAW":return e.value}}function Ga(e,t,r,n){return new Promise(i=>{const s=WA();t.set(s,i),e.start&&e.start(),e.postMessage(Object.assign({id:s},r),n)})}function WA(){return new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-")}var VA=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function GA(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var _m={exports:{}};/*!
 * js-logger - http://github.com/jonnyreeves/js-logger
 * Jonny Reeves, http://jonnyreeves.co.uk/
 * js-logger may be freely distributed under the MIT license.
 */(function(e){(function(t){var r={};r.VERSION="1.6.1";var n,i={},s=function(d,c){return function(){return c.apply(d,arguments)}},a=function(){var d=arguments,c=d[0],p,m;for(m=1;m<d.length;m++)for(p in d[m])!(p in c)&&d[m].hasOwnProperty(p)&&(c[p]=d[m][p]);return c},o=function(d,c){return{value:d,name:c}};r.TRACE=o(1,"TRACE"),r.DEBUG=o(2,"DEBUG"),r.INFO=o(3,"INFO"),r.TIME=o(4,"TIME"),r.WARN=o(5,"WARN"),r.ERROR=o(8,"ERROR"),r.OFF=o(99,"OFF");var l=function(d){this.context=d,this.setLevel(d.filterLevel),this.log=this.info};l.prototype={setLevel:function(d){d&&"value"in d&&(this.context.filterLevel=d)},getLevel:function(){return this.context.filterLevel},enabledFor:function(d){var c=this.context.filterLevel;return d.value>=c.value},trace:function(){this.invoke(r.TRACE,arguments)},debug:function(){this.invoke(r.DEBUG,arguments)},info:function(){this.invoke(r.INFO,arguments)},warn:function(){this.invoke(r.WARN,arguments)},error:function(){this.invoke(r.ERROR,arguments)},time:function(d){typeof d=="string"&&d.length>0&&this.invoke(r.TIME,[d,"start"])},timeEnd:function(d){typeof d=="string"&&d.length>0&&this.invoke(r.TIME,[d,"end"])},invoke:function(d,c){n&&this.enabledFor(d)&&n(c,a({level:d},this.context))}};var u=new l({filterLevel:r.OFF});(function(){var d=r;d.enabledFor=s(u,u.enabledFor),d.trace=s(u,u.trace),d.debug=s(u,u.debug),d.time=s(u,u.time),d.timeEnd=s(u,u.timeEnd),d.info=s(u,u.info),d.warn=s(u,u.warn),d.error=s(u,u.error),d.log=d.info})(),r.setHandler=function(d){n=d},r.setLevel=function(d){u.setLevel(d);for(var c in i)i.hasOwnProperty(c)&&i[c].setLevel(d)},r.getLevel=function(){return u.getLevel()},r.get=function(d){return i[d]||(i[d]=new l(a({name:d},u.context)))},r.createDefaultHandler=function(d){d=d||{},d.formatter=d.formatter||function(f,w){w.name&&f.unshift("["+w.name+"]")};var c={},p=function(m,f){Function.prototype.apply.call(m,console,f)};return typeof console>"u"?function(){}:function(m,f){m=Array.prototype.slice.call(m);var w=console.log,C;f.level===r.TIME?(C=(f.name?"["+f.name+"] ":"")+m[0],m[1]==="start"?console.time?console.time(C):c[C]=new Date().getTime():console.timeEnd?console.timeEnd(C):p(w,[C+": "+(new Date().getTime()-c[C])+"ms"])):(f.level===r.WARN&&console.warn?w=console.warn:f.level===r.ERROR&&console.error?w=console.error:f.level===r.INFO&&console.info?w=console.info:f.level===r.DEBUG&&console.debug?w=console.debug:f.level===r.TRACE&&console.trace&&(w=console.trace),d.formatter(m,f),p(w,m))}},r.useDefaults=function(d){r.setLevel(d&&d.defaultLevel||r.DEBUG),r.setHandler(r.createDefaultHandler(d))},r.setDefaults=r.useDefaults,e.exports?e.exports=r:(r._prevLogger=t.Logger,r.noConflict=function(){return t.Logger=r._prevLogger,r},t.Logger=r)})(VA)})(_m);var qA=_m.exports,qa=GA(qA);qa.useDefaults({defaultLevel:qa.DEBUG});/*!
 * ONNX Runtime Web v1.22.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */var Qu=Object.defineProperty,HA=Object.getOwnPropertyDescriptor,KA=Object.getOwnPropertyNames,QA=Object.prototype.hasOwnProperty,XA=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')}),Ke=(e,t)=>()=>(e&&(t=e(e=0)),t),Ha=(e,t)=>{for(var r in t)Qu(e,r,{get:t[r],enumerable:!0})},JA=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of KA(t))!QA.call(e,i)&&i!==r&&Qu(e,i,{get:()=>t[i],enumerable:!(n=HA(t,i))||n.enumerable});return e},Oo=e=>JA(Qu({},"__esModule",{value:!0}),e),Do,Ti,ea,gm,wm,ym=Ke(()=>{Do=new Map,Ti=[],ea=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let n=Do.get(e);if(n===void 0)Do.set(e,{backend:t,priority:r});else{if(n.priority>r)return;if(n.priority===r&&n.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let i=Ti.indexOf(e);i!==-1&&Ti.splice(i,1);for(let s=0;s<Ti.length;s++)if(Do.get(Ti[s]).priority<=r){Ti.splice(s,0,e);return}Ti.push(e)}return}throw new TypeError("not a valid backend")},gm=async e=>{let t=Do.get(e);if(!t)return"backend not found.";if(t.initialized)return t.backend;if(t.aborted)return t.error;{let r=!!t.initPromise;try{return r||(t.initPromise=t.backend.init(e)),await t.initPromise,t.initialized=!0,t.backend}catch(n){return r||(t.error=`${n}`,t.aborted=!0),t.error}finally{delete t.initPromise}}},wm=async e=>{let t=e.executionProviders||[],r=t.map(l=>typeof l=="string"?l:l.name),n=r.length===0?Ti:r,i,s=[],a=new Set;for(let l of n){let u=await gm(l);typeof u=="string"?s.push({name:l,err:u}):(i||(i=u),i===u&&a.add(l))}if(!i)throw new Error(`no available backend found. ERR: ${s.map(l=>`[${l.name}] ${l.err}`).join(", ")}`);for(let{name:l,err:u}of s)r.includes(l)&&console.warn(`removing requested execution provider "${l}" from session options because it is not available: ${u}`);let o=t.filter(l=>a.has(typeof l=="string"?l:l.name));return[i,new Proxy(e,{get:(l,u)=>u==="executionProviders"?o:Reflect.get(l,u)})]}}),YA=Ke(()=>{ym()}),bm,ZA=Ke(()=>{bm="1.22.0"}),Xu,Qn,vm=Ke(()=>{ZA(),Xu="warning",Qn={wasm:{},webgl:{},webgpu:{},versions:{common:bm},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Xu=e}},get logLevel(){return Xu}},Object.defineProperty(Qn,"logLevel",{enumerable:!0})}),Pr,e3=Ke(()=>{vm(),Pr=Qn}),xm,$m,t3=Ke(()=>{xm=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=e.dims[3],r.height=e.dims[2];let n=r.getContext("2d");if(n!=null){let i,s;(t==null?void 0:t.tensorLayout)!==void 0&&t.tensorLayout==="NHWC"?(i=e.dims[2],s=e.dims[3]):(i=e.dims[3],s=e.dims[2]);let a=(t==null?void 0:t.format)!==void 0?t.format:"RGB",o=t==null?void 0:t.norm,l,u;o===void 0||o.mean===void 0?l=[255,255,255,255]:typeof o.mean=="number"?l=[o.mean,o.mean,o.mean,o.mean]:(l=[o.mean[0],o.mean[1],o.mean[2],0],o.mean[3]!==void 0&&(l[3]=o.mean[3])),o===void 0||o.bias===void 0?u=[0,0,0,0]:typeof o.bias=="number"?u=[o.bias,o.bias,o.bias,o.bias]:(u=[o.bias[0],o.bias[1],o.bias[2],0],o.bias[3]!==void 0&&(u[3]=o.bias[3]));let d=s*i,c=0,p=d,m=d*2,f=-1;a==="RGBA"?(c=0,p=d,m=d*2,f=d*3):a==="RGB"?(c=0,p=d,m=d*2):a==="RBG"&&(c=0,m=d,p=d*2);for(let w=0;w<s;w++)for(let C=0;C<i;C++){let y=(e.data[c++]-u[0])*l[0],g=(e.data[p++]-u[1])*l[1],P=(e.data[m++]-u[2])*l[2],b=f===-1?255:(e.data[f++]-u[3])*l[3];n.fillStyle="rgba("+y+","+g+","+P+","+b+")",n.fillRect(C,w,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},$m=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),n;if(r!=null){let i,s,a;(t==null?void 0:t.tensorLayout)!==void 0&&t.tensorLayout==="NHWC"?(i=e.dims[2],s=e.dims[1],a=e.dims[3]):(i=e.dims[3],s=e.dims[2],a=e.dims[1]);let o=t!==void 0&&t.format!==void 0?t.format:"RGB",l=t==null?void 0:t.norm,u,d;l===void 0||l.mean===void 0?u=[255,255,255,255]:typeof l.mean=="number"?u=[l.mean,l.mean,l.mean,l.mean]:(u=[l.mean[0],l.mean[1],l.mean[2],255],l.mean[3]!==void 0&&(u[3]=l.mean[3])),l===void 0||l.bias===void 0?d=[0,0,0,0]:typeof l.bias=="number"?d=[l.bias,l.bias,l.bias,l.bias]:(d=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(d[3]=l.bias[3]));let c=s*i;if(t!==void 0&&(t.format!==void 0&&a===4&&t.format!=="RGBA"||a===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let p=4,m=0,f=1,w=2,C=3,y=0,g=c,P=c*2,b=-1;o==="RGBA"?(y=0,g=c,P=c*2,b=c*3):o==="RGB"?(y=0,g=c,P=c*2):o==="RBG"&&(y=0,P=c,g=c*2),n=r.createImageData(i,s);for(let x=0;x<s*i;m+=p,f+=p,w+=p,C+=p,x++)n.data[m]=(e.data[y++]-d[0])*u[0],n.data[f]=(e.data[g++]-d[1])*u[1],n.data[w]=(e.data[P++]-d[2])*u[2],n.data[C]=b===-1?255:(e.data[b++]-d[3])*u[3]}else throw new Error("Can not access image data");return n}}),El,Mm,Tm,Em,Pm,Cm,r3=Ke(()=>{Yu(),El=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:n}=t,i=t.norm??{mean:255,bias:0},s,a;typeof i.mean=="number"?s=[i.mean,i.mean,i.mean,i.mean]:s=[i.mean[0],i.mean[1],i.mean[2],i.mean[3]??255],typeof i.bias=="number"?a=[i.bias,i.bias,i.bias,i.bias]:a=[i.bias[0],i.bias[1],i.bias[2],i.bias[3]??0];let o=t.format!==void 0?t.format:"RGBA",l=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",u=r*n,d=l==="RGBA"?new Float32Array(u*4):new Float32Array(u*3),c=4,p=0,m=1,f=2,w=3,C=0,y=u,g=u*2,P=-1;o==="RGB"&&(c=3,p=0,m=1,f=2,w=-1),l==="RGBA"?P=u*3:l==="RBG"?(C=0,g=u,y=u*2):l==="BGR"&&(g=0,y=u,C=u*2);for(let b=0;b<u;b++,p+=c,f+=c,m+=c,w+=c)d[C++]=(e[p]+a[0])/s[0],d[y++]=(e[m]+a[1])/s[1],d[g++]=(e[f]+a[2])/s[2],P!==-1&&w!==-1&&(d[P++]=(e[w]+a[3])/s[3]);return l==="RGBA"?new zn("float32",d,[1,4,r,n]):new zn("float32",d,[1,3,r,n])},Mm=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,n=typeof ImageData<"u"&&e instanceof ImageData,i=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,s=typeof e=="string",a,o=t??{},l=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},u=d=>typeof HTMLCanvasElement<"u"&&d instanceof HTMLCanvasElement||d instanceof OffscreenCanvas?d.getContext("2d"):null;if(r){let d=l();d.width=e.width,d.height=e.height;let c=u(d);if(c!=null){let p=e.height,m=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(p=t.resizedHeight,m=t.resizedWidth),t!==void 0){if(o=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");o.tensorFormat="RGBA",o.height=p,o.width=m}else o.tensorFormat="RGBA",o.height=p,o.width=m;c.drawImage(e,0,0),a=c.getImageData(0,0,m,p).data}else throw new Error("Can not access image data")}else if(n){let d,c;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(d=t.resizedHeight,c=t.resizedWidth):(d=e.height,c=e.width),t!==void 0&&(o=t),o.format="RGBA",o.height=d,o.width=c,t!==void 0){let p=l();p.width=c,p.height=d;let m=u(p);if(m!=null)m.putImageData(e,0,0),a=m.getImageData(0,0,c,d).data;else throw new Error("Can not access image data")}else a=e.data}else if(i){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let d=l();d.width=e.width,d.height=e.height;let c=u(d);if(c!=null){let p=e.height,m=e.width;return c.drawImage(e,0,0,m,p),a=c.getImageData(0,0,m,p).data,o.height=p,o.width=m,El(a,o)}else throw new Error("Can not access image data")}else{if(s)return new Promise((d,c)=>{let p=l(),m=u(p);if(!e||!m)return c();let f=new Image;f.crossOrigin="Anonymous",f.src=e,f.onload=()=>{p.width=f.width,p.height=f.height,m.drawImage(f,0,0,p.width,p.height);let w=m.getImageData(0,0,p.width,p.height);o.height=p.height,o.width=p.width,d(El(w.data,o))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(a!==void 0)return El(a,o);throw new Error("Input data provided is not supported - aborted tensor creation")},Tm=(e,t)=>{let{width:r,height:n,download:i,dispose:s}=t,a=[1,n,r,4];return new zn({location:"texture",type:"float32",texture:e,dims:a,download:i,dispose:s})},Em=(e,t)=>{let{dataType:r,dims:n,download:i,dispose:s}=t;return new zn({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:n,download:i,dispose:s})},Pm=(e,t)=>{let{dataType:r,dims:n,download:i,dispose:s}=t;return new zn({location:"ml-tensor",type:r??"float32",mlTensor:e,dims:n,download:i,dispose:s})},Cm=(e,t,r)=>new zn({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})}),ta,zo,Ju,Sm,n3=Ke(()=>{ta=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),zo=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),Ju=!1,Sm=()=>{if(!Ju){Ju=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,t=typeof BigUint64Array<"u"&&BigUint64Array.from,r=globalThis.Float16Array,n=typeof r<"u"&&r.from;e&&(ta.set("int64",BigInt64Array),zo.set(BigInt64Array,"int64")),t&&(ta.set("uint64",BigUint64Array),zo.set(BigUint64Array,"uint64")),n?(ta.set("float16",r),zo.set(r,"float16")):ta.set("float16",Uint16Array)}}}),km,Im,s3=Ke(()=>{Yu(),km=e=>{let t=1;for(let r=0;r<e.length;r++){let n=e[r];if(typeof n!="number"||!Number.isSafeInteger(n))throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);t*=n}return t},Im=(e,t)=>{switch(e.location){case"cpu":return new zn(e.type,e.data,t);case"cpu-pinned":return new zn({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new zn({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new zn({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});case"ml-tensor":return new zn({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}}),zn,Yu=Ke(()=>{t3(),r3(),n3(),s3(),zn=class{constructor(e,t,r){Sm();let n,i;if(typeof e=="object"&&"location"in e)switch(this.dataLocation=e.location,n=e.type,i=e.dims,e.location){case"cpu-pinned":{let a=ta.get(n);if(!a)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(e.data instanceof a))throw new TypeError(`buffer should be of type ${a.name}`);this.cpuData=e.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint8"&&n!=="bool"&&n!=="uint4"&&n!=="int4")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break}case"ml-tensor":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint64"&&n!=="int8"&&n!=="uint8"&&n!=="bool"&&n!=="uint4"&&n!=="int4")throw new TypeError(`unsupported type "${n}" to create tensor from MLTensor`);this.mlTensorData=e.mlTensor,this.downloader=e.download,this.disposer=e.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let a,o;if(typeof e=="string")if(n=e,o=r,e==="string"){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");a=t}else{let l=ta.get(e);if(l===void 0)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(t)){if(e==="float16"&&l===Uint16Array||e==="uint4"||e==="int4")throw new TypeError(`Creating a ${e} tensor from number array is not supported. Please use ${l.name} as data.`);e==="uint64"||e==="int64"?a=l.from(t,BigInt):a=l.from(t)}else if(t instanceof l)a=t;else if(t instanceof Uint8ClampedArray)if(e==="uint8")a=Uint8Array.from(t);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else if(e==="float16"&&t instanceof Uint16Array&&l!==Uint16Array)a=new globalThis.Float16Array(t.buffer,t.byteOffset,t.length);else throw new TypeError(`A ${n} tensor's data must be type of ${l}`)}else if(o=t,Array.isArray(e)){if(e.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let l=typeof e[0];if(l==="string")n="string",a=e;else if(l==="boolean")n="bool",a=Uint8Array.from(e);else throw new TypeError(`Invalid element type of data array: ${l}.`)}else if(e instanceof Uint8ClampedArray)n="uint8",a=Uint8Array.from(e);else{let l=zo.get(e.constructor);if(l===void 0)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);n=l,a=e}if(o===void 0)o=[a.length];else if(!Array.isArray(o))throw new TypeError("A tensor's dims must be a number array");i=o,this.cpuData=a,this.dataLocation="cpu"}let s=km(i);if(this.cpuData&&s!==this.cpuData.length&&!((n==="uint4"||n==="int4")&&Math.ceil(s/2)===this.cpuData.length))throw new Error(`Tensor's size(${s}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=i,this.size=s}static async fromImage(e,t){return Mm(e,t)}static fromTexture(e,t){return Tm(e,t)}static fromGpuBuffer(e,t){return Em(e,t)}static fromMLTensor(e,t){return Pm(e,t)}static fromPinnedBuffer(e,t,r){return Cm(e,t,r)}toDataURL(e){return xm(this,e)}toImageData(e){return $m(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let t=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=t,e&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return Im(this,e)}}}),Xn,Am=Ke(()=>{Yu(),Xn=zn}),Fo,Zu,is,Jn,Om=Ke(()=>{vm(),Fo=(e,t)=>{(typeof Qn.trace>"u"?!Qn.wasm.trace:!Qn.trace)||console.timeStamp(`${e}::ORT::${t}`)},Zu=(e,t)=>{var i;let r=((i=new Error().stack)==null?void 0:i.split(/\r\n|\r|\n/g))||[],n=!1;for(let s=0;s<r.length;s++){if(n&&!r[s].includes("TRACE_FUNC")){let a=`FUNC_${e}::${r[s].trim().split(" ")[1]}`;t&&(a+=`::${t}`),Fo("CPU",a);return}r[s].includes("TRACE_FUNC")&&(n=!0)}},is=e=>{(typeof Qn.trace>"u"?!Qn.wasm.trace:!Qn.trace)||Zu("BEGIN",e)},Jn=e=>{(typeof Qn.trace>"u"?!Qn.wasm.trace:!Qn.trace)||Zu("END",e)}}),Dm,i3=Ke(()=>{ym(),Am(),Om(),Dm=class SA{constructor(t){this.handler=t}async run(t,r,n){is();let i={},s={};if(typeof t!="object"||t===null||t instanceof Xn||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Xn)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(let u of r){if(typeof u!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(u)===-1)throw new RangeError(`'fetches' contains invalid output name: ${u}.`);i[u]=null}if(typeof n=="object"&&n!==null)s=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else{let u=!1,d=Object.getOwnPropertyNames(r);for(let c of this.outputNames)if(d.indexOf(c)!==-1){let p=r[c];(p===null||p instanceof Xn)&&(u=!0,a=!1,i[c]=p)}if(u){if(typeof n=="object"&&n!==null)s=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else s=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let u of this.inputNames)if(typeof t[u]>"u")throw new Error(`input '${u}' is missing in 'feeds'.`);if(a)for(let u of this.outputNames)i[u]=null;let o=await this.handler.run(t,i,s),l={};for(let u in o)if(Object.hasOwnProperty.call(o,u)){let d=o[u];d instanceof Xn?l[u]=d:l[u]=new Xn(d.type,d.data,d.dims)}return Jn(),l}async release(){return this.handler.dispose()}static async create(t,r,n,i){is();let s,a={};if(typeof t=="string"){if(s=t,typeof r=="object"&&r!==null)a=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(s=t,typeof r=="object"&&r!==null)a=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let d=t,c=0,p=t.byteLength;if(typeof r=="object"&&r!==null)a=r;else if(typeof r=="number"){if(c=r,!Number.isSafeInteger(c))throw new RangeError("'byteOffset' must be an integer.");if(c<0||c>=d.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${d.byteLength}).`);if(p=t.byteLength-c,typeof n=="number"){if(p=n,!Number.isSafeInteger(p))throw new RangeError("'byteLength' must be an integer.");if(p<=0||c+p>d.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${d.byteLength-c}].`);if(typeof i=="object"&&i!==null)a=i;else if(typeof i<"u")throw new TypeError("'options' must be an object.")}else if(typeof n<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");s=new Uint8Array(d,c,p)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let[o,l]=await wm(a),u=await o.createInferenceSessionHandler(s,l);return Jn(),new SA(u)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}get inputMetadata(){return this.handler.inputMetadata}get outputMetadata(){return this.handler.outputMetadata}}}),ed,a3=Ke(()=>{i3(),ed=Dm}),o3=Ke(()=>{}),l3=Ke(()=>{}),u3=Ke(()=>{}),d3=Ke(()=>{}),zm={};Ha(zm,{InferenceSession:()=>ed,TRACE:()=>Fo,TRACE_FUNC_BEGIN:()=>is,TRACE_FUNC_END:()=>Jn,Tensor:()=>Xn,env:()=>Pr,registerBackend:()=>ea});var as=Ke(()=>{YA(),e3(),a3(),Am(),o3(),l3(),Om(),u3(),d3()}),td=Ke(()=>{}),Fm={};Ha(Fm,{default:()=>Bm});var rd,nd,Bm,c3=Ke(()=>{var e;_v(),ra(),cd(),rd="ort-wasm-proxy-worker",nd=((e=globalThis.self)==null?void 0:e.name)===rd,nd&&(self.onmessage=t=>{let{type:r,in:n}=t.data;try{switch(r){case"init-wasm":fd(n.wasm).then(()=>{Pc(n).then(()=>{postMessage({type:r})},i=>{postMessage({type:r,err:i})})},i=>{postMessage({type:r,err:i})});break;case"init-ep":{let{epName:i,env:s}=n;Cc(s,i).then(()=>{postMessage({type:r})},a=>{postMessage({type:r,err:a})});break}case"copy-from":{let{buffer:i}=n,s=Gl(i);postMessage({type:r,out:s});break}case"create":{let{model:i,options:s}=n;kc(i,s).then(a=>{postMessage({type:r,out:a})},a=>{postMessage({type:r,err:a})});break}case"release":Ic(n),postMessage({type:r});break;case"run":{let{sessionId:i,inputIndices:s,inputs:a,outputIndices:o,options:l}=n;Oc(i,s,a,o,new Array(o.length).fill(null),l).then(u=>{u.some(d=>d[3]!=="cpu")?postMessage({type:r,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:r,out:u},zc([...a,...u]))},u=>{postMessage({type:r,err:u})});break}case"end-profiling":Dc(n),postMessage({type:r});break;default:}}catch(i){postMessage({type:r,err:i})}}),Bm=nd?null:t=>new Worker(t??Fn,{type:"module",name:rd})}),Lm={};Ha(Lm,{default:()=>Rm});var sd,id,Rm,Nm,p3=Ke(()=>{var e,t;id=(sd=self.location.href,async function(r={}){var v;var n,i,s=r,a=new Promise((h,_)=>{n=h,i=_}),o=typeof window=="object",l=typeof WorkerGlobalScope<"u",u=l&&((v=self.name)==null?void 0:v.startsWith("em-pthread"));s.mountExternalData=(h,_)=>{h.startsWith("./")&&(h=h.substring(2)),(s.Fb||(s.Fb=new Map)).set(h,_)},s.unmountExternalData=()=>{delete s.Fb};var d=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,qc:!0}).buffer.constructor;let c=h=>async(..._)=>{var M;try{if(s.Gb)throw Error("Session already started");let k=s.Gb={ec:_[0],errors:[]},D=await h(..._);if(s.Gb!==k)throw Error("Session mismatch");(M=s.Kb)==null||M.flush();let Q=k.errors;if(0<Q.length){let ue=await Promise.all(Q);if(ue=ue.filter(_e=>_e),0<ue.length)throw Error(ue.join(`
`))}return D}finally{s.Gb=null}};s.jsepInit=(h,_)=>{if(h==="webgpu"){[s.Kb,s.Vb,s.Zb,s.Lb,s.Yb,s.kb,s.$b,s.bc,s.Wb,s.Xb,s.ac]=_;let M=s.Kb;s.jsepRegisterBuffer=(k,D,Q,ue)=>M.registerBuffer(k,D,Q,ue),s.jsepGetBuffer=k=>M.getBuffer(k),s.jsepCreateDownloader=(k,D,Q)=>M.createDownloader(k,D,Q),s.jsepOnCreateSession=k=>{M.onCreateSession(k)},s.jsepOnReleaseSession=k=>{M.onReleaseSession(k)},s.jsepOnRunStart=k=>M.onRunStart(k),s.cc=(k,D)=>{M.upload(k,D)}}else if(h==="webnn"){let M=_[0];[s.oc,s.Ob,s.webnnEnsureTensor,s.Pb,s.webnnDownloadTensor]=_.slice(1),s.webnnReleaseTensorId=s.Ob,s.webnnUploadTensor=s.Pb,s.webnnOnRunStart=k=>M.onRunStart(k),s.webnnOnRunEnd=M.onRunEnd.bind(M),s.webnnRegisterMLContext=(k,D)=>{M.registerMLContext(k,D)},s.webnnOnReleaseSession=k=>{M.onReleaseSession(k)},s.webnnCreateMLTensorDownloader=(k,D)=>M.createMLTensorDownloader(k,D),s.webnnRegisterMLTensor=(k,D,Q,ue)=>M.registerMLTensor(k,D,Q,ue),s.webnnCreateMLContext=k=>M.createMLContext(k),s.webnnRegisterMLConstant=(k,D,Q,ue,_e,Te)=>M.registerMLConstant(k,D,Q,ue,_e,s.Fb,Te),s.webnnRegisterGraphInput=M.registerGraphInput.bind(M),s.webnnIsGraphInput=M.isGraphInput.bind(M),s.webnnRegisterGraphOutput=M.registerGraphOutput.bind(M),s.webnnIsGraphOutput=M.isGraphOutput.bind(M),s.webnnCreateTemporaryTensor=M.createTemporaryTensor.bind(M),s.webnnIsGraphInputOutputTypeSupported=M.isGraphInputOutputTypeSupported.bind(M)}};let p=()=>{let h=(_,M,k)=>(...D)=>{let Q=pr,ue=M==null?void 0:M();D=_(...D);let _e=M==null?void 0:M();return ue!==_e&&(_=_e,k(ue),M=k=null),pr!=Q?new Promise((Te,Ne)=>{Qr={resolve:Te,reject:Ne}}):D};(()=>{for(let _ of["_OrtAppendExecutionProvider","_OrtCreateSession","_OrtRun","_OrtRunWithBinding","_OrtBindInput"])s[_]=h(s[_],()=>s[_],M=>s[_]=M)})(),c!==void 0&&(s._OrtRun=c(s._OrtRun),s._OrtRunWithBinding=c(s._OrtRunWithBinding)),p=void 0};s.asyncInit=()=>{p==null||p()};var m,f,w=Object.assign({},s),C=(h,_)=>{throw _},y="";(o||l)&&(l?y=self.location.href:typeof document<"u"&&document.currentScript&&(y=document.currentScript.src),sd&&(y=sd),y=y.startsWith("blob:")?"":y.slice(0,y.replace(/[?#].*/,"").lastIndexOf("/")+1),l&&(f=h=>{var _=new XMLHttpRequest;return _.open("GET",h,!1),_.responseType="arraybuffer",_.send(null),new Uint8Array(_.response)}),m=async h=>{if(L(h))return new Promise((M,k)=>{var D=new XMLHttpRequest;D.open("GET",h,!0),D.responseType="arraybuffer",D.onload=()=>{D.status==200||D.status==0&&D.response?M(D.response):k(D.status)},D.onerror=k,D.send(null)});var _=await fetch(h,{credentials:"same-origin"});if(_.ok)return _.arrayBuffer();throw Error(_.status+" : "+_.url)});var g=console.log.bind(console),P=console.error.bind(console),b=g,x=P;Object.assign(s,w),w=null;var T,E,S,O,B,V,W,N,te,q,K,Y,Z,de=s.wasmBinary,pe=!1,L=h=>h.startsWith("file://");function F(){return T.buffer!=O.buffer&&oe(),O}function U(){return T.buffer!=O.buffer&&oe(),B}function re(){return T.buffer!=O.buffer&&oe(),V}function me(){return T.buffer!=O.buffer&&oe(),W}function J(){return T.buffer!=O.buffer&&oe(),N}function we(){return T.buffer!=O.buffer&&oe(),te}function je(){return T.buffer!=O.buffer&&oe(),q}function Ge(){return T.buffer!=O.buffer&&oe(),Z}if(u){let h=function(_){try{var M=_.data,k=M.Cb;if(k==="load"){let D=[];self.onmessage=Q=>D.push(Q),self.startWorker=()=>{postMessage({Cb:"loaded"});for(let Q of D)h(Q);self.onmessage=h};for(let Q of M.Sb)s[Q]&&!s[Q].proxy||(s[Q]=(...ue)=>{postMessage({Cb:"callHandler",Rb:Q,args:ue})},Q=="print"&&(b=s[Q]),Q=="printErr"&&(x=s[Q]));T=M.lc,oe(),Ae(M.mc)}else if(k==="run"){Rs(M.Bb),Xs(M.Bb,0,0,1,0,0),Pn(),fe(M.Bb),ne||(Qs(),ne=!0);try{Ns(M.hc,M.Ib)}catch(D){if(D!="unwind")throw D}}else M.target!=="setimmediate"&&(k==="checkMailbox"?ne&&ke():k&&(x(`worker: received unknown command ${k}`),x(M)))}catch(D){throw Gi(),D}};var Ae,ne=!1;x=function(..._){_=_.join(" "),console.error(_)},self.alert=function(..._){postMessage({Cb:"alert",text:_.join(" "),jc:un()})},self.onunhandledrejection=_=>{throw _.reason||_},self.onmessage=h}function oe(){var h=T.buffer;s.HEAP8=O=new Int8Array(h),s.HEAP16=V=new Int16Array(h),s.HEAPU8=B=new Uint8Array(h),s.HEAPU16=W=new Uint16Array(h),s.HEAP32=N=new Int32Array(h),s.HEAPU32=te=new Uint32Array(h),s.HEAPF32=q=new Float32Array(h),s.HEAPF64=Z=new Float64Array(h),s.HEAP64=K=new BigInt64Array(h),s.HEAPU64=Y=new BigUint64Array(h)}function H(){u?startWorker(s):wt.Da()}u||(T=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0}),oe());var be,Oe=0,Se=null;function Me(){if(--Oe==0&&Se){var h=Se;Se=null,h()}}function Ie(h){throw x(h="Aborted("+h+")"),pe=!0,h=new WebAssembly.RuntimeError(h+". Build with -sASSERTIONS for more info."),i(h),h}function $e(){return{a:{L:tt,Aa:We,b:Us,$:jn,A:z,pa:se,X:le,Z:xe,qa:Re,na:lt,ga:Et,ma:xt,J:At,Y:ut,V:Kt,oa:er,W:on,va:Hr,E:ns,Q:mn,O:gn,D:qe,v:at,r:mr,P:Ts,z:R,R:X,ja:ae,T:He,aa:Ze,M:ot,F:St,ia:fe,sa:Jt,t:ir,Ca:Wr,w:Dn,o:kr,m:yn,c:Cn,Ba:Ps,n:Ws,j:uo,u:co,p:Vs,f:po,s:ho,l:fo,e:mo,k:_o,h:Gs,g:go,d:wo,da:Ia,ea:yo,fa:Aa,ba:hi,ca:Cs,N:Ri,xa:_l,ua:fi,i:vo,C:xo,G:$o,ta:bo,x:Mo,ra:To,U:Eo,q:Oa,y:Po,K:Co,S:Hs,za:So,ya:_i,ka:ji,la:za,_:Wt,B:Ui,I:wi,ha:Fa,H:Wi,a:T,wa:rt}}}var Le={840156:(h,_,M,k,D)=>{if(s===void 0||!s.Fb)return 1;if((h=Ot(Number(h>>>0))).startsWith("./")&&(h=h.substring(2)),!(h=s.Fb.get(h)))return 2;if(_=Number(_>>>0),M=Number(M>>>0),k=Number(k>>>0),_+M>h.byteLength)return 3;try{let Q=h.subarray(_,_+M);switch(D){case 0:U().set(Q,k>>>0);break;case 1:s.nc?s.nc(k,Q):s.cc(k,Q);break;default:return 4}return 0}catch{return 4}},840980:(h,_,M)=>{s.Pb(h,U().subarray(_>>>0,_+M>>>0))},841044:()=>s.oc(),841086:h=>{s.Ob(h)},841123:()=>{s.Wb()},841154:()=>{s.Xb()},841183:()=>{s.ac()},841208:h=>s.Vb(h),841241:h=>s.Zb(h),841273:(h,_,M)=>{s.Lb(Number(h),Number(_),Number(M),!0)},841336:(h,_,M)=>{s.Lb(Number(h),Number(_),Number(M))},841393:()=>typeof wasmOffsetConverter<"u",841450:h=>{s.kb("Abs",h,void 0)},841501:h=>{s.kb("Neg",h,void 0)},841552:h=>{s.kb("Floor",h,void 0)},841605:h=>{s.kb("Ceil",h,void 0)},841657:h=>{s.kb("Reciprocal",h,void 0)},841715:h=>{s.kb("Sqrt",h,void 0)},841767:h=>{s.kb("Exp",h,void 0)},841818:h=>{s.kb("Erf",h,void 0)},841869:h=>{s.kb("Sigmoid",h,void 0)},841924:(h,_,M)=>{s.kb("HardSigmoid",h,{alpha:_,beta:M})},842003:h=>{s.kb("Log",h,void 0)},842054:h=>{s.kb("Sin",h,void 0)},842105:h=>{s.kb("Cos",h,void 0)},842156:h=>{s.kb("Tan",h,void 0)},842207:h=>{s.kb("Asin",h,void 0)},842259:h=>{s.kb("Acos",h,void 0)},842311:h=>{s.kb("Atan",h,void 0)},842363:h=>{s.kb("Sinh",h,void 0)},842415:h=>{s.kb("Cosh",h,void 0)},842467:h=>{s.kb("Asinh",h,void 0)},842520:h=>{s.kb("Acosh",h,void 0)},842573:h=>{s.kb("Atanh",h,void 0)},842626:h=>{s.kb("Tanh",h,void 0)},842678:h=>{s.kb("Not",h,void 0)},842729:(h,_,M)=>{s.kb("Clip",h,{min:_,max:M})},842798:h=>{s.kb("Clip",h,void 0)},842850:(h,_)=>{s.kb("Elu",h,{alpha:_})},842908:h=>{s.kb("Gelu",h,void 0)},842960:h=>{s.kb("Relu",h,void 0)},843012:(h,_)=>{s.kb("LeakyRelu",h,{alpha:_})},843076:(h,_)=>{s.kb("ThresholdedRelu",h,{alpha:_})},843146:(h,_)=>{s.kb("Cast",h,{to:_})},843204:h=>{s.kb("Add",h,void 0)},843255:h=>{s.kb("Sub",h,void 0)},843306:h=>{s.kb("Mul",h,void 0)},843357:h=>{s.kb("Div",h,void 0)},843408:h=>{s.kb("Pow",h,void 0)},843459:h=>{s.kb("Equal",h,void 0)},843512:h=>{s.kb("Greater",h,void 0)},843567:h=>{s.kb("GreaterOrEqual",h,void 0)},843629:h=>{s.kb("Less",h,void 0)},843681:h=>{s.kb("LessOrEqual",h,void 0)},843740:(h,_,M,k,D)=>{s.kb("ReduceMean",h,{keepDims:!!_,noopWithEmptyAxes:!!M,axes:k?Array.from(J().subarray(Number(k)>>>0,Number(D)>>>0)):[]})},843915:(h,_,M,k,D)=>{s.kb("ReduceMax",h,{keepDims:!!_,noopWithEmptyAxes:!!M,axes:k?Array.from(J().subarray(Number(k)>>>0,Number(D)>>>0)):[]})},844089:(h,_,M,k,D)=>{s.kb("ReduceMin",h,{keepDims:!!_,noopWithEmptyAxes:!!M,axes:k?Array.from(J().subarray(Number(k)>>>0,Number(D)>>>0)):[]})},844263:(h,_,M,k,D)=>{s.kb("ReduceProd",h,{keepDims:!!_,noopWithEmptyAxes:!!M,axes:k?Array.from(J().subarray(Number(k)>>>0,Number(D)>>>0)):[]})},844438:(h,_,M,k,D)=>{s.kb("ReduceSum",h,{keepDims:!!_,noopWithEmptyAxes:!!M,axes:k?Array.from(J().subarray(Number(k)>>>0,Number(D)>>>0)):[]})},844612:(h,_,M,k,D)=>{s.kb("ReduceL1",h,{keepDims:!!_,noopWithEmptyAxes:!!M,axes:k?Array.from(J().subarray(Number(k)>>>0,Number(D)>>>0)):[]})},844785:(h,_,M,k,D)=>{s.kb("ReduceL2",h,{keepDims:!!_,noopWithEmptyAxes:!!M,axes:k?Array.from(J().subarray(Number(k)>>>0,Number(D)>>>0)):[]})},844958:(h,_,M,k,D)=>{s.kb("ReduceLogSum",h,{keepDims:!!_,noopWithEmptyAxes:!!M,axes:k?Array.from(J().subarray(Number(k)>>>0,Number(D)>>>0)):[]})},845135:(h,_,M,k,D)=>{s.kb("ReduceSumSquare",h,{keepDims:!!_,noopWithEmptyAxes:!!M,axes:k?Array.from(J().subarray(Number(k)>>>0,Number(D)>>>0)):[]})},845315:(h,_,M,k,D)=>{s.kb("ReduceLogSumExp",h,{keepDims:!!_,noopWithEmptyAxes:!!M,axes:k?Array.from(J().subarray(Number(k)>>>0,Number(D)>>>0)):[]})},845495:h=>{s.kb("Where",h,void 0)},845548:(h,_,M)=>{s.kb("Transpose",h,{perm:_?Array.from(J().subarray(Number(_)>>>0,Number(M)>>>0)):[]})},845672:(h,_,M,k)=>{s.kb("DepthToSpace",h,{blocksize:_,mode:Ot(M),format:k?"NHWC":"NCHW"})},845805:(h,_,M,k)=>{s.kb("DepthToSpace",h,{blocksize:_,mode:Ot(M),format:k?"NHWC":"NCHW"})},845938:(h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt,Er,Os)=>{s.kb("ConvTranspose",h,{format:Te?"NHWC":"NCHW",autoPad:_,dilations:[M],group:k,kernelShape:[D],pads:[Q,ue],strides:[_e],wIsConst:()=>!!F()[Ne>>>0],outputPadding:nt?Array.from(J().subarray(Number(nt)>>>0,Number(ft)>>>0)):[],outputShape:zt?Array.from(J().subarray(Number(zt)>>>0,Number(Er)>>>0)):[],activation:Ot(Os)})},846371:(h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt,Er)=>{s.kb("ConvTranspose",h,{format:_e?"NHWC":"NCHW",autoPad:_,dilations:Array.from(J().subarray(Number(M)>>>0,2+(Number(M)>>>0)>>>0)),group:k,kernelShape:Array.from(J().subarray(Number(D)>>>0,2+(Number(D)>>>0)>>>0)),pads:Array.from(J().subarray(Number(Q)>>>0,4+(Number(Q)>>>0)>>>0)),strides:Array.from(J().subarray(Number(ue)>>>0,2+(Number(ue)>>>0)>>>0)),wIsConst:()=>!!F()[Te>>>0],outputPadding:Ne?Array.from(J().subarray(Number(Ne)>>>0,Number(nt)>>>0)):[],outputShape:ft?Array.from(J().subarray(Number(ft)>>>0,Number(zt)>>>0)):[],activation:Ot(Er)})},847032:(h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt,Er,Os)=>{s.kb("ConvTranspose",h,{format:Te?"NHWC":"NCHW",autoPad:_,dilations:[M],group:k,kernelShape:[D],pads:[Q,ue],strides:[_e],wIsConst:()=>!!F()[Ne>>>0],outputPadding:nt?Array.from(J().subarray(Number(nt)>>>0,Number(ft)>>>0)):[],outputShape:zt?Array.from(J().subarray(Number(zt)>>>0,Number(Er)>>>0)):[],activation:Ot(Os)})},847465:(h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt,Er)=>{s.kb("ConvTranspose",h,{format:_e?"NHWC":"NCHW",autoPad:_,dilations:Array.from(J().subarray(Number(M)>>>0,2+(Number(M)>>>0)>>>0)),group:k,kernelShape:Array.from(J().subarray(Number(D)>>>0,2+(Number(D)>>>0)>>>0)),pads:Array.from(J().subarray(Number(Q)>>>0,4+(Number(Q)>>>0)>>>0)),strides:Array.from(J().subarray(Number(ue)>>>0,2+(Number(ue)>>>0)>>>0)),wIsConst:()=>!!F()[Te>>>0],outputPadding:Ne?Array.from(J().subarray(Number(Ne)>>>0,Number(nt)>>>0)):[],outputShape:ft?Array.from(J().subarray(Number(ft)>>>0,Number(zt)>>>0)):[],activation:Ot(Er)})},848126:(h,_)=>{s.kb("GlobalAveragePool",h,{format:_?"NHWC":"NCHW"})},848217:(h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt,Er)=>{s.kb("AveragePool",h,{format:Er?"NHWC":"NCHW",auto_pad:_,ceil_mode:M,count_include_pad:k,storage_order:D,dilations:Q?Array.from(J().subarray(Number(Q)>>>0,Number(ue)>>>0)):[],kernel_shape:_e?Array.from(J().subarray(Number(_e)>>>0,Number(Te)>>>0)):[],pads:Ne?Array.from(J().subarray(Number(Ne)>>>0,Number(nt)>>>0)):[],strides:ft?Array.from(J().subarray(Number(ft)>>>0,Number(zt)>>>0)):[]})},848696:(h,_)=>{s.kb("GlobalAveragePool",h,{format:_?"NHWC":"NCHW"})},848787:(h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt,Er)=>{s.kb("AveragePool",h,{format:Er?"NHWC":"NCHW",auto_pad:_,ceil_mode:M,count_include_pad:k,storage_order:D,dilations:Q?Array.from(J().subarray(Number(Q)>>>0,Number(ue)>>>0)):[],kernel_shape:_e?Array.from(J().subarray(Number(_e)>>>0,Number(Te)>>>0)):[],pads:Ne?Array.from(J().subarray(Number(Ne)>>>0,Number(nt)>>>0)):[],strides:ft?Array.from(J().subarray(Number(ft)>>>0,Number(zt)>>>0)):[]})},849266:(h,_)=>{s.kb("GlobalMaxPool",h,{format:_?"NHWC":"NCHW"})},849353:(h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt,Er)=>{s.kb("MaxPool",h,{format:Er?"NHWC":"NCHW",auto_pad:_,ceil_mode:M,count_include_pad:k,storage_order:D,dilations:Q?Array.from(J().subarray(Number(Q)>>>0,Number(ue)>>>0)):[],kernel_shape:_e?Array.from(J().subarray(Number(_e)>>>0,Number(Te)>>>0)):[],pads:Ne?Array.from(J().subarray(Number(Ne)>>>0,Number(nt)>>>0)):[],strides:ft?Array.from(J().subarray(Number(ft)>>>0,Number(zt)>>>0)):[]})},849828:(h,_)=>{s.kb("GlobalMaxPool",h,{format:_?"NHWC":"NCHW"})},849915:(h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt,Er)=>{s.kb("MaxPool",h,{format:Er?"NHWC":"NCHW",auto_pad:_,ceil_mode:M,count_include_pad:k,storage_order:D,dilations:Q?Array.from(J().subarray(Number(Q)>>>0,Number(ue)>>>0)):[],kernel_shape:_e?Array.from(J().subarray(Number(_e)>>>0,Number(Te)>>>0)):[],pads:Ne?Array.from(J().subarray(Number(Ne)>>>0,Number(nt)>>>0)):[],strides:ft?Array.from(J().subarray(Number(ft)>>>0,Number(zt)>>>0)):[]})},850390:(h,_,M,k,D)=>{s.kb("Gemm",h,{alpha:_,beta:M,transA:k,transB:D})},850494:h=>{s.kb("MatMul",h,void 0)},850548:(h,_,M,k)=>{s.kb("ArgMax",h,{keepDims:!!_,selectLastIndex:!!M,axis:k})},850656:(h,_,M,k)=>{s.kb("ArgMin",h,{keepDims:!!_,selectLastIndex:!!M,axis:k})},850764:(h,_)=>{s.kb("Softmax",h,{axis:_})},850827:(h,_)=>{s.kb("Concat",h,{axis:_})},850887:(h,_,M,k,D)=>{s.kb("Split",h,{axis:_,numOutputs:M,splitSizes:k?Array.from(J().subarray(Number(k)>>>0,Number(D)>>>0)):[]})},851043:h=>{s.kb("Expand",h,void 0)},851097:(h,_)=>{s.kb("Gather",h,{axis:Number(_)})},851168:(h,_)=>{s.kb("GatherElements",h,{axis:Number(_)})},851247:(h,_)=>{s.kb("GatherND",h,{batch_dims:Number(_)})},851326:(h,_,M,k,D,Q,ue,_e,Te,Ne,nt)=>{s.kb("Resize",h,{antialias:_,axes:M?Array.from(J().subarray(Number(M)>>>0,Number(k)>>>0)):[],coordinateTransformMode:Ot(D),cubicCoeffA:Q,excludeOutside:ue,extrapolationValue:_e,keepAspectRatioPolicy:Ot(Te),mode:Ot(Ne),nearestMode:Ot(nt)})},851688:(h,_,M,k,D,Q,ue)=>{s.kb("Slice",h,{starts:_?Array.from(J().subarray(Number(_)>>>0,Number(M)>>>0)):[],ends:k?Array.from(J().subarray(Number(k)>>>0,Number(D)>>>0)):[],axes:Q?Array.from(J().subarray(Number(Q)>>>0,Number(ue)>>>0)):[]})},851952:h=>{s.kb("Tile",h,void 0)},852004:(h,_,M)=>{s.kb("InstanceNormalization",h,{epsilon:_,format:M?"NHWC":"NCHW"})},852118:(h,_,M)=>{s.kb("InstanceNormalization",h,{epsilon:_,format:M?"NHWC":"NCHW"})},852232:h=>{s.kb("Range",h,void 0)},852285:(h,_)=>{s.kb("Einsum",h,{equation:Ot(_)})},852366:(h,_,M,k,D)=>{s.kb("Pad",h,{mode:_,value:M,pads:k?Array.from(J().subarray(Number(k)>>>0,Number(D)>>>0)):[]})},852509:(h,_,M,k,D,Q)=>{s.kb("BatchNormalization",h,{epsilon:_,momentum:M,spatial:!!D,trainingMode:!!k,format:Q?"NHWC":"NCHW"})},852678:(h,_,M,k,D,Q)=>{s.kb("BatchNormalization",h,{epsilon:_,momentum:M,spatial:!!D,trainingMode:!!k,format:Q?"NHWC":"NCHW"})},852847:(h,_,M)=>{s.kb("CumSum",h,{exclusive:Number(_),reverse:Number(M)})},852944:(h,_,M)=>{s.kb("DequantizeLinear",h,{axis:_,blockSize:M})},853034:(h,_,M,k,D)=>{s.kb("GridSample",h,{align_corners:_,mode:Ot(M),padding_mode:Ot(k),format:D?"NHWC":"NCHW"})},853204:(h,_,M,k,D)=>{s.kb("GridSample",h,{align_corners:_,mode:Ot(M),padding_mode:Ot(k),format:D?"NHWC":"NCHW"})},853374:(h,_)=>{s.kb("ScatterND",h,{reduction:Ot(_)})},853459:(h,_,M,k,D,Q,ue,_e,Te)=>{s.kb("Attention",h,{numHeads:_,isUnidirectional:M,maskFilterValue:k,scale:D,doRotary:Q,qkvHiddenSizes:ue?Array.from(J().subarray(Number(_e)>>>0,Number(_e)+ue>>>0)):[],pastPresentShareBuffer:!!Te})},853731:h=>{s.kb("BiasAdd",h,void 0)},853786:h=>{s.kb("BiasSplitGelu",h,void 0)},853847:h=>{s.kb("FastGelu",h,void 0)},853903:(h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt,Er,Os,vu)=>{s.kb("Conv",h,{format:ft?"NHWC":"NCHW",auto_pad:_,dilations:M?Array.from(J().subarray(Number(M)>>>0,Number(k)>>>0)):[],group:D,kernel_shape:Q?Array.from(J().subarray(Number(Q)>>>0,Number(ue)>>>0)):[],pads:_e?Array.from(J().subarray(Number(_e)>>>0,Number(Te)>>>0)):[],strides:Ne?Array.from(J().subarray(Number(Ne)>>>0,Number(nt)>>>0)):[],w_is_const:()=>!!F()[Number(zt)>>>0],activation:Ot(Er),activation_params:Os?Array.from(je().subarray(Number(Os)>>>0,Number(vu)>>>0)):[]})},854487:h=>{s.kb("Gelu",h,void 0)},854539:(h,_,M,k,D,Q,ue,_e,Te)=>{s.kb("GroupQueryAttention",h,{numHeads:_,kvNumHeads:M,scale:k,softcap:D,doRotary:Q,rotaryInterleaved:ue,smoothSoftmax:_e,localWindowSize:Te})},854756:(h,_,M,k)=>{s.kb("LayerNormalization",h,{axis:_,epsilon:M,simplified:!!k})},854867:(h,_,M,k)=>{s.kb("LayerNormalization",h,{axis:_,epsilon:M,simplified:!!k})},854978:(h,_,M,k,D,Q)=>{s.kb("MatMulNBits",h,{k:_,n:M,accuracyLevel:k,bits:D,blockSize:Q})},855105:(h,_,M,k,D,Q)=>{s.kb("MultiHeadAttention",h,{numHeads:_,isUnidirectional:M,maskFilterValue:k,scale:D,doRotary:Q})},855264:(h,_)=>{s.kb("QuickGelu",h,{alpha:_})},855328:(h,_,M,k,D)=>{s.kb("RotaryEmbedding",h,{interleaved:!!_,numHeads:M,rotaryEmbeddingDim:k,scale:D})},855467:(h,_,M)=>{s.kb("SkipLayerNormalization",h,{epsilon:_,simplified:!!M})},855569:(h,_,M)=>{s.kb("SkipLayerNormalization",h,{epsilon:_,simplified:!!M})},855671:(h,_,M,k)=>{s.kb("GatherBlockQuantized",h,{gatherAxis:_,quantizeAxis:M,blockSize:k})},855792:h=>{s.$b(h)},855826:(h,_)=>s.bc(Number(h),Number(_),s.Gb.ec,s.Gb.errors)};function We(h,_,M){return qr(async()=>{await s.Yb(Number(h),Number(_),Number(M))})}function tt(){return typeof wasmOffsetConverter<"u"}class Ee{constructor(_){ie(this,"name","ExitStatus");this.message=`Program terminated with exit(${_})`,this.status=_}}var it=h=>{h.terminate(),h.onmessage=()=>{}},Je=[],dt=h=>{It.length==0&&(Gr(),cr(It[0]));var _=It.pop();if(!_)return 6;Tt.push(_),Sr[h.Bb]=_,_.Bb=h.Bb;var M={Cb:"run",hc:h.fc,Ib:h.Ib,Bb:h.Bb};return _.postMessage(M,h.Nb),0},Ye=0,ze=(h,_,...M)=>{for(var k=2*M.length,D=vi(),Q=As(8*k),ue=Q>>>3,_e=0;_e<M.length;_e++){var Te=M[_e];typeof Te=="bigint"?(K[ue+2*_e]=1n,K[ue+2*_e+1]=Te):(K[ue+2*_e]=0n,Ge()[ue+2*_e+1>>>0]=Te)}return h=qi(h,0,k,Q,_),Is(D),h};function rt(h){if(u)return ze(0,1,h);if(S=h,!(0<Ye)){for(var _ of Tt)it(_);for(_ of It)it(_);It=[],Tt=[],Sr={},pe=!0}C(0,new Ee(h))}function ct(h){if(u)return ze(1,0,h);Wt(h)}var Wt=h=>{if(S=h,u)throw ct(h),"unwind";rt(h)},It=[],Tt=[],Ur=[],Sr={},an=h=>{var _=h.Bb;delete Sr[_],It.push(h),Tt.splice(Tt.indexOf(h),1),h.Bb=0,Js(_)};function Pn(){Ur.forEach(h=>h())}var cr=h=>new Promise(_=>{h.onmessage=D=>{var Q=(D=D.data).Cb;if(D.Hb&&D.Hb!=un()){var ue=Sr[D.Hb];ue?ue.postMessage(D,D.Nb):x(`Internal error! Worker sent a message "${Q}" to target pthread ${D.Hb}, but that thread no longer exists!`)}else Q==="checkMailbox"?ke():Q==="spawnThread"?dt(D):Q==="cleanupThread"?an(Sr[D.ic]):Q==="loaded"?(h.loaded=!0,_(h)):Q==="alert"?alert(`Thread ${D.jc}: ${D.text}`):D.target==="setimmediate"?h.postMessage(D):Q==="callHandler"?s[D.Rb](...D.args):Q&&x(`worker sent an unknown command ${Q}`)},h.onerror=D=>{throw x(`worker sent an error! ${D.filename}:${D.lineno}: ${D.message}`),D};var M,k=[];for(M of[])s.propertyIsEnumerable(M)&&k.push(M);h.postMessage({Cb:"load",Sb:k,lc:T,mc:E})});function Gr(){var h=new Worker((()=>{let _=URL;return self.location.href>"file:"&&self.location.href<"file;"?new _("ort.bundle.min.mjs",self.location.href):new URL(self.location.href)})(),{type:"module",workerData:"em-pthread",name:"em-pthread"});It.push(h)}var Rs=h=>{oe();var _=we()[h+52>>>2>>>0];h=we()[h+56>>>2>>>0],Ys(_,_-h),Is(_)},Ns=(h,_)=>{Ye=0,h=Ki(h,_),0<Ye?S=h:yi(h)};class js{constructor(_){this.Jb=_-24}}function Us(h,_,M){var k=new js(h>>>=0);throw _>>>=0,M>>>=0,we()[k.Jb+16>>>2>>>0]=0,we()[k.Jb+4>>>2>>>0]=_,we()[k.Jb+8>>>2>>>0]=M,h}function vt(h,_,M,k){return u?ze(2,1,h,_,M,k):jn(h,_,M,k)}function jn(h,_,M,k){if(h>>>=0,M>>>=0,k>>>=0,d===void 0)return 6;var D=[];return u&&D.length===0?vt(h,_>>>=0,M,k):(h={fc:M,Bb:h,Ib:k,Nb:D},u?(h.Cb="spawnThread",postMessage(h,D),0):dt(h))}var Un=typeof TextDecoder<"u"?new TextDecoder:void 0,Bt=(h,_=0,M=NaN)=>{var k=(_>>>=0)+M;for(M=_;h[M]&&!(M>=k);)++M;if(16<M-_&&h.buffer&&Un)return Un.decode(h.buffer instanceof ArrayBuffer?h.subarray(_,M):h.slice(_,M));for(k="";_<M;){var D=h[_++];if(128&D){var Q=63&h[_++];if((224&D)==192)k+=String.fromCharCode((31&D)<<6|Q);else{var ue=63&h[_++];65536>(D=(240&D)==224?(15&D)<<12|Q<<6|ue:(7&D)<<18|Q<<12|ue<<6|63&h[_++])?k+=String.fromCharCode(D):(D-=65536,k+=String.fromCharCode(55296|D>>10,56320|1023&D))}}else k+=String.fromCharCode(D)}return k},Ot=(h,_)=>(h>>>=0)?Bt(U(),h,_):"";function z(h,_,M){return u?ze(3,1,h,_,M):0}function se(h,_){if(u)return ze(4,1,h,_)}var G=h=>{for(var _=0,M=0;M<h.length;++M){var k=h.charCodeAt(M);127>=k?_++:2047>=k?_+=2:55296<=k&&57343>=k?(_+=4,++M):_+=3}return _},ee=(h,_,M)=>{var k=U();if(_>>>=0,0<M){var D=_;M=_+M-1;for(var Q=0;Q<h.length;++Q){var ue=h.charCodeAt(Q);if(55296<=ue&&57343>=ue&&(ue=65536+((1023&ue)<<10)|1023&h.charCodeAt(++Q)),127>=ue){if(_>=M)break;k[_++>>>0]=ue}else{if(2047>=ue){if(_+1>=M)break;k[_++>>>0]=192|ue>>6}else{if(65535>=ue){if(_+2>=M)break;k[_++>>>0]=224|ue>>12}else{if(_+3>=M)break;k[_++>>>0]=240|ue>>18,k[_++>>>0]=128|ue>>12&63}k[_++>>>0]=128|ue>>6&63}k[_++>>>0]=128|63&ue}}k[_>>>0]=0,h=_-D}else h=0;return h};function le(h,_){if(u)return ze(5,1,h,_)}function xe(h,_,M){if(u)return ze(6,1,h,_,M)}function Re(h,_,M){return u?ze(7,1,h,_,M):0}function lt(h,_){if(u)return ze(8,1,h,_)}function Et(h,_,M){if(u)return ze(9,1,h,_,M)}function xt(h,_,M,k){if(u)return ze(10,1,h,_,M,k)}function At(h,_,M,k){if(u)return ze(11,1,h,_,M,k)}function ut(h,_,M,k){if(u)return ze(12,1,h,_,M,k)}function Kt(h){if(u)return ze(13,1,h)}function er(h,_){if(u)return ze(14,1,h,_)}function on(h,_,M){if(u)return ze(15,1,h,_,M)}var fn,nr,Hr=()=>Ie(""),gr=h=>{for(var _="";U()[h>>>0];)_+=fn[U()[h++>>>0]];return _},Yr={},Mn={};function br(h,_,M={}){return function(k,D,Q={}){var ue=D.name;if(!k)throw new nr(`type "${ue}" must have a positive integer typeid pointer`);if(Mn.hasOwnProperty(k)){if(Q.Tb)return;throw new nr(`Cannot register type '${ue}' twice`)}Mn[k]=D,Yr.hasOwnProperty(k)&&(D=Yr[k],delete Yr[k],D.forEach(_e=>_e()))}(h,_,M)}var Wn=(h,_,M)=>{switch(_){case 1:return M?k=>F()[k>>>0]:k=>U()[k>>>0];case 2:return M?k=>re()[k>>>1>>>0]:k=>me()[k>>>1>>>0];case 4:return M?k=>J()[k>>>2>>>0]:k=>we()[k>>>2>>>0];case 8:return M?k=>K[k>>>3]:k=>Y[k>>>3];default:throw new TypeError(`invalid integer width (${_}): ${h}`)}};function ns(h,_,M){M>>>=0,br(h>>>=0,{name:_=gr(_>>>0),fromWireType:k=>k,toWireType:function(k,D){if(typeof D!="bigint"&&typeof D!="number")throw D=D===null?"null":(k=typeof D)=="object"||k==="array"||k==="function"?D.toString():""+D,new TypeError(`Cannot convert "${D}" to ${this.name}`);return typeof D=="number"&&(D=BigInt(D)),D},Db:Or,readValueFromPointer:Wn(_,M,_.indexOf("u")==-1),Eb:null})}var Or=8;function mn(h,_,M,k){br(h>>>=0,{name:_=gr(_>>>0),fromWireType:function(D){return!!D},toWireType:function(D,Q){return Q?M:k},Db:Or,readValueFromPointer:function(D){return this.fromWireType(U()[D>>>0])},Eb:null})}var _n=[],$r=[];function Cn(h){9<(h>>>=0)&&--$r[h+1]==0&&($r[h]=void 0,_n.push(h))}var Xt=h=>{if(!h)throw new nr("Cannot use deleted val. handle = "+h);return $r[h]},sr=h=>{switch(h){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let _=_n.pop()||$r.length;return $r[_]=h,$r[_+1]=1,_}};function ln(h){return this.fromWireType(we()[h>>>2>>>0])}var Ms={name:"emscripten::val",fromWireType:h=>{var _=Xt(h);return Cn(h),_},toWireType:(h,_)=>sr(_),Db:Or,readValueFromPointer:ln,Eb:null};function gn(h){return br(h>>>0,Ms)}var Ve=(h,_)=>{switch(_){case 4:return function(M){return this.fromWireType(je()[M>>>2>>>0])};case 8:return function(M){return this.fromWireType(Ge()[M>>>3>>>0])};default:throw new TypeError(`invalid float width (${_}): ${h}`)}};function qe(h,_,M){M>>>=0,br(h>>>=0,{name:_=gr(_>>>0),fromWireType:k=>k,toWireType:(k,D)=>D,Db:Or,readValueFromPointer:Ve(_,M),Eb:null})}function at(h,_,M,k,D){if(h>>>=0,M>>>=0,_=gr(_>>>0),D===-1&&(D=4294967295),D=_e=>_e,k===0){var Q=32-8*M;D=_e=>_e<<Q>>>Q}var ue=_.includes("unsigned")?function(_e,Te){return Te>>>0}:function(_e,Te){return Te};br(h,{name:_,fromWireType:D,toWireType:ue,Db:Or,readValueFromPointer:Wn(_,M,k!==0),Eb:null})}function mr(h,_,M){function k(Q){var ue=we()[Q>>>2>>>0];return Q=we()[Q+4>>>2>>>0],new D(F().buffer,Q,ue)}var D=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][_];br(h>>>=0,{name:M=gr(M>>>0),fromWireType:k,Db:Or,readValueFromPointer:k},{Tb:!0})}function Ts(h,_){br(h>>>=0,{name:_=gr(_>>>0),fromWireType:function(M){for(var k,D=we()[M>>>2>>>0],Q=M+4,ue=Q,_e=0;_e<=D;++_e){var Te=Q+_e;_e!=D&&U()[Te>>>0]!=0||(ue=Ot(ue,Te-ue),k===void 0?k=ue:(k+="\0",k+=ue),ue=Te+1)}return bn(M),k},toWireType:function(M,k){k instanceof ArrayBuffer&&(k=new Uint8Array(k));var D=typeof k=="string";if(!(D||k instanceof Uint8Array||k instanceof Uint8ClampedArray||k instanceof Int8Array))throw new nr("Cannot pass non-string to std::string");var Q=D?G(k):k.length,ue=ks(4+Q+1),_e=ue+4;if(we()[ue>>>2>>>0]=Q,D)ee(k,_e,Q+1);else if(D)for(D=0;D<Q;++D){var Te=k.charCodeAt(D);if(255<Te)throw bn(ue),new nr("String has UTF-16 code units that do not fit in 8 bits");U()[_e+D>>>0]=Te}else for(D=0;D<Q;++D)U()[_e+D>>>0]=k[D];return M!==null&&M.push(bn,ue),ue},Db:Or,readValueFromPointer:ln,Eb(M){bn(M)}})}var On=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Es=(h,_)=>{for(var M=h>>1,k=M+_/2;!(M>=k)&&me()[M>>>0];)++M;if(32<(M<<=1)-h&&On)return On.decode(U().slice(h,M));for(M="",k=0;!(k>=_/2);++k){var D=re()[h+2*k>>>1>>>0];if(D==0)break;M+=String.fromCharCode(D)}return M},Vn=(h,_,M)=>{if(M??(M=2147483647),2>M)return 0;var k=_;M=(M-=2)<2*h.length?M/2:h.length;for(var D=0;D<M;++D){var Q=h.charCodeAt(D);re()[_>>>1>>>0]=Q,_+=2}return re()[_>>>1>>>0]=0,_-k},ui=h=>2*h.length,di=(h,_)=>{for(var M=0,k="";!(M>=_/4);){var D=J()[h+4*M>>>2>>>0];if(D==0)break;++M,65536<=D?(D-=65536,k+=String.fromCharCode(55296|D>>10,56320|1023&D)):k+=String.fromCharCode(D)}return k},ci=(h,_,M)=>{if(_>>>=0,M??(M=2147483647),4>M)return 0;var k=_;M=k+M-4;for(var D=0;D<h.length;++D){var Q=h.charCodeAt(D);if(55296<=Q&&57343>=Q&&(Q=65536+((1023&Q)<<10)|1023&h.charCodeAt(++D)),J()[_>>>2>>>0]=Q,(_+=4)+4>M)break}return J()[_>>>2>>>0]=0,_-k},ge=h=>{for(var _=0,M=0;M<h.length;++M){var k=h.charCodeAt(M);55296<=k&&57343>=k&&++M,_+=4}return _};function R(h,_,M){if(h>>>=0,_>>>=0,M=gr(M>>>=0),_===2)var k=Es,D=Vn,Q=ui,ue=_e=>me()[_e>>>1>>>0];else _===4&&(k=di,D=ci,Q=ge,ue=_e=>we()[_e>>>2>>>0]);br(h,{name:M,fromWireType:_e=>{for(var Te,Ne=we()[_e>>>2>>>0],nt=_e+4,ft=0;ft<=Ne;++ft){var zt=_e+4+ft*_;ft!=Ne&&ue(zt)!=0||(nt=k(nt,zt-nt),Te===void 0?Te=nt:(Te+="\0",Te+=nt),nt=zt+_)}return bn(_e),Te},toWireType:(_e,Te)=>{if(typeof Te!="string")throw new nr(`Cannot pass non-string to C++ string type ${M}`);var Ne=Q(Te),nt=ks(4+Ne+_);return we()[nt>>>2>>>0]=Ne/_,D(Te,nt+4,Ne+_),_e!==null&&_e.push(bn,nt),nt},Db:Or,readValueFromPointer:ln,Eb(_e){bn(_e)}})}function X(h,_){br(h>>>=0,{Ub:!0,name:_=gr(_>>>0),Db:0,fromWireType:()=>{},toWireType:()=>{}})}function ae(h){Xs(h>>>0,!l,1,!o,131072,!1),Pn()}var he=h=>{if(!pe)try{if(h(),!(0<Ye))try{u?yi(S):Wt(S)}catch(_){_ instanceof Ee||_=="unwind"||C(0,_)}}catch(_){_ instanceof Ee||_=="unwind"||C(0,_)}};function fe(h){h>>>=0,typeof Atomics.kc=="function"&&(Atomics.kc(J(),h>>>2,h).value.then(ke),h+=128,Atomics.store(J(),h>>>2,1))}var ke=()=>{var h=un();h&&(fe(h),he(bi))};function He(h,_){(h>>>=0)==_>>>0?setTimeout(ke):u?postMessage({Hb:h,Cb:"checkMailbox"}):(h=Sr[h])&&h.postMessage({Cb:"checkMailbox"})}var et=[];function Ze(h,_,M,k,D){for(_>>>=0,k/=2,et.length=k,M=D>>>0>>>3,D=0;D<k;D++)et[D]=K[M+2*D]?K[M+2*D+1]:Ge()[M+2*D+1>>>0];return(_?Le[_]:La[h])(...et)}var ot=()=>{Ye=0};function St(h){h>>>=0,u?postMessage({Cb:"cleanupThread",ic:h}):an(Sr[h])}function Jt(h){}var qt=(h,_)=>{var M=Mn[h];if(M===void 0)throw h=Vi(h),M=gr(h),bn(h),new nr(`${_} has unknown type ${M}`);return M},Mr=(h,_,M)=>{var k=[];return h=h.toWireType(k,M),k.length&&(we()[_>>>2>>>0]=sr(k)),h};function ir(h,_,M){return _>>>=0,M>>>=0,h=Xt(h>>>0),_=qt(_,"emval::as"),Mr(_,M,h)}function Wr(h,_){return _>>>=0,h=Xt(h>>>0),(_=qt(_,"emval::as")).toWireType(null,h)}var Dr=h=>{try{h()}catch(_){Ie(_)}},dr=0,pr=null,Kr=0,Zr=[],wr={},Br={},wn=0,Qr=null,Gn=[];function qr(h){return function(_){if(!pe){if(dr===0){var M=!1,k=!1;_((D=0)=>{if(!pe&&(Kr=D,M=!0,k)){dr=2,Dr(()=>Xi(pr)),typeof MainLoop<"u"&&MainLoop.Qb&&MainLoop.resume(),D=!1;try{var Q=function(){var Te=J()[pr+8>>>2>>>0];return Te=wt[Br[Te]],--Ye,Te()}()}catch(Te){Q=Te,D=!0}var ue=!1;if(!pr){var _e=Qr;_e&&(Qr=null,(D?_e.reject:_e.resolve)(Q),ue=!0)}if(D&&!ue)throw Q}}),k=!0,M||(dr=1,pr=function(){var D=ks(65548),Q=D+12;we()[D>>>2>>>0]=Q,we()[D+4>>>2>>>0]=Q+65536,Q=Zr[0];var ue=wr[Q];return ue===void 0&&(ue=wn++,wr[Q]=ue,Br[ue]=Q),Q=ue,J()[D+8>>>2>>>0]=Q,D}(),typeof MainLoop<"u"&&MainLoop.Qb&&MainLoop.pause(),Dr(()=>xi(pr)))}else dr===2?(dr=0,Dr($i),bn(pr),pr=null,Gn.forEach(he)):Ie(`invalid state: ${dr}`);return Kr}}(_=>{h().then(_)})}function Dn(h){return h>>>=0,qr(async()=>{var _=await Xt(h);return sr(_)})}var Tr=[];function kr(h,_,M,k){return M>>>=0,k>>>=0,(h=Tr[h>>>0])(null,_=Xt(_>>>0),M,k)}var Lr={},yr=h=>{var _=Lr[h];return _===void 0?gr(h):_};function yn(h,_,M,k,D){return M>>>=0,k>>>=0,D>>>=0,(h=Tr[h>>>0])(_=Xt(_>>>0),_[M=yr(M)],k,D)}function Ps(h,_){return _>>>=0,(h=Xt(h>>>0))==Xt(_)}var pi=()=>typeof globalThis=="object"?globalThis:Function("return this")();function Ws(h){return(h>>>=0)==0?sr(pi()):(h=yr(h),sr(pi()[h]))}var lo=h=>{var _=Tr.length;return Tr.push(h),_},Sa=(h,_)=>{for(var M=Array(h),k=0;k<h;++k)M[k]=qt(we()[_+4*k>>>2>>>0],"parameter "+k);return M},ka=(h,_)=>Object.defineProperty(_,"name",{value:h});function uo(h,_,M){var k=(_=Sa(h,_>>>0)).shift();h--;var D=`return function (obj, func, destructorsRef, args) {
`,Q=0,ue=[];M===0&&ue.push("obj");for(var _e=["retType"],Te=[k],Ne=0;Ne<h;++Ne)ue.push("arg"+Ne),_e.push("argType"+Ne),Te.push(_[Ne]),D+=`  var arg${Ne} = argType${Ne}.readValueFromPointer(args${Q?"+"+Q:""});
`,Q+=_[Ne].Db;return D+=`  var rv = ${M===1?"new func":"func.call"}(${ue.join(", ")});
`,k.Ub||(_e.push("emval_returnValue"),Te.push(Mr),D+=`  return emval_returnValue(retType, destructorsRef, rv);
`),_e.push(D+`};
`),h=function(nt){var ft=Function;if(!(ft instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof ft} which is not a function`);var zt=ka(ft.name||"unknownFunctionName",function(){});return zt.prototype=ft.prototype,zt=new zt,(nt=ft.apply(zt,nt))instanceof Object?nt:zt}(_e)(...Te),M=`methodCaller<(${_.map(nt=>nt.name).join(", ")}) => ${k.name}>`,lo(ka(M,h))}function co(h){return h=yr(h>>>0),sr(s[h])}function Vs(h,_){return _>>>=0,h=Xt(h>>>0),_=Xt(_),sr(h[_])}function po(h){9<(h>>>=0)&&($r[h+1]+=1)}function ho(){return sr([])}function fo(h){h=Xt(h>>>0);for(var _=Array(h.length),M=0;M<h.length;M++)_[M]=h[M];return sr(_)}function mo(h){return sr(yr(h>>>0))}function _o(){return sr({})}function Gs(h){for(var _=Xt(h>>>=0);_.length;){var M=_.pop();_.pop()(M)}Cn(h)}function go(h,_,M){_>>>=0,M>>>=0,h=Xt(h>>>0),_=Xt(_),M=Xt(M),h[_]=M}function wo(h,_){return _>>>=0,h=(h=qt(h>>>0,"_emval_take_value")).readValueFromPointer(_),sr(h)}function Ia(h,_){h=-9007199254740992>h||9007199254740992<h?NaN:Number(h),_>>>=0,h=new Date(1e3*h),J()[_>>>2>>>0]=h.getUTCSeconds(),J()[_+4>>>2>>>0]=h.getUTCMinutes(),J()[_+8>>>2>>>0]=h.getUTCHours(),J()[_+12>>>2>>>0]=h.getUTCDate(),J()[_+16>>>2>>>0]=h.getUTCMonth(),J()[_+20>>>2>>>0]=h.getUTCFullYear()-1900,J()[_+24>>>2>>>0]=h.getUTCDay(),h=(h.getTime()-Date.UTC(h.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,J()[_+28>>>2>>>0]=h}var Fi=h=>h%4==0&&(h%100!=0||h%400==0),Bi=[0,31,60,91,121,152,182,213,244,274,305,335],Li=[0,31,59,90,120,151,181,212,243,273,304,334];function yo(h,_){h=-9007199254740992>h||9007199254740992<h?NaN:Number(h),_>>>=0,h=new Date(1e3*h),J()[_>>>2>>>0]=h.getSeconds(),J()[_+4>>>2>>>0]=h.getMinutes(),J()[_+8>>>2>>>0]=h.getHours(),J()[_+12>>>2>>>0]=h.getDate(),J()[_+16>>>2>>>0]=h.getMonth(),J()[_+20>>>2>>>0]=h.getFullYear()-1900,J()[_+24>>>2>>>0]=h.getDay();var M=(Fi(h.getFullYear())?Bi:Li)[h.getMonth()]+h.getDate()-1|0;J()[_+28>>>2>>>0]=M,J()[_+36>>>2>>>0]=-60*h.getTimezoneOffset(),M=new Date(h.getFullYear(),6,1).getTimezoneOffset();var k=new Date(h.getFullYear(),0,1).getTimezoneOffset();h=0|(M!=k&&h.getTimezoneOffset()==Math.min(k,M)),J()[_+32>>>2>>>0]=h}function Aa(h){h>>>=0;var _=new Date(J()[h+20>>>2>>>0]+1900,J()[h+16>>>2>>>0],J()[h+12>>>2>>>0],J()[h+8>>>2>>>0],J()[h+4>>>2>>>0],J()[h>>>2>>>0],0),M=J()[h+32>>>2>>>0],k=_.getTimezoneOffset(),D=new Date(_.getFullYear(),6,1).getTimezoneOffset(),Q=new Date(_.getFullYear(),0,1).getTimezoneOffset(),ue=Math.min(Q,D);return 0>M?J()[h+32>>>2>>>0]=+(D!=Q&&ue==k):0<M!=(ue==k)&&(D=Math.max(Q,D),_.setTime(_.getTime()+6e4*((0<M?ue:D)-k))),J()[h+24>>>2>>>0]=_.getDay(),M=(Fi(_.getFullYear())?Bi:Li)[_.getMonth()]+_.getDate()-1|0,J()[h+28>>>2>>>0]=M,J()[h>>>2>>>0]=_.getSeconds(),J()[h+4>>>2>>>0]=_.getMinutes(),J()[h+8>>>2>>>0]=_.getHours(),J()[h+12>>>2>>>0]=_.getDate(),J()[h+16>>>2>>>0]=_.getMonth(),J()[h+20>>>2>>>0]=_.getYear(),h=_.getTime(),BigInt(isNaN(h)?-1:h/1e3)}function hi(h,_,M,k,D,Q,ue){return u?ze(16,1,h,_,M,k,D,Q,ue):-52}function Cs(h,_,M,k,D,Q){if(u)return ze(17,1,h,_,M,k,D,Q)}var Ss={},Oa=()=>performance.timeOrigin+performance.now();function Ri(h,_){if(u)return ze(18,1,h,_);if(Ss[h]&&(clearTimeout(Ss[h].id),delete Ss[h]),!_)return 0;var M=setTimeout(()=>{delete Ss[h],he(()=>Hi(h,performance.timeOrigin+performance.now()))},_);return Ss[h]={id:M,rc:_},0}function _l(h,_,M,k){h>>>=0,_>>>=0,M>>>=0,k>>>=0;var D=new Date().getFullYear(),Q=new Date(D,0,1).getTimezoneOffset();D=new Date(D,6,1).getTimezoneOffset();var ue=Math.max(Q,D);we()[h>>>2>>>0]=60*ue,J()[_>>>2>>>0]=+(Q!=D),h=(_=_e=>{var Te=Math.abs(_e);return`UTC${0<=_e?"-":"+"}${String(Math.floor(Te/60)).padStart(2,"0")}${String(Te%60).padStart(2,"0")}`})(Q),_=_(D),D<Q?(ee(h,M,17),ee(_,k,17)):(ee(h,k,17),ee(_,M,17))}var bo=()=>Date.now();function fi(h,_,M){return 0<=h&&3>=h?(h===0?h=Date.now():h=performance.timeOrigin+performance.now(),K[M>>>0>>>3]=BigInt(Math.round(1e6*h)),0):28}var qs=[],mi=(h,_)=>{qs.length=0;for(var M;M=U()[h++>>>0];){var k=M!=105;_+=(k&=M!=112)&&_%8?4:0,qs.push(M==112?we()[_>>>2>>>0]:M==106?K[_>>>3]:M==105?J()[_>>>2>>>0]:Ge()[_>>>3>>>0]),_+=k?8:4}return qs};function vo(h,_,M){return h>>>=0,_=mi(_>>>0,M>>>0),Le[h](..._)}function xo(h,_,M){return h>>>=0,_=mi(_>>>0,M>>>0),Le[h](..._)}var $o=()=>{};function Mo(h,_){return x(Ot(h>>>0,_>>>0))}var To=()=>{throw Ye+=1,"unwind"};function Eo(){return 4294901760}var Po=()=>navigator.hardwareConcurrency;function Co(){return Ie("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function Hs(h){h>>>=0;var _=U().length;if(h<=_||4294901760<h)return!1;for(var M=1;4>=M;M*=2){var k=_*(1+.2/M);k=Math.min(k,h+100663296);e:{k=(Math.min(4294901760,65536*Math.ceil(Math.max(h,k)/65536))-T.buffer.byteLength+65535)/65536|0;try{T.grow(k),oe();var D=1;break e}catch{}D=void 0}if(D)return!0}return!1}var qn=()=>(Ie("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),Hn={},Ni=h=>{h.forEach(_=>{qn()})};function So(){var h=Error().stack.toString().split(`
`);return h[0]=="Error"&&h.shift(),Ni(h),Hn.Mb=qn(),Hn.dc=h,Hn.Mb}function _i(h,_,M){if(h>>>=0,_>>>=0,Hn.Mb==h)var k=Hn.dc;else(k=Error().stack.toString().split(`
`))[0]=="Error"&&k.shift(),Ni(k);for(var D=3;k[D]&&qn()!=h;)++D;for(h=0;h<M&&k[h+D];++h)J()[_+4*h>>>2>>>0]=qn();return h}var Sn,gi={},Da=()=>{if(!Sn){var h,_={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:"./this.program"};for(h in gi)gi[h]===void 0?delete _[h]:_[h]=gi[h];var M=[];for(h in _)M.push(`${h}=${_[h]}`);Sn=M}return Sn};function ji(h,_){if(u)return ze(19,1,h,_);h>>>=0,_>>>=0;var M=0;return Da().forEach((k,D)=>{var Q=_+M;for(D=we()[h+4*D>>>2>>>0]=Q,Q=0;Q<k.length;++Q)F()[D++>>>0]=k.charCodeAt(Q);F()[D>>>0]=0,M+=k.length+1}),0}function za(h,_){if(u)return ze(20,1,h,_);h>>>=0,_>>>=0;var M=Da();we()[h>>>2>>>0]=M.length;var k=0;return M.forEach(D=>k+=D.length+1),we()[_>>>2>>>0]=k,0}function Ui(h){return u?ze(21,1,h):52}function wi(h,_,M,k){return u?ze(22,1,h,_,M,k):52}function Fa(h,_,M,k){return u?ze(23,1,h,_,M,k):70}var Ba=[null,[],[]];function Wi(h,_,M,k){if(u)return ze(24,1,h,_,M,k);_>>>=0,M>>>=0,k>>>=0;for(var D=0,Q=0;Q<M;Q++){var ue=we()[_>>>2>>>0],_e=we()[_+4>>>2>>>0];_+=8;for(var Te=0;Te<_e;Te++){var Ne=U()[ue+Te>>>0],nt=Ba[h];Ne===0||Ne===10?((h===1?b:x)(Bt(nt)),nt.length=0):nt.push(Ne)}D+=_e}return we()[k>>>2>>>0]=D,0}u||function(){for(var h=s.numThreads-1;h--;)Gr();Je.unshift(()=>{Oe++,function(_){u?_():Promise.all(It.map(cr)).then(_)}(()=>Me())})}();for(var Ks=Array(256),mt=0;256>mt;++mt)Ks[mt]=String.fromCharCode(mt);fn=Ks,nr=s.BindingError=class extends Error{constructor(h){super(h),this.name="BindingError"}},s.InternalError=class extends Error{constructor(h){super(h),this.name="InternalError"}},$r.push(0,1,void 0,1,null,1,!0,1,!1,1),s.count_emval_handles=()=>$r.length/2-5-_n.length;var wt,La=[rt,ct,vt,z,se,le,xe,Re,lt,Et,xt,At,ut,Kt,er,on,hi,Cs,Ri,ji,za,Ui,wi,Fa,Wi];(async function(){function h(k,D){return wt=k.exports,wt=function(){var Q=wt,ue={};for(let[_e,Te]of Object.entries(Q))ue[_e]=typeof Te=="function"?(...Ne)=>{Zr.push(_e);try{return Te(...Ne)}finally{pe||(Zr.pop(),pr&&dr===1&&Zr.length===0&&(dr=0,Ye+=1,Dr(Qi),typeof Fibers<"u"&&Fibers.sc()))}}:Te;return ue}(),wt=function(){var Q=wt,ue=Te=>Ne=>Te(Ne)>>>0,_e=Te=>()=>Te()>>>0;return(Q=Object.assign({},Q)).Ea=ue(Q.Ea),Q.gb=_e(Q.gb),Q.ib=ue(Q.ib),Q.ub=ue(Q.ub),Q.vb=_e(Q.vb),Q.__cxa_get_exception_ptr=ue(Q.__cxa_get_exception_ptr),Q}(),Ur.push(wt.jb),E=D,Me(),wt}Oe++;var _=$e();if(s.instantiateWasm)return new Promise(k=>{s.instantiateWasm(_,(D,Q)=>{h(D,Q),k(D.exports)})});if(u)return new Promise(k=>{Ae=D=>{var Q=new WebAssembly.Instance(D,$e());k(h(Q,D))}});be??(be=s.locateFile?s.locateFile?s.locateFile("ort-wasm-simd-threaded.jsep.wasm",y):y+"ort-wasm-simd-threaded.jsep.wasm":new URL(""+new URL("ort-wasm-simd-threaded.jsep-CLPRrI3A.wasm",self.location.href).href,self.location.href).href);try{var M=await async function(k){var D=be;if(!de&&typeof WebAssembly.instantiateStreaming=="function"&&!L(D))try{var Q=fetch(D,{credentials:"same-origin"});return await WebAssembly.instantiateStreaming(Q,k)}catch(ue){x(`wasm streaming compile failed: ${ue}`),x("falling back to ArrayBuffer instantiation")}return async function(ue,_e){try{var Te=await async function(Ne){if(!de)try{var nt=await m(Ne);return new Uint8Array(nt)}catch{}if(Ne==be&&de)Ne=new Uint8Array(de);else{if(!f)throw"both async and sync fetching of the wasm failed";Ne=f(Ne)}return Ne}(ue);return await WebAssembly.instantiate(Te,_e)}catch(Ne){x(`failed to asynchronously prepare wasm: ${Ne}`),Ie(Ne)}}(D,k)}(_);return h(M.instance,M.module)}catch(k){return i(k),Promise.reject(k)}})();var Vi=h=>(Vi=wt.Ea)(h),Qs=()=>(Qs=wt.Fa)();s._OrtInit=(h,_)=>(s._OrtInit=wt.Ga)(h,_),s._OrtGetLastError=(h,_)=>(s._OrtGetLastError=wt.Ha)(h,_),s._OrtCreateSessionOptions=(h,_,M,k,D,Q,ue,_e,Te,Ne)=>(s._OrtCreateSessionOptions=wt.Ia)(h,_,M,k,D,Q,ue,_e,Te,Ne),s._OrtAppendExecutionProvider=(h,_,M,k,D)=>(s._OrtAppendExecutionProvider=wt.Ja)(h,_,M,k,D),s._OrtAddFreeDimensionOverride=(h,_,M)=>(s._OrtAddFreeDimensionOverride=wt.Ka)(h,_,M),s._OrtAddSessionConfigEntry=(h,_,M)=>(s._OrtAddSessionConfigEntry=wt.La)(h,_,M),s._OrtReleaseSessionOptions=h=>(s._OrtReleaseSessionOptions=wt.Ma)(h),s._OrtCreateSession=(h,_,M)=>(s._OrtCreateSession=wt.Na)(h,_,M),s._OrtReleaseSession=h=>(s._OrtReleaseSession=wt.Oa)(h),s._OrtGetInputOutputCount=(h,_,M)=>(s._OrtGetInputOutputCount=wt.Pa)(h,_,M),s._OrtGetInputOutputMetadata=(h,_,M,k)=>(s._OrtGetInputOutputMetadata=wt.Qa)(h,_,M,k),s._OrtFree=h=>(s._OrtFree=wt.Ra)(h),s._OrtCreateTensor=(h,_,M,k,D,Q)=>(s._OrtCreateTensor=wt.Sa)(h,_,M,k,D,Q),s._OrtGetTensorData=(h,_,M,k,D)=>(s._OrtGetTensorData=wt.Ta)(h,_,M,k,D),s._OrtReleaseTensor=h=>(s._OrtReleaseTensor=wt.Ua)(h),s._OrtCreateRunOptions=(h,_,M,k)=>(s._OrtCreateRunOptions=wt.Va)(h,_,M,k),s._OrtAddRunConfigEntry=(h,_,M)=>(s._OrtAddRunConfigEntry=wt.Wa)(h,_,M),s._OrtReleaseRunOptions=h=>(s._OrtReleaseRunOptions=wt.Xa)(h),s._OrtCreateBinding=h=>(s._OrtCreateBinding=wt.Ya)(h),s._OrtBindInput=(h,_,M)=>(s._OrtBindInput=wt.Za)(h,_,M),s._OrtBindOutput=(h,_,M,k)=>(s._OrtBindOutput=wt._a)(h,_,M,k),s._OrtClearBoundOutputs=h=>(s._OrtClearBoundOutputs=wt.$a)(h),s._OrtReleaseBinding=h=>(s._OrtReleaseBinding=wt.ab)(h),s._OrtRunWithBinding=(h,_,M,k,D)=>(s._OrtRunWithBinding=wt.bb)(h,_,M,k,D),s._OrtRun=(h,_,M,k,D,Q,ue,_e)=>(s._OrtRun=wt.cb)(h,_,M,k,D,Q,ue,_e),s._OrtEndProfiling=h=>(s._OrtEndProfiling=wt.db)(h),s._JsepOutput=(h,_,M)=>(s._JsepOutput=wt.eb)(h,_,M),s._JsepGetNodeName=h=>(s._JsepGetNodeName=wt.fb)(h);var un=()=>(un=wt.gb)(),bn=s._free=h=>(bn=s._free=wt.hb)(h),ks=s._malloc=h=>(ks=s._malloc=wt.ib)(h),Xs=(h,_,M,k,D,Q)=>(Xs=wt.lb)(h,_,M,k,D,Q),Gi=()=>(Gi=wt.mb)(),qi=(h,_,M,k,D)=>(qi=wt.nb)(h,_,M,k,D),Js=h=>(Js=wt.ob)(h),yi=h=>(yi=wt.pb)(h),Hi=(h,_)=>(Hi=wt.qb)(h,_),bi=()=>(bi=wt.rb)(),Ys=(h,_)=>(Ys=wt.sb)(h,_),Is=h=>(Is=wt.tb)(h),As=h=>(As=wt.ub)(h),vi=()=>(vi=wt.vb)(),Ki=s.dynCall_ii=(h,_)=>(Ki=s.dynCall_ii=wt.wb)(h,_),xi=h=>(xi=wt.xb)(h),Qi=()=>(Qi=wt.yb)(),Xi=h=>(Xi=wt.zb)(h),$i=()=>($i=wt.Ab)();return s.stackSave=()=>vi(),s.stackRestore=h=>Is(h),s.stackAlloc=h=>As(h),s.setValue=function(h,_,M="i8"){switch(M.endsWith("*")&&(M="*"),M){case"i1":case"i8":F()[h>>>0]=_;break;case"i16":re()[h>>>1>>>0]=_;break;case"i32":J()[h>>>2>>>0]=_;break;case"i64":K[h>>>3]=BigInt(_);break;case"float":je()[h>>>2>>>0]=_;break;case"double":Ge()[h>>>3>>>0]=_;break;case"*":we()[h>>>2>>>0]=_;break;default:Ie(`invalid type for setValue: ${M}`)}},s.getValue=function(h,_="i8"){switch(_.endsWith("*")&&(_="*"),_){case"i1":case"i8":return F()[h>>>0];case"i16":return re()[h>>>1>>>0];case"i32":return J()[h>>>2>>>0];case"i64":return K[h>>>3];case"float":return je()[h>>>2>>>0];case"double":return Ge()[h>>>3>>>0];case"*":return we()[h>>>2>>>0];default:Ie(`invalid type for getValue: ${_}`)}},s.UTF8ToString=Ot,s.stringToUTF8=ee,s.lengthBytesUTF8=G,function h(){if(0<Oe)Se=h;else if(u)n(s),H();else{for(;0<Je.length;)Je.shift()(s);0<Oe?Se=h:(s.calledRun=!0,pe||(H(),n(s)))}}(),s.PTR_SIZE=4,a}),Rm=id,Nm=(t=(e=globalThis.self)==null?void 0:e.name)==null?void 0:t.startsWith("em-pthread"),Nm&&id()}),ad,od,jm,Fn,Um,Pl,Wm,Vm,ld,Gm,ud,qm,dd,Hm,cd=Ke(()=>{td(),ad=typeof location>"u"?void 0:location.origin,od=self.location.href>"file:"&&self.location.href<"file;",jm=()=>{{if(od){let e=URL;return new URL(new e("ort.bundle.min.mjs",self.location.href).href,ad).href}return self.location.href}},Fn=jm(),Um=()=>{if(Fn&&!Fn.startsWith("blob:"))return Fn.substring(0,Fn.lastIndexOf("/")+1)},Pl=(e,t)=>{try{let r=t??Fn;return(r?new URL(e,r):new URL(e)).origin===ad}catch{return!1}},Wm=(e,t)=>{let r=t??Fn;try{return(r?new URL(e,r):new URL(e)).href}catch{return}},Vm=(e,t)=>`${t??"./"}${e}`,ld=async e=>{let t=await(await fetch(e,{credentials:"same-origin"})).blob();return URL.createObjectURL(t)},Gm=async e=>(await import(e)).default,ud=(c3(),Oo(Fm)).default,qm=async()=>{if(!Fn)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(Pl(Fn))return[void 0,ud()];let e=await ld(Fn);return[e,ud(e)]},dd=(p3(),Oo(Lm)).default,Hm=async(e,t,r)=>{if(!e&&!t&&dd&&Fn&&Pl(Fn))return[void 0,dd];{let n="ort-wasm-simd-threaded.jsep.mjs",i=e??Wm(n,t),s=r&&i&&!Pl(i,t),a=s?await ld(i):i??Vm(n,t);return[s?a:void 0,await Gm(a)]}}}),pd,Cl,Bo,hd,Km,Qm,Xm,fd,vr,ra=Ke(()=>{cd(),Cl=!1,Bo=!1,hd=!1,Km=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},Qm=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Xm=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,19,1,17,0,65,1,253,15,65,2,253,15,65,3,253,15,253,147,2,11]))}catch{return!1}},fd=async e=>{if(Cl)return Promise.resolve();if(Bo)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(hd)throw new Error("previous call to 'initializeWebAssembly()' failed.");Bo=!0;let t=e.initTimeout,r=e.numThreads;if(e.simd!==!1){if(e.simd==="relaxed"){if(!Xm())throw new Error("Relaxed WebAssembly SIMD is not supported in the current environment.")}else if(!Qm())throw new Error("WebAssembly SIMD is not supported in the current environment.")}let n=Km();r>1&&!n&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+r+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),e.numThreads=r=1);let i=e.wasmPaths,s=typeof i=="string"?i:void 0,a=i==null?void 0:i.mjs,o=(a==null?void 0:a.href)??a,l=i==null?void 0:i.wasm,u=(l==null?void 0:l.href)??l,d=e.wasmBinary,[c,p]=await Hm(o,s,r>1),m=!1,f=[];if(t>0&&f.push(new Promise(w=>{setTimeout(()=>{m=!0,w()},t)})),f.push(new Promise((w,C)=>{let y={numThreads:r};if(d)y.wasmBinary=d;else if(u||s)y.locateFile=g=>u??s+g;else if(o&&o.indexOf("blob:")!==0)y.locateFile=g=>new URL(g,o).href;else if(c){let g=Um();g&&(y.locateFile=P=>g+P)}p(y).then(g=>{Bo=!1,Cl=!0,pd=g,w(),c&&URL.revokeObjectURL(c)},g=>{Bo=!1,hd=!0,C(g)})})),await Promise.race(f),m)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},vr=()=>{if(Cl&&pd)return pd;throw new Error("WebAssembly is not initialized yet.")}}),os,Sl,hr,md=Ke(()=>{ra(),os=(e,t)=>{let r=vr(),n=r.lengthBytesUTF8(e)+1,i=r._malloc(n);return r.stringToUTF8(e,i,n),t.push(i),i},Sl=(e,t,r,n)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([i,s])=>{let a=t?t+i:i;if(typeof s=="object")Sl(s,a+".",r,n);else if(typeof s=="string"||typeof s=="number")n(a,s.toString());else if(typeof s=="boolean")n(a,s?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof s}`)})},hr=e=>{let t=vr(),r=t.stackSave();try{let n=t.PTR_SIZE,i=t.stackAlloc(2*n);t._OrtGetLastError(i,i+n);let s=Number(t.getValue(i,n===4?"i32":"i64")),a=t.getValue(i+n,"*"),o=a?t.UTF8ToString(a):"";throw new Error(`${e} ERROR_CODE: ${s}, ERROR_MESSAGE: ${o}`)}finally{t.stackRestore(r)}}}),Jm,h3=Ke(()=>{ra(),md(),Jm=e=>{let t=vr(),r=0,n=[],i=e||{};try{if((e==null?void 0:e.logSeverityLevel)===void 0)i.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if((e==null?void 0:e.logVerbosityLevel)===void 0)i.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);(e==null?void 0:e.terminate)===void 0&&(i.terminate=!1);let s=0;return(e==null?void 0:e.tag)!==void 0&&(s=os(e.tag,n)),r=t._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,s),r===0&&hr("Can't create run options."),(e==null?void 0:e.extra)!==void 0&&Sl(e.extra,"",new WeakSet,(a,o)=>{let l=os(a,n),u=os(o,n);t._OrtAddRunConfigEntry(r,l,u)!==0&&hr(`Can't set a run config entry: ${a} - ${o}.`)}),[r,n]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),n.forEach(a=>t._free(a)),s}}}),Ym,Zm,e_,Lo,t_,r_,f3=Ke(()=>{ra(),md(),Ym=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Zm=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},e_=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},Lo=(e,t,r,n)=>{let i=os(t,n),s=os(r,n);vr()._OrtAddSessionConfigEntry(e,i,s)!==0&&hr(`Can't set a session config entry: ${t} - ${r}.`)},t_=async(e,t,r)=>{for(let n of t){let i=typeof n=="string"?n:n.name,s=[];switch(i){case"webnn":if(i="WEBNN",typeof n!="string"){let d=n==null?void 0:n.deviceType;d&&Lo(e,"deviceType",d,r)}break;case"webgpu":if(i="JS",typeof n!="string"){let d=n;if(d!=null&&d.preferredLayout){if(d.preferredLayout!=="NCHW"&&d.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${d.preferredLayout}`);Lo(e,"preferredLayout",d.preferredLayout,r)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${i}`)}let a=os(i,r),o=s.length,l=0,u=0;if(o>0){l=vr()._malloc(o*vr().PTR_SIZE),r.push(l),u=vr()._malloc(o*vr().PTR_SIZE),r.push(u);for(let d=0;d<o;d++)vr().setValue(l+d*vr().PTR_SIZE,s[d][0],"*"),vr().setValue(u+d*vr().PTR_SIZE,s[d][1],"*")}await vr()._OrtAppendExecutionProvider(e,a,l,u,o)!==0&&hr(`Can't append execution provider: ${i}.`)}},r_=async e=>{let t=vr(),r=0,n=[],i=e||{};e_(i);try{let s=Ym(i.graphOptimizationLevel??"all"),a=Zm(i.executionMode??"sequential"),o=typeof i.logId=="string"?os(i.logId,n):0,l=i.logSeverityLevel??2;if(!Number.isInteger(l)||l<0||l>4)throw new Error(`log serverity level is not valid: ${l}`);let u=i.logVerbosityLevel??0;if(!Number.isInteger(u)||u<0||u>4)throw new Error(`log verbosity level is not valid: ${u}`);let d=typeof i.optimizedModelFilePath=="string"?os(i.optimizedModelFilePath,n):0;if(r=t._OrtCreateSessionOptions(s,!!i.enableCpuMemArena,!!i.enableMemPattern,a,!!i.enableProfiling,0,o,l,u,d),r===0&&hr("Can't create session options."),i.executionProviders&&await t_(r,i.executionProviders,n),i.enableGraphCapture!==void 0){if(typeof i.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${i.enableGraphCapture}`);Lo(r,"enableGraphCapture",i.enableGraphCapture.toString(),n)}if(i.freeDimensionOverrides)for(let[c,p]of Object.entries(i.freeDimensionOverrides)){if(typeof c!="string")throw new Error(`free dimension override name must be a string: ${c}`);if(typeof p!="number"||!Number.isInteger(p)||p<0)throw new Error(`free dimension override value must be a non-negative integer: ${p}`);let m=os(c,n);t._OrtAddFreeDimensionOverride(r,m,p)!==0&&hr(`Can't set a free dimension override: ${c} - ${p}.`)}return i.extra!==void 0&&Sl(i.extra,"",new WeakSet,(c,p)=>{Lo(r,c,p,n)}),[r,n]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r)!==0&&hr("Can't release session options."),n.forEach(a=>t._free(a)),s}}}),na,ei,sa,kl,Il,_d,gd,wd,Ct=Ke(()=>{na=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${e}`)}},ei=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${e}`)}},sa=(e,t)=>{let r=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][e],n=typeof t=="number"?t:t.reduce((i,s)=>i*s,1);return r>0?Math.ceil(n*r):void 0},kl=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Il=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},_d=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",gd=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint64"||e==="int8"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",wd=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;case"ml-tensor":return 5;default:throw new Error(`unsupported data location: ${e}`)}}}),yd,n_=Ke(()=>{td(),yd=async e=>{if(typeof e=="string"){let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),n=r?parseInt(r,10):0;if(n<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let i=t.body.getReader(),s;try{s=new ArrayBuffer(n)}catch(o){if(o instanceof RangeError){let l=Math.ceil(n/65536);s=new WebAssembly.Memory({initial:l,maximum:l}).buffer}else throw o}let a=0;for(;;){let{done:o,value:l}=await i.read();if(o)break;let u=l.byteLength;new Uint8Array(s,a,u).set(l),a+=u}return new Uint8Array(s,0,n)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}}),s_,i_,a_,o_,bd,l_,Yt,ti=Ke(()=>{Ct(),s_=["V","I","W","E","F"],i_=(e,t)=>{console.log(`[${s_[e]},${new Date().toISOString()}]${t}`)},bd=(e,t)=>{a_=e,o_=t},l_=(e,t)=>{let r=Il(e),n=Il(a_);r>=n&&i_(r,typeof t=="function"?t():t)},Yt=(...e)=>{o_&&l_(...e)}}),u_,Ka,Pe,Al,d_,c_,p_,Rt=Ke(()=>{u_=class{static calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]}},Ka=class{static calcShape(e,t,r=!1){let n=e.length,i=t.length;if(n===0)return t;if(i===0)return e;let s=Math.max(e.length,t.length),a=new Array(s);if(r){if(n<2||i<2)return;let o=u_.calcMatMulShape([e[n-2],e[n-1]],[t[i-2],t[i-1]]);if(o===void 0)return;[a[s-2],a[s-1]]=o}for(let o=r?3:1;o<=s;o++){let l=n-o<0?1:e[n-o],u=i-o<0?1:t[i-o];if(l!==u&&l>1&&u>1)return;let d=Math.max(l,u);if(l&&u)a[s-o]=Math.max(l,u);else{if(d>1)return;a[s-o]=0}}return a}static isValidBroadcast(e,t){let r=e.length,n=t.length;if(r>n)return!1;for(let i=1;i<=r;i++)if(e[r-i]!==1&&e[r-i]!==t[n-i])return!1;return!0}},Pe=class Wu{static size(t){return Wu.getSizeFromDimensionRange(t,0,t.length)}static convertShape(t,r=4){let n=t.length;if(n===0)return[];let i=new Array(n),s=n-1;for(;s>=0;){if(t[s]%r===0){i[s]=t[s]/r;break}if(r%t[s]!==0)throw new Error("cannot convert shape");i[s]=1,r/=t[s],s--}for(s--;s>=0;s--)i[s]=t[s];return i}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return Wu.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return Wu.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,n){let i=1;for(let s=r;s<n;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");i*=Number(t[s])}return i}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let n=new Array(r);n[r-1]=1,n[r-2]=t[r-1];for(let i=r-3;i>=0;--i)n[i]=n[i+1]*t[i+1];return n}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(n=>this.normalizeAxis(n,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(n=>t[n]):t.slice().reverse()}static padShape(t,r){let n=t.length;return t.map((i,s)=>i+r[s]+r[s+n])}static areEqual(t,r){return t.length!==r.length?!1:t.every((n,i)=>n===r[i])}},Al=class yl{static adjustPoolAttributes(t,r,n,i,s,a){if(!t&&n.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let o=0;o<r.length-2;o++)o>=n.length?n.push(r[o+2]):n[o]=r[o+2];for(let o=0;o<n.length;o++)if(o<i.length){if(i[o]<0)throw new Error("strides should be greater than or equal to 1")}else i.push(1);for(let o=0;o<n.length;o++)if(o<s.length){if(s[o]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let o=0;o<n.length*2;o++)if(o<a.length){if(a[o]<0)throw new Error("pad should be greater than or equal to 1")}else a.push(0);for(let o=0;o<n.length;o++){if(n[o]<=0)throw new Error("kernel shapes need to be greater than 0");if(a[o]>=n[o]||a[o+n.length]>=n[o])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,n,i,s,a,o){if(o){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(i.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let l=0;l<t.length-2;l++)yl.adjustPadAndReturnShape(t[l+(a?1:2)],r[l],n[l],i[l],s,l,l+t.length-2,o)}}static computePoolOutputShape(t,r,n,i,s,a,o){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let l=[r[0],r[1]];return yl.computeShapeHelper(t,r,l,n,i,s,a,o),l}static computeConvOutputShape(t,r,n,i,s,a,o){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let l=[t[0],r[0]];return yl.computeShapeHelper(!1,t,l,n,i,s,a,o),l}static computeShapeHelper(t,r,n,i,s,a,o,l){if(t)for(let u=0;u<r.length-2;u++)n.push(1);else for(let u=0;u<r.length-2;u++)n.push(yl.adjustPadAndReturnShape(r[u+2],i[u],s[u],a[u],o,u,u+r.length-2,l))}static adjustPadAndReturnShape(t,r,n,i,s,a,o,l){let u=n*(i-1)+1;if(l&&l!=="NOTSET")switch(l){case"VALID":return s[a]=0,s[o]=0,Math.floor((t-u)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(n!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let d=((t+r-1)/r-1)*r+i-t;return s[a]=Math.floor(l==="SAME_LOWER"?(d+1)/2:d/2),s[o]=d-s[a],Math.floor((t+d-i)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[a]+s[o]-u)/r+1)}},d_=class{static getShapeOfGemmResult(e,t,r,n,i){if(e.length!==2||r.length!==2)throw new Error("shape need to be of size 2");let s,a,o;t?(s=e[1],a=e[0]):(s=e[0],a=e[1]);let l=-1;if(n?(o=r[0],l=1):(o=r[1],l=0),r[l]!==a)throw new Error("dimension mismatch");if(s<=0||o<=0||a<=0)throw new Error("invalid shape specified");if(i&&!Ka.isValidBroadcast(i,[s,o]))throw new Error("gemm: invalid bias shape for broadcast");return[s,o,a]}},c_=-34028234663852886e22,p_=34028234663852886e22}),vd,h_=Ke(()=>{Ct(),vd=(e,t)=>new(kl(t))(e)}),xd,$d,Md,f_,Td,m_,Ed,Pd,Cd,__,g_,m3=Ke(()=>{Ct(),ti(),xd=new Map([["float32",32],["float16",16],["int32",32],["uint32",32],["int64",64],["uint64",64],["int8",8],["uint8",8],["int4",4],["uint4",4]]),$d=(e,t)=>{if(t==="int32")return e;let r=xd.get(t);if(!r)throw new Error(`WebNN backend does not support data type: ${t}`);let n=r/8;if(e.byteLength%n!==0)throw new Error(`Invalid Uint8Array length - must be a multiple of ${n}.`);let i=e.byteLength/n,s=new(kl(t))(e.buffer,e.byteOffset,i);switch(t){case"int64":case"uint64":{let a=new Int32Array(i);for(let o=0;o<i;o++){let l=s[o];if(l>2147483647n||l<-2147483648n)throw new Error("Can not convert int64 data to int32 - value out of range.");a[o]=Number(l)}return new Uint8Array(a.buffer)}case"int8":case"uint8":case"uint32":{if(t==="uint32"&&s.some(o=>o>2147483647))throw new Error("Can not convert uint32 data to int32 - value out of range.");let a=Int32Array.from(s,Number);return new Uint8Array(a.buffer)}default:throw new Error(`Unsupported data conversion from ${t} to 'int32'`)}},Md=(e,t)=>{if(t==="int32")return e;if(e.byteLength%4!==0)throw new Error("Invalid Uint8Array length - must be a multiple of 4 (int32).");let r=e.byteLength/4,n=new Int32Array(e.buffer,e.byteOffset,r);switch(t){case"int64":{let i=BigInt64Array.from(n,BigInt);return new Uint8Array(i.buffer)}case"uint64":{if(n.some(s=>s<0))throw new Error("Can not convert int32 data to uin64 - negative value found.");let i=BigUint64Array.from(n,BigInt);return new Uint8Array(i.buffer)}case"int8":{if(n.some(s=>s<-128||s>127))throw new Error("Can not convert int32 data to int8 - value out of range.");let i=Int8Array.from(n,Number);return new Uint8Array(i.buffer)}case"uint8":{if(n.some(i=>i<0||i>255))throw new Error("Can not convert int32 data to uint8 - value out of range.");return Uint8Array.from(n,Number)}case"uint32":{if(n.some(s=>s<0))throw new Error("Can not convert int32 data to uint32 - negative value found.");let i=Uint32Array.from(n,Number);return new Uint8Array(i.buffer)}default:throw new Error(`Unsupported data conversion from 'int32' to ${t}`)}},f_=1,Td=()=>f_++,m_=new Map([["int8","int32"],["uint8","int32"],["uint32","int32"],["int64","int32"]]),Ed=(e,t)=>{let r=xd.get(e);if(!r)throw new Error(`WebNN backend does not support data type: ${e}`);return t.length>0?Math.ceil(t.reduce((n,i)=>n*i)*r/8):0},Pd=class{constructor(e){this.isDataConverted=!1;let{sessionId:t,context:r,tensor:n,dataType:i,shape:s,fallbackDataType:a}=e;this.sessionId=t,this.mlContext=r,this.mlTensor=n,this.dataType=i,this.tensorShape=s,this.fallbackDataType=a}get tensor(){return this.mlTensor}get type(){return this.dataType}get fallbackType(){return this.fallbackDataType}get shape(){return this.tensorShape}get byteLength(){return Ed(this.dataType,this.tensorShape)}destroy(){Yt("verbose",()=>"[WebNN] TensorWrapper.destroy"),this.mlTensor.destroy()}write(e){this.mlContext.writeTensor(this.mlTensor,e)}async read(e){if(this.fallbackDataType){let t=await this.mlContext.readTensor(this.mlTensor),r=Md(new Uint8Array(t),this.dataType);if(e){(e instanceof ArrayBuffer?new Uint8Array(e):new Uint8Array(e.buffer,e.byteOffset,e.byteLength)).set(r);return}else return r.buffer}else return e?this.mlContext.readTensor(this.mlTensor,e):this.mlContext.readTensor(this.mlTensor)}canReuseTensor(e,t,r){return this.mlContext===e&&this.dataType===t&&this.tensorShape.length===r.length&&this.tensorShape.every((n,i)=>n===r[i])}setIsDataConverted(e){this.isDataConverted=e}},Cd=class{constructor(e,t){this.tensorManager=e,this.wrapper=t}get tensorWrapper(){return this.wrapper}releaseTensor(){this.tensorWrapper&&(this.tensorManager.releaseTensor(this.tensorWrapper),this.wrapper=void 0)}async ensureTensor(e,t,r,n){let i=this.tensorManager.getMLContext(e),s;if(!i.opSupportLimits().input.dataTypes.includes(t)){if(s=m_.get(t),!s||!i.opSupportLimits().input.dataTypes.includes(s))throw new Error(`WebNN backend does not support data type: ${t}`);Yt("verbose",()=>`[WebNN] TensorIdTracker.ensureTensor: fallback dataType from ${t} to ${s}`)}if(this.wrapper){if(this.wrapper.canReuseTensor(i,t,r))return this.wrapper.tensor;if(n){if(this.wrapper.byteLength!==Ed(t,r))throw new Error("Unable to copy data to tensor with different size.");this.activeUpload=new Uint8Array(await this.wrapper.read())}this.tensorManager.releaseTensor(this.wrapper)}let a=typeof MLTensorUsage>"u"?void 0:MLTensorUsage.READ|MLTensorUsage.WRITE;return this.wrapper=await this.tensorManager.getCachedTensor(e,t,r,a,!0,!0,s),n&&this.activeUpload&&(this.wrapper.write(this.activeUpload),this.activeUpload=void 0),this.wrapper.tensor}upload(e){let t=e;if(this.wrapper){if(this.wrapper.fallbackType)if(this.wrapper.fallbackType==="int32")t=$d(e,this.wrapper.type),this.wrapper.setIsDataConverted(!0);else throw new Error(`Unsupported fallback data type: ${this.wrapper.fallbackType}`);if(e.byteLength===this.wrapper.byteLength){this.wrapper.write(t);return}else Yt("verbose",()=>"Data size does not match tensor size. Releasing tensor."),this.releaseTensor()}this.activeUpload?this.activeUpload.set(t):this.activeUpload=new Uint8Array(t)}async download(e){var t,r;if(this.activeUpload){let n=(t=this.wrapper)!=null&&t.isDataConverted?Md(this.activeUpload,(r=this.wrapper)==null?void 0:r.type):this.activeUpload;if(e){e instanceof ArrayBuffer?new Uint8Array(e).set(n):new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(n);return}else return n.buffer}if(!this.wrapper)throw new Error("Tensor has not been created.");return e?this.wrapper.read(e):this.wrapper.read()}},__=class{constructor(e){this.backend=e,this.tensorTrackersById=new Map,this.freeTensors=[],this.externalTensors=new Set}getMLContext(e){let t=this.backend.getMLContext(e);if(!t)throw new Error("MLContext not found for session.");return t}reserveTensorId(){let e=Td();return this.tensorTrackersById.set(e,new Cd(this)),e}releaseTensorId(e){let t=this.tensorTrackersById.get(e);t&&(this.tensorTrackersById.delete(e),t.tensorWrapper&&this.releaseTensor(t.tensorWrapper))}async ensureTensor(e,t,r,n,i){Yt("verbose",()=>`[WebNN] TensorManager.ensureTensor {tensorId: ${t}, dataType: ${r}, shape: ${n}, copyOld: ${i}}`);let s=this.tensorTrackersById.get(t);if(!s)throw new Error("Tensor not found.");return s.ensureTensor(e,r,n,i)}upload(e,t){let r=this.tensorTrackersById.get(e);if(!r)throw new Error("Tensor not found.");r.upload(t)}async download(e,t){Yt("verbose",()=>`[WebNN] TensorManager.download {tensorId: ${e}, dstBuffer: ${t==null?void 0:t.byteLength}}`);let r=this.tensorTrackersById.get(e);if(!r)throw new Error("Tensor not found.");return r.download(t)}releaseTensorsForSession(e){for(let t of this.freeTensors)t.sessionId===e&&t.destroy();this.freeTensors=this.freeTensors.filter(t=>t.sessionId!==e)}registerTensor(e,t,r,n){let i=this.getMLContext(e),s=Td(),a=new Pd({sessionId:e,context:i,tensor:t,dataType:r,shape:n});return this.tensorTrackersById.set(s,new Cd(this,a)),this.externalTensors.add(a),s}async getCachedTensor(e,t,r,n,i,s,a){let o=this.getMLContext(e);for(let[u,d]of this.freeTensors.entries())if(d.canReuseTensor(o,t,r)){Yt("verbose",()=>`[WebNN] Reusing tensor {dataType: ${t}, ${a?`fallbackDataType: ${a},`:""} shape: ${r}`);let c=this.freeTensors.splice(u,1)[0];return c.sessionId=e,c}Yt("verbose",()=>`[WebNN] MLContext.createTensor {dataType: ${t}, ${a?`fallbackDataType: ${a},`:""} shape: ${r}}`);let l=await o.createTensor({dataType:a??t,shape:r,dimensions:r,usage:n,writable:i,readable:s});return new Pd({sessionId:e,context:o,tensor:l,dataType:t,shape:r,fallbackDataType:a})}releaseTensor(e){this.externalTensors.has(e)&&this.externalTensors.delete(e),this.freeTensors.push(e)}},g_=(...e)=>new __(...e)}),Ro,w_,y_,_3=Ke(()=>{Ct(),ra(),h_(),m3(),ti(),Ro=new Map([[1,"float32"],[10,"float16"],[6,"int32"],[12,"uint32"],[7,"int64"],[13,"uint64"],[22,"int4"],[21,"uint4"],[3,"int8"],[2,"uint8"],[9,"uint8"]]),w_=(e,t)=>{if(e===t)return!0;if(e===void 0||t===void 0)return!1;let r=Object.keys(e).sort(),n=Object.keys(t).sort();return r.length===n.length&&r.every((i,s)=>i===n[s]&&e[i]===t[i])},y_=class{constructor(e){this.tensorManager=g_(this),this.mlContextBySessionId=new Map,this.sessionIdsByMLContext=new Map,this.mlContextCache=[],this.sessionGraphInputs=new Map,this.sessionGraphOutputs=new Map,this.temporaryGraphInputs=[],this.temporaryGraphOutputs=[],this.temporarySessionTensorIds=new Map,bd(e.logLevel,!!e.debug)}get currentSessionId(){if(this.activeSessionId===void 0)throw new Error("No active session");return this.activeSessionId}onRunStart(e){Yt("verbose",()=>`[WebNN] onRunStart {sessionId: ${e}}`),this.activeSessionId=e}onRunEnd(e){Yt("verbose",()=>`[WebNN] onRunEnd {sessionId: ${e}}`);let t=this.temporarySessionTensorIds.get(e);if(t){for(let r of t)Yt("verbose",()=>`[WebNN] releasing temporary tensor {tensorId: ${r}}`),this.tensorManager.releaseTensorId(r);this.temporarySessionTensorIds.delete(e),this.activeSessionId=void 0}}async createMLContext(e){if(e instanceof GPUDevice){let r=this.mlContextCache.findIndex(n=>n.gpuDevice===e);if(r!==-1)return this.mlContextCache[r].mlContext;{let n=await navigator.ml.createContext(e);return this.mlContextCache.push({gpuDevice:e,mlContext:n}),n}}else if(e===void 0){let r=this.mlContextCache.findIndex(n=>n.options===void 0&&n.gpuDevice===void 0);if(r!==-1)return this.mlContextCache[r].mlContext;{let n=await navigator.ml.createContext();return this.mlContextCache.push({mlContext:n}),n}}let t=this.mlContextCache.findIndex(r=>w_(r.options,e));if(t!==-1)return this.mlContextCache[t].mlContext;{let r=await navigator.ml.createContext(e);return this.mlContextCache.push({options:e,mlContext:r}),r}}registerMLContext(e,t){this.mlContextBySessionId.set(e,t);let r=this.sessionIdsByMLContext.get(t);r||(r=new Set,this.sessionIdsByMLContext.set(t,r)),r.add(e),this.temporaryGraphInputs.length>0&&(this.sessionGraphInputs.set(e,this.temporaryGraphInputs),this.temporaryGraphInputs=[]),this.temporaryGraphOutputs.length>0&&(this.sessionGraphOutputs.set(e,this.temporaryGraphOutputs),this.temporaryGraphOutputs=[])}onReleaseSession(e){this.sessionGraphInputs.delete(e),this.sessionGraphOutputs.delete(e);let t=this.mlContextBySessionId.get(e);if(!t)return;this.tensorManager.releaseTensorsForSession(e),this.mlContextBySessionId.delete(e);let r=this.sessionIdsByMLContext.get(t);if(r.delete(e),r.size===0){this.sessionIdsByMLContext.delete(t);let n=this.mlContextCache.findIndex(i=>i.mlContext===t);n!==-1&&this.mlContextCache.splice(n,1)}}getMLContext(e){return this.mlContextBySessionId.get(e)}reserveTensorId(){return this.tensorManager.reserveTensorId()}releaseTensorId(e){Yt("verbose",()=>`[WebNN] releaseTensorId {tensorId: ${e}}`),this.tensorManager.releaseTensorId(e)}async ensureTensor(e,t,r,n,i){let s=Ro.get(r);if(!s)throw new Error(`Unsupported ONNX data type: ${r}`);return this.tensorManager.ensureTensor(e??this.currentSessionId,t,s,n,i)}async createTemporaryTensor(e,t,r){Yt("verbose",()=>`[WebNN] createTemporaryTensor {onnxDataType: ${t}, shape: ${r}}`);let n=Ro.get(t);if(!n)throw new Error(`Unsupported ONNX data type: ${t}`);let i=this.tensorManager.reserveTensorId();await this.tensorManager.ensureTensor(e,i,n,r,!1);let s=this.temporarySessionTensorIds.get(e);return s?s.push(i):this.temporarySessionTensorIds.set(e,[i]),i}uploadTensor(e,t){if(!vr().shouldTransferToMLTensor)throw new Error("Trying to upload to a MLTensor while shouldTransferToMLTensor is false");Yt("verbose",()=>`[WebNN] uploadTensor {tensorId: ${e}, data: ${t.byteLength}}`),this.tensorManager.upload(e,t)}async downloadTensor(e,t){return this.tensorManager.download(e,t)}createMLTensorDownloader(e,t){return async()=>{let r=await this.tensorManager.download(e);return vd(r,t)}}registerMLTensor(e,t,r,n){let i=Ro.get(r);if(!i)throw new Error(`Unsupported ONNX data type: ${r}`);let s=this.tensorManager.registerTensor(e,t,i,n);return Yt("verbose",()=>`[WebNN] registerMLTensor {tensor: ${t}, dataType: ${i}, dimensions: ${n}} -> {tensorId: ${s}}`),s}registerMLConstant(e,t,r,n,i,s,a=!1){if(!s)throw new Error("External mounted files are not available.");let o=e;e.startsWith("./")&&(o=e.substring(2));let l=s.get(o);if(!l)throw new Error(`File with name ${o} not found in preloaded files.`);if(t+r>l.byteLength)throw new Error("Out of bounds: data offset and length exceed the external file data size.");let u=l.slice(t,t+r).buffer,d;switch(i.dataType){case"float32":d=new Float32Array(u);break;case"float16":d=typeof Float16Array<"u"&&Float16Array.from?new Float16Array(u):new Uint16Array(u);break;case"int32":d=new Int32Array(u);break;case"uint32":d=new Uint32Array(u);break;case"int64":if(a){let c=$d(new Uint8Array(u),"int64");d=new Int32Array(c.buffer),i.dataType="int32"}else d=new BigInt64Array(u);break;case"uint64":d=new BigUint64Array(u);break;case"int8":d=new Int8Array(u);break;case"int4":case"uint4":case"uint8":d=new Uint8Array(u);break;default:throw new Error(`Unsupported data type: ${i.dataType} in creating WebNN Constant from external data.`)}return Yt("verbose",()=>`[WebNN] registerMLConstant {dataType: ${i.dataType}, shape: ${i.shape}}} ${a?"(Note: it was int64 data type and registered to int32 as workaround)":""}`),n.constant(i,d)}registerGraphInput(e){this.temporaryGraphInputs.push(e)}registerGraphOutput(e){this.temporaryGraphOutputs.push(e)}isGraphInput(e,t){let r=this.sessionGraphInputs.get(e);return r?r.includes(t):!1}isGraphOutput(e,t){let r=this.sessionGraphOutputs.get(e);return r?r.includes(t):!1}isGraphInputOutputTypeSupported(e,t,r=!0){let n=this.mlContextBySessionId.get(e),i=Ro.get(na(t));return typeof i>"u"?!1:r?!!(n!=null&&n.opSupportLimits().input.dataTypes.includes(i)):!!(n!=null&&n.opSupportLimits().output.dataTypes.includes(i))}flush(){}}}),Sd=Ke(()=>{}),kd,Ol,Dl,b_,v_,Id,Ad,x_,$_,g3=Ke(()=>{ti(),Sd(),kd=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),Ol=[],Dl=e=>Math.ceil(Number(e)/16)*16,b_=e=>{for(let t=0;t<Ol.length;t++){let r=Ol[t];if(e<=r)return r}return Math.ceil(e/16)*16},v_=1,Id=()=>v_++,Ad=async(e,t,r,n)=>{let i=Dl(r),s=e.device.createBuffer({size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let a=e.getCommandEncoder();e.endComputePass(),a.copyBufferToBuffer(t,0,s,0,i),e.flush(),await s.mapAsync(GPUMapMode.READ);let o=s.getMappedRange();if(n){let l=n();return l.set(new Uint8Array(o,0,r)),l}else return new Uint8Array(o.slice(0,r))}finally{s.destroy()}},x_=class{constructor(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersPending=[],this.capturedPendingBuffers=new Map;for(let[t]of kd)Ol.push(t),this.freeBuffers.set(t,[]),this.freeUniformBuffers.set(t,[]);this.sessionCount=0}upload(e,t){let r=t.buffer,n=t.byteOffset,i=t.byteLength,s=Dl(i),a=this.storageCache.get(e);if(!a)throw new Error("gpu data for uploading does not exist");if(Number(a.originalSize)!==i)throw new Error(`inconsistent data size. gpu data size=${a.originalSize}, data size=${i}`);let o=this.backend.device.createBuffer({mappedAtCreation:!0,size:s,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),l=o.getMappedRange();new Uint8Array(l).set(new Uint8Array(r,n,i)),o.unmap();let u=this.backend.device.createCommandEncoder();u.copyBufferToBuffer(o,0,a.gpuData.buffer,0,s),this.backend.device.queue.submit([u.finish()]),o.destroy(),Yt("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${e})`)}memcpy(e,t){let r=this.storageCache.get(e);if(!r)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(t);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(r.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let i=Dl(r.originalSize),s=this.backend.getCommandEncoder();this.backend.endComputePass(),s.copyBufferToBuffer(r.gpuData.buffer,0,n.gpuData.buffer,0,i)}registerExternalBuffer(e,t,r){let n;if(r){if(n=r[0],e===r[1])return Yt("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${n}, buffer is the same, skip.`),n;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`)}else n=Id();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:e},originalSize:t}),Yt("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${n}, registered.`),n}unregisterExternalBuffer(e){e!==void 0&&(this.storageCache.delete(e),Yt("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${e}`))}create(e,t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let r=b_(e),n,i=(t&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,s=(t&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(i||s){let o=(i?this.freeBuffers:this.freeUniformBuffers).get(r);o?o.length>0?n=o.pop():n=this.backend.device.createBuffer({size:r,usage:t}):n=this.backend.device.createBuffer({size:r,usage:t})}else n=this.backend.device.createBuffer({size:r,usage:t});let a={id:Id(),type:0,buffer:n};return this.storageCache.set(a.id,{gpuData:a,originalSize:Number(e)}),Yt("verbose",()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${a.id}`),a}get(e){var t;return(t=this.storageCache.get(e))==null?void 0:t.gpuData}release(e){let t=typeof e=="bigint"?Number(e):e,r=this.storageCache.get(t);if(!r){if(this.storageCache.size===0)return 0;throw new Error("releasing data does not exist")}return Yt("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(e,t){let r=this.storageCache.get(Number(e));if(!r)throw new Error("data does not exist");await Ad(this.backend,r.gpuData.buffer,r.originalSize,t)}refreshPendingBuffers(){if(this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let e of this.buffersPending){let t=kd.get(e.size);if((e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let r=this.freeBuffers.get(e.size)||[];t===void 0||r.length>=t?e.destroy():r.push(e)}else if((e.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let r=this.freeUniformBuffers.get(e.size)||[];t===void 0||r.length>=t?e.destroy():r.push(e)}else e.destroy()}this.buffersPending=[]}else{let e=this.capturedPendingBuffers.get(this.backend.currentSessionId);e||(e=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,e));for(let t of this.buffersPending)e.push(t);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.freeUniformBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.storageCache.forEach(e=>{e.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onCreateSession(){this.sessionCount+=1}onReleaseSession(e){let t=this.capturedPendingBuffers.get(e);t&&(t.forEach(r=>{r.destroy()}),this.capturedPendingBuffers.delete(e)),this.sessionCount-=1,this.sessionCount===0&&(Yt("warning",()=>"[WebGPU] Clearing webgpu buffer cache"),this.storageCache.forEach(r=>{r.gpuData.buffer.destroy()}),this.storageCache=new Map)}},$_=(...e)=>new x_(...e)}),M_,or,Nr=Ke(()=>{M_=class{constructor(e){Object.assign(this,e)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(e=>`${this[e]}`).join(";")),this.key}},or=e=>new M_(e)}),Qa,zl,nn,xn,yt,zr,Od,Xa,Ei,_t,No,Fe,pt,T_,Dd,E_,P_,jt=Ke(()=>{Ct(),Rt(),Qa=64,zl=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(Number(e)){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];case 22:return"i32";case 21:return"u32";default:throw new Error(`Unknown data type: ${e}`)}},nn=(e,t=1)=>{let r=zl(e,t);return typeof r=="string"?r:r[0]},xn=(e,t=1)=>{let r=zl(e,t);return typeof r=="string"?r:r[1]},yt=(...e)=>{let t=[];return e.forEach(r=>{r.length!==0&&t.push({type:12,data:r},{type:12,data:Pe.computeStrides(r)})}),t},zr=e=>e%4===0?4:e%2===0?2:1,Od=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,Xa=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}<f32>(${r})`,Ei=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,_t=(e,t,r,n)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?n==="f16"?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:n==="f16"?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,No=(e,t,r,n,i)=>{let s=typeof r=="number",a=s?r:r.length,o=[...new Array(a).keys()],l=a<2?"u32":a<=4?`vec${a}<u32>`:`array<u32, ${a}>`,u=zl(t,i),d=typeof u=="string"?u:u[1],c=typeof u=="string"?u:u[0],p={indices:l,value:d,storage:c,tensor:t},m=L=>typeof L=="string"?L:`${L}u`,f={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},w=s?"uniforms.":"",C=`${w}${e}_shape`,y=`${w}${e}_strides`,g="";for(let L=0;L<a-1;L++)g+=`
    let dim${L} = current / ${_t(y,L,a)};
    let rest${L} = current % ${_t(y,L,a)};
    indices[${L}] = dim${L};
    current = rest${L};
    `;g+=`indices[${a-1}] = current;`;let P=a<2?"":`
  fn o2i_${e}(offset: u32) -> ${p.indices} {
    var indices: ${p.indices};
    var current = offset;
    ${g}
    return indices;
  }`,b=L=>(f.offsetToIndices=!0,a<2?L:`o2i_${e}(${L})`),x=[];if(a>=2)for(let L=a-1;L>=0;L--)x.push(`${_t(y,L,a)} * (indices[${L}])`);let T=a<2?"":`
  fn i2o_${e}(indices: ${p.indices}) -> u32 {
    return ${x.join("+")};
  }`,E=L=>(f.indicesToOffset=!0,a<2?L:`i2o_${e}(${L})`),S=(...L)=>a===0?"0u":`${p.indices}(${L.map(m).join(",")})`,O=(L,F)=>a<2?`${L}`:`${_t(L,F,a)}`,B=(L,F,U)=>a<2?`${L}=${U};`:`${_t(L,F,a)}=${U};`,V={},W=(L,F)=>{f.broadcastedIndicesToOffset=!0;let U=`${F.name}broadcastedIndicesTo${e}Offset`;if(U in V)return`${U}(${L})`;let re=[];for(let me=a-1;me>=0;me--){let J=F.indicesGet("outputIndices",me+F.rank-a);re.push(`${O(y,me)} * (${J} % ${O(C,me)})`)}return V[U]=`fn ${U}(outputIndices: ${F.type.indices}) -> u32 {
             return ${re.length>0?re.join("+"):"0u"};
           }`,`${U}(${L})`},N=(L,F)=>(()=>{if(p.storage===p.value)return`${e}[${L}]=${F};`;if(p.storage==="vec2<u32>"&&p.value==="i32")return`${e}[${L}]=vec2<u32>(u32(${F}), select(0u, 0xFFFFFFFFu, ${F} < 0));`;if(p.storage==="vec2<u32>"&&p.value==="u32")return`${e}[${L}]=vec2<u32>(u32(${F}), 0u);`;if(p.storage==="u32"&&p.value==="vec4<bool>")return`${e}[${L}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${F}));`;throw new Error(`not supported combination of storage type ${p.storage} and value type ${p.value} yet`)})(),te=L=>(()=>{if(p.storage===p.value)return`${e}[${L}]`;if(p.storage==="vec2<u32>"&&p.value==="i32")return`i32(${e}[${L}].x)`;if(p.storage==="vec2<u32>"&&p.value==="u32")return`u32(${e}[${L}].x)`;if(p.storage==="u32"&&p.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${L}] & 0xFFu), bool(${e}[${L}] & 0xFF00u), bool(${e}[${L}] & 0xFF0000u), bool(${e}[${L}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${p.storage} and value type ${p.value} yet`)})(),q=a<2?"":`
  fn get_${e}ByIndices(indices: ${p.indices}) -> ${d} {
    return ${te(`i2o_${e}(indices)`)};
  }`,K=a<2?"":(()=>{let L=o.map(U=>`d${U}: u32`).join(", "),F=o.map(U=>`d${U}`).join(", ");return`
  fn get_${e}(${L}) -> ${d} {
    return get_${e}ByIndices(${S(F)});
  }`})(),Y=(...L)=>{if(L.length!==a)throw new Error(`indices length must be ${a}`);let F=L.map(m).join(",");return a===0?te("0u"):a===1?te(F[0]):(f.get=!0,f.getByIndices=!0,f.indicesToOffset=!0,`get_${e}(${F})`)},Z=L=>a<2?te(L):(f.getByIndices=!0,f.indicesToOffset=!0,`get_${e}ByIndices(${L})`),de=a<2?"":`
  fn set_${e}ByIndices(indices: ${p.indices}, value: ${d}) {
    ${N(`i2o_${e}(indices)`,"value")}
  }`,pe=a<2?"":(()=>{let L=o.map(U=>`d${U}: u32`).join(", "),F=o.map(U=>`d${U}`).join(", ");return`
  fn set_${e}(${L}, value: ${d}) {
    set_${e}ByIndices(${S(F)}, value);
  }`})();return{impl:()=>{let L=[],F=!1;return f.offsetToIndices&&(L.push(P),F=!0),f.indicesToOffset&&(L.push(T),F=!0),f.broadcastedIndicesToOffset&&(Object.values(V).forEach(U=>L.push(U)),F=!0),f.set&&(L.push(pe),F=!0),f.setByIndices&&(L.push(de),F=!0),f.get&&(L.push(K),F=!0),f.getByIndices&&(L.push(q),F=!0),!s&&F&&L.unshift(`const ${C} = ${p.indices}(${r.join(",")});`,`const ${y} = ${p.indices}(${Pe.computeStrides(r).join(",")});`),L.join(`
`)},type:p,offsetToIndices:b,indicesToOffset:E,broadcastedIndicesToOffset:W,indices:S,indicesGet:O,indicesSet:B,set:(...L)=>{if(L.length!==a+1)throw new Error(`indices length must be ${a}`);let F=L[a];if(typeof F!="string")throw new Error("value must be string");let U=L.slice(0,a).map(m).join(",");return a===0?N("0u",F):a===1?N(U[0],F):(f.set=!0,f.setByIndices=!0,f.indicesToOffset=!0,`set_${e}(${U}, ${F})`)},setByOffset:N,setByIndices:(L,F)=>a<2?N(L,F):(f.setByIndices=!0,f.indicesToOffset=!0,`set_${e}ByIndices(${L}, ${F});`),get:Y,getByOffset:te,getByIndices:Z,usage:n,name:e,strides:y,shape:C,rank:a}},Fe=(e,t,r,n=1)=>No(e,t,r,"input",n),pt=(e,t,r,n=1)=>No(e,t,r,"output",n),T_=(e,t,r)=>No(e,t,r,"atomicOutput",1),Dd=(e,t,r,n=1)=>No(e,t,r,"internal",n),E_=class{constructor(e,t){this.normalizedDispatchGroup=e,this.limits=t,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${typeof e=="number"?`${e}u`:e}) { return; }`}mainStart(e=Qa){let t=typeof e=="number"?e:e[0],r=typeof e=="number"?1:e[1],n=typeof e=="number"?1:e[2];if(t>this.limits.maxComputeWorkgroupSizeX||r>this.limits.maxComputeWorkgroupSizeY||n>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${t}, ${r}, ${n}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(t*r*n>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${t}, ${r}, ${n}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let i=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,s=i?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,a=i?`let global_idx = global_id.x;
         let workgroup_index = workgroup_id.x;`:`let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
             workgroup_id.y * num_workgroups[0] + workgroup_id.x;
         let global_idx = workgroup_index * ${t*r*n}u + local_idx;`;return`@compute @workgroup_size(${t}, ${r}, ${n})
  fn main(${s}) {
    ${a}
  `}appendVariableUniforms(e){e.rank!==0&&(e.shape.startsWith("uniforms.")&&this.uniforms.push({name:e.shape.replace("uniforms.",""),type:"u32",length:e.rank}),e.strides.startsWith("uniforms.")&&this.uniforms.push({name:e.strides.replace("uniforms.",""),type:"u32",length:e.rank}))}declareVariable(e,t){if(e.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(e),this.appendVariableUniforms(e);let r=e.usage==="input"?"read":"read_write",n=e.usage==="atomicOutput"?"atomic<i32>":e.type.storage;return`@group(0) @binding(${t}) var<storage, ${r}> ${e.name}: array<${n}>;`}declareVariables(...e){return e.map(t=>this.declareVariable(t,this.variableIndex++)).join(`
`)}registerInternalVariable(e){if(e.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(e),this.appendVariableUniforms(e)}registerInternalVariables(...e){return e.forEach(t=>this.registerInternalVariable(t)),this}registerUniform(e,t,r=1){return this.uniforms.push({name:e,type:t,length:r}),this}registerUniforms(e){return this.uniforms=this.uniforms.concat(e),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let e=[];for(let{name:t,type:r,length:n}of this.uniforms)if(n&&n>4)r==="f16"?e.push(`@align(16) ${t}:array<mat2x4<${r}>, ${Math.ceil(n/8)}>`):e.push(`${t}:array<vec4<${r}>, ${Math.ceil(n/4)}>`);else{let i=n==null||n===1?r:`vec${n}<${r}>`;e.push(`${t}:${i}`)}return`
      struct Uniforms { ${e.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(e=>e.impl()).join(`
`)+this.internalVariables.map(e=>e.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let e=t=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(t)];return this.uniforms.map(t=>[e(t.type),t.length??1])}},P_=(e,t)=>new E_(e,t)}),C_,zd,S_,k_,I_,A_,Bn,O_,D_,Pi=Ke(()=>{Ct(),Rt(),Nr(),jt(),C_=(e,t)=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.");if(t.length!==0&&t.length!==e[0].dims.length)throw new Error(`perm size ${t.length} does not match input rank ${e[0].dims.length}`)},zd=(e,t)=>t.length!==0?t:[...new Array(e).keys()].reverse(),S_=(e,t)=>Pe.sortBasedOnPerm(e,zd(e.length,t)),k_=(e,t,r,n)=>{let i=`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`;for(let s=0;s<t;++s)i+=`a[${e[s]}]=i[${s}];`;return i+="return a;}"},I_=(e,t)=>{let r=[],n=[];for(let i=0;i<e.length;++i)e[i]!==1&&r.push(e[i]),e[t[i]]!==1&&n.push(t[i]);return{newShape:r,newPerm:n}},A_=(e,t)=>{let r=0;for(let n=0;n<e.length;++n)if(t[e[n]]!==1){if(e[n]<r)return!1;r=e[n]}return!0},Bn=(e,t)=>{let r=e.dataType,n=e.dims.length,i=zd(n,t),s=S_(e.dims,i),a=e.dims,o=s,l=n<2||A_(i,e.dims),u;if(l)return u=f=>{let w=Fe("input",r,a,4),C=pt("output",r,o,4);return`
  ${f.registerUniform("output_size","u32").declareVariables(w,C)}
  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    output[global_idx] = input[global_idx];
  }`},{name:"TransposeCopy",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let f=Pe.size(s);return{outputs:[{dims:s,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(f/64/4)},programUniforms:[{type:12,data:Math.ceil(f/4)}]}},getShaderSource:u};let{newShape:d,newPerm:c}=I_(e.dims,i),p=Pe.areEqual(c,[2,3,1]),m=Pe.areEqual(c,[3,1,2]);if(d.length===2||p||m){a=p?[d[0],d[1]*d[2]]:m?[d[0]*d[1],d[2]]:d,o=[a[1],a[0]];let f=16;return u=w=>{let C=Fe("a",r,a.length),y=pt("output",r,o.length);return`
  ${w.registerUniform("output_size","u32").declareVariables(C,y)}
  var<workgroup> tile : array<array<${y.type.value}, ${f+1}>, ${f}>;
  ${w.mainStart([f,f,1])}
    let stride = (uniforms.output_shape[1] - 1) / ${f} + 1;
    let workgroup_id_x = workgroup_index % stride;
    let workgroup_id_y = workgroup_index / stride;
    let input_col = workgroup_id_y * ${f}u + local_id.x;
    let input_row = workgroup_id_x * ${f}u + local_id.y;
    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {
      tile[local_id.y][local_id.x] = ${C.getByIndices(`${C.type.indices}(input_row, input_col)`)};
    }
    workgroupBarrier();

    let output_col = workgroup_id_x * ${f}u + local_id.x;
    let output_row = workgroup_id_y * ${f}u + local_id.y;
    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {
      ${y.setByIndices(`${y.type.indices}(output_row, output_col)`,"tile[local_id.x][local_id.y]")}
    }
  }`},{name:"TransposeShared",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let w=Pe.size(s);return{outputs:[{dims:s,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(o[1]/f),y:Math.ceil(o[0]/f)},programUniforms:[{type:12,data:w},...yt(a,o)]}},getShaderSource:u}}return u=f=>{let w=Fe("a",r,a.length),C=pt("output",r,o.length);return`
  ${f.registerUniform("output_size","u32").declareVariables(w,C)}

  ${k_(i,n,w,C)}

  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${C.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${C.setByOffset("global_idx",w.getByIndices("aIndices"))}
  }`},{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:()=>{let f=Pe.size(s);return{outputs:[{dims:s,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:[{type:12,data:f},...yt(a,o)]}},getShaderSource:u}},O_=(e,t)=>{C_(e.inputs,t.perm),e.compute(Bn(e.inputs[0],t.perm))},D_=e=>or({perm:e.perm})}),z_,F_,B_,L_,R_,N_,j_,U_,W_,V_,ls,G_,q_,H_,K_,Q_,X_,J_,Y_,Z_,eg,w3=Ke(()=>{Ct(),Rt(),jt(),Bd(),Pi(),z_={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},F_={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},B_={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},L_={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},R_=(e,t)=>{let r=[];for(let n=t-e;n<t;++n)r.push(n);return r},N_=(e,t)=>{let r=[],n=e.length;for(let s=0;s<n;s++)t.indexOf(s)===-1&&r.push(e[s]);let i=t.map(s=>e[s]);return[r,i]},j_=(e,t)=>{let r=e.length+t.length,n=[],i=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?n.push(e[i++]):n.push(1);return n},U_=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},W_=(e,t)=>{let r=[];if(!U_(e,t)){for(let n=0;n<t;++n)e.indexOf(n)===-1&&r.push(n);e.forEach(n=>r.push(n))}return r},V_=(e,t,r,n,i,s,a)=>{let o=r[0].dims,l=Pe.size(s),u=Pe.size(a),d=Fe("_A",r[0].dataType,o),c=pt("output",i,s),p=64;l===1&&(p=256);let m=`
          var<workgroup> aBestValues : array<f32, ${p}>;
       `,f=w=>`
        ${w.registerUniform("reduceSize","u32").declareVariables(d,c)}
        ${m}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${w.mainStart(p)}

          let outputIndex = global_idx / ${p};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${B_[n]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${p}) {
           let candidate = f32(${d.getByOffset("offset + k")});
           bestValue = ${z_[n]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${p}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${F_[n]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${c.setByOffset("outputIndex",`${n==="mean"?`${c.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${c.type.storage}(${L_[n]})`}`)};
         }
        }`;return{name:e,shaderCache:{hint:`${t};${p}`,inputDependencies:["type"]},getShaderSource:f,getRunData:()=>({outputs:[{dims:s,dataType:i}],dispatchGroup:{x:l},programUniforms:[{type:12,data:u}]})}},ls=(e,t,r,n)=>{let i=e.inputs.length===1?r:Fd(e.inputs,r),s=i.axes;s.length===0&&!i.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((m,f)=>f));let a=Pe.normalizeAxes(s,e.inputs[0].dims.length),o=a,l=e.inputs[0],u=W_(o,e.inputs[0].dims.length);u.length>0&&(l=e.compute(Bn(e.inputs[0],u),{inputs:[0],outputs:[-1]})[0],o=R_(o.length,l.dims.length));let[d,c]=N_(l.dims,o),p=d;i.keepDims&&(p=j_(d,a)),e.compute(V_(t,i.cacheKey,[l],n,e.inputs[0].dataType,p,c),{inputs:[l]})},G_=(e,t)=>{ls(e,"ReduceMeanShared",t,"mean")},q_=(e,t)=>{ls(e,"ReduceL1Shared",t,"l1")},H_=(e,t)=>{ls(e,"ReduceL2Shared",t,"l2")},K_=(e,t)=>{ls(e,"ReduceLogSumExpShared",t,"logSumExp")},Q_=(e,t)=>{ls(e,"ReduceMaxShared",t,"max")},X_=(e,t)=>{ls(e,"ReduceMinShared",t,"min")},J_=(e,t)=>{ls(e,"ReduceProdShared",t,"prod")},Y_=(e,t)=>{ls(e,"ReduceSumShared",t,"sum")},Z_=(e,t)=>{ls(e,"ReduceSumSquareShared",t,"sumSquare")},eg=(e,t)=>{ls(e,"ReduceLogSumShared",t,"logSum")}}),us,tg,Fl,Fd,ds,rg,ng,sg,ig,ag,og,lg,ug,dg,cg,cs,pg,hg,fg,mg,_g,gg,wg,yg,bg,vg,Bd=Ke(()=>{Ct(),Rt(),Nr(),jt(),w3(),us=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},tg=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],Fl=(e,t,r,n,i,s,a=!1,o=!1)=>{let l=[],u=r[0].dims,d=u.length,c=Pe.normalizeAxes(i,d),p=!o&&c.length===0;u.forEach((w,C)=>{p||c.indexOf(C)>=0?a&&l.push(1):l.push(w)});let m=l.length,f=Pe.size(l);return{name:e,shaderCache:t,getShaderSource:w=>{let C=[],y=Fe("_A",r[0].dataType,d),g=pt("output",s,m),P=n(y,g,c),b=P[2];for(let x=0,T=0;x<d;x++)p||c.indexOf(x)>=0?(a&&T++,b=`for(var j${x}: u32 = 0; j${x} < ${u[x]}; j${x}++) {
                  ${P[2].includes("last_index")?`let last_index = j${x};`:""}
                  ${y.indicesSet("input_indices",x,`j${x}`)}
                  ${b}
                }`):(C.push(`${y.indicesSet("input_indices",x,g.indicesGet("output_indices",T))};`),T++);return`

        ${w.registerUniform("output_size","u32").declareVariables(y,g)}

        ${w.mainStart()}
          ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${y.type.indices};
          let output_indices = ${g.offsetToIndices("global_idx")};

          ${C.join(`
`)}
          ${P[0]}       // init ops for reduce max/min
          ${P[1]}
          ${b}
          ${P[3]}
          ${P.length===4?g.setByOffset("global_idx","value"):P.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:l,dataType:s}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:[{type:12,data:f},...yt(u,l)]})}},Fd=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),or({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},ds=(e,t,r,n)=>{let i=e.inputs,s=i.length===1?r:Fd(i,r);e.compute(Fl(t,{hint:s.cacheKey,inputDependencies:["rank"]},[i[0]],s.noopWithEmptyAxes&&s.axes.length===0?tg:n,s.axes,i[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},rg=(e,t)=>{us(e.inputs),ds(e,"ReduceLogSum",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${r.getByIndices("input_indices")};`,"value = log(value);"])},ng=(e,t)=>{us(e.inputs),ds(e,"ReduceL1",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${r.getByIndices("input_indices")});`,""])},sg=(e,t)=>{us(e.inputs),ds(e,"ReduceL2",t,(r,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${r.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},ig=(e,t)=>{us(e.inputs),ds(e,"ReduceLogSumExp",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${r.getByIndices("input_indices")});`,"value = log(value);"])},ag=(e,t)=>{us(e.inputs),ds(e,"ReduceMax",t,(r,n,i)=>{let s=[];for(let a=0;a<r.rank;a++)(i.indexOf(a)>=0||i.length===0)&&s.push(r.indicesSet("input_indices",a,0));return[`${s.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};`,`value = max(value, ${r.getByIndices("input_indices")});`,""]})},og=(e,t)=>{us(e.inputs),ds(e,"ReduceMean",t,(r,n,i)=>{let s=1;for(let a=0;a<r.rank;a++)(i.indexOf(a)>=0||i.length===0)&&(s*=e.inputs[0].dims[a]);return["var sum = f32(0);","",`sum += f32(${r.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${s});`]})},lg=(e,t)=>{us(e.inputs),ds(e,"ReduceMin",t,(r,n,i)=>{let s=[];for(let a=0;a<r.rank;a++)(i.indexOf(a)>=0||i.length===0)&&s.push(`input_indices[${a}] = 0;`);return[`${s.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};`,`value = min(value, ${r.getByIndices("input_indices")});`,""]})},ug=(e,t)=>{us(e.inputs),ds(e,"ReduceProd",t,(r,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${r.getByIndices("input_indices")};`,""])},dg=(e,t)=>{us(e.inputs),ds(e,"ReduceSum",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${r.getByIndices("input_indices")};`,""])},cg=(e,t)=>{us(e.inputs),ds(e,"ReduceSumSquare",t,(r,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${r.getByIndices("input_indices")}; value += t * t;`,""])},cs=(e,t,r)=>{if(t.length===0)return r;let n=1,i=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?n*=e[s]:i*=e[s];return i<32&&n>1024},pg=(e,t)=>{cs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?og(e,t):G_(e,t)},hg=(e,t)=>{cs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?ng(e,t):q_(e,t)},fg=(e,t)=>{cs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?sg(e,t):H_(e,t)},mg=(e,t)=>{cs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?ig(e,t):K_(e,t)},_g=(e,t)=>{cs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?ag(e,t):Q_(e,t)},gg=(e,t)=>{cs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?lg(e,t):X_(e,t)},wg=(e,t)=>{cs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?ug(e,t):J_(e,t)},yg=(e,t)=>{cs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?dg(e,t):Y_(e,t)},bg=(e,t)=>{cs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?cg(e,t):Z_(e,t)},vg=(e,t)=>{cs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?rg(e,t):eg(e,t)}}),Ld,xg,$g,Rd,y3=Ke(()=>{Ct(),Nr(),Bd(),Ld=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},xg=(e,t)=>{Ld(e.inputs);let r=(n,i,s)=>{let a=[];for(let o=0;o<n.rank;o++)(s.indexOf(o)>=0||s.length===0)&&a.push(`input_indices[${o}] = 0;`);return[`${a.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",i.setByOffset("global_idx","best_index")]};e.compute(Fl("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},$g=(e,t)=>{Ld(e.inputs);let r=(n,i,s)=>{let a=[];for(let o=0;o<n.rank;o++)(s.indexOf(o)>=0||s.length===0)&&a.push(`input_indices[${o}] = 0;`);return[`${a.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",i.setByOffset("global_idx","best_index")]};e.compute(Fl("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Rd=e=>or(e)}),Mg,Bl,Tg,Eg,Pg,jo,Cg,Sg,Nd=Ke(()=>{Ct(),Rt(),Sd(),jt(),Mg=(e,t)=>{let r=e[0],n=e[1],i=e[2],s=e[3],a=e[4],o=e[5];if(a&&o)throw new Error("Attention cannot have both past and attention_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let l=r.dims[0],u=r.dims[1],d=r.dims[2];if(i.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(n.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(n.dims[0]!==d)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(i.dims[0]!==n.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let c=i.dims[0]/3,p=c,m=p;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let P of t.qkvHiddenSizes)if(P%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");c=t.qkvHiddenSizes[0],p=t.qkvHiddenSizes[1],m=t.qkvHiddenSizes[2]}let f=u;if(c!==p)throw new Error("qkv_hidden_sizes first element should be same as the second");if(i.dims[0]!==c+p+m)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let w=0;if(a){if(p!==m)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(a.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(a.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(a.dims[1]!==l)throw new Error('Input "past" second dimension must be batch_size');if(a.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(a.dims[4]!==p/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(w=a.dims[3])}let C=f+w,y=-1,g=0;if(s)throw new Error("Mask not supported");if(a)throw new Error("past is not supported");if(o){if(o.dims.length!==4)throw new Error('Input "attention_bias" must have 4 dimensions');if(o.dims[0]!==l||o.dims[1]!==t.numHeads||o.dims[2]!==u||o.dims[3]!==C)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:l,sequenceLength:u,pastSequenceLength:w,kvSequenceLength:f,totalSequenceLength:C,maxSequenceLength:y,inputHiddenSize:d,hiddenSize:c,vHiddenSize:m,headSize:Math.floor(c/t.numHeads),vHeadSize:Math.floor(m/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:g,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Bl=(e,t,r)=>t&&e?`
      let total_sequence_length_input = u32(${t.getByOffset("0")});
      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);
      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;
      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;
      total_sequence_length = u32(${e==null?void 0:e.getByOffset("batchIdx")}) + 1;
      var past_sequence_length: u32 = 0;
      if (is_first_prompt == false) {
        past_sequence_length = total_sequence_length - sequence_length;
      }
       `:`
    ${r?"let past_sequence_length = uniforms.past_sequence_length":""};
    let present_sequence_length = total_sequence_length;
    `,Tg=(e,t,r,n,i,s,a,o)=>{let l=zr(a?1:s),u=64,d=s/l;d<u&&(u=32);let c=Math.ceil(s/l/u),p=[{type:12,data:t},{type:12,data:r},{type:12,data:n},{type:12,data:i},{type:12,data:d},{type:12,data:c}],m=nn(e.dataType,l),f=xn(1,l),w=["type"];a&&w.push("type"),o&&w.push("type");let C=y=>{let g=pt("x",e.dataType,e.dims,l),P=[g],b=a?Fe("seq_lens",a.dataType,a.dims):void 0;b&&P.push(b);let x=o?Fe("total_sequence_length_input",o.dataType,o.dims):void 0;x&&P.push(x);let T=xn(e.dataType),E=[{name:"batch_size",type:"u32"},{name:"num_heads",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"sequence_length",type:"u32"},{name:"total_sequence_length",type:"u32"},{name:"elements_per_thread",type:"u32"}];return`
  var<workgroup> thread_max: array<f32, ${u}>;
  var<workgroup> thread_sum: array<f32, ${u}>;
  ${y.registerUniforms(E).declareVariables(...P)}
  ${y.mainStart([u,1,1])}
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let sequence_length = uniforms.sequence_length;
    var total_sequence_length = uniforms.total_sequence_length;
    ${Bl(b,x,!1)}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = (global_idx / ${u}) * uniforms.total_sequence_length + local_offset;
    let seq_causal_length = ${a?"u32(past_sequence_length + workgroup_id.y + 1)":"total_sequence_length"};
    var thread_max_vector = ${f}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      thread_max_vector = max(${f}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(()=>{switch(l){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${l}`)}})()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${u}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${f}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      sum_vector += exp(${f}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(()=>{switch(l){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${l}`)}})()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${u}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        x[offset + i] = ${g.type.value}(${T}(1.0) / ${T}(seq_causal_length));
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        var f32input = ${f}(x[offset + i]);
        x[offset + i] = ${g.type.value}(exp(f32input - max_value) / sum);
      }
    }
      ${a?`
        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {
          x[offset + total_seq_id] = ${g.type.value}(${T}(0));
        }`:""};
  }`};return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${u};${m};${l}`,inputDependencies:w},getShaderSource:C,getRunData:()=>({outputs:[],dispatchGroup:{x:1,y:i,z:t*r},programUniforms:p})}},Eg=(e,t,r,n,i,s,a,o,l)=>{let u=a+s.kvSequenceLength,d=[s.batchSize,s.numHeads,s.sequenceLength,u],c=e>1&&n,p=s.kvNumHeads?s.kvNumHeads:s.numHeads,m=c?[s.batchSize,p,u,s.headSize]:void 0,f=s.nReps?s.nReps:1,w=s.scale===0?1/Math.sqrt(s.headSize):s.scale,C=zr(s.headSize),y=s.headSize/C,g=12,P={x:Math.ceil(u/g),y:Math.ceil(s.sequenceLength/g),z:s.batchSize*s.numHeads},b=[{type:12,data:s.sequenceLength},{type:12,data:y},{type:12,data:u},{type:12,data:s.numHeads},{type:12,data:s.headSize},{type:1,data:w},{type:12,data:a},{type:12,data:s.kvSequenceLength},{type:12,data:f}],x=c&&n&&Pe.size(n.dims)>0,T=["type","type"];x&&T.push("type"),i&&T.push("type"),o&&T.push("type"),l&&T.push("type");let E=[{dims:d,dataType:t.dataType,gpuDataType:0}];c&&E.push({dims:m,dataType:t.dataType,gpuDataType:0});let S=O=>{let B=Fe("q",t.dataType,t.dims,C),V=Fe("key",r.dataType,r.dims,C),W=[B,V];if(x){let de=Fe("past_key",n.dataType,n.dims,C);W.push(de)}i&&W.push(Fe("attention_bias",i.dataType,i.dims));let N=o?Fe("seq_lens",o.dataType,o.dims):void 0;N&&W.push(N);let te=l?Fe("total_sequence_length_input",l.dataType,l.dims):void 0;te&&W.push(te);let q=pt("output",t.dataType,d),K=[q];c&&K.push(pt("present_key",t.dataType,m,C));let Y=xn(1,C),Z=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${g}u;

  var<workgroup> tileQ: array<${B.type.storage}, ${g*g}>;
  var<workgroup> tileK: array<${B.type.storage}, ${g*g}>;
  ${O.registerUniforms(Z).declareVariables(...W,...K)}
  ${O.mainStart([g,g,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let kvHeadIdx = ${f===1?"headIdx":"headIdx / uniforms.n_reps"};
    let kv_num_heads = ${f===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let sequence_length = uniforms.M;
    var total_sequence_length = uniforms.N;
    ${Bl(N,te,!0)}
    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;
    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
    ${x&&c?"let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;":""};
    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;
    ${c?"let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;":""}
    var value = ${Y}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${x&&c?`
              if (n + local_id.y < past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];
              }`:`
          if (n + local_id.y < uniforms.kv_sequence_length) {
            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
          }`}
      ${c?`if (n + local_id.y < present_sequence_length) {
        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];
      }`:""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
          value += ${Y}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {
      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(()=>{switch(C){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${C}`)}})()};
        output[outputIdx] = ${q.type.value} (sum * uniforms.alpha) + ${i?"attention_bias[outputIdx]":"0.0"};
    }
  }`};return{name:"AttentionProbs",shaderCache:{hint:`${C};${i!==void 0};${n!==void 0};${e}`,inputDependencies:T},getRunData:()=>({outputs:E,dispatchGroup:P,programUniforms:b}),getShaderSource:S}},Pg=(e,t,r,n,i,s,a=void 0,o=void 0)=>{let l=s+i.kvSequenceLength,u=i.nReps?i.nReps:1,d=i.vHiddenSize*u,c=e>1&&n,p=i.kvNumHeads?i.kvNumHeads:i.numHeads,m=c?[i.batchSize,p,l,i.headSize]:void 0,f=[i.batchSize,i.sequenceLength,d],w=12,C={x:Math.ceil(i.vHeadSize/w),y:Math.ceil(i.sequenceLength/w),z:i.batchSize*i.numHeads},y=[{type:12,data:i.sequenceLength},{type:12,data:l},{type:12,data:i.vHeadSize},{type:12,data:i.numHeads},{type:12,data:i.headSize},{type:12,data:d},{type:12,data:s},{type:12,data:i.kvSequenceLength},{type:12,data:u}],g=c&&n&&Pe.size(n.dims)>0,P=["type","type"];g&&P.push("type"),a&&P.push("type"),o&&P.push("type");let b=[{dims:f,dataType:t.dataType,gpuDataType:0}];c&&b.push({dims:m,dataType:t.dataType,gpuDataType:0});let x=T=>{let E=Fe("probs",t.dataType,t.dims),S=Fe("v",r.dataType,r.dims),O=[E,S];g&&O.push(Fe("past_value",n.dataType,n.dims));let B=a?Fe("seq_lens",a.dataType,a.dims):void 0;a&&O.push(B);let V=o?Fe("total_sequence_length_input",o.dataType,o.dims):void 0;o&&O.push(V);let W=[pt("output",t.dataType,f)];c&&W.push(pt("present_value",t.dataType,m));let N=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${w}u;
  var<workgroup> tileQ: array<${E.type.value}, ${w*w}>;
  var<workgroup> tileV: array<${E.type.value}, ${w*w}>;
  ${T.registerUniforms(N).declareVariables(...O,...W)}
  ${T.mainStart([w,w,1])}
   let headIdx = workgroup_id.z % uniforms.num_heads;
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let kvHeadIdx = ${u===1?"headIdx":"headIdx / uniforms.n_reps"};
   let kv_num_heads = ${u===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
   let m = global_id.y;
   let n = global_id.x;
   let sequence_length = uniforms.M;
   var total_sequence_length = uniforms.K;
   ${Bl(B,V,!0)}
   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch
   ${g&&c?"let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;":""};
   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;
   ${c?"let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;":""}
   var value = ${E.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${g&&c?`
        if (w + local_id.y < past_sequence_length) {
          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];
        }
      `:`
            if (w + local_id.y < uniforms.kv_sequence_length) {
              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];
            }`}
        ${c?`
            if (w + local_id.y < present_sequence_length) {
          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];
        }`:""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + headIdx * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return{name:"AttentionScore",shaderCache:{hint:`${n!==void 0};${e}`,inputDependencies:P},getRunData:()=>({outputs:b,dispatchGroup:C,programUniforms:y}),getShaderSource:x}},jo=(e,t,r,n,i,s,a,o,l,u,d=void 0,c=void 0)=>{let p=Math.min(e.outputCount,1+(a?1:0)+(o?1:0)),m=p>1?u.pastSequenceLength:0,f=m+u.kvSequenceLength,w=l&&Pe.size(l.dims)>0?l:void 0,C=[t,r];p>1&&a&&Pe.size(a.dims)>0&&C.push(a),w&&C.push(w),d&&C.push(d),c&&C.push(c);let y=e.compute(Eg(p,t,r,a,w,u,m,d,c),{inputs:C,outputs:p>1?[-1,1]:[-1]})[0];e.compute(Tg(y,u.batchSize,u.numHeads,m,u.sequenceLength,f,d,c),{inputs:d&&c?[y,d,c]:[y],outputs:[]});let g=[y,n];p>1&&o&&Pe.size(o.dims)>0&&g.push(o),d&&g.push(d),c&&g.push(c),e.compute(Pg(p,y,n,o,u,m,d,c),{inputs:g,outputs:p>1?[0,2]:[0]})},Cg=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],n=t.sequenceLength,i=t.inputHiddenSize,s=t.headSize,a=12,o={x:Math.ceil(t.headSize/a),y:Math.ceil(t.sequenceLength/a),z:t.batchSize*t.numHeads},l=[e.inputs[0],e.inputs[1],e.inputs[2]],u=[{type:12,data:n},{type:12,data:i},{type:12,data:s},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],d=c=>{let p=pt("output_q",l[0].dataType,r),m=pt("output_k",l[0].dataType,r),f=pt("output_v",l[0].dataType,r),w=Fe("input",l[0].dataType,l[0].dims),C=Fe("weight",l[1].dataType,l[1].dims),y=Fe("bias",l[2].dataType,l[2].dims),g=w.type.storage,P=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${a}u;
  var<workgroup> tileInput: array<${g}, ${a*a}>;
  var<workgroup> tileWeightQ: array<${g}, ${a*a}>;
  var<workgroup> tileWeightK: array<${g}, ${a*a}>;
  var<workgroup> tileWeightV: array<${g}, ${a*a}>;
  ${c.registerUniforms(P).declareVariables(w,C,y,p,m,f)}
  ${c.mainStart([a,a,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${g}(0);
    var valueK = ${g}(0);
    var valueV = ${g}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:o,programUniforms:u}),getShaderSource:d},{inputs:l,outputs:[-1,-1,-1]})},Sg=(e,t)=>{let r=Mg(e.inputs,t),[n,i,s]=Cg(e,r);return jo(e,n,i,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r)}}),kg,Ig,Ag,Og,b3=Ke(()=>{as(),Ct(),Rt(),Nr(),jt(),kg=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(n,i,s)=>{let a=i.length;if(a!==n.length)throw new Error(`${s}: num dimensions != ${a}`);i.forEach((o,l)=>{if(o!==n[l])throw new Error(`${s}: dim[${l}] do not match`)})};if(e[0].dims.length>1){let n=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,n,"Invalid input scale"),r(e[2].dims,n,"Invalid input B"),r(e[3].dims,n,"Invalid input mean"),r(e[4].dims,n,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Ig=(e,t)=>{let{epsilon:r,spatial:n,format:i}=t,s=e[0].dims,a=n?zr(s[s.length-1]):1,o=i==="NHWC"&&s.length>1?a:1,l=Pe.size(s)/a,u=n,d=u?s.length:s,c=Fe("x",e[0].dataType,e[0].dims,a),p=Fe("scale",e[1].dataType,e[1].dims,o),m=Fe("bias",e[2].dataType,e[2].dims,o),f=Fe("inputMean",e[3].dataType,e[3].dims,o),w=Fe("inputVar",e[4].dataType,e[4].dims,o),C=pt("y",e[0].dataType,d,a),y=()=>{let P="";if(n)P=`let cOffset = ${s.length===1?"0u":i==="NHWC"?`outputIndices[${s.length-1}] / ${a}`:"outputIndices[1]"};`;else if(i==="NCHW")P=`
            ${C.indicesSet("outputIndices","0","0")}
            let cOffset = ${C.indicesToOffset("outputIndices")};`;else{P=`var cIndices = ${p.type.indices}(0);
                       cIndices[0] = outputIndices[${s.length-1}];`;for(let b=1;b<p.rank;b++)P+=`cIndices[${b}] = outputIndices[${b}];`;P+=`let cOffset = ${p.indicesToOffset("cIndices")};`}return P},g=P=>`
  const epsilon = ${r};
  ${P.registerUniform("outputSize","u32").declareVariables(c,p,m,f,w,C)}
  ${P.mainStart()}
  ${P.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${C.offsetToIndices(`global_idx * ${a}`)};
    ${y()}
    let scale = ${p.getByOffset("cOffset")};
    let bias = ${m.getByOffset("cOffset")};
    let inputMean = ${f.getByOffset("cOffset")};
    let inputVar = ${w.getByOffset("cOffset")};
    let x = ${c.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${C.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${n}_${a}`,inputDependencies:u?["rank","type","type","type","type"]:void 0},getShaderSource:g,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:u?[{type:12,data:l},...yt(s)]:[{type:12,data:l}]})}},Ag=e=>or(e),Og=(e,t)=>{let{inputs:r,outputCount:n}=e,i=Ag({...t,outputCount:n});if(Pr.webgpu.validateInputContent&&kg(r,i),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Ig(r,i))}}),Dg,zg,Fg,v3=Ke(()=>{Rt(),jt(),Dg=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},zg=e=>{let t=e[0].dims,r=e[0].dims[2],n=Pe.size(t)/4,i=e[0].dataType,s=Fe("input",i,t,4),a=Fe("bias",i,[r],4),o=Fe("residual",i,t,4),l=pt("output",i,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:u=>`
  const channels = ${r}u / 4;
  ${u.declareVariables(s,a,o,l)}

  ${u.mainStart()}
    ${u.guardAgainstOutOfBoundsWorkgroupSizes(n)}
    let value = ${s.getByOffset("global_idx")}
      + ${a.getByOffset("global_idx % channels")} + ${o.getByOffset("global_idx")};
    ${l.setByOffset("global_idx","value")}
  }`}},Fg=e=>{Dg(e.inputs),e.compute(zg(e.inputs))}}),Bg,tr,Lg,Rg,Ng,jg,Ug,Wg,Vg,Gg,qg,Hg,Kg,Qg,Xg,Jg,Uo,Yg,Ll,Zg,ew,tw,rw,nw,sw,iw,aw,ow,lw,uw,dw,cw,pw,hw,fw,jd,mw,Ud,Wd,_w,gw,ww,yw,bw,vw,Vd=Ke(()=>{Ct(),Rt(),Nr(),jt(),Bg=(e,t,r,n,i,s,a)=>{let o=Math.ceil(t/4),l="";typeof i=="string"?l=`${i}(a)`:l=i("a");let u=Fe("inputData",r,[o],4),d=pt("outputData",n,[o],4),c=[{name:"vec_size",type:"u32"}];return a&&c.push(...a),`
      ${e.registerUniforms(c).declareVariables(u,d)}

  ${s??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${u.getByOffset("global_idx")};
    ${d.setByOffset("global_idx",l)}
  }`},tr=(e,t,r,n,i,s=e.dataType,a,o)=>{let l=[{type:12,data:Math.ceil(Pe.size(e.dims)/4)}];return a&&l.push(...a),{name:t,shaderCache:{hint:i,inputDependencies:["type"]},getShaderSource:u=>Bg(u,Pe.size(e.dims),e.dataType,s,r,n,o),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(Pe.size(u[0].dims)/64/4)},programUniforms:l})}},Lg=e=>{e.compute(tr(e.inputs[0],"Abs","abs"))},Rg=e=>{e.compute(tr(e.inputs[0],"Acos","acos"))},Ng=e=>{e.compute(tr(e.inputs[0],"Acosh","acosh"))},jg=e=>{e.compute(tr(e.inputs[0],"Asin","asin"))},Ug=e=>{e.compute(tr(e.inputs[0],"Asinh","asinh"))},Wg=e=>{e.compute(tr(e.inputs[0],"Atan","atan"))},Vg=e=>{e.compute(tr(e.inputs[0],"Atanh","atanh"))},Gg=e=>or(e),qg=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(tr(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Hg=e=>{let t,r,n=e.length>=2&&e[1].data!==0,i=e.length>=3&&e[2].data!==0;switch(e[0].dataType){case 1:t=n?e[1].getFloat32Array()[0]:-34028234663852886e22,r=i?e[2].getFloat32Array()[0]:34028234663852886e22;break;case 10:t=n?e[1].getUint16Array()[0]:64511,r=i?e[2].getUint16Array()[0]:31743;break;default:throw new Error("Unsupport data type")}return or({min:t,max:r})},Kg=(e,t)=>{let r=t||Hg(e.inputs),n=xn(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"Clip",i=>`clamp(${i}, vec4<${n}>(uniforms.min), vec4<${n}>(uniforms.max))`,void 0,r.cacheKey,void 0,[{type:e.inputs[0].dataType,data:r.min},{type:e.inputs[0].dataType,data:r.max}],[{name:"min",type:n},{name:"max",type:n}]),{inputs:[0]})},Qg=e=>{e.compute(tr(e.inputs[0],"Ceil","ceil"))},Xg=e=>{e.compute(tr(e.inputs[0],"Cos","cos"))},Jg=e=>{e.compute(tr(e.inputs[0],"Cosh","cosh"))},Uo=e=>or(e),Yg=(e,t)=>{let r=xn(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"Elu",n=>`elu_vf32(${n})`,`
  const elu_alpha_ = ${r}(${t.alpha});

  fn elu_f32(a: ${r}) -> ${r} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},Ll=(e="f32")=>`
const r0: ${e} = 0.3275911;
const r1: ${e} = 0.254829592;
const r2: ${e} = -0.284496736;
const r3: ${e} = 1.421413741;
const r4: ${e} = -1.453152027;
const r5: ${e} = 1.061405429;

fn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,Zg=e=>{let t=xn(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,Ll(t)))},ew=e=>{e.compute(tr(e.inputs[0],"Exp","exp"))},tw=e=>{e.compute(tr(e.inputs[0],"Floor","floor"))},rw=e=>{let t=xn(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,Ll(t)))},nw=(e,t)=>{let r=xn(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"LeakyRelu",n=>`select(leaky_relu_alpha_ * ${n}, ${n}, ${n} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},sw=e=>{e.compute(tr(e.inputs[0],"Not",t=>`!${t}`))},iw=e=>{e.compute(tr(e.inputs[0],"Neg",t=>`-${t}`))},aw=e=>{e.compute(tr(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},ow=e=>{let t=xn(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},lw=e=>{e.compute(tr(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},uw=e=>or(e),dw=(e,t)=>{let r=xn(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"HardSigmoid",n=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${n} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},cw=e=>{e.compute(tr(e.inputs[0],"Sin","sin"))},pw=e=>{e.compute(tr(e.inputs[0],"Sinh","sinh"))},hw=e=>{e.compute(tr(e.inputs[0],"Sqrt","sqrt"))},fw=e=>{e.compute(tr(e.inputs[0],"Tan","tan"))},jd=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,mw=e=>{e.compute(tr(e.inputs[0],"Tanh",jd))},Ud=(e="f32")=>`
const fast_gelu_a: ${e} = 0.5;
const fast_gelu_b: ${e} = 0.7978845608028654;
const fast_gelu_c: ${e} = 0.035677408136300125;

fn tanh_v(v: vec4<${e}>) -> vec4<${e}> {
  return ${jd("v")};
}
`,Wd=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,_w=e=>{let t=xn(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"FastGelu",Wd,Ud(t),void 0,e.inputs[0].dataType))},gw=(e,t)=>{let r=xn(e.inputs[0].dataType);return e.compute(tr(e.inputs[0],"ThresholdedRelu",n=>`select(vec4<${r}>(0.0), ${n}, ${n} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},ww=e=>{e.compute(tr(e.inputs[0],"Log","log"))},yw=(e,t)=>`
const alpha = vec4<${e}>(${t});
const one = ${e}(1.0);
const zero = ${e}(0.0);

fn quick_gelu_impl(x: vec4<${e}>) -> vec4<${e}> {
  let v = x *alpha;
  var x1 : vec4<${e}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`,bw=e=>`quick_gelu_impl(${e})`,vw=(e,t)=>{let r=xn(e.inputs[0].dataType);e.compute(tr(e.inputs[0],"QuickGelu",bw,yw(r,t.alpha),t.cacheKey,e.inputs[0].dataType))}}),xw,$w,Mw,x3=Ke(()=>{Rt(),jt(),Vd(),xw=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},$w=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=Fe("input",e[0].dataType,e[0].dims,4),n=Fe("bias",e[0].dataType,[e[0].dims[2]],4),i=pt("output",e[0].dataType,t,4),s=Pe.size(t)/4,a=nn(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:o=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${o.declareVariables(r,n,i)}

  ${Ll(a)}

  ${o.mainStart()}
    ${o.guardAgainstOutOfBoundsWorkgroupSizes(s)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${i.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},Mw=e=>{xw(e.inputs),e.compute($w(e.inputs))}}),Tw,Ew,ps,Pw,Cw,Sw,kw,Iw,Aw,Ow,Dw,zw,Fw,$3=Ke(()=>{Ct(),Rt(),jt(),Tw=(e,t,r,n,i,s,a,o,l,u,d,c)=>{let p,m;typeof o=="string"?p=m=(g,P)=>`${o}((${g}),(${P}))`:typeof o=="function"?p=m=o:(p=o.scalar,m=o.vector);let f=pt("outputData",d,n.length,4),w=Fe("aData",l,t.length,4),C=Fe("bData",u,r.length,4),y;if(i)if(s){let g=Pe.size(t)===1,P=Pe.size(r)===1,b=t.length>0&&t[t.length-1]%4===0,x=r.length>0&&r[r.length-1]%4===0;g||P?y=f.setByOffset("global_idx",m(g?`${w.type.value}(${w.getByOffset("0")}.x)`:w.getByOffset("global_idx"),P?`${C.type.value}(${C.getByOffset("0")}.x)`:C.getByOffset("global_idx"))):y=`
            let outputIndices = ${f.offsetToIndices("global_idx * 4u")};
            let offsetA = ${w.broadcastedIndicesToOffset("outputIndices",f)};
            let offsetB = ${C.broadcastedIndicesToOffset("outputIndices",f)};
            ${f.setByOffset("global_idx",m(a||b?w.getByOffset("offsetA / 4u"):`${w.type.value}(${w.getByOffset("offsetA / 4u")}[offsetA % 4u])`,a||x?C.getByOffset("offsetB / 4u"):`${C.type.value}(${C.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else y=f.setByOffset("global_idx",m(w.getByOffset("global_idx"),C.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let g=(P,b,x="")=>{let T=`aData[indexA${b}][componentA${b}]`,E=`bData[indexB${b}][componentB${b}]`;return`
            let outputIndices${b} = ${f.offsetToIndices(`global_idx * 4u + ${b}u`)};
            let offsetA${b} = ${w.broadcastedIndicesToOffset(`outputIndices${b}`,f)};
            let offsetB${b} = ${C.broadcastedIndicesToOffset(`outputIndices${b}`,f)};
            let indexA${b} = offsetA${b} / 4u;
            let indexB${b} = offsetB${b} / 4u;
            let componentA${b} = offsetA${b} % 4u;
            let componentB${b} = offsetB${b} % 4u;
            ${P}[${b}] = ${x}(${p(T,E)});
          `};d===9?y=`
            var data = vec4<u32>(0);
            ${g("data",0,"u32")}
            ${g("data",1,"u32")}
            ${g("data",2,"u32")}
            ${g("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:y=`
            ${g("outputData[global_idx]",0)}
            ${g("outputData[global_idx]",1)}
            ${g("outputData[global_idx]",2)}
            ${g("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(w,C,f)}

        ${c??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${y}
      }`},Ew=(e,t,r,n,i,s,a=r.dataType)=>{let o=r.dims.map(w=>Number(w)??1),l=n.dims.map(w=>Number(w)??1),u=!Pe.areEqual(o,l),d=o,c=Pe.size(o),p=!1,m=!1,f=[u];if(u){let w=Ka.calcShape(o,l,!1);if(!w)throw new Error("Can't perform binary op on the given tensors");d=w.slice(),c=Pe.size(d);let C=Pe.size(o)===1,y=Pe.size(l)===1,g=o.length>0&&o[o.length-1]%4===0,P=l.length>0&&l[l.length-1]%4===0;f.push(C),f.push(y),f.push(g),f.push(P);let b=1;for(let x=1;x<d.length;x++){let T=o[o.length-x],E=l[l.length-x];if(T===E)b*=T;else break}b%4===0?(m=!0,p=!0):(C||y||g||P)&&(p=!0)}else p=!0;return f.push(p),{name:e,shaderCache:{hint:t+f.map(w=>w.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:w=>Tw(w,o,l,d,p,u,m,i,r.dataType,n.dataType,a,s),getRunData:()=>({outputs:[{dims:d,dataType:a}],dispatchGroup:{x:Math.ceil(c/64/4)},programUniforms:[{type:12,data:Math.ceil(Pe.size(d)/4)},...yt(o,l,d)]})}},ps=(e,t,r,n,i,s)=>{e.compute(Ew(t,i??"",e.inputs[0],e.inputs[1],r,n,s))},Pw=e=>{ps(e,"Add",(t,r)=>`${t}+${r}`)},Cw=e=>{ps(e,"Div",(t,r)=>`${t}/${r}`)},Sw=e=>{ps(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},kw=e=>{ps(e,"Mul",(t,r)=>`${t}*${r}`)},Iw=e=>{let t=Fe("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;ps(e,"Pow",{scalar:(r,n)=>`pow_custom(${r},${n})`,vector:(r,n)=>`pow_vector_custom(${r},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},Aw=e=>{ps(e,"Sub",(t,r)=>`${t}-${r}`)},Ow=e=>{ps(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Dw=e=>{ps(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},zw=e=>{ps(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Fw=e=>{ps(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}}),Bw,Lw,Rw,Nw,jw,Uw,M3=Ke(()=>{Ct(),Rt(),Nr(),jt(),Bw=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");let r=0,n=e[r],i=n.dataType,s=n.dims.length;e.forEach((a,o)=>{if(o!==r){if(a.dataType!==i)throw new Error("input tensors should be one type");if(a.dims.length!==s)throw new Error("input tensors should have the same shape");a.dims.forEach((l,u)=>{if(u!==t&&l!==n.dims[u])throw new Error("non concat dimensions must match")})}})},Lw=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,Rw=(e,t)=>{let r=e.length,n=[];for(let i=0;i<r;++i){let s=t.setByOffset("global_idx",e[i].getByIndices("indices"));r===1?n.push(s):i===0?n.push(`if (inputIndex == ${i}u) { ${s} }`):i===r-1?n.push(`else { ${s} }`):n.push(`else if (inputIndex == ${i}) { ${s} }`)}return n.join(`
`)},Nw=(e,t,r,n)=>{let i=Pe.size(r),s=new Array(e.length),a=new Array(e.length),o=0,l=[],u=[],d=[{type:12,data:i}];for(let w=0;w<e.length;++w)o+=e[w].dims[t],s[w]=o,u.push(e[w].dims.length),a[w]=Fe(`input${w}`,n,u[w]),l.push("rank"),d.push({type:12,data:s[w]});for(let w=0;w<e.length;++w)d.push(...yt(e[w].dims));d.push(...yt(r));let c=pt("output",n,r.length),p=c.indicesGet("indices",t),m=Array.from(Array(s.length).keys()).map(w=>`uniforms.sizeInConcatAxis${w}`).join(","),f=w=>`

  ${(()=>{w.registerUniform("outputSize","u32");for(let C=0;C<e.length;C++)w.registerUniform(`sizeInConcatAxis${C}`,"u32");return w.declareVariables(...a,c)})()}

  ${Lw(s.length,m)}

  ${w.mainStart()}
    ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${c.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${p});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${s.length}u>(${m});
      ${p} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${Rw(a,c)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:r,dataType:n}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:d}),getShaderSource:f}},jw=(e,t)=>{let r=e.inputs,n=r[0].dims,i=Pe.normalizeAxis(t.axis,n.length);Bw(r,i);let s=n.slice();s[i]=r.reduce((o,l)=>o+(l.dims.length>i?l.dims[i]:0),0);let a=r.filter(o=>Pe.size(o.dims)>0);e.compute(Nw(a,i,s,r[0].dataType),{inputs:a})},Uw=e=>or({axis:e.axis})}),ia,aa,oa,Gd,la=Ke(()=>{Ct(),Rt(),ia=(e,t,r="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(${r}(uniforms.clip_min)), ${t}(${r}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${t}(0.0), min(${t}(1.0), ${r}(uniforms.alpha) * value + ${r}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${r}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case"Tanh":return`let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},aa=(e,t)=>{e.activation==="Clip"?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&t.push({type:1,data:e.alpha})},oa=(e,t)=>{e.activation==="Clip"?t.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?t.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&t.push({name:"alpha",type:"f32"})},Gd=e=>{let t=(e==null?void 0:e.activation)||"";if(t==="HardSigmoid"){let[r,n]=(e==null?void 0:e.activation_params)||[.2,.5];return{activation:t,alpha:r,beta:n}}else if(t==="Clip"){let[r,n]=(e==null?void 0:e.activation_params)||[c_,p_];return{activation:t,clipMax:n,clipMin:r}}else if(t==="LeakyRelu"){let[r]=(e==null?void 0:e.activation_params)||[.01];return{activation:t,alpha:r}}return{activation:t}}}),pn,Ww,qd=Ke(()=>{pn=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},Ww=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `}),Vw,T3=Ke(()=>{Vw=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`}),Wo,Hd,Kd=Ke(()=>{Ct(),Rt(),jt(),la(),Wo=(e,t,r,n,i)=>{let s=n-r;return`
      ${Array.from({length:r}).map((a,o)=>`
      if (${_t(t.shape,o,t.rank)} != 1) {
        ${t.indicesSet(e,o,_t(i,o+s,n))}
      } else {
        ${t.indicesSet(e,o,0)}
      }`).join("")}
`},Hd=(e,t,r,n,i=!1,s)=>{let a=e[0].dims,o=e[1].dims,l=a[a.length-2],u=o[o.length-1],d=a[a.length-1],c=zr(u),p=zr(d),m=zr(l),f=Pe.size(r)/c/m,w=e.length>2,C=n?n.slice(0,-2):r.slice(0,-2),y=[Pe.size(C),l,u],g=[{type:12,data:f},{type:12,data:l},{type:12,data:u},{type:12,data:d}];aa(t,g),g.push(...yt(C,a,o)),w&&g.push(...yt(e[2].dims)),g.push(...yt(y));let P=b=>{let x=Dd("batch_dims",e[0].dataType,C.length),T=Fe("a",e[0].dataType,a.length,p),E=Fe("b",e[1].dataType,o.length,c),S=pt("output",e[0].dataType,y.length,c),O=nn(S.type.tensor),B=ia(t,S.type.value,O),V=[T,E],W="";if(w){let q=i?c:1;V.push(Fe("bias",e[2].dataType,e[2].dims.length,q)),W=`${i?`value += bias[col / ${q}];`:`value += ${S.type.value}(bias[row + i]);`}`}let N=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];oa(t,N);let te=()=>{let q=`var a_data: ${T.type.value};`;for(let K=0;K<p;K++)q+=`
              let b_data${K} = b[(b_offset + (k + ${K}) * uniforms.N + col) / ${c}];`;for(let K=0;K<m;K++){q+=`a_data = a[(a_offset + (row + ${K}) * uniforms.K + k) / ${p}];`;for(let Y=0;Y<p;Y++)q+=`
            values[${K}] = fma(${E.type.value}(a_data${p===1?"":`[${Y}]`}), b_data${Y}, values[${K}]);
`}return q};return`
  ${b.registerUniforms(N).registerInternalVariables(x).declareVariables(...V,S)}
  ${b.mainStart()}
    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${c})) * ${c};
    var index1 = global_idx / (uniforms.N / ${c});
    let stride1 = uniforms.M / ${m};
    let row = (index1 % stride1) * ${m};
    let batch = index1 / stride1;

    ${r.length===2?"":`let batch_indices = ${x.offsetToIndices("batch")};`}

    var a_indices: ${T.type.indices};
    ${Wo("a_indices",T,T.rank-2,x.rank,"batch_indices")}
    ${T.indicesSet("a_indices",T.rank-2,0)}
    ${T.indicesSet("a_indices",T.rank-1,0)}
    let a_offset = ${T.indicesToOffset("a_indices")};

    var b_indices: ${E.type.indices};
    ${Wo("b_indices",E,E.rank-2,x.rank,"batch_indices")}
    ${E.indicesSet("b_indices",E.rank-2,0)}
    ${E.indicesSet("b_indices",E.rank-1,0)}
    let b_offset = ${E.indicesToOffset("b_indices")};
    var values: array<${S.type.value}, ${m}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${p}) {
      ${te()}
    }
    for (var i = 0u; i < ${m}u; i++) {
      var value = values[i];
      ${W}
      ${B}
      let cur_indices = ${S.type.indices}(batch, row + i, col);
      let offset = ${S.indicesToOffset("cur_indices")};
      ${S.setByOffset(`offset / ${c}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${c};${p};${m};${i}`,inputDependencies:w?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:s?s(r):r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:g}),getShaderSource:P}}}),Gw,qw,Qd,Xd,Hw,Jd,Kw,Rl,Yd=Ke(()=>{Ct(),Rt(),jt(),la(),Kd(),qd(),Gw=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,qw=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,Qd=(e,t,r="f32",n,i=!1,s=32,a=!1,o=32)=>{let l=t[1]*e[1],u=t[0]*e[0],d=i?l:s,c=i?s:l,p=d/t[0],m=s/t[1];if(!((i&&p===4&&e[1]===4||!i&&(p===3||p===4))&&d%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${i} is true, innerElementSize ${p} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${p} must be 3 or 4.
  tileAWidth ${d} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${p}<${r}>, ${d/p}>, ${c}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${u/e[0]}>, ${s}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${p};
const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${a?"0":"i32(globalId.z)"};
  ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${l};

  let num_tiles = ${a?`${Math.ceil(o/s)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${a?`i32(globalId.z) * ${o}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${m};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${Gw(i,n)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${m}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${n?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${p===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${qw(i,p)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},Xd=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,Hw=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Jd=(e,t,r="f32",n,i=!1,s=32,a=!1,o=32,l=!1)=>{let u=e[1]*t[1],d=e[0]*t[0],c=i?u:s,p=i?s:u;if(!(p%t[1]===0&&c%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${p} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${c} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let m=p/t[1],f=c/t[0],w=s/t[1],C=l?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${u};
    let globalColStart = i32(workgroupId.x) * ${d};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${p}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${t[0]}) {
          ${Xd(i,n)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${d}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${n?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${i?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${u};

let tileRowA = i32(localId.y) * ${m};
let tileColA = i32(localId.x) * ${f};
let tileRowB = i32(localId.y) * ${w};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${m}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${f}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${Xd(i,n)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${n?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${Hw(i)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${c}>, ${p}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${d}>, ${s}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${a?"0":"i32(globalId.z)"};
    ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${a?`${Math.ceil(o/s)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${a?`i32(globalId.z) * ${o}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;
    ${C}
  }
`},Kw=(e,t,r,n,i=!1)=>{let[s,a,o,l]=n,u=nn(n[0].type.tensor);return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${s.type.indices}) -> ${pn(e,u)} {
      var value = ${pn(e,u)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        var aIndices: ${a.type.indices};
        ${Wo("aIndices",a,a.rank-2,s.rank,"batchIndices")}
        ${a.indicesSet("aIndices",a.rank-2,"u32(row)")}
        ${a.indicesSet("aIndices",a.rank-1,"u32(colIn)")}
        value = ${a.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${s.type.indices}) -> ${pn(e,u)} {
      var value = ${pn(e,u)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        var bIndices: ${o.type.indices};
        ${Wo("bIndices",o,o.rank-2,s.rank,"batchIndices")}
        ${o.indicesSet("bIndices",o.rank-2,"u32(row)")}
        ${o.indicesSet("bIndices",o.rank-1,"u32(colIn)")}
        value = ${o.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${pn(e,u)}) {
      let col = colIn * ${e};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${i?"bias[colIn]":`${pn(e,u)}(bias[row])`};`:""}
        ${r}
        ${l.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},Rl=(e,t,r,n,i=!1,s)=>{let a=e[0].dims,o=e[1].dims,l=a.slice(0,-2),u=o.slice(0,-2),d=n?n.slice(0,-2):r.slice(0,-2),c=Pe.size(d),p=a[a.length-2],m=a[a.length-1],f=o[o.length-1],w=m%4===0&&f%4===0,C=p<=8?[4,1,1]:[4,4,1],y=[8,8,1],g=[Math.ceil(f/y[0]/C[0]),Math.ceil(p/y[1]/C[1]),Math.ceil(c/y[2]/C[2])],P=w?4:1,b=[...l,p,m/P],x=b.length,T=[...u,m,f/P],E=T.length,S=[c,p,f/P],O=[{type:6,data:p},{type:6,data:f},{type:6,data:m}];aa(t,O),O.push(...yt(d,b,T));let B=["rank","rank"],V=e.length>2;V&&(O.push(...yt(e[2].dims)),B.push("rank")),O.push(...yt(S));let W=N=>{let te=d.length,q=Dd("batchDims",e[0].dataType,te,1),K=nn(e[0].dataType),Y=Fe("a",e[0].dataType,x,P),Z=Fe("b",e[1].dataType,E,P),de=pt("result",e[0].dataType,S.length,P),pe=[Y,Z];if(V){let me=i?P:1;pe.push(Fe("bias",e[2].dataType,e[2].dims.length,me))}let L=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];oa(t,L);let F=nn(de.type.tensor),U=ia(t,de.type.value,F),re=Kw(P,V,U,[q,Y,Z,de],i);return`
  ${N.registerUniforms(L).registerInternalVariables(q).declareVariables(...pe,de)}
  ${re}
  ${w?Qd(C,y,K,q):Jd(C,y,K,q)}
                   `};return{name:"MatMul",shaderCache:{hint:`${C};${t.activation};${w};${i}`,inputDependencies:B},getRunData:()=>({outputs:[{dims:s?s(r):r,dataType:e[0].dataType}],dispatchGroup:{x:g[0],y:g[1],z:g[2]},programUniforms:O}),getShaderSource:W}}}),Qw,Xw,E3=Ke(()=>{Ct(),ti(),jt(),la(),qd(),T3(),Yd(),Qw=(e,t,r,n,i=!1,s,a=4,o=4,l=4,u="f32")=>{let d=O=>{switch(O){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${u}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${O} is not supported.`)}},c=O=>{switch(O){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${O} is not supported.`)}},p=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,m=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,f=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",w=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",C=e?"row":"col",y=e?"col":"row",g=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${C} / outWidth;
    let outCol = ${C} % outWidth;

    let WRow = ${y} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${y} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${y} % inChannels;
    var resData = ${pn(a,u)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${f} && xCol >= 0 && xCol < ${w}) {
      ${p}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${d(a)}
    }
    return resData;`,P=e?t&&n?`
    let col = colIn * ${a};
    ${g}`:`
    let col = colIn * ${a};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${g}
    }
    return ${pn(a,u)}(0.0);`:n&&r?`
    let col = colIn * ${a};
    ${g}`:`
    let col = colIn * ${a};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${g}
    }
    return ${pn(a,u)}(0.0);`,b=e?n&&r?c(o):`
    let col = colIn * ${o};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${c(o)}
    }
    return ${pn(o,u)}(0.0);`:`
    let col = colIn * ${o};
    if (row < uniforms.dim_inner && col < uniforms.dim_a_outer) {
      ${c(o)}
    }
    return ${pn(o,u)}(0.0);`,x=pn(l,u),T=pn(e?a:o,u),E=pn(e?o:a,u),S=ia(s,x,u);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${T} {
      ${e?P:b}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${E} {
      ${e?b:P}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${x}) {
      let col = colIn * ${l};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${m}
      ${Ww(i)}
      ${S}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},Xw=(e,t,r,n,i,s,a,o,l)=>{let u=t.format==="NHWC",d=u?e[0].dims[3]:e[0].dims[1],c=r[0],p=u?r[2]:r[3],m=u?r[1]:r[2],f=u?r[3]:r[1],w=u&&(d%4===0||d%3===0)&&f%4===0,C=u?f:p*m,y=u?p*m:f,g=[8,8,1],P=n<=8?[4,1,1]:[4,4,1],b=[Math.ceil(C/g[0]/P[0]),Math.ceil(y/g[1]/P[1]),Math.ceil(c/g[2]/P[2])];Yt("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${b}`);let x=w?u&&d%4!==0?3:4:1,T=g[1]*P[1],E=g[0]*P[0],S=Math.max(g[0]*x,g[1]),O=n%T===0,B=i%E===0,V=s%S===0,W=w?[x,4,4]:[1,1,1],N=[{type:6,data:n},{type:6,data:i},{type:6,data:s},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];aa(t,N),N.push(...yt(e[0].dims,e[1].dims));let te=["rank","rank"];a&&(N.push(...yt(e[2].dims)),te.push("rank")),N.push(...yt(r));let q=K=>{let Y=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];oa(t,Y);let Z=w?4:1,de=nn(e[0].dataType),pe=`
      fn setOutputAtIndex(flatIndex : i32, value : ${w?`vec4<${de}>`:de}) {
        result[flatIndex] = ${w?`vec4<${de}>`:de}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${w?`vec4<${de}>`:de}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${w?"/ 4":""}, value);
      }`,L=Fe("x",e[0].dataType,e[0].dims.length,x===3?1:x),F=Fe("w",e[1].dataType,e[1].dims.length,Z),U=[L,F],re=pt("result",e[0].dataType,r.length,Z);if(a){let me=Fe("bias",e[2].dataType,e[2].dims.length,Z);U.push(me),pe+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${w?`vec4<${de}>`:de} {
          return bias[coords.${u?"w":"y"}${w?"/ 4":""}];
        }`}return`
        ${Vw("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${K.registerUniforms(Y).declareVariables(...U,re)}
        ${pe}
        ${Qw(u,O,B,V,a,t,W[0],W[1],W[2],de)}
        ${w?Qd(P,g,de,void 0,!u,S):Jd(P,g,de,void 0,!u,S,!1,void 0,o)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${x};${w};${O};${B};${V};${T};${E};${S}`,inputDependencies:te},getRunData:()=>({outputs:[{dims:l?l(r):r,dataType:e[0].dataType}],dispatchGroup:{x:b[0],y:b[1],z:b[2]},programUniforms:N}),getShaderSource:q}}}),Jw,Zd,Vo,Yw,ec,Zw,ey,ty,P3=Ke(()=>{Ct(),ti(),Rt(),jt(),la(),qd(),Jw=e=>{let t=1;for(let r=0;r<e.length;r++)t*=e[r];return t},Zd=e=>typeof e=="number"?[e,e,e]:e,Vo=(e,t)=>t<=1?e:e+(e-1)*(t-1),Yw=(e,t,r,n=1)=>{let i=Vo(t,n);return Math.floor((e[0]*(r-1)-r+i)/2)},ec=(e,t,r,n,i)=>{i==null&&(i=Yw(e,t[0],n[0]));let s=[0,0,0,r];for(let a=0;a<3;a++)e[a]+2*i>=t[a]&&(s[a]=Math.trunc((e[a]-t[a]+2*i)/n[a]+1));return s},Zw=(e,t,r,n,i,s,a,o,l,u)=>{let d,c,p,m;if(e==="VALID"&&(e=0),typeof e=="number"){d={top:e,bottom:e,left:e,right:e,front:e,back:e};let f=ec([t,r,n,1],[o,l,u],1,[i,s,a],e);c=f[0],p=f[1],m=f[2]}else if(Array.isArray(e)){if(!e.every((w,C,y)=>w===y[0]))throw Error(`Unsupported padding parameter: ${e}`);d={top:e[0],bottom:e[1],left:e[2],right:e[3],front:e[4],back:e[5]};let f=ec([t,r,n,1],[o,l,u],1,[i,s,a],e[0]);c=f[0],p=f[1],m=f[2]}else if(e==="SAME_UPPER"){c=Math.ceil(t/i),p=Math.ceil(r/s),m=Math.ceil(n/a);let f=(c-1)*i+o-t,w=(p-1)*s+l-r,C=(m-1)*a+u-n,y=Math.floor(f/2),g=f-y,P=Math.floor(w/2),b=w-P,x=Math.floor(C/2),T=C-x;d={top:P,bottom:b,left:x,right:T,front:y,back:g}}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:d,outDepth:c,outHeight:p,outWidth:m}},ey=(e,t,r,n,i,s=!1,a="channelsLast")=>{let o,l,u,d,c;if(a==="channelsLast")[o,l,u,d,c]=e;else if(a==="channelsFirst")[o,c,l,u,d]=e;else throw new Error(`Unknown dataFormat ${a}`);let[p,,m,f,w]=t,[C,y,g]=Zd(r),[P,b,x]=Zd(n),T=Vo(m,P),E=Vo(f,b),S=Vo(w,x),{padInfo:O,outDepth:B,outHeight:V,outWidth:W}=Zw(i,l,u,d,C,y,g,T,E,S),N=s?p*c:p,te=[0,0,0,0,0];return a==="channelsFirst"?te=[o,N,B,V,W]:a==="channelsLast"&&(te=[o,B,V,W,N]),{batchSize:o,dataFormat:a,inDepth:l,inHeight:u,inWidth:d,inChannels:c,outDepth:B,outHeight:V,outWidth:W,outChannels:N,padInfo:O,strideDepth:C,strideHeight:y,strideWidth:g,filterDepth:m,filterHeight:f,filterWidth:w,effectiveFilterDepth:T,effectiveFilterHeight:E,effectiveFilterWidth:S,dilationDepth:P,dilationHeight:b,dilationWidth:x,inShape:e,outShape:te,filterShape:t}},ty=(e,t,r,n,i,s)=>{let a=s==="channelsLast";a?e[0].dims[3]:e[0].dims[1];let o=[64,1,1],l={x:r.map((C,y)=>y)},u=[Math.ceil(Jw(l.x.map(C=>r[C]))/o[0]),1,1];Yt("verbose",()=>`[conv3d_naive_webgpu] dispatch = ${u}`);let d=1,c=Pe.size(r),p=[{type:12,data:c},{type:12,data:n},{type:12,data:i},{type:12,data:t.strides},{type:12,data:t.dilations}];aa(t,p),p.push(...yt(e[0].dims,e[1].dims));let m=["rank","rank"],f=e.length===3;f&&(p.push(...yt(e[2].dims)),m.push("rank")),p.push(...yt(r));let w=C=>{let y=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:n.length},{name:"pads",type:"u32",length:i.length},{name:"strides",type:"u32",length:t.strides.length},{name:"dilations",type:"u32",length:t.dilations.length}];oa(t,y);let g=1,P=nn(e[0].dataType),b=Fe("x",e[0].dataType,e[0].dims.length,d),x=Fe("W",e[1].dataType,e[1].dims.length,g),T=[b,x],E=pt("result",e[0].dataType,r.length,g),S="";if(f){let V=Fe("bias",e[2].dataType,e[2].dims.length,g);T.push(V),S+=`
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${P} {
          return bias[${a?_t("coords",4,5):_t("coords",1,5)}];
        }`}let O=pn(d,P),B=ia(t,O,P);return`
            ${S}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${b.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${x.getByIndices("aIndices")};
            }
          ${C.registerUniforms(y).declareVariables(...T,E)}
          ${C.mainStart()}
          ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${E.offsetToIndices("global_idx")};
              let batch = ${_t("coords",0,b.rank)};
              let d2 = ${a?_t("coords",b.rank-1,b.rank):_t("coords",1,b.rank)};
              let xFRCCorner = vec3<u32>(${a?_t("coords",1,b.rank):_t("coords",2,b.rank)},
              ${a?_t("coords",2,b.rank):_t("coords",3,b.rank)},
              ${a?_t("coords",3,b.rank):_t("coords",4,b.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${a?_t("uniforms.x_shape",1,b.rank):_t("uniforms.x_shape",2,b.rank)};
              let xShapeZ = ${a?_t("uniforms.x_shape",2,b.rank):_t("uniforms.x_shape",3,b.rank)};
              let xShapeW = ${a?_t("uniforms.x_shape",3,b.rank):_t("uniforms.x_shape",4,b.rank)};
              let xShapeU = ${a?_t("uniforms.x_shape",4,b.rank):_t("uniforms.x_shape",1,b.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${a?`let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            `:`let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${a?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${a?`let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      `:`let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${a?`let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      `:`let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${f?"value = value + getBiasByOutputCoords(coords)":""};
              ${B}
              result[global_idx] = f32(value);
          }`};return{name:"Conv3DNaive",shaderCache:{hint:`${t.cacheKey};${a};${d};${f}`,inputDependencies:m},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:u[0],y:u[1],z:u[2]},programUniforms:p}),getShaderSource:w}}}),ry,ny,C3=Ke(()=>{Ct(),Rt(),jt(),la(),ry=(e,t,r,n)=>{let i=e.length>2,s=i?"value += b[output_channel];":"",a=e[0].dims,o=e[1].dims,l=t.format==="NHWC",u=l?r[3]:r[1],d=u/t.group,c=l&&d>=4?zr(u):1,p=Pe.size(r)/c,m=[{type:12,data:p},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:d}];aa(t,m),m.push(...yt(a,[o[0],o[1],o[2],o[3]/c]));let f=i?["rank","rank","rank"]:["rank","rank"];m.push(...yt([r[0],r[1],r[2],r[3]/c]));let w=C=>{let y=pt("output",e[0].dataType,r.length,c),g=nn(y.type.tensor),P=ia(t,y.type.value,g),b=Fe("x",e[0].dataType,a.length),x=Fe("w",e[1].dataType,o.length,c),T=[b,x];i&&T.push(Fe("b",e[2].dataType,e[2].dims,c));let E=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];oa(t,E);let S=l?`
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {
            let input_channel = in_channel_offset + wInChannel;
            let xVal = ${b.get("batch","xHeight","xWidth","input_channel")};
            let wVal = ${x.get("wHeight","wWidth","wInChannel","output_channel")};
            value += xVal * wVal;
          }
        }
      }
      `:`
      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
        let input_channel = in_channel_offset + wInChannel;
        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {
              continue;
            }

            let xVal = ${b.get("batch","input_channel","xHeight","xWidth")};
            let wVal = ${x.get("output_channel","wInChannel","wHeight","wWidth")};
            value += xVal * wVal;
          }
        }
      }
      `;return`
  ${C.registerUniforms(E).declareVariables(...T,y)}

  ${C.mainStart()}
    ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${y.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${l?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${l?1:2}], outputIndices[${l?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel * ${c} / uniforms.output_channels_per_group;
    var in_channel_offset = group_id * uniforms.w_shape[${l?2:1}];

    var value: ${y.type.value} = ${y.type.value}(0);
    ${S}
    ${s}
    ${P}
    ${y.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:`${t.cacheKey}_${c}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:n?n(r):r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:m}),getShaderSource:w}},ny=(e,t,r,n)=>{let i=e.length>2,s=zr(r[3]),a=zr(r[2]),o=Pe.size(r)/s/a,l=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/s],u=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/s],d=[r[0],r[1],r[2],r[3]/s],c=[{type:12,data:o},{type:6,data:[t.strides[0],t.strides[1]]},{type:6,data:[t.pads[0],t.pads[1]]}];aa(t,c),c.push(...yt(l,u,d));let p=(a-1)*t.strides[1]+u[1],m=f=>{let w=pt("output",e[0].dataType,d.length,s),C=nn(w.type.tensor),y=ia(t,w.type.value,C),g=Fe("x",e[0].dataType,l.length,s),P=Fe("w",e[1].dataType,u.length,s),b=[g,P];i&&b.push(Fe("b",e[2].dataType,e[2].dims,s));let x=i?"value += b[output_channel];":"",T=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return oa(t,T),`
  ${f.registerUniforms(T).declareVariables(...b,w)}
  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${a}u;
    let col = (index1 % width1) * ${a}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${g.type.value}, ${p}>;
    var values: array<${w.type.value}, ${a}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${u[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${p}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${g.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${g.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${u[1]}; w_width++) {
          let w_val = ${P.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${a}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${a}u; i++) {
      var value = values[i];
      ${x}
      ${y}
      ${w.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${t.cacheKey};${s};${a};${p};${u[0]};${u[1]}`,inputDependencies:i?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:n?n(r):r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:c}),getShaderSource:m}}}),sy,Nl,iy,jl,tc,rc,ay,oy,nc,S3=Ke(()=>{Rt(),E3(),P3(),Yd(),C3(),la(),Kd(),Pi(),sy=(e,t,r,n,i,s)=>{let a=e[0],o=e.slice(s?1:2,s?3:4),l=o.length,u=t[0],d=t.slice(2).map((p,m)=>p+(p-1)*(r[m]-1)),c=o.map((p,m)=>p+n[m]+n[m+l]).map((p,m)=>Math.floor((p-d[m]+i[m])/i[m]));return c.splice(0,0,a),c.splice(s?3:1,0,u),c},Nl=[2,3,1,0],iy=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length>5)throw new Error("greater than 5D is not supported");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[1]*t.group;if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let i=e[0].dims.length-2;if(t.dilations.length!==i)throw new Error(`dilations should be ${i}D`);if(t.strides.length!==i)throw new Error(`strides should be ${i}D`);if(t.pads.length!==i*2)throw new Error(`pads should be ${i*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},jl=(e,t)=>{let r=e.kernelShape.slice();r.length<t[1].dims.length-2&&r.push(...Array(t[1].dims.length-2-r.length).fill(0));for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let n=e.pads.slice();Al.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,n,e.format==="NHWC",e.autoPad);let i=Object.assign({},e);return Object.assign(i,{kernelShape:r,pads:n}),i},tc=e=>{let t=Gd(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],i=e.dilations,s=e.group,a=e.kernel_shape,o=e.pads,l=e.strides,u=e.w_is_const();return{autoPad:n,format:r,dilations:i,group:s,kernelShape:a,pads:o,strides:l,wIsConst:u,...t,cacheKey:`${e.format};${t.activation};`}},rc=(e,t,r,n)=>{let i=r.format==="NHWC",s=sy(t[0].dims,t[1].dims,r.dilations,r.pads,r.strides,i);if(r.group!==1){let T=[t[0]];if(i){let E=e.kernelCustomData.wT??e.compute(Bn(t[1],Nl),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=E),T.push(E)}else T.push(t[1]);t.length===3&&T.push(t[2]),!e.adapterInfo.isArchitecture("ampere")&&i&&t[1].dims[0]===r.group&&t[1].dims[1]===1&&r.dilations[0]===1&&r.dilations[1]===1?e.compute(ny(T,r,s,n),{inputs:T}):e.compute(ry(T,r,s,n),{inputs:T});return}let a=t.length===3,o=t[0].dims[i?1:2],l=t[0].dims[i?2:3],u=t[0].dims[i?3:1],d=t[1].dims[2],c=t[1].dims[3],p=s[i?1:2],m=s[i?2:3],f=s[i?3:1],w=i&&d===o&&c===l&&r.pads[0]===0&&r.pads[1]===0;if(w||d===1&&c===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let T=s[0],E,S,O,B=[];if(i){let N=e.kernelCustomData.wT??e.compute(Bn(t[1],Nl),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=N),w){let te=o*l*u;E=t[0].reshape([1,T,te]),S=N.reshape([1,te,f]),O=[1,T,f]}else E=t[0].reshape([T,o*l,u]),S=N.reshape([1,u,f]),O=[T,p*m,f];B.push(E),B.push(S)}else E=t[0].reshape([T,u,o*l]),S=t[1].reshape([1,f,u]),O=[T,f,p*m],B.push(S),B.push(E);a&&B.push(t[2]);let V=O[2],W=B[0].dims[B[0].dims.length-1];V<8&&W<8?e.compute(Hd(B,r,s,O,i,n),{inputs:B}):e.compute(Rl(B,r,s,O,i,n),{inputs:B});return}let C=!0,y=e.kernelCustomData.wT??e.compute(Bn(t[1],Nl),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=y);let g=[t[0],y];a&&g.push(t[2]);let P=i?p*m:f,b=i?f:p*m,x=d*c*u;e.compute(Xw(g,r,s,P,b,x,a,C,n),{inputs:g})},ay=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let i=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),a=[1].concat(t.dilations),o=[1].concat(t.kernelShape),l=jl({...t,pads:i,strides:s,dilations:a,kernelShape:o},n);rc(e,n,l,u=>r?[u[0],u[2],u[3]]:[u[0],u[1],u[3]])},oy=(e,t,r)=>{let n=r.format==="NHWC"?"channelsLast":"channelsFirst",i=jl(r,t),s=r.autoPad==="NOTSET"?r.pads:r.autoPad,a=ey(t[0].dims,t[1].dims,r.strides,r.dilations,s,!1,n);e.compute(ty(t,i,a.outShape,[a.filterDepth,a.filterHeight,a.filterWidth],[a.padInfo.front,a.padInfo.top,a.padInfo.left],n))},nc=(e,t)=>{if(iy(e.inputs,t),e.inputs[0].dims.length===3)ay(e,t);else if(e.inputs[0].dims.length===5)oy(e,e.inputs,t);else{let r=jl(t,e.inputs);rc(e,e.inputs,r)}}}),ly,k3=Ke(()=>{Ct(),ti(),Rt(),jt(),ly=(e,t,r)=>{let n=e.length>2,i=t.outputShape,s=t.format==="NHWC",a=t.group,o=e[1].dims,l=o[2]/a,u=o[3],d=s?zr(l):1,c=s&&u===1&&l>=4,p=c?Math.floor(l/4)*4:Math.floor(l/d)*d,m=l-p,f=s?zr(u):1,w=s?u===1?d:f:1,C=Pe.size(i)/f,y=[Math.ceil(C/64),1,1];Yt("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${y}`);let g=["rank","rank"],P=[t.strides[0],t.strides[1]],b=[t.kernelShape[s?1:2],t.kernelShape[s?2:3]],x=[t.dilations[0],t.dilations[1]],T=[b[0]+(t.dilations[0]<=1?0:(t.kernelShape[s?1:2]-1)*(t.dilations[0]-1)),b[1]+(t.dilations[1]<=1?0:(t.kernelShape[s?2:3]-1)*(t.dilations[1]-1))],E=[T[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),T[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],S=[{type:12,data:C},{type:12,data:P},{type:12,data:b},{type:12,data:x},{type:12,data:T},{type:6,data:E},{type:12,data:p},{type:12,data:l},{type:12,data:u},...yt(e[0].dims,e[1].dims)];n&&(S.push(...yt(e[2].dims)),g.push("rank")),S.push(...yt(i));let O=B=>{let V=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:P.length},{name:"filter_dims",type:"u32",length:b.length},{name:"dilations",type:"u32",length:b.length},{name:"effective_filter_dims",type:"u32",length:T.length},{name:"pads",type:"i32",length:E.length},{name:"input_channels_per_group_int",type:"u32"},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],W=nn(e[0].dataType),N=s?1:2,te=s?2:3,q=s?3:1,K=Fe("W",e[1].dataType,e[1].dims.length,w),Y=Fe("Dy",e[0].dataType,e[0].dims.length,d),Z=[Y,K];n&&Z.push(Fe("bias",e[2].dataType,[i[q]].length,f));let de=pt("result",e[0].dataType,i.length,f),pe=()=>{let U="";if(c)d===4?U+=`
        let xValue = ${Y.getByOffset("x_offset")};
        let wValue = ${K.getByOffset("w_offset")};
        dotProd = dotProd + dot(xValue, wValue);
        x_offset += 1u;
        w_offset += 1u;`:d===2?U+=`
          dotProd = dotProd + dot(vec4<${W}>(${Y.getByOffset("x_offset")}, ${Y.getByOffset("x_offset + 1u")}), vec4<${W}>(${K.getByOffset("w_offset")}, ${K.getByOffset("w_offset + 1u")}));
          x_offset += 2u;
          w_offset += 2u;`:d===1&&(U+=`
          dotProd = dotProd + dot(vec4<${W}>(${Y.getByOffset("x_offset")}, ${Y.getByOffset("x_offset + 1u")}, ${Y.getByOffset("x_offset + 2u")}, ${Y.getByOffset("x_offset + 3u")}), vec4<${W}>(${K.getByOffset("w_offset")}, ${K.getByOffset("w_offset + 1u")}, ${K.getByOffset("w_offset + 2u")}, ${K.getByOffset("w_offset + 3u")}));
          x_offset += 4u;
          w_offset += 4u;`);else if(U+=`
                  let xValue = ${s?Y.getByOffset(`${Y.indicesToOffset(`${Y.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${d}`):Y.get("batch","inputChannel","idyR","idyC")};
        `,d===1)U+=`
          let w_offset = ${K.indicesToOffset(`${K.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)};
          let wValue = ${K.getByOffset(`w_offset / ${w}`)};
          dotProd = dotProd + xValue * wValue;`;else for(let re=0;re<d;re++)U+=`
            let wValue${re} = ${K.getByOffset(`${K.indicesToOffset(`${K.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel + ${re}, wOutChannel)`)} / ${w}`)};
            dotProd = dotProd + xValue[${re}] * wValue${re};`;return U},L=()=>{if(m===0)return"";if(!c)throw new Error(`packInputAs4 ${c} is not true.`);let U="";if(d===1){U+="dotProd = dotProd";for(let re=0;re<m;re++)U+=`
            + ${Y.getByOffset(`x_offset + ${re}`)} * ${K.getByOffset(`w_offset + ${re}`)}`;U+=";"}else if(d===2){if(m!==2)throw new Error(`Invalid inputChannelsRemainder ${m}.`);U+=`
          let xValue = ${Y.getByOffset("x_offset")};
          let wValue = ${K.getByOffset("w_offset")};
          dotProd = dotProd + dot(xValue, wValue);`}return U},F=`
            let outputIndices = ${de.offsetToIndices(`global_idx * ${f}`)};
            let batch = ${de.indicesGet("outputIndices",0)};
            let d1 = ${de.indicesGet("outputIndices",q)};
            let r = ${de.indicesGet("outputIndices",N)};
            let c = ${de.indicesGet("outputIndices",te)};
            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
            let dyRCorner = dyCorner.x;
            let dyCCorner = dyCorner.y;
            let groupId = d1 / uniforms.output_channels_per_group;
            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
            // ? = to be determined. : = across all values in that axis.
            var dotProd = ${de.type.value}(0.0);
            var wR: u32 = 0;
            if (uniforms.dilations.x == 1) {
              // Minimum wR >= 0 that satisfies (dyRCorner + wR) % (uniforms.strides.x) == 0
              wR = u32(((dyRCorner + i32(uniforms.strides.x) - 1) / i32(uniforms.strides.x)) * i32(uniforms.strides.x) - dyRCorner);
            }
            for (; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
              if (wR % uniforms.dilations.x != 0) {
                continue;
              }
              let dyR = (${W}(dyRCorner) + ${W}(wR)) / ${W}(uniforms.strides[0]);
              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
              if (dyR < 0.0 || dyR >= ${W}(uniforms.Dy_shape[${N}]) || fract(dyR) > 0.0 ||
                  wRPerm < 0) {
                continue;
              }
              let idyR: u32 = u32(dyR);
              var wC: u32 = 0;
              if (uniforms.dilations.y == 1) {
                // Minimum wC >= 0 that satisfies (dyCCorner + wC) % (uniforms.strides.y) == 0
                wC = u32(((dyCCorner + i32(uniforms.strides.y) - 1) / i32(uniforms.strides.y)) * i32(uniforms.strides.y) - dyCCorner);
              }
              for (; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
                if (wC % uniforms.dilations.y != 0) {
                  continue;
                }
                let dyC = (${W}(dyCCorner) + ${W}(wC)) / ${W}(uniforms.strides.y);
                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
                if (dyC < 0.0 || dyC >= ${W}(uniforms.Dy_shape[${te}]) ||
                    fract(dyC) > 0.0 || wCPerm < 0) {
                  continue;
                }
                let idyC: u32 = u32(dyC);
                var inputChannel = groupId * uniforms.input_channels_per_group;
                ${c?`
                var x_offset = ${Y.indicesToOffset(`${Y.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${d};
                var w_offset = ${K.indicesToOffset(`${K.type.indices}(wRPerm, wCPerm, inputChannel, wOutChannel)`)} / ${w};
                  `:""}
                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group_int; d2 = d2 + ${c?4:d}) {
                  ${pe()}
                  inputChannel = inputChannel + ${c?4:d};
                }
                ${L()}
                wC = wC + uniforms.strides.y - 1;
              }
              wR = wR + uniforms.strides[0] - 1;
            }
            let value = dotProd${n?` + bias[d1 / ${f}]`:""};
            ${de.setByOffset("global_idx","value")};
          `;return`
    ${B.registerUniforms(V).declareVariables(...Z,de)}
      ${B.mainStart()}
      ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
    ${F}}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};${d}${w}${f}${c}${m}`,inputDependencies:g},getRunData:()=>({dispatchGroup:{x:y[0],y:y[1],z:y[2]},outputs:[{dims:r?r(i):i,dataType:e[0].dataType}],programUniforms:S}),getShaderSource:O}}}),uy,dy,cy,sc,py,hy,ic,fy,my,I3=Ke(()=>{k3(),la(),Pi(),uy=(e,t,r,n,i,s)=>(e-1)*t+r+(n-1)*i+1-s,dy=(e,t,r,n,i)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[n]=s,r[i]=e-s):t==="SAME_LOWER"&&(r[n]=e-s,r[i]=s)},cy=(e,t,r,n,i,s,a,o,l,u)=>{let d=e.length-2,c=u.length===0;l.length<d&&l.push(...Array(d-l.length).fill(0));let p=e[0],m=t[o?3:1]*i;for(let f=0,w=e.length-d-(o?1:0);f<d;++f,++w){let C=e[w],y=c?C*a[f]:u[f],g=uy(C,a[f],s[f],t[w],r[f],y);dy(g,n,s,f,f+d),c&&u.push(a[f]*(C-1)+l[f]+(t[w]-1)*r[f]+1-s[f]-s[f+d])}u.splice(0,0,p),u.splice(o?3:1,0,m)},sc=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((c,p)=>c*p,1)===0){r.length=0;for(let c=2;c<t[1].dims.length;++c)r.push(t[1].dims[c])}let n=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(n?3:1,0,t[1].dims[1]);let i=e.pads.slice(),s=e.outputShape.slice(),a=e.outputPadding.slice(),o=t[0].dims,l=e.dilations.slice();if(l.reduce((c,p)=>c+p,0)===0){let c=t[0].dims.length-2;l=new Array(c).fill(1)}let u=e.strides.slice();if(u.reduce((c,p)=>c+p,0)===0){let c=t[0].dims.length-2;u=new Array(c).fill(1)}cy(o,r,l,e.autoPad,e.group,i,u,n,a,s);let d=Object.assign({},e);return Object.assign(d,{kernelShape:r,pads:i,outputPadding:a,outputShape:s,dilations:l,strides:u}),d},py=e=>{let t=Gd(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],i=e.dilations,s=e.group,a=e.kernelShape,o=e.pads,l=e.strides,u=e.wIsConst(),d=e.outputPadding,c=e.outputShape;return{autoPad:n,format:r,dilations:i,group:s,kernelShape:a,outputPadding:d,outputShape:c,pads:o,strides:l,wIsConst:u,...t,cacheKey:`${e.format};${t.activation};`}},hy=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[0];if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let i=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==i))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((a,o)=>a+o,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((a,o)=>a+o,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((a,o)=>a+o,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((a,o)=>a+o,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},ic=(e,t,r,n)=>{let i=e.kernelCustomData.wT??e.compute(Bn(t[1],[2,3,0,1]),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=i);let s=[t[0],i];t.length===3&&s.push(t[2]),e.compute(ly(s,r,n),{inputs:s})},fy=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let i=t.kernelShape;(i.length===0||i[0]===0)&&(i=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let a=t.strides;(a.length===0||a[0]===0)&&(a=[1]);let o=t.pads;o.length===0&&(o=[0,0]),o=[0,o[0],0,o[1]],a=[1].concat(a),s=[1].concat(s),i=[1].concat(i);let l=t.outputPadding;l=[0].concat(l);let u=sc({...t,pads:o,strides:a,dilations:s,kernelShape:i,outputPadding:l},n);ic(e,n,u,d=>r?[d[0],d[2],d[3]]:[d[0],d[1],d[3]])},my=(e,t)=>{if(hy(e.inputs,t),e.inputs[0].dims.length===3)fy(e,t);else{let r=sc(t,e.inputs);ic(e,e.inputs,r)}}}),_y,gy,wy,A3=Ke(()=>{Ct(),Rt(),Nr(),jt(),_y=(e,t,r,n)=>{let i=Pe.size(t),s=t.length,a=Fe("input",e,s),o=pt("output",e,s),l=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),u=Pe.normalizeAxis(l,s),d=c=>{let p=` i32(${a.indicesGet("inputIndices","uniforms.axis")}) `,m=_t("uniforms.input_shape","uniforms.axis",s),f=n.reverse?p+(n.exclusive?" + 1":""):"0",w=n.reverse?m:p+(n.exclusive?"":" + 1");return`
                ${c.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(a,o)}
                ${c.mainStart()}
                  ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${o.offsetToIndices("global_idx")};
                  var sum = ${o.type.value}(0);
                  let first : i32 = ${f};
                  let last : i32 = ${w};
                  for (var i : i32 = first; i < last; i++) {
                    ${a.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${a.getByIndices("inputIndices")};
                  }
                  ${o.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:n.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:12,data:i},{type:12,data:u},...yt(t,t)]}),getShaderSource:d}},gy=(e,t)=>{let r=e.inputs[0].dims,n=e.inputs[0].dataType,i=e.inputs[1];e.compute(_y(n,r,i,t),{inputs:[0]})},wy=e=>{let t=e.exclusive===1,r=e.reverse===1;return or({exclusive:t,reverse:r})}}),yy,by,vy,xy,$y,O3=Ke(()=>{Ct(),Rt(),Nr(),jt(),yy=e=>{if(!e||e.length!==1)throw new Error("DepthToSpace requires 1 input.");if(e[0].dims.length!==4)throw new Error("DepthToSpace requires 4D input.")},by=(e,t,r,n)=>{let i=[];i.push(`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let s=0;s<t;++s)i.push(r.indicesSet("a",e[s],`i[${s}]`));return i.push("return a;}"),i.join(`
`)},vy=(e,t)=>{let r,n,i,s,a,o,l=t.format==="NHWC",u=t.blocksize,d=t.mode==="DCR";l?([r,n,i,s]=e.dims,a=d?[r,n,i,u,u,s/u**2]:[r,n,i,s/u**2,u,u],o=d?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([r,n,i,s]=[e.dims[0],e.dims[2],e.dims[3],e.dims[1]],a=d?[r,u,u,s/u**2,n,i]:[r,s/u**2,u,u,n,i],o=d?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let c=e.reshape(a),p=c.dims.length,m=e.dataType,f=Fe("a",m,p),w=pt("output",m,p),C=y=>`
  ${y.registerUniform("output_size","u32").declareVariables(f,w)}

  ${by(o,p,f,w)}

  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${w.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${w.setByOffset("global_idx",f.getByIndices("aIndices"))}
  }`;return{name:"DepthToSpace",shaderCache:{hint:`${e.dims};${t.blocksize};${t.mode}`,inputDependencies:["rank"]},getRunData:y=>{let g=l?[r,n*u,i*u,s/u**2]:[r,s/u**2,n*u,i*u],P=Pe.size(g),b=c.dims,x=Pe.sortBasedOnPerm(b,o);return{outputs:[{dims:g,dataType:y[0].dataType}],dispatchGroup:{x:Math.ceil(P/64)},programUniforms:[{type:12,data:P},...yt(b,x)]}},getShaderSource:C}},xy=(e,t)=>{yy(e.inputs),e.compute(vy(e.inputs[0],t))},$y=e=>or({blocksize:e.blocksize,mode:e.mode,format:e.format})}),Ul,Go,ac,My,Ty,Ey,Py,oc,Cy,Sy,ky,D3=Ke(()=>{Ct(),Rt(),Nr(),jt(),Ul="[a-zA-Z]|\\.\\.\\.",Go="("+Ul+")+",ac="^"+Go+"$",My="("+Go+",)*"+Go,Ty="^"+My+"$",Ey=class{constructor(e=-1){this.symbolToIndices=new Map,this.inputIndex=e}addSymbol(e,t){let r=this.symbolToIndices.get(e);r===void 0?r=[t]:r.push(t),this.symbolToIndices.set(e,r)}},Py=class{constructor(e,t){var i;this.equation=t,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[r,n]=t.includes("->")?t.split("->",2):[t,""];if(!r.match(RegExp(Ty)))throw new Error("Invalid LHS term");if(r.split(",").forEach((s,a)=>{let o=e[a].dims.slice();if(!s.match(RegExp(ac)))throw new Error("Invalid LHS term");let l=this.processTerm(s,!0,o,a);this.lhs.push(l)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([s,a])=>a.count===1||s==="...").map(([s])=>s).join("");else if(!n.match(RegExp(Go)))throw new Error("Invalid RHS");(i=n.match(RegExp(Ul,"g")))==null||i.forEach(s=>{if(s==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let a=this.symbolToInfo.get(s);if(a===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(a.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(e,t,r){let n=this.symbolToInfo.get(e);if(n!==void 0){if(n.dimValue!==t&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(r)}else n={count:1,dimValue:t,inputIndices:[r]};this.symbolToInfo.set(e,n)}processTerm(e,t,r,n=-1){let i=r.length,s=!1,a=[],o=0;if(!e.match(RegExp(ac))&&!t&&e!=="")throw new Error("Invalid LHS term");let l=e.match(RegExp(Ul,"g")),u=new Ey(n);return l==null||l.forEach((d,c)=>{if(d==="..."){if(s)throw new Error("Only one ellipsis is allowed per input term");s=!0;let p=i-l.length+1;if(p<0)throw new Error("Ellipsis out of bounds");if(a=r.slice(o,o+p),this.hasEllipsis){if(this.ellipsisDims.length!==a.length||this.ellipsisDims.toString()!==a.toString())throw new Error("Ellipsis dimensions mismatch")}else if(t)this.hasEllipsis=!0,this.ellipsisDims=a;else throw new Error("Ellipsis must be specified in the LHS");for(let m=0;m<a.length;m++){let f=String.fromCharCode(48+m);u.addSymbol(f,c+m),this.addSymbol(f,r[o++],n)}}else u.addSymbol(d,c+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(d,r[o++],n)}),u}},oc=e=>e+"_max",Cy=(e,t,r,n)=>{let i=e.map(u=>u.length).map((u,d)=>Fe(`input${d}`,t,u)),s=Pe.size(n),a=pt("output",t,n.length),o=[...r.symbolToInfo.keys()].filter(u=>!r.rhs.symbolToIndices.has(u)),l=u=>{let d=[],c="var prod = 1.0;",p="var sum = 0.0;",m="sum += prod;",f=[],w=[],C=[],y=[],g=r.symbolToInfo.size===r.rhs.symbolToIndices.size;r.symbolToInfo.forEach((b,x)=>{var T;if(r.rhs.symbolToIndices.has(x)){let E=(T=r.rhs.symbolToIndices.get(x))==null?void 0:T[0];E!==void 0&&r.lhs.forEach((S,O)=>{if(b.inputIndices.includes(O)){let B=S.symbolToIndices.get(x);if(B===void 0)throw new Error("Invalid symbol error");B.forEach(V=>{d.push(`${i[O].indicesSet(`input${O}Indices`,V,a.indicesGet("outputIndices",E))}`)})}})}else r.lhs.forEach((E,S)=>{if(b.inputIndices.includes(S)){let O=E.symbolToIndices.get(x);if(O===void 0)throw new Error("Invalid symbol error");O.forEach(B=>{f.push(`${i[S].indicesSet(`input${S}Indices`,B,`${x}`)}`)}),y.push(`prod *= ${i[S].getByIndices(`input${S}Indices`)};`)}}),w.push(`for(var ${x}: u32 = 0; ${x} < uniforms.${oc(x)}; ${x}++) {`),C.push("}")});let P=g?[...d,`let sum = ${i.map((b,x)=>b.getByIndices(`input${x}Indices`)).join(" * ")};`]:[...d,p,...w,...f,c,...y,m,...C];return`
            ${u.registerUniforms(o.map(b=>({name:`${oc(b)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...i,a)}

            ${u.mainStart()}
            ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${a.offsetToIndices("global_idx")};
            ${i.map((b,x)=>`var input${x}Indices: ${i[x].type.indices};`).join(`
`)}
            ${P.join(`
`)};
            ${a.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:r.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let u=o.filter(c=>r.symbolToInfo.has(c)).map(c=>{var p;return{type:12,data:((p=r.symbolToInfo.get(c))==null?void 0:p.dimValue)||0}});u.push({type:12,data:s});let d=e.map((c,p)=>[...yt(c)]).reduce((c,p)=>c.concat(p),u);return d.push(...yt(n)),{outputs:[{dims:n,dataType:t}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:d}},getShaderSource:l}},Sy=(e,t)=>{let r=new Py(e.inputs,t.equation),n=r.outputDims,i=e.inputs.map((s,a)=>s.dims);e.compute(Cy(i,e.inputs[0].dataType,r,n))},ky=e=>{let t=e.equation.replace(/\s+/g,"");return or({equation:t})}}),Iy,lc,Ay,Oy,Dy,z3=Ke(()=>{Ct(),Rt(),jt(),Iy=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=r.length<t.length?0:r.length-t.length,i=t.length<r.length?0:t.length-r.length;for(;n<r.length&&i<t.length;++n,++i)if(r[n]!==t[i]&&r[n]!==1&&t[i]!==1)throw new Error("Expand requires shape to be broadcastable to input")},lc=(e,t)=>{let r=e.length-t.length,n=[];for(let i=0;i<r;++i)n.push(e[i]);for(let i=0;i<t.length;++i)n.push(t[i]===1?e[i+r]:t[i]);return n},Ay=(e,t)=>e.length>t.length?lc(e,t):lc(t,e),Oy=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=Ay(t,r),i=e[0].dataType,s=i===9||Pe.size(t)===1,a=i===9||t.length>0&&t[t.length-1]%4===0?4:1,o=s||n.length>0&&n[n.length-1]%4===0?4:1,l=Math.ceil(Pe.size(n)/o),u=c=>{let p=Fe("input",i,t.length,a),m=pt("output",i,n.length,o),f;if(i===9){let w=(C,y,g="")=>`
          let outputIndices${y} = ${m.offsetToIndices(`outputOffset + ${y}u`)};
          let offset${y} = ${p.broadcastedIndicesToOffset(`outputIndices${y}`,m)};
          let index${y} = offset${y} / 4u;
          let component${y} = offset${y} % 4u;
          ${C}[${y}] = ${g}(${p.getByOffset(`index${y}`)}[component${y}]);
        `;f=`
        let outputOffset = global_idx * ${o};
        var data = vec4<u32>(0);
        ${w("data",0,"u32")}
        ${w("data",1,"u32")}
        ${w("data",2,"u32")}
        ${w("data",3,"u32")}
        ${m.setByOffset("global_idx","data")}
      }`}else f=`
        let outputIndices = ${m.offsetToIndices(`global_idx * ${o}`)};
        let inputOffset = ${p.broadcastedIndicesToOffset("outputIndices",m)};
        let data = ${m.type.value}(${p.getByOffset(`inputOffset / ${a}`)});
        ${m.setByOffset("global_idx","data")}
      }`;return`
    ${c.registerUniform("vec_size","u32").declareVariables(p,m)}
    ${c.mainStart()}
    ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${f}`},d=[{type:12,data:l},...yt(t,n)];return{name:"Expand",shaderCache:{hint:`${n.length};${a}${o}`,inputDependencies:["rank"]},getShaderSource:u,getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:d})}},Dy=e=>{Iy(e.inputs),e.compute(Oy(e.inputs),{inputs:[0]})}}),zy,Fy,F3=Ke(()=>{Ct(),Rt(),jt(),Vd(),zy=e=>{let t=e[0].dataType,r=Pe.size(e[0].dims),n=Pe.size(e[1].dims),i=n%4===0,s=a=>{let o=Fe("x",t,[1],4),l=Fe("bias",t,[1],4),u=pt("y",t,[1],4),d=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],c=m=>`
      let bias${m}_offset: u32 = (global_idx * 4 + ${m}) % uniforms.bias_size;
      let bias${m} = ${l.getByOffset(`bias${m}_offset / 4`)}[bias${m}_offset % 4];`,p=i?`
      let bias = ${l.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${c(0)}${c(1)}${c(2)}${c(3)}
      let bias = ${o.type.value}(bias0, bias1, bias2, bias3);`;return`${a.registerUniforms(d).declareVariables(o,l,u)}

    ${Ud(xn(t))}

    ${a.mainStart(Qa)}
      ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${o.getByOffset("global_idx")};
      ${p}
      let x_in = x + bias;
      ${u.setByOffset("global_idx",Wd("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${i}`,inputDependencies:["type","type"]},getShaderSource:s,getRunData:a=>({outputs:[{dims:a[0].dims,dataType:a[0].dataType}],programUniforms:[{type:12,data:Math.ceil(r/4)},{type:12,data:n}],dispatchGroup:{x:Math.ceil(r/Qa/4)}})}},Fy=e=>{e.inputs.length<2||Pe.size(e.inputs[1].dims)===0?_w(e):e.compute(zy(e.inputs))}}),By,Ly,Ry,Ny,B3=Ke(()=>{Ct(),Rt(),Nr(),jt(),By=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Ly=(e,t)=>{let r=e[0].dims,n=e[1].dims,i=r.length,s=Pe.normalizeAxis(t.axis,i),a=r.slice(0);a.splice(s,1,...n);let o=r[s],l=e[0].dataType===9?4:1,u=Math.ceil(Pe.size(a)/l),d=[{type:12,data:u},{type:6,data:o},{type:12,data:s},...yt(e[0].dims,e[1].dims,a)],c=p=>{let m=Fe("data",e[0].dataType,e[0].dims.length,l),f=Fe("inputIndices",e[1].dataType,e[1].dims.length),w=pt("output",e[0].dataType,a.length,l),C=g=>{let P=n.length,b=`var indicesIndices${g}  = ${f.type.indices}(0);`;for(let x=0;x<P;x++)b+=`${P>1?`indicesIndices${g}[${x}]`:`indicesIndices${g}`} = ${a.length>1?`outputIndices${g}[uniforms.axis + ${x}]`:`outputIndices${g}`};`;b+=`
          var idx${g} = ${f.getByIndices(`indicesIndices${g}`)};
          if (idx${g} < 0) {
            idx${g} = idx${g} + uniforms.axisDimLimit;
          }
          var dataIndices${g} : ${m.type.indices};
        `;for(let x=0,T=0;x<i;x++)x===s?(b+=`${i>1?`dataIndices${g}[${x}]`:`dataIndices${g}`} = u32(idx${g});`,T+=P):(b+=`${i>1?`dataIndices${g}[${x}]`:`dataIndices${g}`} = ${a.length>1?`outputIndices${g}[${T}]`:`outputIndices${g}`};`,T++);return b},y;if(e[0].dataType===9){let g=(P,b,x="")=>`
          let outputIndices${b} = ${w.offsetToIndices(`outputOffset + ${b}u`)};
          ${C(b)};
          let offset${b} = ${m.indicesToOffset(`dataIndices${b}`)};
          let index${b} = offset${b} / 4u;
          let component${b} = offset${b} % 4u;
          ${P}[${b}] = ${x}(${m.getByOffset(`index${b}`)}[component${b}]);
        `;y=`
        let outputOffset = global_idx * ${l};
        var value = vec4<u32>(0);
        ${g("value",0,"u32")}
        ${g("value",1,"u32")}
        ${g("value",2,"u32")}
        ${g("value",3,"u32")}
        ${w.setByOffset("global_idx","value")}
      `}else y=`
      let outputIndices = ${w.offsetToIndices("global_idx")};
      ${C("")};
      let value = ${m.getByIndices("dataIndices")};
      ${w.setByOffset("global_idx","value")};
      `;return`
      ${p.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(m,f,w)}
      ${p.mainStart()}
        ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${y}
      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:d}),getShaderSource:c}},Ry=e=>or({axis:e.axis}),Ny=(e,t)=>{let r=e.inputs;By(r),e.compute(Ly(e.inputs,t))}}),jy,Uy,Wy,L3=Ke(()=>{Ct(),Rt(),jt(),jy=(e,t,r,n,i,s,a,o,l)=>{let u=[{type:12,data:s},{type:12,data:n},{type:12,data:i},{type:12,data:r},{type:12,data:a},{type:12,data:o},{type:12,data:l}],d=[s];u.push(...yt(t.dims,d));let c=p=>{let m=Fe("indices_data",t.dataType,t.dims.length),f=pt("input_slice_offsets_data",12,1,1),w=[m,f],C=[{name:"output_size",type:"u32"},{name:"batch_dims",type:"u32"},{name:"input_dims",type:"u32",length:i.length},{name:"sizes_from_slice_dims_data",type:"u32",length:r.length},{name:"num_slices_per_batch",type:"u32"},{name:"input_batch_stride",type:"u32"},{name:"num_slice_dims",type:"u32"}];return`
  ${p.registerUniforms(C).declareVariables(...w)}
  ${p.mainStart()}
    ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let batch_idx = global_idx / uniforms.num_slices_per_batch;
    let base_offset = batch_idx * uniforms.input_batch_stride;

    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;
    var relative_slice_offset = 0;
    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {
      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);
      let input_dim_idx = uniforms.batch_dims + dim_idx;
      if (index < 0) {
        ${i.length===1?"index += i32(uniforms.input_dims);":"index += i32(uniforms.input_dims[input_dim_idx]);"}
      }
      ${r.length===1?"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);":"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);"}
    }

    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);
  }`};return e.compute({name:"computeSliceOffsets",shaderCache:{hint:`${i.length}_${r.length}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:d,dataType:e.inputs[1].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:u}),getShaderSource:c},{inputs:[t],outputs:[-1]})[0]},Uy=(e,t)=>{let r=e.inputs,n=r[0].dims,i=r[0].dataType,s=r[1].dims,a=s[s.length-1],o=Pe.sizeToDimension(s,s.length-1),l=Pe.sizeFromDimension(n,t.batchDims+a),u=Pe.sizeToDimension(n,t.batchDims),d=Pe.sizeFromDimension(n,t.batchDims),c=o/u,p=new Array(a),m=l;for(let b=0;b<a;++b)p[a-1-b]=m,m*=n[t.batchDims+a-1-b];let f=jy(e,r[1],p,t.batchDims,n,o,c,d,a),w=t.batchDims+a;if(w>n.length)throw new Error("last dimension of indices must not be larger than rank of input tensor");let C=s.slice(0,-1).concat(n.slice(w)),y=Pe.size(C),g=[{type:12,data:y},{type:12,data:l},...yt(r[0].dims,f.dims,C)],P=b=>{let x=Fe("data",r[0].dataType,r[0].dims.length),T=Fe("slice_offsets",12,f.dims.length),E=pt("output",r[0].dataType,C.length);return`
          ${b.registerUniform("output_size","u32").registerUniform("slice_size","u32").declareVariables(x,T,E)}
            ${b.mainStart()}
            ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];
          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];
        }`};e.compute({name:"GatherND",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:C,dataType:i}],dispatchGroup:{x:Math.ceil(y/64)},programUniforms:g}),getShaderSource:P},{inputs:[r[0],f]})},Wy=e=>({batchDims:e.batch_dims,cacheKey:""})}),Vy,Gy,qy,Hy,R3=Ke(()=>{Ct(),Rt(),Nr(),jt(),Vy=(e,t)=>{if(e.length<3||e.length>4)throw new Error("GatherBlockQuantized requires 3 or 4 inputs.");let r=Pe.normalizeAxis(t.quantizeAxis,e[0].dims.length),n=t.blockSize,i=e[0],s=e[2],a=e.length===4?e[3]:void 0;if(s.dims.length!==i.dims.length||!i.dims.map((o,l)=>l===r?Math.ceil(o/n)===s.dims[l]:o===s.dims[l]).reduce((o,l)=>o&&l,!0))throw new Error("Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.");if(a){if(a.dataType!==i.dataType)throw new Error("Zero point must have the same data type as the input tensor.");if(a.dims.length!==s.dims.length||!a.dims.map((o,l)=>o===s.dims[l]).reduce((o,l)=>o&&l,!0))throw new Error("Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.")}},Gy=(e,t)=>{let r=e[0].dims,n=e[1].dims,i=r.length,s=Pe.normalizeAxis(t.gatherAxis,i),a=Pe.normalizeAxis(t.quantizeAxis,i),o=r.slice(0);o.splice(s,1,...n);let l=Pe.size(o),u=e[2].dataType,d=e[0].dataType===22,c=[{type:12,data:l},{type:12,data:a},{type:12,data:s},{type:12,data:t.blockSize},...yt(...e.map((m,f)=>m.dims),o)],p=m=>{let f=Fe("data",e[0].dataType,e[0].dims.length),w=Fe("inputIndices",e[1].dataType,e[1].dims.length),C=Fe("scales",e[2].dataType,e[2].dims.length),y=e.length>3?Fe("zeroPoint",e[3].dataType,e[3].dims.length):void 0,g=pt("output",u,o.length),P=[f,w,C];y&&P.push(y);let b=[{name:"output_size",type:"u32"},{name:"quantize_axis",type:"u32"},{name:"gather_axis",type:"u32"},{name:"block_size",type:"u32"}];return`
        ${m.registerUniforms(b).declareVariables(...P,g)}
        ${m.mainStart()}
        let output_indices = ${g.offsetToIndices("global_idx")};
        var indices_indices = ${w.type.indices}(0);
        ${n.length>1?`
          for (var i: u32 = 0; i < ${n.length}; i++) {
            let index = ${g.indicesGet("output_indices","uniforms.gather_axis + i")};
            ${w.indicesSet("indices_indices","i","index")};
          }`:`indices_indices = ${g.indicesGet("output_indices","uniforms.gather_axis")};`};
        var data_indices = ${f.type.indices}(0);
        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {
          let index = ${g.indicesGet("output_indices","i")};
          ${f.indicesSet("data_indices","i","index")};
        }
        var index_from_indices = ${w.getByIndices("indices_indices")};
        if (index_from_indices < 0) {
          index_from_indices += ${r[s]};
        }
        ${f.indicesSet("data_indices","uniforms.gather_axis","u32(index_from_indices)")};
        for (var i = uniforms.gather_axis + 1; i < ${o.length}; i++) {
          let index = ${g.indicesGet("output_indices",`i + ${n.length} - 1`)};
          ${f.indicesSet("data_indices","i","index")};
        }
        let data_offset = ${f.indicesToOffset("data_indices")};
        let data_index = data_offset % 8;
        // Convert 4-bit packed data to 8-bit packed data.
        let packed_4bit_quantized_data = ${f.getByOffset("data_offset / 8")};
        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;
        let quantized_data_vec = ${d?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_quantized_data));
        let quantized_data = quantized_data_vec[data_index / 2];
        var scale_indices = data_indices;
        let quantize_axis_index = ${C.indicesGet("data_indices","uniforms.quantize_axis")} / uniforms.block_size;
        ${C.indicesSet("scale_indices","uniforms.quantize_axis","quantize_axis_index")};
        var scale = ${C.getByIndices("scale_indices")};
        ${y?`
              let zero_point_indices = scale_indices;
              let zero_point_offset = ${y.indicesToOffset("zero_point_indices")};
              let zero_point_index = zero_point_offset % 8;
              let packed_4bit_zero_points = ${y.getByOffset("zero_point_offset / 8")};
              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;
              let zero_point_vec = ${d?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_zero_points));
              let zero_point = zero_point_vec[zero_point_index / 2];`:"var zero_point = 0"};
        let dequantized_data = ${xn(u)}(quantized_data - zero_point) * scale;
        ${g.setByOffset("global_idx","dequantized_data")};
    }`};return{name:"GatherBlockQuantized",shaderCache:{hint:`${t.cacheKey};${e.filter((m,f)=>f!==1).map(m=>m.dims.join("_")).join(";")}`,inputDependencies:Array.from({length:e.length},(m,f)=>"rank")},getRunData:()=>({outputs:[{dims:o,dataType:u}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:c}),getShaderSource:p}},qy=(e,t)=>{let r=e.inputs;Vy(r,t),e.compute(Gy(e.inputs,t))},Hy=e=>or({blockSize:e.blockSize,gatherAxis:e.gatherAxis,quantizeAxis:e.quantizeAxis})}),Ky,Qy,Xy,Jy,N3=Ke(()=>{Ct(),Rt(),Nr(),jt(),Ky=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},Qy=(e,t)=>{let r=e[0].dims,n=e[0].dataType,i=r.length,s=e[1].dims,a=e[1].dataType,o=Pe.normalizeAxis(t.axis,i),l=r[o],u=s.slice(0),d=Pe.size(u),c=Fe("input",n,i),p=Fe("indicesInput",a,s.length),m=pt("output",n,u.length),f=[{type:12,data:d},{type:6,data:l},{type:12,data:o}];return f.push(...yt(r,s,u)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:f}),getShaderSource:w=>`
      ${w.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(c,p,m)}
      ${w.mainStart()}
      ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${m.offsetToIndices("global_idx")};

      var idx = ${p.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${c.type.indices}(outputIndices);
      ${c.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${c.getByIndices("inputIndices")};

      ${m.setByOffset("global_idx","value")};
  }`}},Xy=e=>or({axis:e.axis}),Jy=(e,t)=>{let r=e.inputs;Ky(r),e.compute(Qy(e.inputs,t))}}),Yy,Zy,eb,tb,j3=Ke(()=>{Ct(),Rt(),jt(),Yy=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Zy=(e,t)=>{let r=e[0].dims.slice(),n=e[1].dims.slice(),[i,s,a]=d_.getShapeOfGemmResult(r,t.transA,n,t.transB,e.length===3?e[2].dims:void 0),o=[i,s];if(!o)throw new Error("Can't use gemm on the given tensors");let l=16,u=Math.ceil(s/l),d=Math.ceil(i/l),c=!0,p=Pe.size(o),m=[{type:12,data:c?u:p},{type:12,data:i},{type:12,data:s},{type:12,data:a},{type:1,data:t.alpha},{type:1,data:t.beta}],f=["type","type"];e.length===3&&(m.push(...yt(e[2].dims)),f.push("rank")),m.push(...yt(o));let w=y=>{let g="";t.transA&&t.transB?g="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?g="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?g="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(g="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let P=t.alpha===1?"":"value *= uniforms.alpha;",b=Fe("a",e[0].dataType,e[0].dims),x=Fe("b",e[1].dataType,e[1].dims),T=b.type.value,E=null,S=[b,x];e.length===3&&(E=Fe("c",e[2].dataType,e[2].dims.length),S.push(E));let O=pt("output",e[0].dataType,o.length);S.push(O);let B=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${y.registerUniforms(B).declareVariables(...S)}

  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${T}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${g}
    }

    ${P}
    ${E!=null?`let cOffset = ${E.broadcastedIndicesToOffset("vec2(m, n)",O)}; value += ${T}(uniforms.beta) * ${E.getByOffset("cOffset")};`:""}
    output[global_idx] = value;
  }`},C=y=>{let g=Fe("a",e[0].dataType,e[0].dims),P=Fe("b",e[1].dataType,e[1].dims),b=null,x=[g,P];e.length===3&&(b=Fe("c",e[2].dataType,e[2].dims.length),x.push(b));let T=pt("output",e[0].dataType,o.length);x.push(T);let E=[{name:"num_tile_n",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}],S="",O="";t.transA&&t.transB?(O=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${g.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${P.type.value}(0);
      }
      `,S="value += tile_a[k][local_id.y] * tile_b[local_id.x][k];"):t.transA&&!t.transB?(O=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${g.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${P.type.value}(0);
      }
      `,S="value += tile_a[k][local_id.y] * tile_b[k][local_id.x];"):!t.transA&&t.transB?(O=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${g.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${P.type.value}(0);
      }
      `,S="value += tile_a[local_id.y][k] * tile_b[local_id.x][k];"):!t.transA&&!t.transB&&(O=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${g.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${P.type.value}(0);
      }
      `,S="value += tile_a[local_id.y][k] * tile_b[k][local_id.x];");let B=t.alpha===1?"":"value *= uniforms.alpha;";return`
  ${y.registerUniforms(E).declareVariables(...x)}
  var<workgroup> tile_a: array<array<${g.type.storage}, ${l}>, ${l}>;
  var<workgroup> tile_b: array<array<${P.type.storage}, ${l}>, ${l}>;
  ${y.mainStart([l,l,1])}
    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * ${l};
    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * ${l};
    let num_tiles = (uniforms.K - 1) / ${l} + 1;
    var k_start = 0u;
    var value = ${T.type.value}(0);
    for (var t: u32 = 0u; t < num_tiles; t++) {
      ${O}
      k_start = k_start + ${l};
      workgroupBarrier();

      for (var k: u32 = 0u; k < ${l}; k++) {
        ${S}
      }
      workgroupBarrier();
    }

    ${B}
    let m = tile_row_start + local_id.y;
    let n = tile_col_start + local_id.x;
    ${b!=null?`let cOffset = ${b.broadcastedIndicesToOffset("vec2(m, n)",T)}; value += ${T.type.value}(uniforms.beta) * ${b.getByOffset("cOffset")};`:""}
    if (m < uniforms.M && n < uniforms.N) {
      output[m * uniforms.N + n] = value;
    }
  }`};return c?{name:"GemmShared",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:u*d},programUniforms:m}),getShaderSource:C}:{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:m}),getShaderSource:w}},eb=e=>{let t=e.transA,r=e.transB,n=e.alpha,i=e.beta;return{transA:t,transB:r,alpha:n,beta:i,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},tb=(e,t)=>{Yy(e.inputs),e.compute(Zy(e.inputs,t))}}),zs,ri,ua,da,rb,nb,sb,ib,ab,ob,lb,ub,db,cb,U3=Ke(()=>{Ct(),Rt(),Nr(),jt(),[zs,ri,ua,da]=[0,1,2,3],rb=e=>{if(e[0].dims.length!==4)throw new Error("only 4-D tensor is supported.");if(e[0].dims.length!==e[1].dims.length)throw new Error("input dimensions must be equal to grid dimensions");if(e[0].dims.length-2!==e[1].dims[e[1].dims.length-1])throw new Error(`last dimension of grid must be equal to ${e[0].dims.length-2}`);if(e[0].dims[0]!==e[1].dims[0])throw new Error("grid batch size must match input batch size")},nb=`
  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {
    let cubic_alpha = -0.75f;
    let x_abs = abs(x);
    var coeffs: vec4<f32>;
    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);
    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);
    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);
    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);
    return coeffs;
  }
`,sb=e=>`
  fn gs_bicubic_interpolate(p: mat4x4<${e}>, x: f32, y: f32) -> ${e} {
    var v: vec4<f32>;
    var coeffs = gs_get_cubic_coeffs(x);
    for (var i = 0; i < 4; i++) {
      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];
    }
    coeffs = gs_get_cubic_coeffs(y);
    let pixel = ${e}(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);
    return pixel;
  }
`,ib=e=>`
  fn gs_denormalize(n: f32, length: i32) -> f32 {
    ${e.alignCorners===0?`
    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]
    return ((n + 1.0) * f32(length) - 1.0) / 2.0;
    `:`
    // alignCorners: true => [-1, 1] to [0, length - 1]
    return (n + 1.0) / 2.0 * (f32(length - 1));
    `}
  }
`,ab=e=>`
  ${e.paddingMode==="reflection"?`
      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {
        var dx = 0.0;
        var fx = f32(x);
        let range = x_max - x_min;
        if (fx < x_min) {
          dx = x_min - fx;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_min + r;
          } else {
            fx = x_max - r;
          }
        } else if (fx > x_max) {
          dx = fx - x_max;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_max - r;
          } else {
            fx = x_min + r;
          }
        }
        return u32(fx);
      }`:""}
`,ob=(e,t,r)=>`
  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> ${t} {
     var pixel = ${t}(0);
     var indices = vec4<u32>(0);
     indices[${zs}] = batch;
     indices[${ri}] = channel;`+(()=>{switch(r.paddingMode){case"zeros":return`
          if (r >= 0 && r < H && c >=0 && c < W) {
            indices[${ua}] = u32(r);
            indices[${da}] = u32(c);
          } else {
            return ${t}(0);
          }
        `;case"border":return`
          indices[${ua}] = u32(clamp(r, 0, H - 1));
          indices[${da}] = u32(clamp(c, 0, W - 1));
        `;case"reflection":return`
          indices[${ua}] = gs_reflect(r, border[1], border[3]);
          indices[${da}] = gs_reflect(c, border[0], border[2]);
        `;default:throw new Error(`padding mode ${r.paddingMode} is not supported`)}})()+`
    return ${e.getByIndices("indices")};
  }
`,lb=(e,t,r)=>(()=>{switch(r.mode){case"nearest":return`
          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[${zs}], indices[${ri}], border);
        `;case"bilinear":return`
          let x1 = i32(floor(x));
          let y1 = i32(floor(y));
          let x2 = x1 + 1;
          let y2 = y1 + 1;

          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[${zs}], indices[${ri}], border);
          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[${zs}], indices[${ri}], border);
          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[${zs}], indices[${ri}], border);
          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[${zs}], indices[${ri}], border);

          let dx2 = ${t}(f32(x2) - x);
          let dx1 = ${t}(x - f32(x1));
          let dy2 = ${t}(f32(y2) - y);
          let dy1 = ${t}(y - f32(y1));
          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);
        `;case"bicubic":return`
          let x0 = i32(floor(x)) - 1;
          let y0 = i32(floor(y)) - 1;
          var p: mat4x4<${t}>;
          for (var h = 0; h < 4; h++) {
            for (var w = 0; w < 4; w++) {
              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[${zs}], indices[${ri}], border);
            }
          }

          let dx = x - f32(x0 + 1);
          let dy = y - f32(y0 + 1);
          let result = gs_bicubic_interpolate(p, dx, dy);
        `;default:throw new Error(`mode ${r.mode} is not supported`)}})()+`${e.setByOffset("global_idx","result")}`,ub=(e,t)=>{let r=Fe("x",e[0].dataType,e[0].dims.length),n=[e[1].dims[0],e[1].dims[1],e[1].dims[2]],i=Fe("grid",e[1].dataType,n.length,2),s=[e[0].dims[0],e[0].dims[1],e[1].dims[1],e[1].dims[2]];t.format==="NHWC"&&(s=[e[0].dims[0],e[1].dims[1],e[1].dims[2],e[0].dims[3]],[zs,ri,ua,da]=[0,3,1,2]);let a=pt("output",e[0].dataType,s.length),o=r.type.value,l=Pe.size(s),u=[{type:12,data:l},...yt(e[0].dims,n,s)],d=c=>`
  ${c.registerUniform("output_size","u32").declareVariables(r,i,a)}
  ${nb}
  ${sb(o)}
  ${ib(t)}
  ${ab(t)}
  ${ob(r,o,t)}

  ${c.mainStart()}
    ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let H_in = i32(uniforms.x_shape[${ua}]);
      let W_in = i32(uniforms.x_shape[${da}]);

      ${t.alignCorners===0?`
      let x_min = -0.5;
      let x_max = f32(W_in) - 0.5;
      let y_min = -0.5;
      let y_max = f32(H_in) - 0.5;
      `:`
      let x_min = 0.0;
      let x_max = f32(W_in) - 1.0;
      let y_min = 0.0;
      let y_max = f32(H_in) - 1.0;
      `};
      let border = vec4<f32>(x_min, y_min, x_max, y_max);

      let indices = ${a.offsetToIndices("global_idx")};
      var grid_indices = vec3<u32>(indices[${zs}], indices[${ua}], indices[${da}]);
      let nxy = ${i.getByIndices("grid_indices")};
      var x = gs_denormalize(f32(nxy[0]), W_in);
      var y = gs_denormalize(f32(nxy[1]), H_in);

      ${lb(a,o,t)}
  }`;return{name:"GridSample",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:["type","type"]},getRunData:c=>{let p=Pe.size(s);return{outputs:[{dims:s,dataType:c[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:u}},getShaderSource:d}},db=(e,t)=>{rb(e.inputs),e.compute(ub(e.inputs,t))},cb=e=>or({alignCorners:e.align_corners,mode:e.mode,paddingMode:e.padding_mode,format:e.format})}),Tn,pb,hb,uc,fb,qo,mb,_b=Ke(()=>{Ct(),Rt(),Nr(),Sd(),Nd(),jt(),Pi(),Tn=(e,t)=>e.length>t&&e[t].dims.length>0?e[t]:void 0,pb=(e,t)=>{let r=e[0],n=Tn(e,1),i=Tn(e,2),s=Tn(e,3),a=Tn(e,4),o=Tn(e,5),l=Tn(e,6),u=Tn(e,7);if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let d=r.dims[0],c=r.dims[1],p=r.dims.length===3?r.dims[2]:t.numHeads*r.dims[4],m=c,f=0,w=0,C=Math.floor(p/t.numHeads);if(l&&u&&Pe.size(l.dims)&&Pe.size(u.dims)){if(l.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(l.dims[0]!==d||l.dims[1]!==t.numHeads||l.dims[3]!==C)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(u.dims[0]!==d||u.dims[1]!==t.numHeads||u.dims[3]!==C)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(l.dims[2]!==u.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(u.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');f=l.dims[2],w=l.dims[2]}else if(l&&Pe.size(l.dims)||u&&Pe.size(u.dims))throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let y;if(n&&Pe.size(n.dims)>0){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(n.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');y=2,m=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==C)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(i)throw new Error('Expect "value" be none when "key" has packed kv format.');y=5,m=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==C)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');y=0,m=n.dims[2]}}else{if(r.dims.length!==5)throw new Error('Input "query" is expected to have 5 dimensions when key is empty');if(r.dims[2]!==t.numHeads||r.dims[3]!==3)throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');y=3}if(s&&Pe.size(s.dims)>0){if(s.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(n&&n.dims.length===5&&n.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let g=f+m,P=0;if(a&&Pe.size(a.dims)>0){P=8;let E=a.dims;throw E.length===1?E[0]===d?P=1:E[0]===3*d+2&&(P=3):E.length===2&&E[0]===d&&E[1]===g&&(P=5),P===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, total_sequence_length)'):new Error("Mask not supported")}let b=!1,x=p;if(i&&Pe.size(i.dims)>0){if(i.dims.length!==3&&i.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==i.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(i.dims.length===3){if(m!==i.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');x=i.dims[2]}else{if(m!==i.dims[2])throw new Error('Input "key" and "value" shall have the same dim 2 (kv_sequence_length)');x=i.dims[1]*i.dims[3],b=!0}}let T=!1;if(a&&Pe.size(a.dims)>0)throw new Error("Key padding mask is not supported");if(o&&Pe.size(o.dims)>0){if(o.dims.length!==4)throw new Error('Input "attention_bias" is expected to have 4 dimensions');if(o.dims[0]!==d||o.dims[1]!==t.numHeads||o.dims[2]!==c||o.dims[3]!==g)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:d,sequenceLength:c,pastSequenceLength:f,kvSequenceLength:m,totalSequenceLength:g,maxSequenceLength:w,inputHiddenSize:0,hiddenSize:p,vHiddenSize:x,headSize:C,vHeadSize:Math.floor(x/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:P,scale:t.scale,broadcastResPosBias:T,passPastInKv:b,qkvFormat:y}},hb=e=>or({...e}),uc=or({perm:[0,2,1,3]}),fb=(e,t,r,n,i,s,a)=>{let o=[n,i,s],l=Pe.size(o),u=[{type:12,data:l},{type:12,data:a},{type:12,data:s}],d=c=>{let p=pt("qkv_with_bias",t.dataType,o),m=Fe("qkv",t.dataType,o),f=Fe("bias",r.dataType,o),w=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${c.registerUniforms(w).declareVariables(m,f,p)}
  ${c.mainStart()}
    ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:o,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:u}),getShaderSource:d},{inputs:[t,r],outputs:[-1]})[0]},qo=(e,t,r,n,i,s,a,o)=>{let l=s;if(a&&Pe.size(a.dims)>0){if(n===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return l=fb(e,s,a,t,n,r*i,o),l=l.reshape([t,n,r,i]),r===1||n===1?l:e.compute(Bn(l,uc.perm),{inputs:[l],outputs:[-1]})[0]}else return s.dims.length===3&&(l=s.reshape([t,n,r,i])),r===1||n===1?l:e.compute(Bn(l,uc.perm),{inputs:[l],outputs:[-1]})[0]},mb=(e,t)=>{let r=pb(e.inputs,t),n=e.inputs[0],i=Tn(e.inputs,1),s=Tn(e.inputs,2),a=Tn(e.inputs,3),o=Tn(e.inputs,4),l=Tn(e.inputs,5),u=Tn(e.inputs,6),d=Tn(e.inputs,7);if(n.dims.length===5)throw new Error("Packed QKV is not implemented");if((i==null?void 0:i.dims.length)===5)throw new Error("Packed KV is not implemented");let c=i&&s&&i.dims.length===4&&s.dims.length===4,p=qo(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,n,a,0);if(c)return jo(e,p,i,s,o,void 0,u,d,l,r);if(!i||!s)throw new Error("key and value must be provided");let m=qo(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,i,a,r.hiddenSize),f=qo(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,s,a,2*r.hiddenSize);jo(e,p,m,f,o,void 0,u,d,l,r)}}),gb,wb,yb,bb,dc,vb,xb,$b=Ke(()=>{Ct(),Rt(),Nr(),jt(),gb=e=>{if(!e||e.length<1)throw new Error("too few inputs")},wb=(e,t)=>{let r=[],n=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(i=>r.push(Number(i))),n=r.length),or({numOutputs:n,axis:t.axis,splitSizes:r})},yb=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${_t("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,bb=e=>{let t=e.length,r=[];for(let n=0;n<t;++n){let i=e[n].setByIndices("indices","input[global_idx]");t===1?r.push(i):n===0?r.push(`if (output_number == ${n}u) { ${i} }`):n===t-1?r.push(`else { ${i} }`):r.push(`else if (output_number == ${n}) { ${i} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},dc=(e,t)=>{let r=e[0].dims,n=Pe.size(r),i=e[0].dataType,s=Pe.normalizeAxis(t.axis,r.length),a=new Array(t.numOutputs),o=Fe("input",i,r.length),l=new Array(t.numOutputs),u=[],d=[],c=0,p=[{type:12,data:n}];for(let f=0;f<t.numOutputs;f++){c+=t.splitSizes[f],l[f]=c;let w=r.slice();w[s]=t.splitSizes[f],d.push(w),a[f]=pt(`output${f}`,i,w.length),u.push({dims:d[f],dataType:e[0].dataType})}p.push({type:12,data:l},...yt(r,...d));let m=f=>`
  ${f.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",l.length).declareVariables(o,...a)}
  ${yb(l.length)}
  ${bb(a)}

  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${o.offsetToIndices("global_idx")};
    var index = ${o.indicesGet("indices",s)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${_t("uniforms.size_in_split_axis","output_number - 1u",l.length)};
      ${o.indicesSet("indices",s,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:m,getRunData:()=>({outputs:u,dispatchGroup:{x:Math.ceil(n/64)},programUniforms:p})}},vb=(e,t)=>{gb(e.inputs);let r=e.inputs.length===1?t:wb(e.inputs,t);e.compute(dc(e.inputs,r),{inputs:[0]})},xb=e=>{let t=e.axis,r=e.splitSizes,n=e.numOutputs<0?r.length:e.numOutputs;if(n!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return or({axis:t,numOutputs:n,splitSizes:r})}}),Mb,Wl,Tb,Eb=Ke(()=>{Ct(),Rt(),Nr(),jt(),Mb=(e,t)=>{let[r,n,i,s]=e,{numHeads:a,rotaryEmbeddingDim:o}=t;if(r.dims.length!==3&&r.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${r.dims.length}`);if(!Pe.areEqual(n.dims,[])&&!Pe.areEqual(n.dims,[1])&&n.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${n.dims.length}`);if(i.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${i.dims.length}`);if(s.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${s.dims.length}`);if(!Pe.areEqual(i.dims,s.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(o>0&&a===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let l=r.dims[0],u=r.dims[r.dims.length-2],d=i.dims[0],c=Pe.sizeFromDimension(r.dims,1)/u,p=o===0?i.dims[1]*2:c/a;if(o>p)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(n.dims.length===2){if(l!==n.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${n.dims[0]}`);if(u!==n.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${n.dims[1]}`)}if(p/2!==i.dims[1]&&o/2!==i.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${i.dims[1]}`);if(u>d)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},Wl=(e,t)=>{let{interleaved:r,numHeads:n,rotaryEmbeddingDim:i,scale:s}=t,a=e[0].dims[0],o=Pe.sizeFromDimension(e[0].dims,1),l=e[0].dims[e[0].dims.length-2],u=o/l,d=e[2].dims[1],c=i===0?d*2:u/n,p=new Array(a,l,u/c,c-d),m=Pe.computeStrides(p),f=[{type:1,data:s},{type:12,data:p},{type:12,data:m},...e[0].dims.length===3?new Array({type:12,data:[o,u,c,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[o,c,l*c,1]}):[],...yt(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],w=C=>{let y=Fe("input",e[0].dataType,e[0].dims.length),g=Fe("position_ids",e[1].dataType,e[1].dims.length),P=Fe("cos_cache",e[2].dataType,e[2].dims.length),b=Fe("sin_cache",e[3].dataType,e[3].dims.length),x=pt("output",e[0].dataType,e[0].dims.length);return C.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:p.length},{name:"global_strides",type:"u32",length:m.length},{name:"input_output_strides",type:"u32",length:m.length}]),`
        ${C.declareVariables(y,g,P,b,x)}

        ${C.mainStart(Qa)}
          let half_rotary_emb_dim = uniforms.${P.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${C.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${g.broadcastedIndicesToOffset("bsnh.xy",pt("",g.type.tensor,2))};
            let position_id =
                u32(${g.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${r});
            let j = i + select(half_rotary_emb_dim, 1, ${r});
            let re = ${y.getByOffset("i")} * ${P.get("position_id","bsnh[3]")} -
                ${y.getByOffset("j")} * ${b.get("position_id","bsnh[3]")};
            ${x.setByOffset("i","re")}
            let im = ${y.getByOffset("i")} * ${b.get("position_id","bsnh[3]")} +
                ${y.getByOffset("j")} * ${P.get("position_id","bsnh[3]")};
            ${x.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${x.setByOffset("k",y.getByOffset("k"))}
          }
        }`};return{name:"RotaryEmbedding",shaderCache:{hint:or({interleaved:r}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:w,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(Pe.size(p)/Qa)},programUniforms:f})}},Tb=(e,t)=>{Mb(e.inputs,t),e.compute(Wl(e.inputs,t))}}),Pb,Cb,cc,Sb,kb,W3=Ke(()=>{Nr(),Ct(),Nd(),_b(),$b(),Pi(),Eb(),jt(),Pb=(e,t)=>{if(t.doRotary&&e.length<=7)throw new Error("cos_cache and sin_cache inputs are required if do_rotary is specified");let r=e[0],n=e[1],i=e[2],s=e[3],a=e[4];if(t.doRotary!==0&&e.length<=7)throw new Error("cos_cast and sin_cache are expected if do_rotary attribute is non-zero");if(t.localWindowSize!==-1)throw new Error("Local attention is not supported");if(t.softcap!==0)throw new Error("Softcap is not supported");if(t.rotaryInterleaved!==0)throw new Error("Rotary interleaved is not supported");if(t.smoothSoftmax)throw new Error("Smooth softmax is not supported");if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let o=!1,l=r.dims[0],u=r.dims[1],d=r.dims.length===3?o?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],c=u,p=0,m=!n||n.dims.length===0,f=Math.floor(m?d/(t.numHeads+2*t.kvNumHeads):d/t.numHeads);m&&(d=f*t.numHeads);let w=s&&s.dims.length!==0,C=a&&a.dims.length!==0;if(w&&s.dims.length===4&&s.dims[0]===l&&s.dims[1]!==t.kvNumHeads&&s.dims[2]===t.kvNumHeads&&s.dims[3]===f)throw new Error("BSNH pastKey/pastValue is not supported");if(w&&C){if(s.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(a.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');p=s.dims[2]}else if(w||C)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let y=1;if(n&&n.dims.length>0){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(r.dims[2]%n.dims[2]!==0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');c=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==f)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(i)throw new Error('Expect "value" be none when "key" has packed kv format.');c=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==f)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');c=n.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');y=3}let g=0,P=!1,b=t.kvNumHeads?f*t.kvNumHeads:d;if(i&&i.dims.length>0){if(i.dims.length!==3&&i.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==i.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(i.dims.length===3){if(c!==i.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');b=i.dims[2]}else{if(c!==i.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');b=i.dims[1]*i.dims[3],P=!0}}let x=e.length>4?e[5]:void 0;if(x&&x.dims.length!==1&&x.dims[0]!==l)throw new Error('Input "seqlens" is expected to have 1 dimension and the same dim 0 as batch_size');return{batchSize:l,sequenceLength:u,pastSequenceLength:p,kvSequenceLength:c,totalSequenceLength:-1,maxSequenceLength:-1,inputHiddenSize:0,hiddenSize:d,vHiddenSize:b,headSize:f,vHeadSize:Math.floor(b/t.kvNumHeads),numHeads:t.numHeads,kvNumHeads:t.kvNumHeads,nReps:t.numHeads/t.kvNumHeads,pastPresentShareBuffer:!1,maskType:g,scale:t.scale,broadcastResPosBias:!1,passPastInKv:P,qkvFormat:y}},Cb=or({perm:[0,2,1,3]}),cc=(e,t,r)=>{let n=t,i=r.kvNumHeads;return t.dims.length===3&&r.kvSequenceLength!==0&&(n=t.reshape([r.batchSize,r.kvSequenceLength,i,r.headSize]),n=e.compute(Bn(n,Cb.perm),{inputs:[n],outputs:[-1]})[0]),n},Sb=(e,t,r,n)=>{let i=7,s=["type","type"],a=[e*t],o=e*t,l=[{type:12,data:o},{type:12,data:t},{type:12,data:e}],u=d=>{let c=Fe("seq_lens",r.dataType,r.dims),p=Fe("total_seq_lens",n.dataType,n.dims),m=pt("pos_ids",i,a),f=[{name:"output_size",type:"u32"},{name:"sequence_length",type:"u32"},{name:"batch_size",type:"u32"}];return`
  ${d.registerUniforms(f).declareVariables(c,p,m)}
  ${d.mainStart()}
    ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let total_sequence_length = u32(${p.getByOffset("0")});
    let is_subsequent_prompt = uniforms.sequence_length > 1 && uniforms.sequence_length != total_sequence_length;
    let is_first_prompt = !is_subsequent_prompt && uniforms.sequence_length == total_sequence_length;
    let batch_idx = global_idx / uniforms.sequence_length;
    let sequence_idx = i32(global_idx % uniforms.sequence_length);
    var pos_id: i32 = 0;
    let seqlen = ${c.getByOffset("batch_idx")};
    let total_seqlen = seqlen + 1;
    if (is_first_prompt) {
      if (sequence_idx < total_seqlen) {
        pos_id = sequence_idx;
      } else {
        pos_id = 1;
      }
      ${m.setByOffset("global_idx","pos_id")}
    } else if (is_subsequent_prompt) {
      let past_seqlen = total_seqlen - i32(uniforms.sequence_length);
      if (past_seqlen + sequence_idx < total_seqlen) {
        pos_id = past_seqlen + sequence_idx;
      } else {
        pos_id = 1;
      }
      ${m.setByOffset("global_idx","pos_id")}
    } else if (global_idx < uniforms.batch_size) {
      ${m.setByOffset("global_idx","seqlen")}
    };
  }
  `};return{name:"GeneratePositionIds",shaderCache:{hint:`${e};${t}`,inputDependencies:s},getRunData:()=>({outputs:[{dims:a,dataType:i}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:l}),getShaderSource:u}},kb=(e,t)=>{var b;let r=Pb(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(((b=e.inputs[1])==null?void 0:b.dims.length)===5)throw new Error("Packed KV is not implemented");let n=e.inputs[0],i=e.inputs[1]&&e.inputs[1].dims.length>0?e.inputs[1]:void 0,s=e.inputs[2]&&e.inputs[2].dims.length>0?e.inputs[2]:void 0,a=e.inputs[3]&&e.inputs[3].dims.length!==0?e.inputs[3]:void 0,o=e.inputs[4]&&e.inputs[4].dims.length!==0?e.inputs[4]:void 0,l=e.inputs.length>4?e.inputs[5]:void 0,u=e.inputs.length>5?e.inputs[6]:void 0,d=r.kvNumHeads?r.kvNumHeads:r.numHeads,c=or({axis:2,numOutputs:3,splitSizes:[r.numHeads*r.headSize,d*r.headSize,d*r.headSize]}),[p,m,f]=!i&&!s?e.compute(dc([n],c),{inputs:[n],outputs:[-1,-1,-1]}):[n,i,s],w,C;if(t.doRotary){let x=e.compute(Sb(r.batchSize,r.sequenceLength,l,u),{inputs:[l,u],outputs:[-1]})[0],T=e.inputs[7],E=e.inputs[8],S=or({interleaved:t.rotaryInterleaved!==0,numHeads:r.numHeads,rotaryEmbeddingDim:0,scale:t.scale}),O=[p,x,T,E],B=[-1];w=e.compute(Wl(O,S),{inputs:O,outputs:B})[0],O.splice(0,1,m);let V=or({interleaved:t.rotaryInterleaved!==0,numHeads:r.kvNumHeads,rotaryEmbeddingDim:0,scale:t.scale});C=e.compute(Wl(O,V),{inputs:O,outputs:B})[0]}let y=qo(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,t.doRotary?w:p,void 0,0),g=cc(e,t.doRotary?C:m,r),P=cc(e,f,r);jo(e,y,g,P,void 0,void 0,a,o,void 0,r,l,u)}}),pc,Ib,Ab,Ob,V3=Ke(()=>{Ct(),Rt(),Pi(),jt(),pc=(e,t,r,n,i,s,a,o)=>{let l=zr(s),u=l===1?"f32":`vec${l}f`,d=l===1?"vec2f":`mat2x${l}f`,c=i*a,p=64;c===1&&(p=256);let m=[i,a,s/l],f=[i,a,2],w=["rank","type","type"],C=[];C.push(...yt(m,f));let y=g=>{let P=Fe("x",t.dataType,3,l),b=Fe("scale",r.dataType,r.dims),x=Fe("bias",n.dataType,n.dims),T=pt("output",1,3,2),E=[P,b,x,T];return`
  var<workgroup> workgroup_shared : array<${d}, ${p}>;
  const workgroup_size = ${p}u;
  ${g.declareVariables(...E)}
  ${g.mainStart(p)}
    let batch = workgroup_index / uniforms.x_shape[1];
    let channel = workgroup_index % uniforms.x_shape[1];
    let hight = uniforms.x_shape[2];
    // initialize workgroup memory
    var sum = ${u}(0);
    var squared_sum = ${u}(0);
    for (var h = local_idx; h < hight; h += workgroup_size) {
      let value = ${u}(${P.get("batch","channel","h")});
      sum += value;
      squared_sum += value * value;
    }
    workgroup_shared[local_idx] = ${d}(sum, squared_sum);
    workgroupBarrier();

    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (local_idx < currSize) {
        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];
      }
      workgroupBarrier();
    }
    if (local_idx == 0) {
      let sum_final = ${Ei("workgroup_shared[0][0]",l)} / f32(hight * ${l});
      let squared_sum_final = ${Ei("workgroup_shared[0][1]",l)} / f32(hight * ${l});

      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${o}));
      let channel_scale = inv_std_dev * f32(scale[channel]);
      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;
      output[workgroup_index] = vec2f(channel_scale, channel_shift);
    }
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${l};${o};${p}`,inputDependencies:w},getRunData:()=>({outputs:[{dims:f,dataType:1}],dispatchGroup:{x:c},programUniforms:C}),getShaderSource:y},{inputs:[t,r,n],outputs:[-1]})[0]},Ib=(e,t,r)=>{let n=t[0].dims,i=n,s=2,a=n[0],o=n[1],l=Pe.sizeFromDimension(n,s),u=zr(l),d=Pe.size(i)/u,c=pc(e,t[0],t[1],t[2],a,l,o,r.epsilon),p=[a,o,l/u],m=[a,o],f=["type","none"],w=C=>{let y=Fe("x",t[0].dataType,p.length,u),g=Fe("scale_shift",1,m.length,2),P=pt("output",t[0].dataType,p.length,u),b=[y,g,P];return`
  ${C.registerUniform("output_size","u32").declareVariables(...b)}
  ${C.mainStart()}
  ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let outputIndices = ${P.offsetToIndices("global_idx")};
      let batch = outputIndices[0];
      let channel = outputIndices[1];
      let scale_shift = ${g.getByIndices("vec2<u32>(batch, channel)")};
      let value = ${y.getByOffset("global_idx")} * ${P.type.value}(scale_shift.x) + ${P.type.value}(scale_shift.y);
      ${P.setByOffset("global_idx","value")};
  }`};e.compute({name:"InstanceNormalization",shaderCache:{hint:`${u}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:i,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:[{type:12,data:d},...yt(p,m,p)]}),getShaderSource:w},{inputs:[t[0],c]})},Ab=(e,t,r)=>{let n=t[0].dims,i=n,s=n[0],a=n[n.length-1],o=Pe.sizeFromDimension(n,1)/a,l=zr(a),u=Pe.size(i)/l,d=[{type:12,data:o},{type:12,data:Math.floor(a/l)}],c=["type","type"],p=!1,m=[0,n.length-1];for(let y=0;y<n.length-2;y++)p=p||n[y+1]!==1,m.push(y+1);p=p&&n[n.length-1]!==1;let f=p?e.compute(Bn(e.inputs[0],m),{inputs:[e.inputs[0]],outputs:[-1]})[0]:e.inputs[0].reshape(Array.from({length:n.length},(y,g)=>n[m[g]])),w=pc(e,f,t[1],t[2],s,o,a,r.epsilon),C=y=>{let g=nn(t[0].dataType),P=l===1?"vec2f":`mat${l}x2f`,b=E=>{let S=E===0?"x":"y",O=l===1?"f32":`vec${l}f`;switch(l){case 1:return`${g}(${O}(scale.${S}))`;case 2:return`vec2<${g}>(${O}(scale[0].${S}, scale[1].${S}))`;case 4:return`vec4<${g}>(${O}(scale[0].${S}, scale[1].${S}, scale[2].${S}, scale[3].${S}))`;default:throw new Error(`Not supported compoents ${l}`)}},x=Fe("input",t[0].dataType,t[0].dims,l),T=pt("output",t[0].dataType,i,l);return`
  @group(0) @binding(0) var<storage, read> input : array<${x.type.storage}>;
  @group(0) @binding(1) var<storage, read> scale_input : array<${P}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${T.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${y.mainStart()}
    let current_image_number = global_idx / (uniforms.C * uniforms.H);
    let current_channel_number = global_idx % uniforms.C;

    let scale_offset = current_image_number * uniforms.C + current_channel_number;
    let scale = scale_input[scale_offset];
    output[global_idx] = fma(input[global_idx], ${b(0)}, ${b(1)});
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${l}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:i,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:d}),getShaderSource:C},{inputs:[t[0],w]})},Ob=(e,t)=>{t.format==="NHWC"?Ab(e,e.inputs,t):Ib(e,e.inputs,t)}}),Db,zb,Fb,G3=Ke(()=>{Ct(),Rt(),jt(),Db=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},zb=(e,t,r)=>{let n=t.simplified,i=e[0].dims,s=e[1],a=!n&&e[2],o=i,l=Pe.normalizeAxis(t.axis,i.length),u=Pe.sizeToDimension(i,l),d=Pe.sizeFromDimension(i,l),c=Pe.size(s.dims),p=a?Pe.size(a.dims):0;if(c!==d||a&&p!==d)throw new Error(`Size of X.shape()[axis:] == ${d}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${c} and bias size of ${p}`);let m=[];for(let x=0;x<i.length;++x)x<l?m.push(i[x]):m.push(1);let f=zr(d),w=["type","type"],C=[{type:12,data:u},{type:1,data:d},{type:12,data:Math.floor(d/f)},{type:1,data:t.epsilon}];a&&w.push("type");let y=r>1,g=r>2,P=x=>{let T=nn(e[0].dataType),E=[Fe("x",e[0].dataType,e[0].dims,f),Fe("scale",s.dataType,s.dims,f)];a&&E.push(Fe("bias",a.dataType,a.dims,f)),E.push(pt("output",e[0].dataType,o,f)),y&&E.push(pt("mean_data_output",1,m)),g&&E.push(pt("inv_std_output",1,m));let S=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${x.registerUniforms(S).declareVariables(...E)}
  ${x.mainStart()}
    ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${Od("f32",f)};
    var mean_square_vector = ${Od("f32",f)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${Xa(T,f,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${Ei("mean_vector",f)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${Ei("mean_square_vector",f)} / uniforms.norm_size ${n?"":"- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${Xa(T,f,"x[j + offset]")};
      let f32scale = ${Xa(T,f,"scale[j]")};
      output[j + offset] = ${E[0].type.value}((f32input ${n?"":"- mean"}) * inv_std_dev * f32scale
        ${a?`+ ${Xa(T,f,"bias[j]")}`:""}
      );
    }

    ${y?"mean_data_output[global_idx] = mean":""};
    ${g?"inv_std_output[global_idx] = inv_std_dev":""};
  }`},b=[{dims:o,dataType:e[0].dataType}];return y&&b.push({dims:m,dataType:1}),g&&b.push({dims:m,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${f};${r};${n}`,inputDependencies:w},getRunData:()=>({outputs:b,dispatchGroup:{x:Math.ceil(u/64)},programUniforms:C}),getShaderSource:P}},Fb=(e,t)=>{Db(e.inputs),e.compute(zb(e.inputs,t,e.outputCount))}}),Bb,Lb,q3=Ke(()=>{Rt(),Kd(),Yd(),Bb=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Lb=e=>{Bb(e.inputs);let t=Ka.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");let r=t[t.length-1],n=e.inputs[0].dims[e.inputs[0].dims.length-1];if(r<8&&n<8)e.compute(Hd(e.inputs,{activation:""},t));else{let i=t[t.length-2],s=Pe.size(e.inputs[0].dims.slice(0,-2)),a=Pe.size(e.inputs[1].dims.slice(0,-2));if(s!==1&&i===1&&a===1){let o=e.inputs[0].reshape([1,s,n]),l=e.inputs[1].reshape([1,n,r]),u=[1,s,r],d=[o,l];e.compute(Rl(d,{activation:""},t,u),{inputs:d})}else e.compute(Rl(e.inputs,{activation:""},t))}}}),Rb,Nb,jb,Ub,Wb,H3=Ke(()=>{Ct(),Rt(),Nr(),jt(),Rb=(e,t)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let r=e[0],n=r.dims.length;if(r.dims[n-1]!==t.k)throw new Error("The last dim of input shape does not match the k value");let i=Math.floor((t.k+t.blockSize-1)/t.blockSize),s=t.blockSize/8*t.bits,a=e[1];if(!Pe.areEqual(a.dims,[t.n,i,s]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let o=e[2].dims;if(Pe.size(o)!==t.n*i)throw new Error("scales input size error.");if(e.length===4){let l=e[3].dims,u=t.bits>4?t.n*i:t.n*Math.floor((i+1)/2);if(Pe.size(l)!==u)throw new Error("zeroPoints input size error.")}},Nb=(e,t)=>{let r=e[0].dims,n=r.length,i=r[n-2],s=t.k,a=t.n,o=r.slice(0,n-2),l=Pe.size(o),u=e[1].dims[2]/4,d=e[0].dataType,c=zr(t.k),p=zr(u),m=zr(a),f=o.concat([i,a]),w=i>1&&a/m%2===0?2:1,C=Pe.size(f)/m/w,y=64,g=[],P=[l,i,s/c],b=Pe.convertShape(e[1].dims).slice();b.splice(-1,1,u/p),g.push(...yt(P)),g.push(...yt(b)),g.push(...yt(e[2].dims)),e.length===4&&g.push(...yt(Pe.convertShape(e[3].dims)));let x=[l,i,a/m];g.push(...yt(x));let T=E=>{let S=P.length,O=Fe("a",e[0].dataType,S,c),B=Fe("b",12,b.length,p),V=Fe("scales",e[2].dataType,e[2].dims.length),W=[O,B,V],N=e.length===4?Fe("zero_points",12,e[3].dims.length):void 0;N&&W.push(N);let te=x.length,q=pt("output",e[0].dataType,te,m),K=nn(e[0].dataType),Y=(()=>{switch(c){case 1:return`array<${K}, 8>`;case 2:return`mat4x2<${K}>`;case 4:return`mat2x4<${K}>`;default:throw new Error(`${c}-component is not supported.`)}})(),Z=()=>{let L=`
          // reuse a data
            var input_offset = ${O.indicesToOffset(`${O.type.indices}(batch, row, word_offset)`)};
            var a_data: ${Y};
            for (var j: u32 = 0; j < ${8/c}; j++) {
              a_data[j] = ${O.getByOffset("input_offset")};
              input_offset++;
            }
          `;for(let F=0;F<m*w;F++)L+=`
            b_value = ${p===1?`b${F}_data`:`b${F}_data[i]`};
            b_value_lower = unpack4xU8(b_value & b_mask);
            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);
            b_quantized_values = ${Y}(${Array.from({length:4},(U,re)=>`${K}(b_value_lower[${re}]), ${K}(b_value_upper[${re}])`).join(", ")});
            b_dequantized_values = ${c===1?`${Y}(${Array.from({length:8},(U,re)=>`(b_quantized_values[${re}] - ${N?`zero_point${F}`:"zero_point"}) * scale${F}`).join(", ")});`:`(b_quantized_values - ${Y}(${Array(8).fill(`${N?`zero_point${F}`:"zero_point"}`).join(",")})) * scale${F};`};
            workgroup_shared[local_id.x * ${w} + ${Math.floor(F/m)}]${m>1?`[${F%m}]`:""} += ${Array.from({length:8/c},(U,re)=>`${c===1?`a_data[${re}] * b_dequantized_values[${re}]`:`dot(a_data[${re}], b_dequantized_values[${re}])`}`).join(" + ")};
          `;return L},de=()=>{let L=`
            var col_index = col * ${m};
            ${N?`
            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;
            var zero_point_byte_count: u32;
            var zero_point_word_index: u32;
            var zero_point_byte_offset: u32;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32;
            var zero_point_word: u32;`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${K}(8);`}
            `;for(let F=0;F<m*w;F++)L+=`
            let scale${F} = ${V.getByOffset("col_index * nBlocksPerCol + block")};
            ${N?`
            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);
            zero_point_word_index = zero_point_byte_count >> 0x2u;
            zero_point_byte_offset = zero_point_byte_count & 0x3u;
            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            zero_point_word = ${N.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point${F} = ${K}((zero_point_word) & 0xFu);`:""}
            col_index += 1;`;return L},pe=()=>{let L=`col_index = col * ${m};`;for(let F=0;F<m*w;F++)L+=`
            let b${F}_data = ${B.getByIndices(`${B.type.indices}(col_index, block, word)`)};
            col_index += 1;`;return L+=`
            var b_value: u32;
            let b_mask: u32 = 0x0F0F0F0Fu;
            var b_value_lower: vec4<u32>;
            var b_value_upper: vec4<u32>;
            var b_quantized_values: ${Y};
            var b_dequantized_values: ${Y};`,L};return`
        var<workgroup> workgroup_shared: array<${q.type.value}, ${w*y}>;
        ${E.declareVariables(...W,q)}
        ${E.mainStart([y,1,1])}
          let output_indices = ${q.offsetToIndices(`(global_idx / ${y}) * ${w}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let nBlocksPerCol = uniforms.b_shape[1];

          for (var block = local_id.x; block < nBlocksPerCol; block += ${y}) {
            //process one block
            var word_offset: u32 = block * ${t.blockSize/c};
            ${de()}
            for (var word: u32 = 0; word < ${u}; word += ${p}) {
              ${pe()}
              for (var i: u32 = 0; i < ${p}; i++) {
                ${Z()}
                word_offset += ${8/c};
              }
            }
          }
          workgroupBarrier();

          if (local_id.x < ${w}) {
            var output_value: ${q.type.value} = ${q.type.value}(0);
            var workgroup_shared_offset: u32 = local_id.x;
            for (var b: u32 = 0u; b < ${y}u; b++) {
              output_value += workgroup_shared[workgroup_shared_offset];
              workgroup_shared_offset += ${w};
            }
            ${q.setByIndices(`${q.type.indices}(batch, row, col + local_id.x)`,"output_value")};
          }
        }`};return{name:"MatMulNBits",shaderCache:{hint:`${t.blockSize};${t.bits};${c};${p};${m};${w};${y}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:f,dataType:d}],dispatchGroup:{x:C},programUniforms:g}),getShaderSource:T}},jb=(e,t)=>{let r=e[0].dims,n=r.length,i=r[n-2],s=t.k,a=t.n,o=r.slice(0,n-2),l=Pe.size(o),u=e[1].dims[2]/4,d=e[0].dataType,c=zr(t.k),p=zr(u),m=o.concat([i,a]),f=128,w=a%8===0?8:a%4===0?4:1,C=f/w,y=C*p*8,g=y/c,P=y/t.blockSize,b=Pe.size(m)/w,x=[],T=[l,i,s/c],E=Pe.convertShape(e[1].dims).slice();E.splice(-1,1,u/p),x.push(...yt(T)),x.push(...yt(E)),x.push(...yt(e[2].dims)),e.length===4&&x.push(...yt(Pe.convertShape(e[3].dims)));let S=[l,i,a];x.push(...yt(S));let O=B=>{let V=T.length,W=Fe("a",e[0].dataType,V,c),N=Fe("b",12,E.length,p),te=Fe("scales",e[2].dataType,e[2].dims.length),q=[W,N,te],K=e.length===4?Fe("zero_points",12,e[3].dims.length):void 0;K&&q.push(K);let Y=S.length,Z=pt("output",e[0].dataType,Y),de=nn(e[0].dataType),pe=()=>{switch(c){case 1:return`
          let a_data0 = vec4<${de}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);
          let a_data1 = vec4<${de}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;case 2:return`
          let a_data0 = vec4<${de}>(sub_a[word_offset], sub_a[word_offset + 1]);
          let a_data1 = vec4<${de}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;case 4:return`
          let a_data0 = sub_a[word_offset];
          let a_data1 = sub_a[word_offset + 1];`;default:throw new Error(`${c}-component is not supported.`)}};return`
        var<workgroup> sub_a: array<${W.type.value}, ${g}>;
        var<workgroup> inter_results: array<array<${Z.type.value}, ${C}>, ${w}>;
        ${B.declareVariables(...q,Z)}
        ${B.mainStart([C,w,1])}
          let output_indices = ${Z.offsetToIndices(`workgroup_index * ${w}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let n_blocks_per_col = uniforms.b_shape[1];
          let num_tiles =  (n_blocks_per_col - 1) / ${P} + 1;

          // Loop over shared dimension.
          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {
            let a_col_start = tile * ${g};
            // load one tile A data into shared memory.
            for (var a_offset = local_idx; a_offset < ${g}; a_offset += ${f})
            {
              let a_col = a_col_start + a_offset;
              if (a_col < uniforms.a_shape[2])
              {
                sub_a[a_offset] = ${W.getByIndices(`${W.type.indices}(batch, row, a_col)`)};
              } else {
                sub_a[a_offset] = ${W.type.value}(0);
              }
            }
            workgroupBarrier();

            // each thread process one block
            let b_row = col + local_id.y;
            let block = tile * ${P} + local_id.x;
            ${K?`
            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;
            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);
            let zero_point_word_index = zero_point_byte_count >> 0x2u;
            let zero_point_byte_offset = zero_point_byte_count & 0x3u;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            let zero_point_word = ${K.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point = ${de}((zero_point_word) & 0xFu);`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${de}(8);`}
            let scale = ${te.getByOffset("b_row * n_blocks_per_col + block")};
            let b_data = ${N.getByIndices(`${N.type.indices}(b_row, block, 0)`)};
            var word_offset = local_id.x * ${t.blockSize/c};
            for (var i: u32 = 0; i < ${p}; i++) {
              ${pe()}
              let b_value = ${p===1?"b_data":"b_data[i]"};
              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);
              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);
              let b_quantized_values = mat2x4<${de}>(${Array.from({length:4},(L,F)=>`${de}(b_value_lower[${F}]), ${de}(b_value_upper[${F}])`).join(", ")});
              let b_dequantized_values = (b_quantized_values - mat2x4<${de}>(${Array(8).fill("zero_point").join(",")})) * scale;
              inter_results[local_id.y][local_id.x] += ${Array.from({length:2},(L,F)=>`${`dot(a_data${F}, b_dequantized_values[${F}])`}`).join(" + ")};
              word_offset += ${8/c};
            }
            workgroupBarrier();
          }

          if (local_idx < ${w}) {
            var output_value: ${Z.type.value} = ${Z.type.value}(0);
            for (var b = 0u; b < ${C}; b++) {
              output_value += inter_results[local_idx][b];
            }
            if (col + local_idx < uniforms.output_shape[2])
            {
              ${Z.setByIndices(`${Z.type.indices}(batch, row, col + local_idx)`,"output_value")}
            }
          }
        }`};return{name:"BlockwiseMatMulNBits32",shaderCache:{hint:`${t.blockSize};${c};${p};${C};${w}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:m,dataType:d}],dispatchGroup:{x:b},programUniforms:x}),getShaderSource:O}},Ub=(e,t)=>{Rb(e.inputs,t),t.blockSize===32&&e.adapterInfo.isVendor("intel")&&e.adapterInfo.isArchitecture("gen-12lp")?e.compute(jb(e.inputs,t)):e.compute(Nb(e.inputs,t))},Wb=e=>or(e)}),Vb,Gb,qb,Hb,Kb,Qb,Xb,Jb,Yb,K3=Ke(()=>{Ct(),Rt(),jt(),Vb=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Gb=(e,t,r)=>{let n="";for(let i=t-1;i>=0;--i)n+=`
            k = i32(${e.indicesGet("indices",i)}) - ${_t("uniforms.pads",i,r)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${_t("uniforms.x_shape",i,t)})) {
              break;
            }
            offset += k * i32(${_t("uniforms.x_strides",i,t)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${n}
            value = x[offset];
          }
      `},qb=(e,t,r)=>{let n="";for(let i=t-1;i>=0;--i)n+=`
                k = i32(${e.indicesGet("indices",i)}) - ${_t("uniforms.pads",i,r)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${_t("uniforms.x_shape",i,t)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${_t("uniforms.x_shape",i,t)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${_t("uniforms.x_strides",i,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},Hb=(e,t,r)=>{let n="";for(let i=t-1;i>=0;--i)n+=`
                k = i32(${e.indicesGet("indices",i)}) - ${_t("uniforms.pads",i,r)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${_t("uniforms.x_shape",i,t)})) {
                  k = i32(${_t("uniforms.x_shape",i,t)}) - 1;
                }
                offset += k * i32(${_t("uniforms.x_strides",i,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},Kb=(e,t,r)=>{let n="";for(let i=t-1;i>=0;--i)n+=`
                k = i32(${e.indicesGet("indices",i)}) - ${_t("uniforms.pads",i,r)};
                if (k < 0)  {
                  k += i32(${_t("uniforms.x_shape",i,t)}]);
                }
                if (k >= i32(${_t("uniforms.x_shape",i,t)})) {
                  k -= i32(${_t("uniforms.x_shape",i,t)});
                }
                offset += k * i32(${_t("uniforms.x_strides",i,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},Qb=(e,t,r)=>{switch(r.mode){case 0:return Gb(e,t,r.pads.length);case 1:return qb(e,t,r.pads.length);case 2:return Hb(e,t,r.pads.length);case 3:return Kb(e,t,r.pads.length);default:throw new Error("Invalid mode")}},Xb=(e,t)=>{let r=Pe.padShape(e[0].dims.slice(),t.pads),n=e[0].dims,i=Pe.size(r),s=[{type:12,data:i},{type:6,data:t.pads}],a=e.length>=3&&e[2].data;t.mode===0&&s.push({type:a?e[2].dataType:1,data:t.value}),s.push(...yt(e[0].dims,r));let o=["rank"],l=u=>{let d=pt("output",e[0].dataType,r.length),c=Fe("x",e[0].dataType,n.length),p=c.type.value,m=Qb(d,n.length,t),f=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&f.push({name:"constant_value",type:a?p:"f32"}),`
            ${u.registerUniforms(f).declareVariables(c,d)}
            ${u.mainStart()}
            ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${d.offsetToIndices("global_idx")};

            var value = ${p}(0);
            ${m}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}${a}`,inputDependencies:o},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(Pe.size(r)/64)},programUniforms:s}),getShaderSource:l}},Jb=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),n=e.length>=3&&e[2].data?e[2].dataType===10?e[2].getUint16Array()[0]:e[2].getFloat32Array()[0]:0,i=e[0].dims.length,s=new Int32Array(2*i).fill(0);if(e.length>=4){let o=e[3].getBigInt64Array();for(let l=0;l<o.length;l++)s[Number(o[l])]=Number(r[l]),s[Number(o[l])+i]=Number(r[l+o.length])}else r.forEach((o,l)=>s[Number(l)]=Number(o));let a=[];return s.forEach(o=>a.push(o)),{mode:t.mode,value:n,pads:a}}else return t},Yb=(e,t)=>{Vb(e.inputs);let r=Jb(e.inputs,t);e.compute(Xb(e.inputs,r),{inputs:[0]})}}),Ho,hc,fc,mc,_c,Zb,e0,gc,wc,t0,r0,yc,n0,s0,bc,i0,a0,o0,l0,Q3=Ke(()=>{as(),Ct(),Rt(),jt(),Ho=e=>{if(Pr.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},hc=(e,t,r)=>{let n=t.format==="NHWC",i=e.dims.slice();n&&i.splice(1,0,i.pop());let s=Object.hasOwnProperty.call(t,"dilations"),a=t.kernelShape.slice(),o=t.strides.slice(),l=s?t.dilations.slice():[],u=t.pads.slice();Al.adjustPoolAttributes(r,i,a,o,l,u);let d=Al.computePoolOutputShape(r,i,o,l,a,u,t.autoPad),c=Object.assign({},t);s?Object.assign(c,{kernelShape:a,strides:o,pads:u,dilations:l,cacheKey:t.cacheKey}):Object.assign(c,{kernelShape:a,strides:o,pads:u,cacheKey:t.cacheKey});let p=d.slice();return p.push(p.splice(1,1)[0]),[c,n?p:d]},fc=(e,t)=>{let r=t.format==="NHWC",n=Pe.size(e),i=Pe.size(t.kernelShape),s=[{type:12,data:n},{type:12,data:i}],a=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let o=t.kernelShape[t.kernelShape.length-1],l=t.strides[t.strides.length-1],u=t.pads[t.pads.length/2-1],d=t.pads[t.pads.length-1],c=!!(u+d);s.push({type:12,data:o},{type:12,data:l},{type:12,data:u},{type:12,data:d}),a.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let p=!1;if(t.kernelShape.length===2){let m=t.kernelShape[t.kernelShape.length-2],f=t.strides[t.strides.length-2],w=t.pads[t.pads.length/2-2],C=t.pads[t.pads.length-2];p=!!(w+C),s.push({type:12,data:m},{type:12,data:f},{type:12,data:w},{type:12,data:C}),a.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[s,a,!0,c,p]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let o=Pe.computeStrides(t.kernelShape);s.push({type:12,data:o},{type:12,data:t.pads},{type:12,data:t.strides}),a.push({name:"kernelStrides",type:"u32",length:o.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let l=t.pads.reduce((u,d)=>u+d);return[s,a,!!l,!1,!1]}},mc=(e,t,r,n,i,s,a,o,l,u,d,c)=>{let p=i.format==="NHWC",m=t.type.value,f=pt("output",t.type.tensor,n);if(i.kernelShape.length<=2){let w="",C="",y="",g=r-(p?2:1);if(d?w=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${g}] = indices[${g}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${g}] < 0 || xIndices[${g}]
                      >= uniforms.x_shape[${g}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`:w=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${g}] = indices[${g}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`,i.kernelShape.length===2){let P=r-(p?3:2);c?C=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${P}] = indices[${P}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${P}] < 0 || xIndices[${P}] >= uniforms.x_shape[${P}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:C=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${P}] = indices[${P}] * uniforms.sh - uniforms.phStart + j;
                `,y=`
              }
            `}return`
            ${e.registerUniforms(l).declareVariables(t,f)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${f.offsetToIndices("global_idx")};
              var xIndices = ${f.offsetToIndices("global_idx")};

              var value = ${m}(${o});
              var pad = 0;
              ${C}
              ${w}
              ${y}
              ${a}

              output[global_idx] = value;
            }`}else{if(p)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let w=i.kernelShape.length,C=i.pads.length,y="";return u?y=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${s}
              }`:y=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${s}
            `,`
            ${e.registerUniforms(l).declareVariables(t,f)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${f.offsetToIndices("global_idx")};
              var xIndices = ${f.offsetToIndices("global_idx")};

              var offsets: array<u32, ${w}>;

              var value = ${m}(${o});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${w-1}u; j++) {
                  offsets[j] = offset / ${_t("uniforms.kernelStrides","j",w)};
                  offset -= offsets[j] * ${_t("uniforms.kernelStrides","j",w)};
                }
                offsets[${w-1}] = offset;

                isPad = false;
                for (var j = ${r-w}u; j < ${r}u; j++) {
                  xIndices[j] = indices[j] * ${_t("uniforms.strides",`j - ${r-w}u`,w)}
                    + offsets[j - ${r-w}u] - ${_t("uniforms.pads","j - 2u",C)};
                  ${y}
              }
              ${a}

              output[global_idx] = value;
            }`}},_c=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,Zb=e=>`${_c(e)};${e.countIncludePad}`,e0=e=>`${_c(e)};${e.storageOrder};${e.dilations}`,gc=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),wc=(e,t,r,n)=>{let[i,s]=hc(t,n,r),a=Fe("x",t.dataType,t.dims.length),o=a.type.value,l="value += x_val;",u="";i.countIncludePad?u+=`value /= ${o}(uniforms.kernelSize);`:u+=`value /= ${o}(i32(uniforms.kernelSize) - pad);`;let[d,c,p,m,f]=fc(s,i);d.push(...yt(t.dims,s));let w=["rank"];return{name:e,shaderCache:{hint:`${n.cacheKey};${p};${m};${f}`,inputDependencies:w},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(Pe.size(s)/64)},programUniforms:d}),getShaderSource:C=>mc(C,a,t.dims.length,s.length,i,l,u,0,c,p,m,f)}},t0=e=>{let t=e.count_include_pad!==0,r=gc(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let n={countIncludePad:t,...r,cacheKey:""};return{...n,cacheKey:Zb(n)}},r0=(e,t)=>{Ho(e.inputs),e.compute(wc("AveragePool",e.inputs[0],!1,t))},yc={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},n0=e=>{let t=e.format;return{format:t,...yc,cacheKey:t}},s0=(e,t)=>{Ho(e.inputs),e.compute(wc("GlobalAveragePool",e.inputs[0],!0,t))},bc=(e,t,r,n)=>{let[i,s]=hc(t,n,r),a=`
      value = max(x_val, value);
    `,o="",l=Fe("x",t.dataType,t.dims.length),u=["rank"],[d,c,p,m,f]=fc(s,i);return d.push(...yt(t.dims,s)),{name:e,shaderCache:{hint:`${n.cacheKey};${p};${m};${f}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(Pe.size(s)/64)},programUniforms:d}),getShaderSource:w=>mc(w,l,t.dims.length,s.length,i,a,o,t.dataType===10?-65504:-1e5,c,p,m,f)}},i0=(e,t)=>{Ho(e.inputs),e.compute(bc("MaxPool",e.inputs[0],!1,t))},a0=e=>{let t=e.storage_order,r=e.dilations,n=gc(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(n.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let i={storageOrder:t,dilations:r,...n,cacheKey:""};return{...i,cacheKey:e0(i)}},o0=e=>{let t=e.format;return{format:t,...yc,cacheKey:t}},l0=(e,t)=>{Ho(e.inputs),e.compute(bc("GlobalMaxPool",e.inputs[0],!0,t))}}),u0,d0,c0,p0,X3=Ke(()=>{Ct(),Rt(),Nr(),jt(),u0=(e,t)=>{if(e.length<2||e.length>3)throw new Error("DequantizeLinear requires 2 or 3 inputs.");if(e.length===3&&e[1].dims===e[2].dims)throw new Error("x-scale and x-zero-point must have the same shape.");if(e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[0].dataType===6&&e.length>2)throw new Error("In the case of dequantizing int32 there is no zero point.");if(e[1].dims.length!==0&&e[1].dims.length!==1&&e[1].dims.length!==e[0].dims.length)throw new Error("scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.");if(e.length>2){if(e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[1].dims.length!==e[2].dims.length)throw new Error("scale and zero-point inputs must have the same rank.");if(!e[1].dims.map((r,n)=>r===e[2].dims[n]).reduce((r,n)=>r&&n,!0))throw new Error("scale and zero-point inputs must have the same shape.")}if(t.blockSize>0){if(e[1].dims.length===0||e[1].dims.length===1&&e[1].dims[0]===1)throw new Error("blockSize must be set only for block quantization.");if(!e[1].dims.map((i,s)=>s===t.axis||i===e[0].dims[s]).reduce((i,s)=>i&&s,!0))throw new Error("For block qunatization, scale input shape to match the input shape except for the axis");if(e[1].dims.length!==e[0].dims.length)throw new Error("For block qunatization the scale input rank must be the same as the x rank.");let r=e[0].dims[t.axis],n=e[1].dims[t.axis];if(t.blockSize<Math.ceil(r/n)||t.blockSize>Math.ceil(r/(n-1)-1))throw new Error("blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].")}},d0=(e,t)=>{let r=Pe.normalizeAxis(t.axis,e[0].dims.length),n=e[0].dataType,i=n===3,s=e[0].dims,a=e[1].dataType,o=Pe.size(s),l=n===3||n===2,u=l?[Math.ceil(Pe.size(e[0].dims)/4)]:e[0].dims,d=e[1].dims,c=e.length>2?e[2]:void 0,p=c?l?[Math.ceil(Pe.size(c.dims)/4)]:c.dims:void 0,m=d.length===0||d.length===1&&d[0]===1,f=m===!1&&d.length===1,w=zr(o),C=m&&(!l||w===4),y=C?w:1,g=C&&!l?w:1,P=Fe("input",l?12:n,u.length,g),b=Fe("scale",a,d.length),x=c?Fe("zero_point",l?12:n,p.length):void 0,T=pt("output",a,s.length,y),E=[P,b];x&&E.push(x);let S=[u,d];c&&S.push(p);let O=[{type:12,data:o/y},{type:12,data:r},{type:12,data:t.blockSize},...yt(...S,s)],B=V=>{let W=[{name:"output_size",type:"u32"},{name:"axis",type:"u32"},{name:"block_size",type:"u32"}];return`
      ${V.registerUniforms(W).declareVariables(...E,T)}
      ${V.mainStart()}
          ${V.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let output_indices = ${T.offsetToIndices("global_idx")};

          // Set input x
          ${l?`
            let input = ${P.getByOffset("global_idx / 4")};
            let x_vec = ${i?"unpack4xI8(input)":"unpack4xU8(input)"};
            let x_value = ${y===1?"x_vec[global_idx % 4]":"x_vec"};`:`let x_value = ${P.getByOffset("global_idx")};`};

          // Set scale input
          ${m?`let scale_value= ${b.getByOffset("0")}`:f?`
            let scale_index = ${T.indicesGet("output_indices","uniforms.axis")};
            let scale_value= ${b.getByOffset("scale_index")};`:`
            var scale_indices: ${b.type.indices} = output_indices;
            let index = ${b.indicesGet("scale_indices","uniforms.axis")} / uniforms.block_size;
            ${b.indicesSet("scale_indices","uniforms.axis","index")};
            let scale_value= ${b.getByIndices("scale_indices")};`};

          // Set zero-point input
          ${x?m?l?`
                let zero_point_input = ${x.getByOffset("0")};
                let zero_point_vec =  ${i?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value= zero_point_vec[0]`:`let zero_point_value = ${x.getByOffset("0")}`:f?l?`
                let zero_point_index = ${T.indicesGet("output_indices","uniforms.axis")};
                let zero_point_input = ${x.getByOffset("zero_point_index / 4")};
                let zero_point_vec =  ${i?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_index % 4]`:`
                let zero_point_index = ${T.indicesGet("output_indices","uniforms.axis")};
                let zero_point_value = ${x.getByOffset("zero_point_index")};`:l?`
                let zero_point_offset = ${b.indicesToOffset("scale_indices")};
                let zero_point_input = ${x.getByOffset("zero_point_offset / 4")};
                let zero_point_vec = ${i?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_offset % 4];`:`let zero_point_value = ${x.getByIndices("scale_indices")};`:`let zero_point_value = ${l?i?"i32":"u32":P.type.value}(0);`};
      // Compute and write output
      ${T.setByOffset("global_idx",`${T.type.value}(x_value - zero_point_value) * scale_value`)};
      }`};return{name:"DequantizeLinear",shaderCache:{hint:t.cacheKey,inputDependencies:x?["rank","rank","rank"]:["rank","rank"]},getShaderSource:B,getRunData:()=>({outputs:[{dims:s,dataType:a}],dispatchGroup:{x:Math.ceil(o/y/64),y:1,z:1},programUniforms:O})}},c0=(e,t)=>{u0(e.inputs,t),e.compute(d0(e.inputs,t))},p0=e=>or({axis:e.axis,blockSize:e.blockSize})}),h0,f0,m0,J3=Ke(()=>{as(),Ct(),jt(),h0=(e,t,r)=>{let n=e===t,i=e<t&&r<0,s=e>t&&r>0;if(n||i||s)throw new Error("Range these inputs' contents are invalid.")},f0=(e,t,r,n)=>{let i=Math.abs(Math.ceil((t-e)/r)),s=[i],a=i,o=[{type:12,data:a},{type:n,data:e},{type:n,data:r},...yt(s)],l=u=>{let d=pt("output",n,s.length),c=d.type.value,p=[{name:"outputSize",type:"u32"},{name:"start",type:c},{name:"delta",type:c}];return`
        ${u.registerUniforms(p).declareVariables(d)}
        ${u.mainStart()}
        ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${c}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${n}`},getShaderSource:l,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:o})}},m0=e=>{let t=0,r=0,n=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],n=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],n=e.inputs[2].getFloat32Array()[0]),Pr.webgpu.validateInputContent&&h0(t,r,n),e.compute(f0(t,r,n,e.inputs[0].dataType),{inputs:[]})}}),_0,vc,xc,g0,w0,y0,Y3=Ke(()=>{Ct(),Rt(),Nr(),jt(),_0=(e,t,r,n)=>{if(e!=="none"&&n!=="i32"&&n!=="u32"&&n!=="f32")throw new Error(`Input ${n} is not supported with reduction ${e}.`);let i=`{
                var oldValue = 0;
                loop {
                  let newValueF32 =`,s=`;
                  let newValue = bitcast<i32>(newValueF32);
                  let res = atomicCompareExchangeWeak(&${t}, oldValue, newValue);
                  if res.exchanged {
                    break;
                  }
                  oldValue = res.old_value;
                }
              }`;switch(e){case"none":return`${t}=${r};`;case"add":return n==="i32"||n==="u32"?`atomicAdd(&${t}, bitcast<${n}>(${r}));`:`
              ${i}bitcast<${n}>(oldValue) + (${r})${s}`;case"max":return n==="i32"||n==="u32"?`atomicMax(&${t}, bitcast<${n}>(${r}));`:`
                ${i}max(bitcast<f32>(oldValue), (${r}))${s}`;case"min":return n==="i32"||n==="u32"?`atomicMin(&${t}, bitcast<${n}>(${r}));`:`${i}min(bitcast<${n}>(oldValue), (${r}))${s}`;case"mul":return`${i}(bitcast<${n}>(oldValue) * (${r}))${s}`;default:throw new Error(`Reduction ${e} is not supported.`)}},vc=(e,t)=>`${e===1?`
    let element_count_dim = uniforms.output_strides;
    let dim_value = uniforms.output_shape;`:`
    let element_count_dim = uniforms.output_strides[${t?"i - indices_start":"i"}];
    let dim_value = uniforms.output_shape[${t?"i - indices_start":"i"} + uniforms.last_index_dimension];`}
    
    if (index >= 0) {
      if (index >= i32(dim_value)) {
        index = i32(dim_value - 1);
      }
    } else {
      if (index < -i32(dim_value)) {
        index = 0;
      } else {
        index += i32(dim_value);
      }
    }
    data_offset += u32((u32(index) * element_count_dim));`,xc=(e,t,r)=>`for (var i = 0u; i < uniforms.num_updates_elements; i++) {
        let value = updates[uniforms.num_updates_elements * ${r?"global_idx":"idx"} + i];
        ${_0(e.reduction,"output[data_offset + i]","value",t)}
      }`,g0=(e,t)=>{let r=e[0].dims,n=e[1].dims,i=r,s=1,a=Math.ceil(Pe.size(n)/s),o=n[n.length-1],l=Pe.sizeFromDimension(r,o),u=Pe.sizeFromDimension(n,0)/o,d=[{type:12,data:a},{type:12,data:o},{type:12,data:l},...yt(e[1].dims,e[2].dims,i)],c=p=>{let m=Fe("indices",e[1].dataType,e[1].dims.length),f=Fe("updates",e[2].dataType,e[2].dims.length,s),w=t.reduction!=="none"&&t.reduction!==""?T_("output",e[0].dataType,i.length):pt("output",e[0].dataType,i.length,s);return`
      ${p.registerUniform("output_size","u32").registerUniform("last_index_dimension","u32").registerUniform("num_updates_elements","u32").declareVariables(m,f,w)}
      ${p.mainStart()}
        ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
  var hasDuplicates = false;
  if (${t.reduction==="none"}) {
    for (var i = 0; i < ${u}; i = i + 1) {
      for (var j = i + 1; j < ${u}; j = j + 1) {
        var index_i = i32(indices[i].x);
        var index_j = i32(indices[j].x);
        if (index_i == index_j) {
          hasDuplicates = true;
          break;
        }
      }
      if (hasDuplicates) {
        break;
      }
    }
  }

  if (${t.reduction==="none"} && hasDuplicates) {
    if (global_idx != 0u) {
      return;
    }
    // Process each index-update pair individually when duplicates exist
    for (var idx = 0u; idx < ${u}u; idx++) {
      var data_offset = 0u;
      for (var i = 0u; i < uniforms.last_index_dimension; i++) {
        var index = i32(indices[idx * uniforms.last_index_dimension + i].x);
        ${vc(r.length,!1)}
      }
      ${xc(t,w.type.value,!1)}
    }
    return;
  }

  var data_offset = 0u;
  var indices_start = uniforms.last_index_dimension * global_idx;
  var indices_end = indices_start + uniforms.last_index_dimension;
  for (var i = indices_start; i < indices_end; i++) {
    var index = i32(indices[i].x);
    ${vc(r.length,!0)}
  }
  ${xc(t,w.type.value,!0)}
  }`};return{name:"ScatterND",shaderCache:{hint:`${t.cacheKey}_${t.reduction}`,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:d}),getShaderSource:c}},w0=e=>or({reduction:e.reduction}),y0=(e,t)=>{e.compute(g0(e.inputs,t),{inputs:[e.inputs[1],e.inputs[2]],outputs:[]})}}),b0,v0,x0,$c,$0,M0,T0,E0,P0,C0,S0,k0,Mc,I0,A0,O0,D0,z0,F0,B0,Z3=Ke(()=>{Ct(),Rt(),Nr(),jt(),b0=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},v0=(e,t,r)=>{t.every(i=>i>=0&&i<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let n=new Array(r).fill(1);return t.forEach((i,s)=>n[i]=e[s]),n},x0=(e,t,r,n,i,s)=>{let[a,o,l]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],u=e[0].dims.length;if(a>0&&e.length>a&&e[a].dims.length>0)e[a].getFloat32Array().forEach(d=>s.push(d));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(o>0&&e.length>o&&e[o].dims.length===1&&e[o].dims[0]>0){if(e[o].getFloat32Array().forEach(d=>n.push(d)),n.length!==0&&n.length!==u&&r>=18&&n.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");b0(n,t),t.axes.length>0&&v0(n,t.axes,u).forEach((d,c)=>n[c]=d)}if(l>0&&e.length>l&&e[l].dims.length===1&&e[l].dims[0]>0&&(e[l].getBigInt64Array().forEach(d=>i.push(Number(d))),i.length!==0&&i.length!==u&&r>=18&&i.length!==t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(n.length!==0&&n.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(i.length!==0&&i.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof n<"u"&&typeof i<"u"&&n.length>0&&i.length>u)throw new Error("Resize requires only of scales or sizes to be specified")},$c=(e,t,r,n)=>`
  // The whole part and the fractional part are calculated separately due to inaccuracy of floating
  // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
  // offset-by-one error later in floor().
  let big = (${e}) * (${t});
  let whole = ${n}(big / (${r}));
  let fract = ${n}(big % (${r})) / ${n}(${r});
  return whole + fract;
`,$0=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`
          if (xScale < 1.0 || floor(xScale) != xScale) {
            return ${t}(xResized) / ${t}(xScale);
          } else {
            ${$c("xResized","lengthOriginal","lengthResized",t)}
          }
        `;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    ${$c("xResized","lengthOriginal - 1","lengthResized - 1",t)}
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +
                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /
                        ${t}(lengthResized - 1);
                  } else {
                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);
                  const adjustment = ${t}(lengthResized) / outputWidth;
                  const center = ${t}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",M0=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",T0=(e,t,r)=>{let n=new Array(r).fill(0).concat(new Array(r).fill(1)),i=e.length===0?n:e.slice();return t.length>0?(t.forEach((s,a)=>{n[s]=i[a],n[a+r]=i[t.length+a]}),n):i},E0=(e,t,r,n)=>{let i=[];if(r.length>0)if(n.length>0){if(e.forEach(s=>i.push(s)),Math.max(...n)>e.length)throw new Error("axes is out of bound");n.forEach((s,a)=>i[s]=r[a])}else r.forEach(s=>i.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");i=e.map((s,a)=>Math.round(s*t[a]))}return i},P0=(e,t,r)=>{let n=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let i=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=n),r.axes.forEach(s=>i[s]=Math.round(e[s]*t[s]))):(t.fill(n,0,t.length),i.forEach((s,a)=>i[a]=Math.round(s*t[a]))),i},C0=(e,t,r,n,i)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      var original_indices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${_t("uniforms.scales","i",n)};
        var roi_low = ${_t("uniforms.roi","i",i)};
        var roi_hi = ${_t("uniforms.roi",`i + ${t.length}`,i)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${_t("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${_t("uniforms.output_shape","i",r.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,S0=(e,t,r,n,i,s,a)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${n.length}; i++) {
        var output_index = ${t.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${_t("uniforms.scales","i",i)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${_t("uniforms.roi","i",s)};
          var roi_hi = ${_t("uniforms.roi",`i + ${r.length}`,s)};
          var input_shape_i = ${_t("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${_t("uniforms.output_shape","i",n.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${a} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i","input_index")}
      }
      return input_indices;
    }`,k0=(e,t)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${_t("uniforms.input_shape","i",t.length)}) {
          return false;
        }
      }
      return true;
    }`,Mc=(e,t,r,n)=>e.rank>n?`
    ${e.indicesSet("input_indices",t,"channel")};
    ${e.indicesSet("input_indices",r,"batch")};
`:"",I0=(e,t,r,n,i)=>{let[s,a,o,l]=r.length===2?[-1,0,1,-1]:[0,2,3,1],u=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${u} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",a,`max(0, min(row, ${r[a]} - 1))`)};
      ${e.indicesSet("input_indices",o,`max(0, min(col, ${r[o]} - 1))`)};
      ${Mc(e,l,s,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${u} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${u} = originalIndices[${a}];
      var col:${u} = originalIndices[${o}];
      ${n?`if (row < 0 || row > (${r[a]} - 1) || col < 0 || col > (${r[o]} - 1)) {
        return ${i};
      }`:""};
      row = max(0, min(row, ${r[a]} - 1));
      col = max(0, min(col, ${r[o]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${r.length>2?`u32(originalIndices[${l}])`:"0"};
      var batch: u32 =  ${r.length>2?`u32(originalIndices[${s}])`:"0"};
      var x11: ${u} = getInputValue(batch, channel, row1, col1);
      var x12: ${u} = getInputValue(batch, channel, row1, col2);
      var x21: ${u} = getInputValue(batch, channel, row2, col1);
      var x22: ${u} = getInputValue(batch, channel, row2, col2);
      var dx1: ${u} = abs(row - ${u}(row1));
      var dx2: ${u} = abs(${u}(row2) - row);
      var dy1: ${u} = abs(col - ${u}(col1));
      var dy2: ${u} = abs(${u}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},A0=(e,t,r,n,i,s,a,o,l,u)=>{let d=r.length===2,[c,p]=d?[0,1]:[2,3],m=e.type.value,f=w=>{let C=w===c?"row":"col";return`
      fn ${C}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${m} {
        var output_index = ${t.indicesGet("output_indices",w)};
        var originalIdx: ${m} = getOriginalCoordinateFromResizedCoordinate(output_index, ${i[w]},
        ${n[w]}, ${r[w]}, ${s[w]}, ${s[w]} + ${r.length});
        var fractOriginalIdx: ${m} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${o} && (originalIdx < 0 || originalIdx > (${r[w]} - 1))) {
          return ${l};
        }
        var data: array<${m}, 4> = array<${m}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${C}: ${m} = originalIdx + ${m}(i);
          if (${C} < 0 || ${C} >= ${r[w]}) {
            ${u?`coefs[i + 1] = 0.0;
                        continue;`:o?`return ${l};`:`${C} = max(0, min(${C}, ${r[w]} - 1));`};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",w,`u32(${C})`)};
          data[i + 1] = ${w===c?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${f(c)};
    ${f(p)};
  fn getCubicInterpolationCoefs(s: ${m}) -> array<${m}, 4> {
    var absS = abs(s);
    var coeffs: array<${m}, 4> = array<${m}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${m} = 1.0 - absS;
    var twoMinusAbsS: ${m} = 2.0 - absS;
    var onePlusAbsS: ${m} = 1.0 + absS;
    coeffs[0] = ((${a} * onePlusAbsS - 5 * ${a}) * onePlusAbsS + 8 * ${a}) * onePlusAbsS - 4 * ${a};
    coeffs[1] = ((${a} + 2) * absS - (${a} + 3)) * absS * absS + 1;
    coeffs[2] = ((${a} + 2) * oneMinusAbsS - (${a} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${a} * twoMinusAbsS - 5 * ${a}) * twoMinusAbsS + 8 * ${a}) * twoMinusAbsS - 4 * ${a};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${m}, 4>, coefs: array<${m}, 4>) -> ${m} {
    var coefsSum: ${m} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${m} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},O0=(e,t,r,n,i)=>{let[s,a,o,l,u]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],d=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${d} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",a,`max(0, min(depth, ${r[a]} - 1))`)};
      ${e.indicesSet("input_indices",o,`max(0, min(height, ${r[o]} - 1))`)};
      ${e.indicesSet("input_indices",l,`max(0, min(width, ${r[l]} - 1))`)};
      ${Mc(e,u,s,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${d} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${d} = originalIndices[${a}];
      var height:${d} = originalIndices[${o}];
      var width:${d} = originalIndices[${l}];
      ${n?`if (depth < 0 || depth > (${r[a]} - 1) || height < 0 || height > (${r[o]} - 1) || width < 0 || (width > ${r[l]} - 1)) {
      return ${i};
        }`:""};

    depth = max(0, min(depth, ${r[a]} - 1));
      height = max(0, min(height, ${r[o]} - 1));
      width = max(0, min(width, ${r[l]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${r.length>3?`u32(originalIndices[${u}])`:"0"};
      var batch: u32 =  ${r.length>3?`u32(originalIndices[${s}])`:"0"};

      var x111: ${d} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${d} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${d} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${d} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${d} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${d} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${d} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${d} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${d} = abs(depth - ${d}(depth1));
      var dx2: ${d} = abs(${d}(depth2) - depth);
      var dy1: ${d} = abs(height - ${d}(height1));
      var dy2: ${d} = abs(${d}(height2) - height);
      var dz1: ${d} = abs(width - ${d}(width1));
      var dz2: ${d} = abs(${d}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},D0=(e,t,r,n,i,s)=>{let a=e.dims,o=T0(s,t.axes,a.length),l=E0(a,n,i,t.axes),u=n.slice();n.length===0&&(u=a.map((g,P)=>g===0?1:l[P]/g),t.keepAspectRatioPolicy!=="stretch"&&(l=P0(a,u,t)));let d=pt("output",e.dataType,l.length),c=Fe("input",e.dataType,a.length),p=Pe.size(l),m=a.length===l.length&&a.every((g,P)=>g===l[P]),f=t.coordinateTransformMode==="tf_crop_and_resize",w=t.extrapolationValue,C=c.type.value,y=g=>`
      ${m?"":`
      ${$0(t.coordinateTransformMode,C)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${k0(c,a)};
              ${M0(t.nearestMode,r,C)};
              ${S0(c,d,a,l,u.length,o.length,f)};
              `;case"linear":return`
              ${C0(d,a,l,u.length,o.length)};
              ${(()=>{if(a.length===2||a.length===4)return`${I0(c,d,a,f,w)}`;if(a.length===3||a.length===5)return`${O0(c,d,a,f,w)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(a.length===2||a.length===4)return`${A0(c,d,a,l,u,o,t.cubicCoeffA,f,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${g.registerUniform("output_size","u32").registerUniform("scales","f32",u.length).registerUniform("roi","f32",o.length).declareVariables(c,d)}
      ${g.mainStart()}
        ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${m?"output[global_idx] = input[global_idx];":`
        let output_indices = ${d.offsetToIndices("global_idx")};
        var input_indices: ${c.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${c.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${a.length===2||a.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${u.length>0?t.mode==="cubic"?u:u.length:""}|${i.length>0?i:""}|${o.length>0?o:""}|${m}|${t.mode==="nearest"?a.length:a}`,inputDependencies:["rank"]},getShaderSource:y,getRunData:()=>({outputs:[{dims:l,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:[{type:12,data:p},{type:1,data:u},{type:1,data:o},...yt(a,l)]})}},z0=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},F0=(e,t)=>{let r=[],n=[],i=[],s=z0(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");x0(e.inputs,t,s,r,n,i),e.compute(D0(e.inputs[0],t,s,r,n,i),{inputs:[0]})},B0=e=>{let t=e.antialias,r=e.axes,n=e.coordinateTransformMode,i=e.cubicCoeffA,s=e.excludeOutside!==0,a=e.extrapolationValue,o=e.keepAspectRatioPolicy,l=e.mode,u=e.nearestMode===""?"simple":e.nearestMode;return or({antialias:t,axes:r,coordinateTransformMode:n,cubicCoeffA:i,excludeOutside:s,extrapolationValue:a,keepAspectRatioPolicy:o,mode:l,nearestMode:u})}}),L0,R0,N0,eO=Ke(()=>{Ct(),Rt(),jt(),L0=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],n=e[2];if(t.dataType!==r.dataType||t.dataType!==n.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let i=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==i)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(n.dims.length!==1)throw new Error("Gamma must be 1D");if(n.dims[n.dims.length-1]!==i)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let a=e[3];if(a.dims.length!==1)throw new Error("Beta must be 1D");if(a.dims[a.dims.length-1]!==i)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let a=e[4];if(a.dims.length!==1)throw new Error("Bias must be 1D");if(a.dims[a.dims.length-1]!==i)throw new Error("Bias must have the same hidden size as input")}},R0=(e,t,r,n)=>{let i=t.simplified,s=e[0].dims,a=Pe.size(s),o=s,l=a,u=s.slice(-1)[0],d=n?s.slice(0,-1).concat(1):[],c=!i&&e.length>3,p=e.length>4,m=n&&r>1,f=n&&r>2,w=r>3,C=64,y=zr(u),g=[{type:12,data:l},{type:12,data:y},{type:12,data:u},{type:1,data:t.epsilon}],P=x=>{let T=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],E=[Fe("x",e[0].dataType,e[0].dims,y),Fe("skip",e[1].dataType,e[1].dims,y),Fe("gamma",e[2].dataType,e[2].dims,y)];c&&E.push(Fe("beta",e[3].dataType,e[3].dims,y)),p&&E.push(Fe("bias",e[4].dataType,e[4].dims,y)),E.push(pt("output",e[0].dataType,o,y)),m&&E.push(pt("mean_output",1,d)),f&&E.push(pt("inv_std_output",1,d)),w&&E.push(pt("input_skip_bias_sum",e[0].dataType,o,y));let S=nn(e[0].dataType),O=nn(1,y);return`

      ${x.registerUniforms(T).declareVariables(...E)}
      var<workgroup> sum_shared : array<${O}, ${C}>;
      var<workgroup> sum_squared_shared : array<${O}, ${C}>;

      ${x.mainStart([C,1,1])}
        let ix = local_id.x;
        let iy = global_id.x / ${C};

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / ${C};
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == ${C-1}) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${p?"bias[offset1d + i]":S+"(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${w?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${Xa(S,y,"value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = ${C};
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${Ei("sum",y)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${Ei("square_sum",y)} / f32(uniforms.hidden_size) ${i?"":"- mean * mean"} + uniforms.epsilon);
        ${m?"mean_output[global_idx] = mean;":""}
        ${f?"inv_std_output[global_idx] = inv_std_dev;":""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${i?"":`- ${S}(mean)`}) *
            ${S}(inv_std_dev) * gamma[offset1d + i]
            ${c?"+ beta[offset1d + i]":""};
        }
      }`},b=[{dims:o,dataType:e[0].dataType}];return r>1&&b.push({dims:d,dataType:1}),r>2&&b.push({dims:d,dataType:1}),r>3&&b.push({dims:s,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${y};${m};${f};${w}`,inputDependencies:e.map((x,T)=>"type")},getShaderSource:P,getRunData:()=>({outputs:b,dispatchGroup:{x:Math.ceil(l/u)},programUniforms:g})}},N0=(e,t)=>{L0(e.inputs);let r=[0];e.outputCount>1&&r.push(-3),e.outputCount>2&&r.push(-3),e.outputCount>3&&r.push(3),e.compute(R0(e.inputs,t,e.outputCount,!1),{outputs:r})}}),j0,Ko,U0,Tc,W0,V0,G0,q0,tO=Ke(()=>{Ct(),Rt(),Nr(),jt(),j0=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,n)=>{if(e[n+1].dataType!==6&&e[n+1].dataType!==7)throw new Error(`Input ${n} must be an array of int32 or int64`)})},Ko=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(n=>r.push(Number(n)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(n=>r.push(Number(n)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},U0=(e,t)=>{if(e.length>1){let r=Ko(e,1),n=Ko(e,2),i=Ko(e,3);return i.length===0&&(i=[...Array(e[0].dims.length).keys()]),or({starts:r,ends:n,axes:i})}else return t},Tc=(e,t,r,n,i)=>{let s=e;return e<0&&(s+=r[n[t]]),i[t]<0?Math.max(0,Math.min(s,r[n[t]]-1)):Math.max(0,Math.min(s,r[n[t]]))},W0=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${_t("uniforms.input_shape","i",r.length)};
            let steps_i = ${_t("uniforms.steps","i",r.length)};
            let signs_i = ${_t("uniforms.signs","i",r.length)};
            let starts_i = ${_t("uniforms.starts","i",r.length)};
            var output_index = ${t.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,V0=(e,t)=>{let r=e[0].dims,n=Pe.size(r),i=t.axes.length>0?Pe.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=Ko(e,4);s.forEach(y=>y!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(i.length).fill(1));let a=t.starts.map((y,g)=>Tc(y,g,r,i,s)),o=t.ends.map((y,g)=>Tc(y,g,r,i,s));if(i.length!==a.length||i.length!==o.length)throw new Error("start, ends and axes should have the same number of elements");if(i.length!==r.length)for(let y=0;y<r.length;++y)i.includes(y)||(a.splice(y,0,0),o.splice(y,0,r[y]),s.splice(y,0,1));let l=s.map(y=>Math.sign(y));s.forEach((y,g,P)=>{if(y<0){let b=(o[g]-a[g])/y,x=a[g],T=x+b*s[g];a[g]=T,o[g]=x,P[g]=-y}});let u=r.slice(0);i.forEach((y,g)=>{u[y]=Math.ceil((o[y]-a[y])/s[y])});let d={dims:u,dataType:e[0].dataType},c=pt("output",e[0].dataType,u.length),p=Fe("input",e[0].dataType,e[0].dims.length),m=Pe.size(u),f=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:a.length},{name:"signs",type:"i32",length:l.length},{name:"steps",type:"u32",length:s.length}],w=[{type:12,data:m},{type:12,data:a},{type:6,data:l},{type:12,data:s},...yt(e[0].dims,u)],C=y=>`
      ${y.registerUniforms(f).declareVariables(p,c)}
        ${W0(p,c,r)}
        ${y.mainStart()}
          ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${c.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${c.setByOffset("global_idx",p.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${l.length}_${a.length}_${s.length}`,inputDependencies:["rank"]},getShaderSource:C,getRunData:()=>({outputs:[d],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:w})}},G0=(e,t)=>{j0(e.inputs,t);let r=U0(e.inputs,t);e.compute(V0(e.inputs,r),{inputs:[0]})},q0=e=>{let t=e.starts,r=e.ends,n=e.axes;return or({starts:t,ends:r,axes:n})}}),H0,K0,Q0,X0,rO=Ke(()=>{Ct(),Rt(),Nr(),Pi(),jt(),H0=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},K0=(e,t)=>{let r=e.inputs[0],n=r.dims,i=Pe.size(n),s=n.length,a=Pe.normalizeAxis(t.axis,s),o=a<n.length-1,l,u=[];o?(u=Array.from({length:s},(E,S)=>S),u[a]=s-1,u[s-1]=a,l=e.compute(Bn(r,u),{inputs:[r],outputs:[-1]})[0]):l=r;let d=l.dims,c=d[s-1],p=i/c,m=zr(c),f=c/m,w=64;p===1&&(w=256);let C=(E,S)=>S===4?`max(max(${E}.x, ${E}.y), max(${E}.z, ${E}.w))`:S===2?`max(${E}.x, ${E}.y)`:S===3?`max(max(${E}.x, ${E}.y), ${E}.z)`:E,y=Fe("x",l.dataType,l.dims,m),g=pt("result",l.dataType,l.dims,m),P=y.type.value,b=nn(l.dataType)==="f32"?`var threadMax = ${P}(-3.402823e+38f);`:`var threadMax = ${P}(-65504.0h);`,x=E=>`
      var<workgroup> rowMaxShared : ${P};
      var<workgroup> rowSumShared : ${P};
      var<workgroup> threadShared : array<${P}, ${w}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${P} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${P}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${E.registerUniform("packedCols","i32").declareVariables(y,g)}
      ${E.mainStart(w)}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${w};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${b}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${P}(${C("threadShared[0]",m)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${P}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${P}(${Ei("threadShared[0]",m)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`,T=e.compute({name:"Softmax",shaderCache:{hint:`${m};${w}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:d,dataType:l.dataType}],dispatchGroup:{x:p},programUniforms:[{type:6,data:f}]}),getShaderSource:x},{inputs:[l],outputs:[o?-1:0]})[0];o&&e.compute(Bn(T,u),{inputs:[T]})},Q0=(e,t)=>{H0(e.inputs),K0(e,t)},X0=e=>or({axis:e.axis})}),Ec,J0,Y0,Z0,ev,nO=Ke(()=>{Ct(),Rt(),jt(),Ec=e=>Array.from(e.getBigInt64Array(),Number),J0=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==10&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Ec(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Y0=(e,t)=>{let r=[];for(let n=0;n<e.length;++n)r.push(e[n]*t[n]);return r},Z0=(e,t)=>{let r=e[0].dims,n=t??Ec(e[1]),i=Y0(r,n),s=Pe.size(i),a=e[0].dataType,o=Fe("input",a,r.length),l=pt("output",a,i.length),u=d=>`
      const inputShape = ${o.indices(...r)};
      ${d.registerUniform("output_size","u32").declareVariables(o,l)}
      ${d.mainStart()}
      ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${l.offsetToIndices("global_idx")};
      var input_indices: ${o.type.indices};
      for (var i = 0; i < ${r.length}; i++) {
        let input_dim_i = ${o.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${l.indicesGet("output_indices","i")}  % input_dim_i;

        ${o.indicesSet("input_indices","i","input_dim_value")}
      }
      ${l.setByOffset("global_idx",o.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${n}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:[{type:12,data:s},...yt(e[0].dims,i)]}),getShaderSource:u}},ev=e=>{J0(e.inputs),e.compute(Z0(e.inputs),{inputs:[0]})}}),tv,rv,nv,sO=Ke(()=>{Ct(),Rt(),jt(),tv=(e,t,r,n,i)=>{let s=pt("output_data",i,r.length,4),a=Fe("a_data",t[1].dataType,t[1].dims.length,4),o=Fe("b_data",t[2].dataType,t[2].dims.length,4),l=Fe("c_data",t[0].dataType,t[0].dims.length,4),u,d=(c,p,m)=>`select(${p}, ${c}, ${m})`;if(!n)u=s.setByOffset("global_idx",d(a.getByOffset("global_idx"),o.getByOffset("global_idx"),l.getByOffset("global_idx")));else{let c=(p,m,f="")=>{let w=`a_data[index_a${m}][component_a${m}]`,C=`b_data[index_b${m}][component_b${m}]`,y=`bool(c_data[index_c${m}] & (0xffu << (component_c${m} * 8)))`;return`
            let output_indices${m} = ${s.offsetToIndices(`global_idx * 4u + ${m}u`)};
            let offset_a${m} = ${a.broadcastedIndicesToOffset(`output_indices${m}`,s)};
            let offset_b${m} = ${o.broadcastedIndicesToOffset(`output_indices${m}`,s)};
            let offset_c${m} = ${l.broadcastedIndicesToOffset(`output_indices${m}`,s)};
            let index_a${m} = offset_a${m} / 4u;
            let index_b${m} = offset_b${m} / 4u;
            let index_c${m} = offset_c${m} / 4u;
            let component_a${m} = offset_a${m} % 4u;
            let component_b${m} = offset_b${m} % 4u;
            let component_c${m} = offset_c${m} % 4u;
            ${p}[${m}] = ${f}(${d(w,C,y)});
          `};i===9?u=`
            var data = vec4<u32>(0);
            ${c("data",0,"u32")}
            ${c("data",1,"u32")}
            ${c("data",2,"u32")}
            ${c("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:u=`
            ${c("output_data[global_idx]",0)}
            ${c("output_data[global_idx]",1)}
            ${c("output_data[global_idx]",2)}
            ${c("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(l,a,o,s)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${u}
      }`},rv=e=>{let t=e[1].dims,r=e[2].dims,n=e[0].dims,i=e[1].dataType,s=!(Pe.areEqual(t,r)&&Pe.areEqual(r,n)),a=t,o=Pe.size(t);if(s){let u=Ka.calcShape(Ka.calcShape(t,r,!1),n,!1);if(!u)throw new Error("Can't perform where op on the given tensors");a=u,o=Pe.size(a)}let l=Math.ceil(o/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:u=>tv(u,e,a,s,i),getRunData:()=>({outputs:[{dims:a,dataType:i}],dispatchGroup:{x:Math.ceil(o/64/4)},programUniforms:[{type:12,data:l},...yt(n,t,r,a)]})}},nv=e=>{e.compute(rv(e.inputs))}}),sv,iO=Ke(()=>{y3(),Nd(),b3(),v3(),x3(),$3(),M3(),S3(),I3(),A3(),O3(),D3(),z3(),F3(),B3(),L3(),R3(),N3(),j3(),U3(),W3(),V3(),G3(),q3(),H3(),_b(),K3(),Q3(),X3(),J3(),Y3(),Bd(),Z3(),Eb(),eO(),tO(),rO(),$b(),nO(),Pi(),Vd(),sO(),sv=new Map([["Abs",[Lg]],["Acos",[Rg]],["Acosh",[Ng]],["Add",[Pw]],["ArgMax",[$g,Rd]],["ArgMin",[xg,Rd]],["Asin",[jg]],["Asinh",[Ug]],["Atan",[Wg]],["Atanh",[Vg]],["Attention",[Sg]],["AveragePool",[r0,t0]],["BatchNormalization",[Og]],["BiasAdd",[Fg]],["BiasSplitGelu",[Mw]],["Cast",[qg,Gg]],["Ceil",[Qg]],["Clip",[Kg]],["Concat",[jw,Uw]],["Conv",[nc,tc]],["ConvTranspose",[my,py]],["Cos",[Xg]],["Cosh",[Jg]],["CumSum",[gy,wy]],["DepthToSpace",[xy,$y]],["DequantizeLinear",[c0,p0]],["Div",[Cw]],["Einsum",[Sy,ky]],["Elu",[Yg,Uo]],["Equal",[Sw]],["Erf",[Zg]],["Exp",[ew]],["Expand",[Dy]],["FastGelu",[Fy]],["Floor",[tw]],["FusedConv",[nc,tc]],["Gather",[Ny,Ry]],["GatherElements",[Jy,Xy]],["GatherBlockQuantized",[qy,Hy]],["GatherND",[Uy,Wy]],["Gelu",[rw]],["Gemm",[tb,eb]],["GlobalAveragePool",[s0,n0]],["GlobalMaxPool",[l0,o0]],["Greater",[Ow]],["GreaterOrEqual",[zw]],["GridSample",[db,cb]],["GroupQueryAttention",[kb]],["HardSigmoid",[dw,uw]],["InstanceNormalization",[Ob]],["LayerNormalization",[Fb]],["LeakyRelu",[nw,Uo]],["Less",[Dw]],["LessOrEqual",[Fw]],["Log",[ww]],["MatMul",[Lb]],["MatMulNBits",[Ub,Wb]],["MaxPool",[i0,a0]],["Mul",[kw]],["MultiHeadAttention",[mb,hb]],["Neg",[iw]],["Not",[sw]],["Pad",[Yb]],["Pow",[Iw]],["QuickGelu",[vw,Uo]],["Range",[m0]],["Reciprocal",[aw]],["ReduceMin",[gg]],["ReduceMean",[pg]],["ReduceMax",[_g]],["ReduceSum",[yg]],["ReduceProd",[wg]],["ReduceL1",[hg]],["ReduceL2",[fg]],["ReduceLogSum",[vg]],["ReduceLogSumExp",[mg]],["ReduceSumSquare",[bg]],["Relu",[ow]],["Resize",[F0,B0]],["RotaryEmbedding",[Tb]],["ScatterND",[y0,w0]],["Sigmoid",[lw]],["Sin",[cw]],["Sinh",[pw]],["Slice",[G0,q0]],["SkipLayerNormalization",[N0]],["Split",[vb,xb]],["Sqrt",[hw]],["Softmax",[Q0,X0]],["Sub",[Aw]],["Tan",[fw]],["Tanh",[mw]],["ThresholdedRelu",[gw,Uo]],["Tile",[ev]],["Transpose",[O_,D_]],["Where",[nv]]])}),iv,aO=Ke(()=>{as(),ti(),jt(),iv=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,t){this.repo.set(e,t)}run(e,t,r,n,i){is(e.programInfo.name);let s=this.backend.device,a=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let o=[];for(let u of t)o.push({binding:o.length,resource:{buffer:u.buffer}});for(let u of r)o.push({binding:o.length,resource:{buffer:u.buffer}});i&&o.push({binding:o.length,resource:i});let l=s.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:o,label:e.programInfo.name});if(this.backend.sessionStatus==="capturing"){let u={kernelId:this.backend.currentKernelId,computePipeline:e.computePipeline,bindGroup:l,dispatchGroup:n};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(u)}a.setPipeline(e.computePipeline),a.setBindGroup(0,l),a.dispatchWorkgroups(...n),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Jn(e.programInfo.name)}dispose(){}build(e,t){is(e.name);let r=this.backend.device,n=[];[{feature:"shader-f16",extension:"f16"},{feature:"subgroups",extension:"subgroups"}].forEach(u=>{r.features.has(u.feature)&&n.push(`enable ${u.extension};`)});let i=P_(t,this.backend.device.limits),s=e.getShaderSource(i),a=`${n.join(`
`)}
${i.additionalImplementations}
${s}`,o=r.createShaderModule({code:a,label:e.name});Yt("verbose",()=>`[WebGPU] ${e.name} shader code: ${a}`);let l=r.createComputePipeline({compute:{module:o,entryPoint:"main"},layout:"auto",label:e.name});return Jn(e.name),{programInfo:e,computePipeline:l,uniformVariablesInfo:i.variablesInfo}}normalizeDispatchGroupSize(e){let t=typeof e=="number"?e:e.x,r=typeof e=="number"?1:e.y||1,n=typeof e=="number"?1:e.z||1,i=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=i&&r<=i&&n<=i)return[t,r,n];let s=t*r*n,a=Math.ceil(Math.sqrt(s));if(a>i){if(a=Math.ceil(Math.cbrt(s)),a>i)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[a,a,a]}else return[a,a,1]}}}),av={};Ha(av,{WebGpuBackend:()=>dv});var ov,lv,uv,dv,oO=Ke(()=>{as(),Ct(),ti(),h_(),g3(),iO(),aO(),ov=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let n=0;n<e.length;++n){let i=e[n].dataType;switch(t[n]){case"none":{r.push("");break}case"type":{r.push(`${i}`);break}case"rank":{let s=e[n].dims.length;r.push(`${i};${s}`);break}case"dims":{let s=e[n].dims.join(",");r.push(`${i};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[n]}`)}}return r.join("|")},lv=(e,t,r)=>{var i,s;let n=e.name;return(i=e.shaderCache)!=null&&i.hint&&(n+="["+e.shaderCache.hint+"]"),n+=":"+r+`:${ov(t,((s=e.shaderCache)==null?void 0:s.inputDependencies)??new Array(t.length).fill("dims"))}`,n},uv=class{constructor(e){e&&(this.architecture=e.architecture,this.vendor=e.vendor)}isArchitecture(e){return this.architecture===e}isVendor(e){return this.vendor===e}},dv=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e,t){this.env=e;let r=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ},requiredFeatures:r},i=s=>t.features.has(s)&&r.push(s)&&!0;i("chromium-experimental-timestamp-query-inside-passes")||i("timestamp-query"),i("shader-f16"),i("subgroups"),this.device=await t.requestDevice(n),this.adapterInfo=new uv(t.info||await t.requestAdapterInfo()),this.gpuDataManager=$_(this),this.programManager=new iv(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,bd(e.logLevel,!!e.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:t,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let e=this.getCommandEncoder(),t={};this.queryType==="at-passes"&&(t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=e.beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;is(),this.endComputePass();let e;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),e=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(e,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&e.mapAsync(GPUMapMode.READ).then(()=>{var n;let t=new BigUint64Array(e.getMappedRange()),r=this.pendingQueries.get(e);for(let i=0;i<t.length/2;i++){let s=r[i],a=s.kernelId,o=this.kernels.get(a),l=o.kernelType,u=o.kernelName,d=s.programName,c=s.inputTensorViews,p=s.outputTensorViews,m=t[i*2],f=t[i*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=m);let w=Number(m-this.queryTimeBase),C=Number(f-this.queryTimeBase);if(!Number.isSafeInteger(w)||!Number.isSafeInteger(C))throw new RangeError("incorrect timestamp range");if((n=this.env.webgpu.profiling)!=null&&n.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:c.map(y=>({dims:y.dims,dataType:ei(y.dataType)})),outputsMetadata:p.map(y=>({dims:y.dims,dataType:ei(y.dataType)})),kernelId:a,kernelType:l,kernelName:u,programName:d,startTime:w,endTime:C});else{let y="";c.forEach((P,b)=>{y+=`input[${b}]: [${P.dims}] | ${ei(P.dataType)}, `});let g="";p.forEach((P,b)=>{g+=`output[${b}]: [${P.dims}] | ${ei(P.dataType)}, `}),console.log(`[profiling] kernel "${a}|${l}|${u}|${d}" ${y}${g}execution time: ${C-w} ns`)}Fo("GPU",`${d}::${m}::${f}`)}e.unmap(),this.pendingQueries.delete(e)}),Jn()}run(e,t,r,n,i,s){is(e.name);let a=[];for(let g=0;g<t.length;++g){let P=t[g].data;if(P===0)continue;let b=this.gpuDataManager.get(P);if(!b)throw new Error(`no GPU data for input: ${P}`);a.push(b)}let{outputs:o,dispatchGroup:l,programUniforms:u}=e.getRunData(t),d=r.length===0?o.map((g,P)=>P):r;if(d.length!==o.length)throw new Error(`Output size ${d.length} must be equal to ${o.length}.`);let c=[],p=[];for(let g=0;g<o.length;++g){if(!Number.isInteger(d[g])||d[g]<-3||d[g]>=s)throw new Error(`Invalid output index: ${d[g]}`);if(d[g]===-3)continue;let P=d[g]===-1,b=d[g]===-2,x=P||b?i(o[g].dataType,o[g].dims):n(d[g],o[g].dataType,o[g].dims);if(c.push(x),x.data===0)continue;let T=this.gpuDataManager.get(x.data);if(!T)throw new Error(`no GPU data for output: ${x.data}`);if(P&&this.temporaryData.push(T),b){let E=this.kernelPersistentData.get(this.currentKernelId);E||(E=[],this.kernelPersistentData.set(this.currentKernelId,E)),E.push(T)}p.push(T)}if(a.length!==t.length||p.length!==c.length){if(p.length===0)return Jn(e.name),c;throw new Error(`Program ${e.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let m;if(u){let g=0,P=[];u.forEach(E=>{let S=typeof E.data=="number"?[E.data]:E.data;if(S.length===0)return;let O=E.type===10?2:4,B,V;E.type===10?(V=S.length>4?16:S.length>2?8:S.length*O,B=S.length>4?16:O*S.length):(V=S.length<=2?S.length*O:16,B=16),g=Math.ceil(g/V)*V,P.push(g);let W=E.type===10?8:4;g+=S.length>4?Math.ceil(S.length/W)*B:S.length*O});let b=16;g=Math.ceil(g/b)*b;let x=new ArrayBuffer(g);u.forEach((E,S)=>{let O=P[S],B=typeof E.data=="number"?[E.data]:E.data;if(E.type===6)new Int32Array(x,O,B.length).set(B);else if(E.type===12)new Uint32Array(x,O,B.length).set(B);else if(E.type===10)new Uint16Array(x,O,B.length).set(B);else if(E.type===1)new Float32Array(x,O,B.length).set(B);else throw new Error(`Unsupported uniform type: ${ei(E.type)}`)});let T=this.gpuDataManager.create(g,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(T.buffer,0,x,0,g),this.gpuDataManager.release(T.id),m={offset:0,size:g,buffer:T.buffer}}let f=this.programManager.normalizeDispatchGroupSize(l),w=f[1]===1&&f[2]===1,C=lv(e,t,w),y=this.programManager.getArtifact(C);if(y||(y=this.programManager.build(e,f),this.programManager.setArtifact(C,y),Yt("info",()=>`[artifact] key: ${C}, programName: ${e.name}`)),u&&y.uniformVariablesInfo){if(u.length!==y.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${y.uniformVariablesInfo.length}, got ${u.length} in program "${y.programInfo.name}".`);for(let g=0;g<u.length;g++){let P=u[g],b=P.type,x=typeof P.data=="number"?1:P.data.length,[T,E]=y.uniformVariablesInfo[g];if(b!==T||x!==E)throw new Error(`Uniform variable ${g} mismatch: expect type ${T} with size ${E}, got type ${b} with size ${x} in program "${y.programInfo.name}".`)}}if(Yt("info",()=>`[ProgramManager] run "${e.name}" (key=${C}) with ${f[0]}x${f[1]}x${f[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let g={kernelId:this.currentKernelId,programName:y.programInfo.name,inputTensorViews:t,outputTensorViews:c};this.pendingKernels.push(g),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(g)}return this.programManager.run(y,a,p,f,m),Jn(e.name),c}upload(e,t){this.gpuDataManager.upload(e,t)}memcpy(e,t){this.gpuDataManager.memcpy(e,t)}async download(e,t){await this.gpuDataManager.download(e,t)}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,t,r,n){let i=sv.get(e);if(!i)throw new Error(`kernel not implemented: ${e}`);let s={kernelType:e,kernelName:n,kernelEntry:i[0],attributes:[i[1],r]};this.kernels.set(t,s)}releaseKernel(e){let t=this.kernelPersistentData.get(e);if(t){for(let r of t)this.gpuDataManager.release(r.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,t,r){let n=this.kernels.get(e);if(!n)throw new Error(`kernel not created: ${e}`);let i=n.kernelType,s=n.kernelName,a=n.kernelEntry,o=n.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${i}] ${s}" is not allowed to be called recursively`);this.currentKernelId=e,o[0]&&(o[1]=o[0](o[1]),o[0]=void 0),Yt("info",()=>`[WebGPU] Start to run kernel "[${i}] ${s}"...`);let l=this.env.debug;this.temporaryData=[];try{return l&&this.device.pushErrorScope("validation"),a(t,o[1]),0}catch(u){return r.push(Promise.resolve(`[WebGPU] Kernel "[${i}] ${s}" failed. ${u}`)),1}finally{l&&r.push(this.device.popErrorScope().then(u=>u?`GPU validation error for kernel "[${i}] ${s}": ${u.message}`:null));for(let u of this.temporaryData)this.gpuDataManager.release(u.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(e,t,r,n){let i=this.sessionExternalDataMapping.get(e);i||(i=new Map,this.sessionExternalDataMapping.set(e,i));let s=i.get(t),a=this.gpuDataManager.registerExternalBuffer(r,n,s);return i.set(t,[a,r]),a}unregisterBuffers(e){let t=this.sessionExternalDataMapping.get(e);t&&(t.forEach(r=>this.gpuDataManager.unregisterExternalBuffer(r[0])),this.sessionExternalDataMapping.delete(e))}getBuffer(e){let t=this.gpuDataManager.get(e);if(!t)throw new Error(`no GPU data for buffer: ${e}`);return t.buffer}createDownloader(e,t,r){return async()=>{let n=await Ad(this,e,t);return vd(n.buffer,r)}}writeTimestamp(e){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,e)}setQueryType(){var e;this.queryType="none",(((e=this.env.webgpu.profiling)==null?void 0:e.mode)==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){Yt("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){Yt("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){Yt("info","replay"),this.sessionStatus="replaying";let e=this.capturedCommandList.get(this.currentSessionId),t=this.capturedPendingKernels.get(this.currentSessionId),r=e.length;this.pendingKernels=[];for(let n=0;n<r;n++){let i=this.getComputePassEncoder(),s=e[n];this.writeTimestamp(this.pendingDispatchNumber*2),i.setPipeline(s.computePipeline),i.setBindGroup(0,s.bindGroup),i.dispatchWorkgroups(...s.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(t[n]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onCreateSession(){this.gpuDataManager.onCreateSession()}onReleaseSession(e){this.unregisterBuffers(e),this.capturedCommandList.has(e)&&this.capturedCommandList.delete(e),this.capturedPendingKernels.has(e)&&this.capturedPendingKernels.delete(e),this.gpuDataManager.onReleaseSession(e)}onRunStart(e){this.currentSessionId=e,this.setQueryType()}}}),cv={};Ha(cv,{init:()=>hv});var Vl,pv,hv,lO=Ke(()=>{Ct(),ti(),Rt(),_3(),Vl=class kA{constructor(t,r,n,i){this.module=t,this.dataType=r,this.data=n,this.dims=i}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=Pe.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=Pe.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=Pe.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}getUint16Array(){if(this.dataType!==10&&this.dataType!==4)throw new Error("Invalid data type");let t=Pe.size(this.dims);return t===0?new Uint16Array:new Uint16Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(Pe.size(t)!==Pe.size(this.dims))throw new Error("Invalid new shape");return new kA(this.module,this.dataType,this.data,t)}},pv=class{constructor(e,t,r){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=t.adapterInfo;let n=e.PTR_SIZE,i=r/e.PTR_SIZE,s=n===4?"i32":"i64";this.opKernelContext=Number(e.getValue(n*i++,s));let a=Number(e.getValue(n*i++,s));this.outputCount=Number(e.getValue(n*i++,s)),this.customDataOffset=Number(e.getValue(n*i++,"*")),this.customDataSize=Number(e.getValue(n*i++,s));let o=[];for(let l=0;l<a;l++){let u=Number(e.getValue(n*i++,s)),d=Number(e.getValue(n*i++,"*")),c=Number(e.getValue(n*i++,s)),p=[];for(let m=0;m<c;m++)p.push(Number(e.getValue(n*i++,s)));o.push(new Vl(e,u,d,p))}this.inputs=o}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(e,t){var a;let r=((a=t==null?void 0:t.inputs)==null?void 0:a.map(o=>typeof o=="number"?this.inputs[o]:o))??this.inputs,n=(t==null?void 0:t.outputs)??[],i=(o,l,u)=>new Vl(this.module,l,this.output(o,u),u),s=(o,l)=>{let u=sa(o,l);if(!u)throw new Error(`Unsupported data type: ${o}`);let d=u>0?this.backend.gpuDataManager.create(u).id:0;return new Vl(this.module,o,d,l)};return this.backend.run(e,r,n,i,s,this.outputCount)}output(e,t){let r=this.module.stackSave();try{let n=this.module.PTR_SIZE,i=n===4?"i32":"i64",s=this.module.stackAlloc((1+t.length)*n);this.module.setValue(s,t.length,i);for(let a=0;a<t.length;a++)this.module.setValue(s+n*(a+1),t[a],i);return this.module._JsepOutput(this.opKernelContext,e,s)}catch(n){throw new Error(`Failed to generate kernel's output[${e}] with dims [${t}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(r)}}},hv=async(e,t,r,n)=>{let i=t.jsepInit;if(!i)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(e==="webgpu"){let s=(oO(),Oo(av)).WebGpuBackend,a=new s;await a.initialize(r,n),i("webgpu",[a,o=>a.alloc(Number(o)),o=>a.free(o),(o,l,u,d=!1)=>{if(d)Yt("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${Number(o)}, dst=${Number(l)}, size=${Number(u)}`),a.memcpy(Number(o),Number(l));else{Yt("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${Number(o)}, gpuDataId=${Number(l)}, size=${Number(u)}`);let c=t.HEAPU8.subarray(Number(o>>>0),Number(o>>>0)+Number(u));a.upload(Number(l),c)}},async(o,l,u)=>{Yt("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${o}, dataOffset=${l}, size=${u}`),await a.download(Number(o),()=>t.HEAPU8.subarray(Number(l)>>>0,Number(l+u)>>>0))},(o,l,u)=>a.createKernel(o,Number(l),u,t.UTF8ToString(t._JsepGetNodeName(Number(l)))),o=>a.releaseKernel(o),(o,l,u,d)=>{Yt("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${o}, contextDataOffset=${l}`);let c=new pv(t,a,Number(l));return a.computeKernel(Number(o),c,d)},()=>a.captureBegin(),()=>a.captureEnd(),()=>a.replay()])}else{let s=new y_(r);i("webnn",[s,()=>s.reserveTensorId(),a=>s.releaseTensorId(a),async(a,o,l,u,d)=>s.ensureTensor(a,o,l,u,d),(a,o)=>{s.uploadTensor(a,o)},async(a,o)=>s.downloadTensor(a,o)])}}}),fv,Pc,Cc,Ci,mv,Sc,Gl,kc,Ic,Ac,Oc,Dc,zc,_v=Ke(()=>{h3(),f3(),Ct(),ra(),md(),n_(),fv=(e,t)=>{vr()._OrtInit(e,t)!==0&&hr("Can't initialize onnxruntime.")},Pc=async e=>{fv(e.wasm.numThreads,Il(e.logLevel))},Cc=async(e,t)=>{var r,n;(n=(r=vr()).asyncInit)==null||n.call(r);{let i=(lO(),Oo(cv)).init;if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let s=e.webgpu.adapter;if(s){if(typeof s.limits!="object"||typeof s.features!="object"||typeof s.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let a=e.webgpu.powerPreference;if(a!==void 0&&a!=="low-power"&&a!=="high-performance")throw new Error(`Invalid powerPreference setting: "${a}"`);let o=e.webgpu.forceFallbackAdapter;if(o!==void 0&&typeof o!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${o}"`);if(s=await navigator.gpu.requestAdapter({powerPreference:a,forceFallbackAdapter:o}),!s)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await i("webgpu",vr(),e,s)}if(t==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await i("webnn",vr(),e)}}},Ci=new Map,mv=e=>{let t=vr(),r=t.stackSave();try{let n=t.PTR_SIZE,i=t.stackAlloc(2*n);t._OrtGetInputOutputCount(e,i,i+n)!==0&&hr("Can't get session input/output count.");let s=n===4?"i32":"i64";return[Number(t.getValue(i,s)),Number(t.getValue(i+n,s))]}finally{t.stackRestore(r)}},Sc=(e,t)=>{let r=vr(),n=r.stackSave(),i=0;try{let s=r.PTR_SIZE,a=r.stackAlloc(2*s);r._OrtGetInputOutputMetadata(e,t,a,a+s)!==0&&hr("Can't get session input/output metadata.");let o=Number(r.getValue(a,"*"));i=Number(r.getValue(a+s,"*"));let l=r.HEAP32[i/4];if(l===0)return[o,0];let u=r.HEAPU32[i/4+1],d=[];for(let c=0;c<u;c++){let p=Number(r.getValue(i+8+c*s,"*"));d.push(p!==0?r.UTF8ToString(p):Number(r.getValue(i+8+(c+u)*s,"*")))}return[o,l,d]}finally{r.stackRestore(n),i!==0&&r._OrtFree(i)}},Gl=e=>{let t=vr(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},kc=async(e,t)=>{var c,p,m,f;let r,n,i=vr();Array.isArray(e)?[r,n]=e:e.buffer===i.HEAPU8.buffer?[r,n]=[e.byteOffset,e.byteLength]:[r,n]=Gl(e);let s=0,a=0,o=0,l=[],u=[],d=[];try{if([a,l]=await r_(t),(t==null?void 0:t.externalData)&&i.mountExternalData){let S=[];for(let O of t.externalData){let B=typeof O=="string"?O:O.path;S.push(yd(typeof O=="string"?O:O.data).then(V=>{i.mountExternalData(B,V)}))}await Promise.all(S)}for(let S of(t==null?void 0:t.executionProviders)??[])if((typeof S=="string"?S:S.name)==="webnn"){if(i.shouldTransferToMLTensor=!1,typeof S!="string"){let O=S,B=O==null?void 0:O.context,V=O==null?void 0:O.gpuDevice,W=O==null?void 0:O.deviceType,N=O==null?void 0:O.powerPreference;B?i.currentContext=B:V?i.currentContext=await i.webnnCreateMLContext(V):i.currentContext=await i.webnnCreateMLContext({deviceType:W,powerPreference:N})}else i.currentContext=await i.webnnCreateMLContext();break}s=await i._OrtCreateSession(r,n,a),(c=i.webgpuOnCreateSession)==null||c.call(i,s),s===0&&hr("Can't create a session."),(p=i.jsepOnCreateSession)==null||p.call(i),i.currentContext&&(i.webnnRegisterMLContext(s,i.currentContext),i.currentContext=void 0,i.shouldTransferToMLTensor=!0);let[w,C]=mv(s),y=!!(t!=null&&t.enableGraphCapture),g=[],P=[],b=[],x=[],T=[];for(let S=0;S<w;S++){let[O,B,V]=Sc(s,S);O===0&&hr("Can't get an input name."),u.push(O);let W=i.UTF8ToString(O);g.push(W),b.push(B===0?{name:W,isTensor:!1}:{name:W,isTensor:!0,type:ei(B),shape:V})}for(let S=0;S<C;S++){let[O,B,V]=Sc(s,S+w);O===0&&hr("Can't get an output name."),d.push(O);let W=i.UTF8ToString(O);P.push(W),x.push(B===0?{name:W,isTensor:!1}:{name:W,isTensor:!0,type:ei(B),shape:V});{if(y&&(t==null?void 0:t.preferredOutputLocation)===void 0){T.push("gpu-buffer");continue}let N=typeof(t==null?void 0:t.preferredOutputLocation)=="string"?t.preferredOutputLocation:((m=t==null?void 0:t.preferredOutputLocation)==null?void 0:m[W])??"cpu",te=i.webnnIsGraphOutput;if(N==="cpu"&&te&&te(s,W)){T.push("ml-tensor-cpu-output");continue}if(N!=="cpu"&&N!=="cpu-pinned"&&N!=="gpu-buffer"&&N!=="ml-tensor")throw new Error(`Not supported preferred output location: ${N}.`);if(y&&N!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${N}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);T.push(N)}}let E=null;return T.some(S=>S==="gpu-buffer"||S==="ml-tensor"||S==="ml-tensor-cpu-output")&&(o=i._OrtCreateBinding(s),o===0&&hr("Can't create IO binding."),E={handle:o,outputPreferredLocations:T,outputPreferredLocationsEncoded:T.map(S=>S==="ml-tensor-cpu-output"?"ml-tensor":S).map(S=>wd(S))}),Ci.set(s,[s,u,d,E,y,!1]),[s,g,P,b,x]}catch(w){throw u.forEach(C=>i._OrtFree(C)),d.forEach(C=>i._OrtFree(C)),o!==0&&i._OrtReleaseBinding(o)!==0&&hr("Can't release IO binding."),s!==0&&i._OrtReleaseSession(s)!==0&&hr("Can't release session."),w}finally{i._free(r),a!==0&&i._OrtReleaseSessionOptions(a)!==0&&hr("Can't release session options."),l.forEach(w=>i._free(w)),(f=i.unmountExternalData)==null||f.call(i)}},Ic=e=>{var l,u,d;let t=vr(),r=Ci.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[n,i,s,a,o]=r;a&&(o&&t._OrtClearBoundOutputs(a.handle)!==0&&hr("Can't clear bound outputs."),t._OrtReleaseBinding(a.handle)!==0&&hr("Can't release IO binding.")),(l=t.jsepOnReleaseSession)==null||l.call(t,e),(u=t.webnnOnReleaseSession)==null||u.call(t,e),(d=t.webgpuOnReleaseSession)==null||d.call(t,e),i.forEach(c=>t._OrtFree(c)),s.forEach(c=>t._OrtFree(c)),t._OrtReleaseSession(n)!==0&&hr("Can't release session."),Ci.delete(e)},Ac=async(e,t,r,n,i,s,a=!1)=>{if(!e){t.push(0);return}let o=vr(),l=o.PTR_SIZE,u=e[0],d=e[1],c=e[3],p=c,m,f;if(u==="string"&&(c==="gpu-buffer"||c==="ml-tensor"))throw new Error("String tensor is not supported on GPU.");if(a&&c!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${s} when enableGraphCapture is true.`);if(c==="gpu-buffer"){let y=e[2].gpuBuffer;f=sa(na(u),d);{let g=o.jsepRegisterBuffer;if(!g)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');m=g(n,s,y,f)}}else if(c==="ml-tensor"){let y=e[2].mlTensor;f=sa(na(u),d);let g=o.webnnRegisterMLTensor;if(!g)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');m=g(n,y,na(u),d)}else{let y=e[2];if(Array.isArray(y)){f=l*y.length,m=o._malloc(f),r.push(m);for(let g=0;g<y.length;g++){if(typeof y[g]!="string")throw new TypeError(`tensor data at index ${g} is not a string`);o.setValue(m+g*l,os(y[g],r),"*")}}else{let g=o.webnnIsGraphInput,P=o.webnnIsGraphOutput;if(u!=="string"&&g&&P){let b=o.UTF8ToString(i);if(g(n,b)||P(n,b)){let x=na(u);f=sa(x,d),p="ml-tensor";let T=o.webnnCreateTemporaryTensor,E=o.webnnUploadTensor;if(!T||!E)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');let S=await T(n,x,d);E(S,new Uint8Array(y.buffer,y.byteOffset,y.byteLength)),m=S}else f=y.byteLength,m=o._malloc(f),r.push(m),o.HEAPU8.set(new Uint8Array(y.buffer,y.byteOffset,f),m)}else f=y.byteLength,m=o._malloc(f),r.push(m),o.HEAPU8.set(new Uint8Array(y.buffer,y.byteOffset,f),m)}}let w=o.stackSave(),C=o.stackAlloc(4*d.length);try{d.forEach((g,P)=>o.setValue(C+P*l,g,l===4?"i32":"i64"));let y=o._OrtCreateTensor(na(u),m,f,C,d.length,wd(p));y===0&&hr(`Can't create tensor for input/output. session=${n}, index=${s}.`),t.push(y)}finally{o.stackRestore(w)}},Oc=async(e,t,r,n,i,s)=>{var V,W,N,te;let a=vr(),o=a.PTR_SIZE,l=Ci.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);let u=l[0],d=l[1],c=l[2],p=l[3],m=l[4],f=l[5],w=t.length,C=n.length,y=0,g=[],P=[],b=[],x=[],T=a.stackSave(),E=a.stackAlloc(w*o),S=a.stackAlloc(w*o),O=a.stackAlloc(C*o),B=a.stackAlloc(C*o);try{[y,g]=Jm(s);for(let Z=0;Z<w;Z++)await Ac(r[Z],P,x,e,d[t[Z]],t[Z],m);for(let Z=0;Z<C;Z++)await Ac(i[Z],b,x,e,c[n[Z]],w+n[Z],m);for(let Z=0;Z<w;Z++)a.setValue(E+Z*o,P[Z],"*"),a.setValue(S+Z*o,d[t[Z]],"*");for(let Z=0;Z<C;Z++)a.setValue(O+Z*o,b[Z],"*"),a.setValue(B+Z*o,c[n[Z]],"*");if(p&&!f){let{handle:Z,outputPreferredLocations:de,outputPreferredLocationsEncoded:pe}=p;if(d.length!==w)throw new Error(`input count from feeds (${w}) is expected to be always equal to model's input count (${d.length}).`);for(let L=0;L<w;L++){let F=t[L];await a._OrtBindInput(Z,d[F],P[L])!==0&&hr(`Can't bind input[${L}] for session=${e}.`)}for(let L=0;L<C;L++){let F=n[L];(V=i[L])!=null&&V[3]?a._OrtBindOutput(Z,c[F],b[L],0)!==0&&hr(`Can't bind pre-allocated output[${L}] for session=${e}.`):a._OrtBindOutput(Z,c[F],0,pe[F])!==0&&hr(`Can't bind output[${L}] to ${de[L]} for session=${e}.`)}Ci.set(e,[u,d,c,p,m,!0])}(W=a.jsepOnRunStart)==null||W.call(a,u),(N=a.webnnOnRunStart)==null||N.call(a,u);let q;p?q=await a._OrtRunWithBinding(u,p.handle,C,O,y):q=await a._OrtRun(u,S,E,w,B,C,O,y),q!==0&&hr("failed to call OrtRun().");let K=[],Y=[];for(let Z=0;Z<C;Z++){let de=Number(a.getValue(O+Z*o,"*"));if(de===b[Z]){K.push(i[Z]);continue}let pe=a.stackSave(),L=a.stackAlloc(4*o),F=!1,U,re=0;try{a._OrtGetTensorData(de,L,L+o,L+2*o,L+3*o)!==0&&hr(`Can't access output tensor data on index ${Z}.`);let me=o===4?"i32":"i64",J=Number(a.getValue(L,me));re=a.getValue(L+o,"*");let we=a.getValue(L+o*2,"*"),je=Number(a.getValue(L+o*3,me)),Ge=[];for(let oe=0;oe<je;oe++)Ge.push(Number(a.getValue(we+oe*o,me)));a._OrtFree(we)!==0&&hr("Can't free memory for tensor dims.");let Ae=Ge.reduce((oe,H)=>oe*H,1);U=ei(J);let ne=p==null?void 0:p.outputPreferredLocations[n[Z]];if(U==="string"){if(ne==="gpu-buffer"||ne==="ml-tensor")throw new Error("String tensor is not supported on GPU.");let oe=[];for(let H=0;H<Ae;H++){let be=a.getValue(re+H*o,"*"),Oe=a.getValue(re+(H+1)*o,"*"),Se=H===Ae-1?void 0:Oe-be;oe.push(a.UTF8ToString(be,Se))}K.push([U,Ge,oe,"cpu"])}else if(ne==="gpu-buffer"&&Ae>0){let oe=a.jsepGetBuffer;if(!oe)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let H=oe(re),be=sa(J,Ae);if(be===void 0||!_d(U))throw new Error(`Unsupported data type: ${U}`);F=!0,K.push([U,Ge,{gpuBuffer:H,download:a.jsepCreateDownloader(H,be,U),dispose:()=>{a._OrtReleaseTensor(de)!==0&&hr("Can't release tensor.")}},"gpu-buffer"])}else if(ne==="ml-tensor"&&Ae>0){let oe=a.webnnEnsureTensor,H=a.webnnIsGraphInputOutputTypeSupported;if(!oe||!H)throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');if(sa(J,Ae)===void 0||!gd(U))throw new Error(`Unsupported data type: ${U}`);if(!H(e,U,!1))throw new Error(`preferredLocation "ml-tensor" for ${U} output is not supported by current WebNN Context.`);let be=await oe(e,re,J,Ge,!1);F=!0,K.push([U,Ge,{mlTensor:be,download:a.webnnCreateMLTensorDownloader(re,U),dispose:()=>{a.webnnReleaseTensorId(re),a._OrtReleaseTensor(de)}},"ml-tensor"])}else if(ne==="ml-tensor-cpu-output"&&Ae>0){let oe=a.webnnCreateMLTensorDownloader(re,U)(),H=K.length;F=!0,Y.push((async()=>{let be=[H,await oe];return a.webnnReleaseTensorId(re),a._OrtReleaseTensor(de),be})()),K.push([U,Ge,[],"cpu"])}else{let oe=kl(U),H=new oe(Ae);new Uint8Array(H.buffer,H.byteOffset,H.byteLength).set(a.HEAPU8.subarray(re,re+H.byteLength)),K.push([U,Ge,H,"cpu"])}}finally{a.stackRestore(pe),U==="string"&&re&&a._free(re),F||a._OrtReleaseTensor(de)}}p&&!m&&(a._OrtClearBoundOutputs(p.handle)!==0&&hr("Can't clear bound outputs."),Ci.set(e,[u,d,c,p,m,!1]));for(let[Z,de]of await Promise.all(Y))K[Z][2]=de;return K}finally{(te=a.webnnOnRunEnd)==null||te.call(a,u),a.stackRestore(T),P.forEach(q=>a._OrtReleaseTensor(q)),b.forEach(q=>a._OrtReleaseTensor(q)),x.forEach(q=>a._free(q)),y!==0&&a._OrtReleaseRunOptions(y),g.forEach(q=>a._free(q))}},Dc=e=>{let t=vr(),r=Ci.get(e);if(!r)throw new Error("invalid session id");let n=r[0],i=t._OrtEndProfiling(n);i===0&&hr("Can't get an profile file name."),t._OrtFree(i)},zc=e=>{let t=[];for(let r of e){let n=r[2];!Array.isArray(n)&&"buffer"in n&&t.push(n.buffer)}return t}}),Si,In,Ja,Qo,Xo,ql,Fc,Hl,ca,pa,gv,wv,yv,bv,vv,xv,$v,Mv,Tv=Ke(()=>{as(),_v(),ra(),cd(),Si=()=>!!Pr.wasm.proxy&&typeof document<"u",Ja=!1,Qo=!1,Xo=!1,Hl=new Map,ca=(e,t)=>{let r=Hl.get(e);r?r.push(t):Hl.set(e,[t])},pa=()=>{if(Ja||!Qo||Xo||!In)throw new Error("worker not ready")},gv=e=>{switch(e.data.type){case"init-wasm":Ja=!1,e.data.err?(Xo=!0,Fc[1](e.data.err)):(Qo=!0,Fc[0]()),ql&&(URL.revokeObjectURL(ql),ql=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=Hl.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}}},wv=async()=>{if(!Qo){if(Ja)throw new Error("multiple calls to 'initWasm()' detected.");if(Xo)throw new Error("previous call to 'initWasm()' failed.");if(Ja=!0,Si())return new Promise((e,t)=>{In==null||In.terminate(),qm().then(([r,n])=>{try{In=n,In.onerror=s=>t(s),In.onmessage=gv,Fc=[e,t];let i={type:"init-wasm",in:Pr};!i.in.wasm.wasmPaths&&(r||od)&&(i.in.wasm.wasmPaths={wasm:new URL(""+new URL("ort-wasm-simd-threaded.jsep-CLPRrI3A.wasm",self.location.href).href,self.location.href).href}),In.postMessage(i),ql=r}catch(i){t(i)}},t)});try{await fd(Pr.wasm),await Pc(Pr),Qo=!0}catch(e){throw Xo=!0,e}finally{Ja=!1}}},yv=async e=>{if(Si())return pa(),new Promise((t,r)=>{ca("init-ep",[t,r]);let n={type:"init-ep",in:{epName:e,env:Pr}};In.postMessage(n)});await Cc(Pr,e)},bv=async e=>Si()?(pa(),new Promise((t,r)=>{ca("copy-from",[t,r]);let n={type:"copy-from",in:{buffer:e}};In.postMessage(n,[e.buffer])})):Gl(e),vv=async(e,t)=>{if(Si()){if(t!=null&&t.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return pa(),new Promise((r,n)=>{ca("create",[r,n]);let i={type:"create",in:{model:e,options:{...t}}},s=[];e instanceof Uint8Array&&s.push(e.buffer),In.postMessage(i,s)})}else return kc(e,t)},xv=async e=>{if(Si())return pa(),new Promise((t,r)=>{ca("release",[t,r]);let n={type:"release",in:e};In.postMessage(n)});Ic(e)},$v=async(e,t,r,n,i,s)=>{if(Si()){if(r.some(a=>a[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(i.some(a=>a))throw new Error("pre-allocated output tensor is not supported for proxy.");return pa(),new Promise((a,o)=>{ca("run",[a,o]);let l=r,u={type:"run",in:{sessionId:e,inputIndices:t,inputs:l,outputIndices:n,options:s}};In.postMessage(u,zc(l))})}else return Oc(e,t,r,n,i,s)},Mv=async e=>{if(Si())return pa(),new Promise((t,r)=>{ca("end-profiling",[t,r]);let n={type:"end-profiling",in:e};In.postMessage(n)});Dc(e)}}),Bc,Ev,Pv,uO=Ke(()=>{as(),Tv(),Ct(),td(),n_(),Bc=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];case"ml-tensor":return[e.type,e.dims,{mlTensor:e.mlTensor},"ml-tensor"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},Ev=e=>{switch(e[3]){case"cpu":return new Xn(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!_d(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:n,dispose:i}=e[2];return Xn.fromGpuBuffer(r,{dataType:t,dims:e[1],download:n,dispose:i})}case"ml-tensor":{let t=e[0];if(!gd(t))throw new Error(`not supported data type: ${t} for deserializing MLTensor tensor`);let{mlTensor:r,download:n,dispose:i}=e[2];return Xn.fromMLTensor(r,{dataType:t,dims:e[1],download:n,dispose:i})}default:throw new Error(`invalid data location: ${e[3]}`)}},Pv=class{async fetchModelAndCopyToWasmMemory(e){return bv(await yd(e))}async loadModel(e,t){is();let r;typeof e=="string"?r=await this.fetchModelAndCopyToWasmMemory(e):r=e,[this.sessionId,this.inputNames,this.outputNames,this.inputMetadata,this.outputMetadata]=await vv(r,t),Jn()}async dispose(){return xv(this.sessionId)}async run(e,t,r){is();let n=[],i=[];Object.entries(e).forEach(c=>{let p=c[0],m=c[1],f=this.inputNames.indexOf(p);if(f===-1)throw new Error(`invalid input '${p}'`);n.push(m),i.push(f)});let s=[],a=[];Object.entries(t).forEach(c=>{let p=c[0],m=c[1],f=this.outputNames.indexOf(p);if(f===-1)throw new Error(`invalid output '${p}'`);s.push(m),a.push(f)});let o=n.map((c,p)=>Bc(c,()=>`input "${this.inputNames[i[p]]}"`)),l=s.map((c,p)=>c?Bc(c,()=>`output "${this.outputNames[a[p]]}"`):null),u=await $v(this.sessionId,i,o,a,l,r),d={};for(let c=0;c<u.length;c++)d[this.outputNames[a[c]]]=s[c]??Ev(u[c]);return Jn(),d}startProfiling(){}endProfiling(){Mv(this.sessionId)}}}),Cv={};Ha(Cv,{OnnxruntimeWebAssemblyBackend:()=>Rc,initializeFlags:()=>Lc,wasmBackend:()=>Sv});var Lc,Rc,Sv,dO=Ke(()=>{as(),Tv(),uO(),Lc=()=>{(typeof Pr.wasm.initTimeout!="number"||Pr.wasm.initTimeout<0)&&(Pr.wasm.initTimeout=0);let e=Pr.wasm.simd;if(typeof e!="boolean"&&e!==void 0&&e!=="fixed"&&e!=="relaxed"&&(console.warn(`Property "env.wasm.simd" is set to unknown value "${e}". Reset it to \`false\` and ignore SIMD feature checking.`),Pr.wasm.simd=!1),typeof Pr.wasm.proxy!="boolean"&&(Pr.wasm.proxy=!1),typeof Pr.wasm.trace!="boolean"&&(Pr.wasm.trace=!1),typeof Pr.wasm.numThreads!="number"||!Number.isInteger(Pr.wasm.numThreads)||Pr.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)Pr.wasm.numThreads=1;else{let t=typeof navigator>"u"?XA("node:os").cpus().length:navigator.hardwareConcurrency;Pr.wasm.numThreads=Math.min(4,Math.ceil((t||1)/2))}},Rc=class{async init(e){Lc(),await wv(),await yv(e)}async createInferenceSessionHandler(e,t){let r=new Pv;return await r.loadModel(e,t),r}},Sv=new Rc});as(),as(),as();var cO="1.22.0",pO=zm;{let e=(dO(),Oo(Cv)).wasmBackend;ea("webgpu",e,5),ea("webnn",e,5),ea("cpu",e,10),ea("wasm",e,10)}Object.defineProperty(Pr.versions,"web",{value:cO,enumerable:!0});/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*//**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var hO=Object.freeze({__proto__:null,get InferenceSession(){return ed},get TRACE(){return Fo},get TRACE_FUNC_BEGIN(){return is},get TRACE_FUNC_END(){return Jn},get Tensor(){return Xn},default:pO,get env(){return Pr},get registerBackend(){return ea}}),Yn={};const fO="3.7.2",kv=typeof window<"u"&&typeof window.document<"u",Iv=typeof self<"u"&&["DedicatedWorkerGlobalScope","ServiceWorkerGlobalScope","SharedWorkerGlobalScope"].includes((cP=self.constructor)==null?void 0:cP.name),Av=typeof self<"u"&&"caches"in self,mO=typeof navigator<"u"&&"gpu"in navigator,_O=typeof navigator<"u"&&"ml"in navigator,gO=!1,wO=!1,yO=!1,bO=!1,vO=typeof globalThis.Deno<"u",ha=Object.freeze({IS_BROWSER_ENV:kv,IS_WEBWORKER_ENV:Iv,IS_WEB_CACHE_AVAILABLE:Av,IS_WEBGPU_AVAILABLE:mO,IS_WEBNN_AVAILABLE:_O,IS_PROCESS_AVAILABLE:gO,IS_NODE_ENV:wO,IS_FS_AVAILABLE:yO,IS_PATH_AVAILABLE:bO}),Fs={version:fO,backends:{onnx:{}},remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!(kv||Iv),localModelPath:"/models/",useBrowserCache:Av&&!vO,useCustomCache:!1},xO=(e,t)=>{const r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=e.dims[3],r.height=e.dims[2];const n=r.getContext("2d");if(n!=null){let i,s;(t==null?void 0:t.tensorLayout)!==void 0&&t.tensorLayout==="NHWC"?(i=e.dims[2],s=e.dims[3]):(i=e.dims[3],s=e.dims[2]);const a=(t==null?void 0:t.format)!==void 0?t.format:"RGB",o=t==null?void 0:t.norm;let l,u;o===void 0||o.mean===void 0?l=[255,255,255,255]:typeof o.mean=="number"?l=[o.mean,o.mean,o.mean,o.mean]:(l=[o.mean[0],o.mean[1],o.mean[2],0],o.mean[3]!==void 0&&(l[3]=o.mean[3])),o===void 0||o.bias===void 0?u=[0,0,0,0]:typeof o.bias=="number"?u=[o.bias,o.bias,o.bias,o.bias]:(u=[o.bias[0],o.bias[1],o.bias[2],0],o.bias[3]!==void 0&&(u[3]=o.bias[3]));const d=s*i;let c=0,p=d,m=d*2,f=-1;a==="RGBA"?(c=0,p=d,m=d*2,f=d*3):a==="RGB"?(c=0,p=d,m=d*2):a==="RBG"&&(c=0,m=d,p=d*2);for(let w=0;w<s;w++)for(let C=0;C<i;C++){const y=(e.data[c++]-u[0])*l[0],g=(e.data[p++]-u[1])*l[1],P=(e.data[m++]-u[2])*l[2],b=f===-1?255:(e.data[f++]-u[3])*l[3];n.fillStyle="rgba("+y+","+g+","+P+","+b+")",n.fillRect(C,w,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},$O=(e,t)=>{const r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let n;if(r!=null){let i,s,a;(t==null?void 0:t.tensorLayout)!==void 0&&t.tensorLayout==="NHWC"?(i=e.dims[2],s=e.dims[1],a=e.dims[3]):(i=e.dims[3],s=e.dims[2],a=e.dims[1]);const o=t!==void 0&&t.format!==void 0?t.format:"RGB",l=t==null?void 0:t.norm;let u,d;l===void 0||l.mean===void 0?u=[255,255,255,255]:typeof l.mean=="number"?u=[l.mean,l.mean,l.mean,l.mean]:(u=[l.mean[0],l.mean[1],l.mean[2],255],l.mean[3]!==void 0&&(u[3]=l.mean[3])),l===void 0||l.bias===void 0?d=[0,0,0,0]:typeof l.bias=="number"?d=[l.bias,l.bias,l.bias,l.bias]:(d=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(d[3]=l.bias[3]));const c=s*i;if(t!==void 0&&(t.format!==void 0&&a===4&&t.format!=="RGBA"||a===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const p=4;let m=0,f=1,w=2,C=3,y=0,g=c,P=c*2,b=-1;o==="RGBA"?(y=0,g=c,P=c*2,b=c*3):o==="RGB"?(y=0,g=c,P=c*2):o==="RBG"&&(y=0,P=c,g=c*2),n=r.createImageData(i,s);for(let x=0;x<s*i;m+=p,f+=p,w+=p,C+=p,x++)n.data[m]=(e.data[y++]-d[0])*u[0],n.data[f]=(e.data[g++]-d[1])*u[1],n.data[w]=(e.data[P++]-d[2])*u[2],n.data[C]=b===-1?255:(e.data[b++]-d[3])*u[3]}else throw new Error("Can not access image data");return n},Nc=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:r,width:n}=t,i=t.norm??{mean:255,bias:0};let s,a;typeof i.mean=="number"?s=[i.mean,i.mean,i.mean,i.mean]:s=[i.mean[0],i.mean[1],i.mean[2],i.mean[3]??255],typeof i.bias=="number"?a=[i.bias,i.bias,i.bias,i.bias]:a=[i.bias[0],i.bias[1],i.bias[2],i.bias[3]??0];const o=t.format!==void 0?t.format:"RGBA",l=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",u=r*n,d=l==="RGBA"?new Float32Array(u*4):new Float32Array(u*3);let c=4,p=0,m=1,f=2,w=3,C=0,y=u,g=u*2,P=-1;o==="RGB"&&(c=3,p=0,m=1,f=2,w=-1),l==="RGBA"?P=u*3:l==="RBG"?(C=0,g=u,y=u*2):l==="BGR"&&(g=0,y=u,C=u*2);for(let x=0;x<u;x++,p+=c,f+=c,m+=c,w+=c)d[C++]=(e[p]+a[0])/s[0],d[y++]=(e[m]+a[1])/s[1],d[g++]=(e[f]+a[2])/s[2],P!==-1&&w!==-1&&(d[P++]=(e[w]+a[3])/s[3]);return l==="RGBA"?new Zn("float32",d,[1,4,r,n]):new Zn("float32",d,[1,3,r,n])},MO=async(e,t)=>{const r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,n=typeof ImageData<"u"&&e instanceof ImageData,i=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,s=typeof e=="string";let a,o=t??{};const l=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},u=d=>typeof HTMLCanvasElement<"u"&&d instanceof HTMLCanvasElement||d instanceof OffscreenCanvas?d.getContext("2d"):null;if(r){const d=l();d.width=e.width,d.height=e.height;const c=u(d);if(c!=null){let p=e.height,m=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(p=t.resizedHeight,m=t.resizedWidth),t!==void 0){if(o=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");o.tensorFormat="RGBA",o.height=p,o.width=m}else o.tensorFormat="RGBA",o.height=p,o.width=m;c.drawImage(e,0,0),a=c.getImageData(0,0,m,p).data}else throw new Error("Can not access image data")}else if(n){let d,c;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(d=t.resizedHeight,c=t.resizedWidth):(d=e.height,c=e.width),t!==void 0&&(o=t),o.format="RGBA",o.height=d,o.width=c,t!==void 0){const p=l();p.width=c,p.height=d;const m=u(p);if(m!=null)m.putImageData(e,0,0),a=m.getImageData(0,0,c,d).data;else throw new Error("Can not access image data")}else a=e.data}else if(i){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");const d=l();d.width=e.width,d.height=e.height;const c=u(d);if(c!=null){const p=e.height,m=e.width;return c.drawImage(e,0,0,m,p),a=c.getImageData(0,0,m,p).data,o.height=p,o.width=m,Nc(a,o)}else throw new Error("Can not access image data")}else{if(s)return new Promise((d,c)=>{const p=l(),m=u(p);if(!e||!m)return c();const f=new Image;f.crossOrigin="Anonymous",f.src=e,f.onload=()=>{p.width=f.width,p.height=f.height,m.drawImage(f,0,0,p.width,p.height);const w=m.getImageData(0,0,p.width,p.height);o.height=p.height,o.width=p.width,d(Nc(w.data,o))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(a!==void 0)return Nc(a,o);throw new Error("Input data provided is not supported - aborted tensor creation")},TO=(e,t)=>{const{width:r,height:n,download:i,dispose:s}=t,a=[1,n,r,4];return new Zn({location:"texture",type:"float32",texture:e,dims:a,download:i,dispose:s})},EO=(e,t)=>{const{dataType:r,dims:n,download:i,dispose:s}=t;return new Zn({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:n,download:i,dispose:s})},PO=(e,t)=>{const{dataType:r,dims:n,download:i,dispose:s}=t;return new Zn({location:"ml-tensor",type:r??"float32",mlTensor:e,dims:n,download:i,dispose:s})},CO=(e,t,r)=>new Zn({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]}),Ya=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),Kl=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let Ov=!1;const SO=()=>{if(!Ov){Ov=!0;const e=typeof BigInt64Array<"u"&&BigInt64Array.from,t=typeof BigUint64Array<"u"&&BigUint64Array.from,r=globalThis.Float16Array,n=typeof r<"u"&&r.from;e&&(Ya.set("int64",BigInt64Array),Kl.set(BigInt64Array,"int64")),t&&(Ya.set("uint64",BigUint64Array),Kl.set(BigUint64Array,"uint64")),n?(Ya.set("float16",r),Kl.set(r,"float16")):Ya.set("float16",Uint16Array)}},kO=e=>{let t=1;for(let r=0;r<e.length;r++){const n=e[r];if(typeof n!="number"||!Number.isSafeInteger(n))throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);t*=n}return t},IO=(e,t)=>{switch(e.location){case"cpu":return new Zn(e.type,e.data,t);case"cpu-pinned":return new Zn({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new Zn({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new Zn({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});case"ml-tensor":return new Zn({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}};let Zn=class{constructor(t,r,n){SO();let i,s;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,i=t.type,s=t.dims,t.location){case"cpu-pinned":{const o=Ya.get(i);if(!o)throw new TypeError(`unsupported type "${i}" to create tensor from pinned buffer`);if(!(t.data instanceof o))throw new TypeError(`buffer should be of type ${o.name}`);this.cpuData=t.data;break}case"texture":{if(i!=="float32")throw new TypeError(`unsupported type "${i}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(i!=="float32"&&i!=="float16"&&i!=="int32"&&i!=="int64"&&i!=="uint32"&&i!=="uint8"&&i!=="bool"&&i!=="uint4"&&i!=="int4")throw new TypeError(`unsupported type "${i}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}case"ml-tensor":{if(i!=="float32"&&i!=="float16"&&i!=="int32"&&i!=="int64"&&i!=="uint32"&&i!=="uint64"&&i!=="int8"&&i!=="uint8"&&i!=="bool"&&i!=="uint4"&&i!=="int4")throw new TypeError(`unsupported type "${i}" to create tensor from MLTensor`);this.mlTensorData=t.mlTensor,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let o,l;if(typeof t=="string")if(i=t,l=n,t==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");o=r}else{const u=Ya.get(t);if(u===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if(t==="float16"&&u===Uint16Array||t==="uint4"||t==="int4")throw new TypeError(`Creating a ${t} tensor from number array is not supported. Please use ${u.name} as data.`);t==="uint64"||t==="int64"?o=u.from(r,BigInt):o=u.from(r)}else if(r instanceof u)o=r;else if(r instanceof Uint8ClampedArray)if(t==="uint8")o=Uint8Array.from(r);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else if(t==="float16"&&r instanceof Uint16Array&&u!==Uint16Array)o=new globalThis.Float16Array(r.buffer,r.byteOffset,r.length);else throw new TypeError(`A ${i} tensor's data must be type of ${u}`)}else if(l=r,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const u=typeof t[0];if(u==="string")i="string",o=t;else if(u==="boolean")i="bool",o=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${u}.`)}else if(t instanceof Uint8ClampedArray)i="uint8",o=Uint8Array.from(t);else{const u=Kl.get(t.constructor);if(u===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);i=u,o=t}if(l===void 0)l=[o.length];else if(!Array.isArray(l))throw new TypeError("A tensor's dims must be a number array");s=l,this.cpuData=o,this.dataLocation="cpu"}const a=kO(s);if(this.cpuData&&a!==this.cpuData.length&&!((i==="uint4"||i==="int4")&&Math.ceil(a/2)===this.cpuData.length))throw new Error(`Tensor's size(${a}) does not match data length(${this.cpuData.length}).`);this.type=i,this.dims=s,this.size=a}static async fromImage(t,r){return MO(t,r)}static fromTexture(t,r){return TO(t,r)}static fromGpuBuffer(t,r){return EO(t,r)}static fromMLTensor(t,r){return PO(t,r)}static fromPinnedBuffer(t,r,n){return CO(t,r,n)}toDataURL(t){return xO(this,t)}toImageData(t){return $O(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return IO(this,t)}};const AO=Zn,OO=Object.freeze({auto:null,gpu:null,cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:{name:"webnn",deviceType:"cpu"},"webnn-npu":{name:"webnn",deviceType:"npu"},"webnn-gpu":{name:"webnn",deviceType:"gpu"},"webnn-cpu":{name:"webnn",deviceType:"cpu"}}),fa=[];let Dv,ma;const zv=Symbol.for("onnxruntime");zv in globalThis?ma=globalThis[zv]:(ma=hO,ha.IS_WEBNN_AVAILABLE&&fa.push("webnn-npu","webnn-gpu","webnn-cpu","webnn"),ha.IS_WEBGPU_AVAILABLE&&fa.push("webgpu"),fa.push("wasm"),Dv=["wasm"]);const DO=ma.InferenceSession;function zO(e=null){if(!e)return Dv;switch(e){case"auto":return fa;case"gpu":return fa.filter(t=>["webgpu","cuda","dml","webnn-gpu"].includes(t))}if(fa.includes(e))return[OO[e]??e];throw new Error(`Unsupported device: "${e}". Should be one of: ${fa.join(", ")}.`)}let jc=null;async function Uc(e,t,r){jc&&await jc;const n=DO.create(e,t);jc??(jc=n);const i=await n;return i.config=r,i}function Fv(e){return e instanceof ma.Tensor}const hs=ma==null?void 0:ma.env;hs!=null&&hs.wasm&&(!(typeof ServiceWorkerGlobalScope<"u"&&self instanceof ServiceWorkerGlobalScope)&&!hs.wasm.wasmPaths&&(hs.wasm.wasmPaths=`https://cdn.jsdelivr.net/npm/@huggingface/transformers@${Fs.version}/dist/`),hs.wasm.proxy=!1),hs!=null&&hs.webgpu&&(hs.webgpu.powerPreference="high-performance"),Fs.backends.onnx=hs,ha.IS_BROWSER_ENV||ha.IS_WEBWORKER_ENV;function FO(e,t,r){const n=new Array(r.length),i=new Array(r.length);for(let o=r.length-1,l=1;o>=0;--o)i[o]=l,n[o]=t[r[o]],l*=n[o];const s=r.map((o,l)=>i[r.indexOf(l)]),a=new e.constructor(e.length);for(let o=0;o<e.length;++o){let l=0;for(let u=t.length-1,d=o;u>=0;--u)l+=d%t[u]*s[u],d=Math.floor(d/t[u]);a[l]=e[o]}return[a,n]}function Bv(e){if(e.length===0)throw Error("Array must not be empty");let t=e[0],r=0;for(let n=1;n<e.length;++n)e[n]<t&&(t=e[n],r=n);return[t,r]}function Lv(e){if(e.length===0)throw Error("Array must not be empty");let t=e[0],r=0;for(let n=1;n<e.length;++n)e[n]>t&&(t=e[n],r=n);return[t,r]}const Wc=new FinalizationRegistry(e=>{try{e.dispose()}catch{}}),Rv=Object.freeze({float32:Float32Array,float16:typeof Float16Array<"u"?Float16Array:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array,uint4:Uint8Array,int4:Int8Array});let Bs=class Jr{constructor(...t){ie(this,"ort");ie(this,"register");if(Fv(t[0]))this.ort=t[0],this.register=t[1]??!0;else{const[r,n,i,s=!0]=t;this.ort=new AO(r,n,i),this.register=s}this.register&&Wc.register(this,this.ort,this)}get dims(){return this.ort.dims}set dims(t){this.ort.dims=t}get type(){return this.ort.type}get data(){return this.ort.data}get size(){return this.ort.size}get location(){return this.ort.location}dispose(){this.ort&&(this.ort.dispose(),Wc.unregister(this),this.ort=void 0)}unregister(){return this.register&&(Wc.unregister(this),this.register=!1),this}__serialize__(){return{type:this.type,data:this.data,dims:this.dims}}static __deserialize__(t){return new Jr(t.type,t.data,t.dims)}*[Symbol.iterator](){const[t,...r]=this.dims;if(r.length>0){const n=r.reduce((i,s)=>i*s);for(let i=0;i<t;++i)yield this._subarray(i,n,r)}else yield*this.data}at(t){return this._getitem(t)}_getitem(t){const[r,...n]=this.dims;if(t=ki(t,r),n.length>0){const i=n.reduce((s,a)=>s*a);return this._subarray(t,i,n)}else return new Jr(this.type,[this.data[t]],n)}indexOf(t){const r=this.data;for(let n=0;n<r.length;++n)if(r[n]==t)return n;return-1}_subarray(t,r,n){const i=t*r,s=(t+1)*r,a="subarray"in this.data?this.data.subarray(i,s):this.data.slice(i,s);return new Jr(this.type,a,n)}item(){const t=this.data;if(t.length!==1)throw new Error(`a Tensor with ${t.length} elements cannot be converted to Scalar`);return t[0]}tolist(){return BO(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const t=this.data;for(let r=0;r<t.length;++r)t[r]=1/(1+Math.exp(-t[r]));return this}map(t){return this.clone().map_(t)}map_(t){const r=this.data;for(let n=0;n<r.length;++n)r[n]=t(r[n],n,r);return this}abs(){return this.map(Math.abs)}mul(t){return this.clone().mul_(t)}mul_(t){const r=this.data;for(let n=0;n<r.length;++n)r[n]*=t;return this}div(t){return this.clone().div_(t)}div_(t){const r=this.data;for(let n=0;n<r.length;++n)r[n]/=t;return this}add(t){return this.clone().add_(t)}add_(t){const r=this.data;for(let n=0;n<r.length;++n)r[n]+=t;return this}sub(t){return this.clone().sub_(t)}sub_(t){const r=this.data;for(let n=0;n<r.length;++n)r[n]-=t;return this}clone(){return new Jr(this.type,this.data.slice(),this.dims.slice())}slice(...t){const r=[],n=[];for(let d=0;d<this.dims.length;++d){let c=t[d];if(c==null)n.push([0,this.dims[d]]),r.push(this.dims[d]);else if(typeof c=="number")c=ki(c,this.dims[d],d),n.push([c,c+1]);else if(Array.isArray(c)&&c.length===2){let[p,m]=c;if(p=p===null?0:ki(p,this.dims[d],d,!1),m=m===null?this.dims[d]:ki(m,this.dims[d],d,!1),p>m)throw new Error(`Invalid slice: ${c}`);const f=[Math.max(p,0),Math.min(m,this.dims[d])];n.push(f),r.push(f[1]-f[0])}else throw new Error(`Invalid slice: ${c}`)}const i=n.map(([d,c])=>c-d),s=i.reduce((d,c)=>d*c),a=this.data,o=new a.constructor(s),l=this.stride();let u=!0;for(let d=1;d<i.length;++d)if(n[d][0]!==0||n[d][1]!==this.dims[d]){u=!1;break}if(u){const d=n[0][0]*l[0],c=n[0][1]*l[0];if(ArrayBuffer.isView(a))o.set(a.subarray(d,c));else if(Array.isArray(a)){const p=a.slice(d,c);for(let m=0;m<p.length;++m)o[m]=p[m]}else throw new Error("Unsupported data type for slicing")}else for(let d=0;d<s;++d){let c=0;for(let p=i.length-1,m=d;p>=0;--p){const f=i[p];c+=(m%f+n[p][0])*l[p],m=Math.floor(m/f)}o[d]=a[c]}return new Jr(this.type,o,r)}permute(...t){return LO(this,t)}transpose(...t){return this.permute(...t)}sum(t=null,r=!1){return this.norm(1,t,r)}norm(t="fro",r=null,n=!1){if(t==="fro")t=2;else if(typeof t=="string")throw Error(`Unsupported norm: ${t}`);const i=this.data,s=(u,d)=>u+d**t;if(r===null){const u=i.reduce(s,0)**(1/t);return new Jr(this.type,[u],[])}const[a,o,l]=Ql(s,this,r,n);if(t!==1)for(let u=0;u<o.length;++u)o[u]=o[u]**(1/t);return new Jr(a,o,l)}normalize_(t=2,r=1){r=ki(r,this.dims.length);const n=this.norm(t,r,!0),i=this.data,s=n.data;for(let a=0;a<i.length;++a){let o=0;for(let l=this.dims.length-1,u=a,d=1;l>=0;--l){const c=this.dims[l];if(l!==r){const p=u%c;o+=p*d,d*=this.dims[l]}u=Math.floor(u/c)}i[a]/=s[o]}return this}normalize(t=2,r=1){return this.clone().normalize_(t,r)}stride(){return jO(this.dims)}squeeze(t=null){return new Jr(this.type,this.data,Nv(this.dims,t))}squeeze_(t=null){return this.dims=Nv(this.dims,t),this}unsqueeze(t=null){return new Jr(this.type,this.data,jv(this.dims,t))}unsqueeze_(t=null){return this.dims=jv(this.dims,t),this}flatten_(t=0,r=-1){r=(r+this.dims.length)%this.dims.length;const n=this.dims.slice(0,t),i=this.dims.slice(t,r+1),s=this.dims.slice(r+1);return this.dims=[...n,i.reduce((a,o)=>a*o,1),...s],this}flatten(t=0,r=-1){return this.clone().flatten_(t,r)}view(...t){let r=-1;for(let i=0;i<t.length;++i)if(t[i]===-1){if(r!==-1)throw new Error("Only one dimension can be inferred");r=i}const n=this.data;if(r!==-1){const i=t.reduce((s,a,o)=>o!==r?s*a:s,1);t[r]=n.length/i}return new Jr(this.type,n,t)}reshape(...t){return this.view(...t).clone()}neg_(){const t=this.data;for(let r=0;r<t.length;++r)t[r]=-t[r];return this}neg(){return this.clone().neg_()}gt(t){const r=new Uint8Array(this.data.length),n=this.data;for(let i=0;i<n.length;++i)r[i]=n[i]>t?1:0;return new Jr("bool",r,this.dims)}lt(t){const r=new Uint8Array(this.data.length),n=this.data;for(let i=0;i<n.length;++i)r[i]=n[i]<t?1:0;return new Jr("bool",r,this.dims)}clamp_(t,r){const n=this.data;for(let i=0;i<n.length;++i)n[i]=Math.min(Math.max(n[i],t),r);return this}clamp(t,r){return this.clone().clamp_(t,r)}round_(){const t=this.data;for(let r=0;r<t.length;++r)t[r]=Math.round(t[r]);return this}round(){return this.clone().round_()}mean(t=null,r=!1){return RO(this,t,r)}pow(t){return NO(this,t)}min(t=null,r=!1){if(t===null){const a=Bv(this.data)[0];return new Jr(this.type,[a],[])}const[n,i,s]=Ql((a,o)=>Math.min(a,o),this,t,r,1/0);return new Jr(n,i,s)}max(t=null,r=!1){if(t===null){const a=Lv(this.data)[0];return new Jr(this.type,[a],[])}const[n,i,s]=Ql((a,o)=>Math.max(a,o),this,t,r,-1/0);return new Jr(n,i,s)}argmin(t=null,r=!1){if(t!==null)throw new Error("`dim !== null` not yet implemented.");const n=Bv(this.data)[1];return new Jr("int64",[BigInt(n)],[])}argmax(t=null,r=!1){if(t!==null)throw new Error("`dim !== null` not yet implemented.");const n=Lv(this.data)[1];return new Jr("int64",[BigInt(n)],[])}quantile(t,r=null,n=!1){if(r!==null)throw new Error("`dim !== null` not yet implemented.");if(t<0||t>1)throw new Error("Quantile must be between 0 and 1.");const i=Array.from(this.data);i.sort((d,c)=>d-c);const s=(i.length-1)*t;if(Number.isInteger(s))return new Jr(this.type,[i[s]],[]);const a=Math.floor(s),o=Math.ceil(s),l=s-a,u=i[a]*(1-l)+i[o]*l;return new Jr(this.type,[u],[])}to(t){return ni(this,t)}};function ni(e,t){if(e instanceof Bs){if(e.type===t)return e;if(!Object.prototype.hasOwnProperty.call(Rv,t))throw new Error(`Unsupported type: ${t}`);let r;const n=["int64","uint64"].includes(e.type),i=["int64","uint64"].includes(t);return n&&!i?r=Number:!n&&i&&(r=BigInt),new Bs(t,Rv[t].from(e.data,r),e.dims.slice())}else if(Fv(e))return new Bs(e,!1).to(t).unregister().ort;throw new Error(`Unsupported tensor type: ${typeof e}`)}function BO(e,t){const r=e.length,n=t.reduce((s,a)=>s*a);if(r!==n)throw Error(`cannot reshape array of size ${r} into shape (${t})`);let i=e;for(let s=t.length-1;s>=0;s--)i=i.reduce((a,o)=>{const l=a[a.length-1];return l.length<t[s]?l.push(o):a.push([o]),a},[[]]);return i[0]}function LO(e,t){const[r,n]=FO(e.data,e.dims,t);return new Bs(e.type,r,n)}function Nv(e,t){return e=e.slice(),t===null?e=e.filter(r=>r!==1):typeof t=="number"?e[t]===1&&e.splice(t,1):Array.isArray(t)&&(e=e.filter((r,n)=>r!==1||!t.includes(n))),e}function jv(e,t){return t=ki(t,e.length+1),e=e.slice(),e.splice(t,0,1),e}function ki(e,t,r=null,n=!0){if(e<-t||e>=t){if(n)throw new Error(`IndexError: index ${e} is out of bounds for dimension${r===null?"":" "+r} with size ${t}`);return e<-t?0:t}return e<0&&(e=(e%t+t)%t),e}function Ql(e,t,r=null,n=!1,i=null){const s=t.data,a=t.dims;r=ki(r,a.length);const o=a.slice();o[r]=1;const l=new s.constructor(s.length/a[r]);i!==null&&l.fill(i);for(let u=0;u<s.length;++u){let d=0;for(let c=a.length-1,p=u,m=1;c>=0;--c){const f=a[c];if(c!==r){const w=p%f;d+=w*m,m*=o[c]}p=Math.floor(p/f)}l[d]=e(l[d],s[u],u,d)}return n||o.splice(r,1),[t.type,l,o]}function RO(e,t=null,r=!1){const n=e.dims,i=e.data;if(t===null){const l=i.reduce((u,d)=>u+d,0);return new Bs(e.type,[l/i.length],[])}t=ki(t,n.length);const[s,a,o]=Ql((l,u)=>l+u,e,t,r);if(n[t]!==1)for(let l=0;l<a.length;++l)a[l]/=n[t];return new Bs(s,a,o)}function NO(e,t){return e.map(r=>Math.pow(r,t))}function jO(e){const t=new Array(e.length);for(let r=e.length-1,n=1;r>=0;--r)t[r]=n,n*=e[r];return t}function UO(e){return e.pow(2).mean().pow(.5).item()}function WO(e,t=.999){const r=e.abs().quantile(t).item(),n=r>0?32767/r:1;return e.mul(n).round().clamp(-32768,32767).to("int16")}const VO=function(){let e;return async function(){if(e===void 0)if(!ha.IS_WEBGPU_AVAILABLE)e=!1;else try{e=(await navigator.gpu.requestAdapter()).features.has("shader-f16")}catch{e=!1}return e}}();function Jo(e,t){e&&e(t)}var si={};const GO={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};class Yo{constructor(t){if(this.filePath=t,this.headers=new Headers,this.exists=Yn.existsSync(t),this.exists){this.status=200,this.statusText="OK";const r=Yn.statSync(t);this.headers.set("content-length",r.size.toString()),this.updateContentType();const n=Yn.createReadStream(t);this.body=new ReadableStream({start(i){n.on("data",s=>i.enqueue(s)),n.on("end",()=>i.close()),n.on("error",s=>i.error(s))},cancel(){n.destroy()}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const t=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",GO[t]??"application/octet-stream")}clone(){const t=new Yo(this.filePath);return t.exists=this.exists,t.status=this.status,t.statusText=this.statusText,t.headers=new Headers(this.headers),t}async arrayBuffer(){return(await Yn.promises.readFile(this.filePath)).buffer}async blob(){const t=await Yn.promises.readFile(this.filePath);return new Blob([t],{type:this.headers.get("content-type")})}async text(){return await Yn.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function Uv(e,t=null,r=null){let n;try{n=new URL(e)}catch{return!1}return!(t&&!t.includes(n.protocol)||r&&!r.includes(n.hostname))}const qO=/^(\b[\w\-.]+\b\/)?\b[\w\-.]{1,96}\b$/;function HO(e){return!(!qO.test(e)||e.includes("..")||e.includes("--")||e.endsWith(".git")||e.endsWith(".ipynb"))}async function Vc(e){var t;if(typeof process<"u"&&((t=process==null?void 0:process.release)==null?void 0:t.name)==="node"){const r=!!(si!=null&&si.TESTING_REMOTELY),n=Fs.version,i=new Headers;if(i.set("User-Agent",`transformers.js/${n}; is_ci/${r};`),Uv(e,["http:","https:"],["huggingface.co","hf.co"])){const a=(si==null?void 0:si.HF_TOKEN)??(si==null?void 0:si.HF_ACCESS_TOKEN);a&&i.set("Authorization",`Bearer ${a}`)}return fetch(e,{headers:i})}else return fetch(e)}const KO={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};function QO(e,t,r){if(!r)return null;const n=KO[e]??`Error (${e}) occurred while trying to load file`;throw Error(`${n}: "${t}".`)}class XO{constructor(t){this.path=t}async match(t){const r=Yn.join(this.path,t),n=new Yo(r);if(n.exists)return n}async put(t,r,n=void 0){const i=Yn.join(this.path,t);try{const s=r.headers.get("Content-Length"),a=parseInt(s??"0");let o=0;await Yn.promises.mkdir(Yn.dirname(i),{recursive:!0});const l=Yn.createWriteStream(i),u=r.body.getReader();for(;;){const{done:d,value:c}=await u.read();if(d)break;await new Promise((m,f)=>{l.write(c,w=>{if(w){f(w);return}m()})}),o+=c.length;const p=a?o/a*100:0;n==null||n({progress:p,loaded:o,total:a})}l.close()}catch(s){try{await Yn.promises.unlink(i)}catch{}throw s}}}async function JO(e,...t){for(const r of t)try{const n=await e.match(r);if(n)return n}catch{continue}}async function Wv(e,t,r=!0,n={},i=!1){if(!Fs.allowLocalModels&&n.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");Jo(n.progress_callback,{status:"initiate",name:e,file:t});let s;if(!s&&Fs.useCustomCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!s&&Fs.useBrowserCache){if(typeof caches>"u")throw Error("Browser cache is not available in this environment.");try{s=await caches.open("transformers-cache")}catch(g){console.warn("An error occurred while opening the browser cache:",g)}}const a=n.revision??"main",o=Xl(e,t),l=HO(e),u=l?Xl(Fs.localModelPath,o):o,d=Xl(Fs.remoteHost,Fs.remotePathTemplate.replaceAll("{model}",e).replaceAll("{revision}",encodeURIComponent(a)),t);let c;const p=s instanceof XO?a==="main"?o:Xl(e,a,t):d;let m=!1,f;s&&(f=await JO(s,u,p));const w=f!==void 0;if(f===void 0){if(Fs.allowLocalModels)if(Uv(o,["http:","https:"])){if(n.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${o}.`)}else try{f=await Vc(u),c=u}catch(P){console.warn(`Unable to load from local path "${u}": "${P}"`)}if(f===void 0||f.status===404){if(n.local_files_only){if(r)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${u}".`);return null}if(l?f=await Vc(d):f=await Vc(u),f.status!==200)return QO(f.status,d,r);c=p}m=s&&typeof Response<"u"&&f instanceof Response&&f.status===200}Jo(n.progress_callback,{status:"download",name:e,file:t});let C;if(!(ha.IS_NODE_ENV&&i)){let g;n.progress_callback?w&&typeof navigator<"u"&&/firefox/i.test(navigator.userAgent)?(g=new Uint8Array(await f.arrayBuffer()),Jo(n.progress_callback,{status:"progress",name:e,file:t,progress:100,loaded:g.length,total:g.length})):g=await ZO(f,P=>{Jo(n.progress_callback,{status:"progress",name:e,file:t,...P})}):g=new Uint8Array(await f.arrayBuffer()),C=g}if(m&&c&&await s.match(c)===void 0&&(C?await s.put(c,new Response(C,{headers:f.headers})).catch(g=>{console.warn(`Unable to add response to browser cache: ${g}.`)}):await s.put(c,f,n.progress_callback)),Jo(n.progress_callback,{status:"done",name:e,file:t}),C){if(!ha.IS_NODE_ENV&&i)throw new Error("Cannot return path in a browser environment.");return C}if(f instanceof Yo)return f.filePath;const y=await(s==null?void 0:s.match(c));if(y instanceof Yo)return y.filePath;if(y instanceof Response)return new Uint8Array(await y.arrayBuffer());if(typeof y=="string")return y;throw new Error("Unable to get model file path or buffer.")}async function YO(e,t,r=!0,n={}){const i=await Wv(e,t,r,n,!1);return i===null?null:new TextDecoder("utf-8").decode(i)}async function ZO(e,t){const r=e.headers.get("Content-Length");r===null&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let n=parseInt(r??"0"),i=new Uint8Array(n),s=0;const a=e.body.getReader();async function o(){const{done:l,value:u}=await a.read();if(l)return;const d=s+u.length;if(d>n){n=d;const p=new Uint8Array(n);p.set(i),i=p}i.set(u,s),s=d;const c=s/n*100;return t({progress:c,loaded:s,total:n}),o()}return await o(),i}function Xl(...e){return e=e.map((t,r)=>(r&&(t=t.replace(new RegExp("^/"),"")),r!==e.length-1&&(t=t.replace(new RegExp("/$"),"")),t)),e.join("/")}qa.get("Utils");function eD(e){const t={};return r=>{const{status:n,file:i,loaded:s,total:a}=r;if(!(n==="progress"||n==="done"))return;t[i]||(t[i]={loaded:0,total:0}),n==="progress"?(t[i].loaded=s,t[i].total=a):n==="done"&&(t[i].loaded=t[i].total);const o=Object.values(t).reduce((u,d)=>u+d.loaded,0),l=Object.values(t).reduce((u,d)=>u+d.total,0);e({numberOfFiles:Object.keys(t).length,currentMB:o/(1024*1024),totalMB:l/(1024*1024)})}}function Vv({emit:e,messagePrefix:t="Downloading model files"}){return eD(({numberOfFiles:r,currentMB:n,totalMB:i})=>{e("download",{value:i?n/i*100:0,message:`${t}... (${n.toFixed(1)} MB of ${i.toFixed(1)} MB)`})})}const Za=qa.get("F5TTS");class tD{constructor({repoName:t="",rootPath:r="",useFP16:n=!0,emit:i=Za.trace}){this.repoName=t,this.rootPath=r,this.useFP16=n,this.emit=i,this.sessions={encoder:null,transformer:null,decoder:null},this.hopLength=256,this.targetSampleRate=24e3,this.targetRMS=.1,this.modelPaths={preprocess:`${this.rootPath}onnx/encoder_fp32.onnx`,transformer:`${this.rootPath}onnx/transformer_fp32.onnx`,transformer_fp16:`${this.rootPath}onnx/transformer_fp16.onnx`,decode:`${this.rootPath}onnx/decoder_fp32.onnx`,vocab:`${this.rootPath}vocab.txt`}}async initialize(){this.emit("initialize",{value:0,message:"Loading TTS model..."});const t=zO("auto");let r=this.useFP16?this.modelPaths.transformer_fp16:this.modelPaths.transformer;const n=t.findIndex(c=>typeof c=="string"&&c==="webgpu"||typeof c=="object"&&c.name==="webgpu");if(n!==-1)try{const c=await navigator.gpu.requestAdapter({powerPreference:"high-performance",forceFallbackAdapter:!1});if(c){const p=await c.requestDevice();t[n]={name:"webgpu",device:p,powerPreference:"high-performance"},this.useFP16&&!await VO()&&(Za.warn("WebGPU fp16 is not supported on this device. Falling back to fp32 model"),this.useFP16=!1,r=this.modelPaths.transformer)}}catch{Za.debug("High-performance GPU setup failed, using default WebGPU")}Za.debug("Detected providers:",t);const i={executionProviders:t,graphOptimizationLevel:"all",enableMemPattern:!0,enableCpuMemArena:!0,extra:{session:{intra_op_num_threads:8,inter_op_num_threads:8,allow_profiling:!1}}},s={},a=Vv({emit:this.emit,messagePrefix:"TTS: Downloading model files"}),[o,l,u]=await Promise.all([this.modelPaths.preprocess,r,this.modelPaths.decode].map(c=>Wv(this.repoName,c,!0,{progress_callback:a})));this.sessions.encoder=await Uc(o,i,s),this.sessions.transformer=await Uc(l,i,s),this.sessions.decoder=await Uc(u,i,s);const d=await YO(this.repoName,this.modelPaths.vocab);this.vocabMap={},d.split(`
`).forEach((c,p)=>{c.trim()&&(this.vocabMap[c.trim()]=p)}),Za.debug("Models loaded successfully"),this.emit("initialize",{value:100,message:"TTS model loaded successfully"})}tokenizeText(t){return t.split("").map(i=>this.vocabMap[i]||0)}async inference({refAudio:t,refText:r,genText:n,speed:i,nfeSteps:s}){if(Object.values(this.sessions).some(K=>!K))throw new Error("Models not loaded");const{encoder:a,transformer:o,decoder:l}=this.sessions,u=UO(t);u<this.targetRMS&&(t=t.div(u*this.targetRMS));const d=WO(t).reshape(1,1,-1),c=r+" "+n,p=this.tokenizeText(c),m=new Bs("int32",Int32Array.from(p),[1,p.length]),f=Math.trunc(t.size/this.hopLength),w=f+Math.trunc(f/(r.length+1)*n.length/i),C=new Bs("int64",new BigInt64Array([BigInt(w)]),[1]);Za.debug("Ref audio length (frames):",f,"Duration (frames):",w,"Speed:",i);const y={[a.inputNames[0]]:d.ort,[a.inputNames[1]]:m.ort,[a.inputNames[2]]:C.ort},g=await a.run(y);let P=g[a.outputNames[0]],b=g[a.outputNames[1]],x=g[a.outputNames[2]],T=g[a.outputNames[3]],E=g[a.outputNames[4]],S=g[a.outputNames[5]],O=g[a.outputNames[6]];const B=g[a.outputNames[7]];let V=new Xn("int32",new Int32Array([0]),[1]);this.useFP16&&(P=ni(P,"float16"),b=ni(b,"float16"),x=ni(x,"float16"),T=ni(T,"float16"),E=ni(E,"float16"),S=ni(S,"float16"),O=ni(O,"float16"));for(let K=0;K<s-1;K++){const Y={[o.inputNames[0]]:P,[o.inputNames[1]]:b,[o.inputNames[2]]:x,[o.inputNames[3]]:T,[o.inputNames[4]]:E,[o.inputNames[5]]:S,[o.inputNames[6]]:O,[o.inputNames[7]]:V},Z=await o.run(Y);P=Z[o.outputNames[0]],V=Z[o.outputNames[1]],this.emit("inference",{value:(K+1)/s*100,message:`Generating: NFE Step ${K+1}/${s}`})}this.useFP16&&(P=ni(P,"float32"));const W={[l.inputNames[0]]:P,[l.inputNames[1]]:B},te=(await l.run(W))[l.outputNames[0]];let q=new Bs(te).to("float32").div(32767).reshape(-1);return u<this.targetRMS&&(q=q.mul(u/this.targetRMS)),q}async dispose(){for(const[t,r]of Object.entries(this.sessions))r!=null&&r.dispose&&await r.dispose(),this.sessions[t]=null}}const Jl=new Map,_a=[],rD=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){const n=Jl.get(e);if(n===void 0)Jl.set(e,{backend:t,priority:r});else{if(n.priority>r)return;if(n.priority===r&&n.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){const i=_a.indexOf(e);i!==-1&&_a.splice(i,1);for(let s=0;s<_a.length;s++)if(Jl.get(_a[s]).priority<=r){_a.splice(s,0,e);return}_a.push(e)}return}throw new TypeError("not a valid backend")},nD=async e=>{const t=Jl.get(e);if(!t)return"backend not found.";if(t.initialized)return t.backend;if(t.aborted)return t.error;{const r=!!t.initPromise;try{return r||(t.initPromise=t.backend.init(e)),await t.initPromise,t.initialized=!0,t.backend}catch(n){return r||(t.error=`${n}`,t.aborted=!0),t.error}finally{delete t.initPromise}}},sD=async e=>{const t=e.executionProviders||[],r=t.map(l=>typeof l=="string"?l:l.name),n=r.length===0?_a:r;let i;const s=[],a=new Set;for(const l of n){const u=await nD(l);typeof u=="string"?s.push({name:l,err:u}):(i||(i=u),i===u&&a.add(l))}if(!i)throw new Error(`no available backend found. ERR: ${s.map(l=>`[${l.name}] ${l.err}`).join(", ")}`);for(const{name:l,err:u}of s)r.includes(l)&&console.warn(`removing requested execution provider "${l}" from session options because it is not available: ${u}`);const o=t.filter(l=>a.has(typeof l=="string"?l:l.name));return[i,new Proxy(e,{get:(l,u)=>u==="executionProviders"?o:Reflect.get(l,u)})]},iD="1.22.0-dev.20250409-89f8206ba4";let Gv="warning";const fs={wasm:{},webgl:{},webgpu:{},versions:{common:iD},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Gv=e}},get logLevel(){return Gv}};Object.defineProperty(fs,"logLevel",{enumerable:!0});const aD=fs,oD=(e,t)=>{const r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=e.dims[3],r.height=e.dims[2];const n=r.getContext("2d");if(n!=null){let i,s;(t==null?void 0:t.tensorLayout)!==void 0&&t.tensorLayout==="NHWC"?(i=e.dims[2],s=e.dims[3]):(i=e.dims[3],s=e.dims[2]);const a=(t==null?void 0:t.format)!==void 0?t.format:"RGB",o=t==null?void 0:t.norm;let l,u;o===void 0||o.mean===void 0?l=[255,255,255,255]:typeof o.mean=="number"?l=[o.mean,o.mean,o.mean,o.mean]:(l=[o.mean[0],o.mean[1],o.mean[2],0],o.mean[3]!==void 0&&(l[3]=o.mean[3])),o===void 0||o.bias===void 0?u=[0,0,0,0]:typeof o.bias=="number"?u=[o.bias,o.bias,o.bias,o.bias]:(u=[o.bias[0],o.bias[1],o.bias[2],0],o.bias[3]!==void 0&&(u[3]=o.bias[3]));const d=s*i;let c=0,p=d,m=d*2,f=-1;a==="RGBA"?(c=0,p=d,m=d*2,f=d*3):a==="RGB"?(c=0,p=d,m=d*2):a==="RBG"&&(c=0,m=d,p=d*2);for(let w=0;w<s;w++)for(let C=0;C<i;C++){const y=(e.data[c++]-u[0])*l[0],g=(e.data[p++]-u[1])*l[1],P=(e.data[m++]-u[2])*l[2],b=f===-1?255:(e.data[f++]-u[3])*l[3];n.fillStyle="rgba("+y+","+g+","+P+","+b+")",n.fillRect(C,w,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},lD=(e,t)=>{const r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let n;if(r!=null){let i,s,a;(t==null?void 0:t.tensorLayout)!==void 0&&t.tensorLayout==="NHWC"?(i=e.dims[2],s=e.dims[1],a=e.dims[3]):(i=e.dims[3],s=e.dims[2],a=e.dims[1]);const o=t!==void 0&&t.format!==void 0?t.format:"RGB",l=t==null?void 0:t.norm;let u,d;l===void 0||l.mean===void 0?u=[255,255,255,255]:typeof l.mean=="number"?u=[l.mean,l.mean,l.mean,l.mean]:(u=[l.mean[0],l.mean[1],l.mean[2],255],l.mean[3]!==void 0&&(u[3]=l.mean[3])),l===void 0||l.bias===void 0?d=[0,0,0,0]:typeof l.bias=="number"?d=[l.bias,l.bias,l.bias,l.bias]:(d=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(d[3]=l.bias[3]));const c=s*i;if(t!==void 0&&(t.format!==void 0&&a===4&&t.format!=="RGBA"||a===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const p=4;let m=0,f=1,w=2,C=3,y=0,g=c,P=c*2,b=-1;o==="RGBA"?(y=0,g=c,P=c*2,b=c*3):o==="RGB"?(y=0,g=c,P=c*2):o==="RBG"&&(y=0,P=c,g=c*2),n=r.createImageData(i,s);for(let x=0;x<s*i;m+=p,f+=p,w+=p,C+=p,x++)n.data[m]=(e.data[y++]-d[0])*u[0],n.data[f]=(e.data[g++]-d[1])*u[1],n.data[w]=(e.data[P++]-d[2])*u[2],n.data[C]=b===-1?255:(e.data[b++]-d[3])*u[3]}else throw new Error("Can not access image data");return n},Gc=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:r,width:n}=t,i=t.norm??{mean:255,bias:0};let s,a;typeof i.mean=="number"?s=[i.mean,i.mean,i.mean,i.mean]:s=[i.mean[0],i.mean[1],i.mean[2],i.mean[3]??255],typeof i.bias=="number"?a=[i.bias,i.bias,i.bias,i.bias]:a=[i.bias[0],i.bias[1],i.bias[2],i.bias[3]??0];const o=t.format!==void 0?t.format:"RGBA",l=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",u=r*n,d=l==="RGBA"?new Float32Array(u*4):new Float32Array(u*3);let c=4,p=0,m=1,f=2,w=3,C=0,y=u,g=u*2,P=-1;o==="RGB"&&(c=3,p=0,m=1,f=2,w=-1),l==="RGBA"?P=u*3:l==="RBG"?(C=0,g=u,y=u*2):l==="BGR"&&(g=0,y=u,C=u*2);for(let x=0;x<u;x++,p+=c,f+=c,m+=c,w+=c)d[C++]=(e[p]+a[0])/s[0],d[y++]=(e[m]+a[1])/s[1],d[g++]=(e[f]+a[2])/s[2],P!==-1&&w!==-1&&(d[P++]=(e[w]+a[3])/s[3]);return l==="RGBA"?new es("float32",d,[1,4,r,n]):new es("float32",d,[1,3,r,n])},uD=async(e,t)=>{const r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,n=typeof ImageData<"u"&&e instanceof ImageData,i=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,s=typeof e=="string";let a,o=t??{};const l=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},u=d=>typeof HTMLCanvasElement<"u"&&d instanceof HTMLCanvasElement||d instanceof OffscreenCanvas?d.getContext("2d"):null;if(r){const d=l();d.width=e.width,d.height=e.height;const c=u(d);if(c!=null){let p=e.height,m=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(p=t.resizedHeight,m=t.resizedWidth),t!==void 0){if(o=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");o.tensorFormat="RGBA",o.height=p,o.width=m}else o.tensorFormat="RGBA",o.height=p,o.width=m;c.drawImage(e,0,0),a=c.getImageData(0,0,m,p).data}else throw new Error("Can not access image data")}else if(n){let d,c;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(d=t.resizedHeight,c=t.resizedWidth):(d=e.height,c=e.width),t!==void 0&&(o=t),o.format="RGBA",o.height=d,o.width=c,t!==void 0){const p=l();p.width=c,p.height=d;const m=u(p);if(m!=null)m.putImageData(e,0,0),a=m.getImageData(0,0,c,d).data;else throw new Error("Can not access image data")}else a=e.data}else if(i){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");const d=l();d.width=e.width,d.height=e.height;const c=u(d);if(c!=null){const p=e.height,m=e.width;return c.drawImage(e,0,0,m,p),a=c.getImageData(0,0,m,p).data,o.height=p,o.width=m,Gc(a,o)}else throw new Error("Can not access image data")}else{if(s)return new Promise((d,c)=>{const p=l(),m=u(p);if(!e||!m)return c();const f=new Image;f.crossOrigin="Anonymous",f.src=e,f.onload=()=>{p.width=f.width,p.height=f.height,m.drawImage(f,0,0,p.width,p.height);const w=m.getImageData(0,0,p.width,p.height);o.height=p.height,o.width=p.width,d(Gc(w.data,o))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(a!==void 0)return Gc(a,o);throw new Error("Input data provided is not supported - aborted tensor creation")},dD=(e,t)=>{const{width:r,height:n,download:i,dispose:s}=t,a=[1,n,r,4];return new es({location:"texture",type:"float32",texture:e,dims:a,download:i,dispose:s})},cD=(e,t)=>{const{dataType:r,dims:n,download:i,dispose:s}=t;return new es({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:n,download:i,dispose:s})},pD=(e,t)=>{const{dataType:r,dims:n,download:i,dispose:s}=t;return new es({location:"ml-tensor",type:r??"float32",mlTensor:e,dims:n,download:i,dispose:s})},hD=(e,t,r)=>new es({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]}),eo=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),Yl=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let qv=!1;const fD=()=>{if(!qv){qv=!0;const e=typeof BigInt64Array<"u"&&BigInt64Array.from,t=typeof BigUint64Array<"u"&&BigUint64Array.from,r=globalThis.Float16Array,n=typeof r<"u"&&r.from;e&&(eo.set("int64",BigInt64Array),Yl.set(BigInt64Array,"int64")),t&&(eo.set("uint64",BigUint64Array),Yl.set(BigUint64Array,"uint64")),n?(eo.set("float16",r),Yl.set(r,"float16")):eo.set("float16",Uint16Array)}},mD=e=>{let t=1;for(let r=0;r<e.length;r++){const n=e[r];if(typeof n!="number"||!Number.isSafeInteger(n))throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);t*=n}return t},_D=(e,t)=>{switch(e.location){case"cpu":return new es(e.type,e.data,t);case"cpu-pinned":return new es({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new es({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new es({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});case"ml-tensor":return new es({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}};let es=class{constructor(t,r,n){fD();let i,s;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,i=t.type,s=t.dims,t.location){case"cpu-pinned":{const o=eo.get(i);if(!o)throw new TypeError(`unsupported type "${i}" to create tensor from pinned buffer`);if(!(t.data instanceof o))throw new TypeError(`buffer should be of type ${o.name}`);this.cpuData=t.data;break}case"texture":{if(i!=="float32")throw new TypeError(`unsupported type "${i}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(i!=="float32"&&i!=="float16"&&i!=="int32"&&i!=="int64"&&i!=="uint32"&&i!=="uint8"&&i!=="bool"&&i!=="uint4"&&i!=="int4")throw new TypeError(`unsupported type "${i}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}case"ml-tensor":{if(i!=="float32"&&i!=="float16"&&i!=="int32"&&i!=="int64"&&i!=="uint32"&&i!=="uint64"&&i!=="int8"&&i!=="uint8"&&i!=="bool"&&i!=="uint4"&&i!=="int4")throw new TypeError(`unsupported type "${i}" to create tensor from MLTensor`);this.mlTensorData=t.mlTensor,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let o,l;if(typeof t=="string")if(i=t,l=n,t==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");o=r}else{const u=eo.get(t);if(u===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if(t==="float16"&&u===Uint16Array||t==="uint4"||t==="int4")throw new TypeError(`Creating a ${t} tensor from number array is not supported. Please use ${u.name} as data.`);t==="uint64"||t==="int64"?o=u.from(r,BigInt):o=u.from(r)}else if(r instanceof u)o=r;else if(r instanceof Uint8ClampedArray)if(t==="uint8")o=Uint8Array.from(r);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else if(t==="float16"&&r instanceof Uint16Array&&u!==Uint16Array)o=new globalThis.Float16Array(r.buffer,r.byteOffset,r.length);else throw new TypeError(`A ${i} tensor's data must be type of ${u}`)}else if(l=r,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const u=typeof t[0];if(u==="string")i="string",o=t;else if(u==="boolean")i="bool",o=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${u}.`)}else if(t instanceof Uint8ClampedArray)i="uint8",o=Uint8Array.from(t);else{const u=Yl.get(t.constructor);if(u===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);i=u,o=t}if(l===void 0)l=[o.length];else if(!Array.isArray(l))throw new TypeError("A tensor's dims must be a number array");s=l,this.cpuData=o,this.dataLocation="cpu"}const a=mD(s);if(this.cpuData&&a!==this.cpuData.length&&!((i==="uint4"||i==="int4")&&Math.ceil(a/2)===this.cpuData.length))throw new Error(`Tensor's size(${a}) does not match data length(${this.cpuData.length}).`);this.type=i,this.dims=s,this.size=a}static async fromImage(t,r){return uD(t,r)}static fromTexture(t,r){return dD(t,r)}static fromGpuBuffer(t,r){return cD(t,r)}static fromMLTensor(t,r){return pD(t,r)}static fromPinnedBuffer(t,r,n){return hD(t,r,n)}toDataURL(t){return oD(this,t)}toImageData(t){return lD(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return _D(this,t)}};const to=es,Hv=(e,t)=>{(typeof fs.trace>"u"?!fs.wasm.trace:!fs.trace)||console.timeStamp(`${e}::ORT::${t}`)},Kv=(e,t)=>{var i;const r=((i=new Error().stack)==null?void 0:i.split(/\r\n|\r|\n/g))||[];let n=!1;for(let s=0;s<r.length;s++){if(n&&!r[s].includes("TRACE_FUNC")){let a=`FUNC_${e}::${r[s].trim().split(" ")[1]}`;t&&(a+=`::${t}`),Hv("CPU",a);return}r[s].includes("TRACE_FUNC")&&(n=!0)}},qc=e=>{(typeof fs.trace>"u"?!fs.wasm.trace:!fs.trace)||Kv("BEGIN",e)},Hc=e=>{(typeof fs.trace>"u"?!fs.wasm.trace:!fs.trace)||Kv("END",e)};var gD=Object.freeze({__proto__:null,InferenceSession:class IA{constructor(t){this.handler=t}async run(t,r,n){qc();const i={};let s={};if(typeof t!="object"||t===null||t instanceof to||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof to)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(const u of r){if(typeof u!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(u)===-1)throw new RangeError(`'fetches' contains invalid output name: ${u}.`);i[u]=null}if(typeof n=="object"&&n!==null)s=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else{let u=!1;const d=Object.getOwnPropertyNames(r);for(const c of this.outputNames)if(d.indexOf(c)!==-1){const p=r[c];(p===null||p instanceof to)&&(u=!0,a=!1,i[c]=p)}if(u){if(typeof n=="object"&&n!==null)s=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else s=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const u of this.inputNames)if(typeof t[u]>"u")throw new Error(`input '${u}' is missing in 'feeds'.`);if(a)for(const u of this.outputNames)i[u]=null;const o=await this.handler.run(t,i,s),l={};for(const u in o)if(Object.hasOwnProperty.call(o,u)){const d=o[u];d instanceof to?l[u]=d:l[u]=new to(d.type,d.data,d.dims)}return Hc(),l}async release(){return this.handler.dispose()}static async create(t,r,n,i){qc();let s,a={};if(typeof t=="string"){if(s=t,typeof r=="object"&&r!==null)a=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(s=t,typeof r=="object"&&r!==null)a=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){const d=t;let c=0,p=t.byteLength;if(typeof r=="object"&&r!==null)a=r;else if(typeof r=="number"){if(c=r,!Number.isSafeInteger(c))throw new RangeError("'byteOffset' must be an integer.");if(c<0||c>=d.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${d.byteLength}).`);if(p=t.byteLength-c,typeof n=="number"){if(p=n,!Number.isSafeInteger(p))throw new RangeError("'byteLength' must be an integer.");if(p<=0||c+p>d.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${d.byteLength-c}].`);if(typeof i=="object"&&i!==null)a=i;else if(typeof i<"u")throw new TypeError("'options' must be an object.")}else if(typeof n<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");s=new Uint8Array(d,c,p)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");const[o,l]=await sD(a),u=await o.createInferenceSessionHandler(s,l);return Hc(),new IA(u)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}get inputMetadata(){return this.handler.inputMetadata}get outputMetadata(){return this.handler.outputMetadata}},TRACE:Hv,TRACE_FUNC_BEGIN:qc,TRACE_FUNC_END:Hc,Tensor:to,env:aD,registerBackend:rD});/*!
 * ONNX Runtime Web v1.22.0-dev.20250409-89f8206ba4
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */var Kc=Object.defineProperty,wD=Object.getOwnPropertyDescriptor,yD=Object.getOwnPropertyNames,bD=Object.prototype.hasOwnProperty,vD=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')}),Qe=(e,t)=>()=>(e&&(t=e(e=0)),t),ro=(e,t)=>{for(var r in t)Kc(e,r,{get:t[r],enumerable:!0})},xD=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of yD(t))!bD.call(e,i)&&i!==r&&Kc(e,i,{get:()=>t[i],enumerable:!(n=wD(t,i))||n.enumerable});return e},Zo=e=>xD(Kc({},"__esModule",{value:!0}),e),el,Ii,ga,Qv,Xv,Jv=Qe(()=>{el=new Map,Ii=[],ga=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let n=el.get(e);if(n===void 0)el.set(e,{backend:t,priority:r});else{if(n.priority>r)return;if(n.priority===r&&n.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let i=Ii.indexOf(e);i!==-1&&Ii.splice(i,1);for(let s=0;s<Ii.length;s++)if(el.get(Ii[s]).priority<=r){Ii.splice(s,0,e);return}Ii.push(e)}return}throw new TypeError("not a valid backend")},Qv=async e=>{let t=el.get(e);if(!t)return"backend not found.";if(t.initialized)return t.backend;if(t.aborted)return t.error;{let r=!!t.initPromise;try{return r||(t.initPromise=t.backend.init(e)),await t.initPromise,t.initialized=!0,t.backend}catch(n){return r||(t.error=`${n}`,t.aborted=!0),t.error}finally{delete t.initPromise}}},Xv=async e=>{let t=e.executionProviders||[],r=t.map(l=>typeof l=="string"?l:l.name),n=r.length===0?Ii:r,i,s=[],a=new Set;for(let l of n){let u=await Qv(l);typeof u=="string"?s.push({name:l,err:u}):(i||(i=u),i===u&&a.add(l))}if(!i)throw new Error(`no available backend found. ERR: ${s.map(l=>`[${l.name}] ${l.err}`).join(", ")}`);for(let{name:l,err:u}of s)r.includes(l)&&console.warn(`removing requested execution provider "${l}" from session options because it is not available: ${u}`);let o=t.filter(l=>a.has(typeof l=="string"?l:l.name));return[i,new Proxy(e,{get:(l,u)=>u==="executionProviders"?o:Reflect.get(l,u)})]}}),$D=Qe(()=>{Jv()}),Yv,MD=Qe(()=>{Yv="1.22.0-dev.20250409-89f8206ba4"}),Qc,ts,Zv=Qe(()=>{MD(),Qc="warning",ts={wasm:{},webgl:{},webgpu:{},versions:{common:Yv},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Qc=e}},get logLevel(){return Qc}},Object.defineProperty(ts,"logLevel",{enumerable:!0})}),Cr,TD=Qe(()=>{Zv(),Cr=ts}),e1,t1,ED=Qe(()=>{e1=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=e.dims[3],r.height=e.dims[2];let n=r.getContext("2d");if(n!=null){let i,s;(t==null?void 0:t.tensorLayout)!==void 0&&t.tensorLayout==="NHWC"?(i=e.dims[2],s=e.dims[3]):(i=e.dims[3],s=e.dims[2]);let a=(t==null?void 0:t.format)!==void 0?t.format:"RGB",o=t==null?void 0:t.norm,l,u;o===void 0||o.mean===void 0?l=[255,255,255,255]:typeof o.mean=="number"?l=[o.mean,o.mean,o.mean,o.mean]:(l=[o.mean[0],o.mean[1],o.mean[2],0],o.mean[3]!==void 0&&(l[3]=o.mean[3])),o===void 0||o.bias===void 0?u=[0,0,0,0]:typeof o.bias=="number"?u=[o.bias,o.bias,o.bias,o.bias]:(u=[o.bias[0],o.bias[1],o.bias[2],0],o.bias[3]!==void 0&&(u[3]=o.bias[3]));let d=s*i,c=0,p=d,m=d*2,f=-1;a==="RGBA"?(c=0,p=d,m=d*2,f=d*3):a==="RGB"?(c=0,p=d,m=d*2):a==="RBG"&&(c=0,m=d,p=d*2);for(let w=0;w<s;w++)for(let C=0;C<i;C++){let y=(e.data[c++]-u[0])*l[0],g=(e.data[p++]-u[1])*l[1],P=(e.data[m++]-u[2])*l[2],b=f===-1?255:(e.data[f++]-u[3])*l[3];n.fillStyle="rgba("+y+","+g+","+P+","+b+")",n.fillRect(C,w,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},t1=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),n;if(r!=null){let i,s,a;(t==null?void 0:t.tensorLayout)!==void 0&&t.tensorLayout==="NHWC"?(i=e.dims[2],s=e.dims[1],a=e.dims[3]):(i=e.dims[3],s=e.dims[2],a=e.dims[1]);let o=t!==void 0&&t.format!==void 0?t.format:"RGB",l=t==null?void 0:t.norm,u,d;l===void 0||l.mean===void 0?u=[255,255,255,255]:typeof l.mean=="number"?u=[l.mean,l.mean,l.mean,l.mean]:(u=[l.mean[0],l.mean[1],l.mean[2],255],l.mean[3]!==void 0&&(u[3]=l.mean[3])),l===void 0||l.bias===void 0?d=[0,0,0,0]:typeof l.bias=="number"?d=[l.bias,l.bias,l.bias,l.bias]:(d=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(d[3]=l.bias[3]));let c=s*i;if(t!==void 0&&(t.format!==void 0&&a===4&&t.format!=="RGBA"||a===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let p=4,m=0,f=1,w=2,C=3,y=0,g=c,P=c*2,b=-1;o==="RGBA"?(y=0,g=c,P=c*2,b=c*3):o==="RGB"?(y=0,g=c,P=c*2):o==="RBG"&&(y=0,P=c,g=c*2),n=r.createImageData(i,s);for(let x=0;x<s*i;m+=p,f+=p,w+=p,C+=p,x++)n.data[m]=(e.data[y++]-d[0])*u[0],n.data[f]=(e.data[g++]-d[1])*u[1],n.data[w]=(e.data[P++]-d[2])*u[2],n.data[C]=b===-1?255:(e.data[b++]-d[3])*u[3]}else throw new Error("Can not access image data");return n}}),Zl,r1,n1,s1,i1,a1,PD=Qe(()=>{Jc(),Zl=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:n}=t,i=t.norm??{mean:255,bias:0},s,a;typeof i.mean=="number"?s=[i.mean,i.mean,i.mean,i.mean]:s=[i.mean[0],i.mean[1],i.mean[2],i.mean[3]??255],typeof i.bias=="number"?a=[i.bias,i.bias,i.bias,i.bias]:a=[i.bias[0],i.bias[1],i.bias[2],i.bias[3]??0];let o=t.format!==void 0?t.format:"RGBA",l=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",u=r*n,d=l==="RGBA"?new Float32Array(u*4):new Float32Array(u*3),c=4,p=0,m=1,f=2,w=3,C=0,y=u,g=u*2,P=-1;o==="RGB"&&(c=3,p=0,m=1,f=2,w=-1),l==="RGBA"?P=u*3:l==="RBG"?(C=0,g=u,y=u*2):l==="BGR"&&(g=0,y=u,C=u*2);for(let b=0;b<u;b++,p+=c,f+=c,m+=c,w+=c)d[C++]=(e[p]+a[0])/s[0],d[y++]=(e[m]+a[1])/s[1],d[g++]=(e[f]+a[2])/s[2],P!==-1&&w!==-1&&(d[P++]=(e[w]+a[3])/s[3]);return l==="RGBA"?new Ln("float32",d,[1,4,r,n]):new Ln("float32",d,[1,3,r,n])},r1=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,n=typeof ImageData<"u"&&e instanceof ImageData,i=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,s=typeof e=="string",a,o=t??{},l=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},u=d=>typeof HTMLCanvasElement<"u"&&d instanceof HTMLCanvasElement||d instanceof OffscreenCanvas?d.getContext("2d"):null;if(r){let d=l();d.width=e.width,d.height=e.height;let c=u(d);if(c!=null){let p=e.height,m=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(p=t.resizedHeight,m=t.resizedWidth),t!==void 0){if(o=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");o.tensorFormat="RGBA",o.height=p,o.width=m}else o.tensorFormat="RGBA",o.height=p,o.width=m;c.drawImage(e,0,0),a=c.getImageData(0,0,m,p).data}else throw new Error("Can not access image data")}else if(n){let d,c;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(d=t.resizedHeight,c=t.resizedWidth):(d=e.height,c=e.width),t!==void 0&&(o=t),o.format="RGBA",o.height=d,o.width=c,t!==void 0){let p=l();p.width=c,p.height=d;let m=u(p);if(m!=null)m.putImageData(e,0,0),a=m.getImageData(0,0,c,d).data;else throw new Error("Can not access image data")}else a=e.data}else if(i){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let d=l();d.width=e.width,d.height=e.height;let c=u(d);if(c!=null){let p=e.height,m=e.width;return c.drawImage(e,0,0,m,p),a=c.getImageData(0,0,m,p).data,o.height=p,o.width=m,Zl(a,o)}else throw new Error("Can not access image data")}else{if(s)return new Promise((d,c)=>{let p=l(),m=u(p);if(!e||!m)return c();let f=new Image;f.crossOrigin="Anonymous",f.src=e,f.onload=()=>{p.width=f.width,p.height=f.height,m.drawImage(f,0,0,p.width,p.height);let w=m.getImageData(0,0,p.width,p.height);o.height=p.height,o.width=p.width,d(Zl(w.data,o))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(a!==void 0)return Zl(a,o);throw new Error("Input data provided is not supported - aborted tensor creation")},n1=(e,t)=>{let{width:r,height:n,download:i,dispose:s}=t,a=[1,n,r,4];return new Ln({location:"texture",type:"float32",texture:e,dims:a,download:i,dispose:s})},s1=(e,t)=>{let{dataType:r,dims:n,download:i,dispose:s}=t;return new Ln({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:n,download:i,dispose:s})},i1=(e,t)=>{let{dataType:r,dims:n,download:i,dispose:s}=t;return new Ln({location:"ml-tensor",type:r??"float32",mlTensor:e,dims:n,download:i,dispose:s})},a1=(e,t,r)=>new Ln({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})}),wa,tl,Xc,o1,CD=Qe(()=>{wa=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),tl=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),Xc=!1,o1=()=>{if(!Xc){Xc=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,t=typeof BigUint64Array<"u"&&BigUint64Array.from,r=globalThis.Float16Array,n=typeof r<"u"&&r.from;e&&(wa.set("int64",BigInt64Array),tl.set(BigInt64Array,"int64")),t&&(wa.set("uint64",BigUint64Array),tl.set(BigUint64Array,"uint64")),n?(wa.set("float16",r),tl.set(r,"float16")):wa.set("float16",Uint16Array)}}}),l1,u1,SD=Qe(()=>{Jc(),l1=e=>{let t=1;for(let r=0;r<e.length;r++){let n=e[r];if(typeof n!="number"||!Number.isSafeInteger(n))throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);t*=n}return t},u1=(e,t)=>{switch(e.location){case"cpu":return new Ln(e.type,e.data,t);case"cpu-pinned":return new Ln({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new Ln({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new Ln({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});case"ml-tensor":return new Ln({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}}),Ln,Jc=Qe(()=>{ED(),PD(),CD(),SD(),Ln=class{constructor(e,t,r){o1();let n,i;if(typeof e=="object"&&"location"in e)switch(this.dataLocation=e.location,n=e.type,i=e.dims,e.location){case"cpu-pinned":{let a=wa.get(n);if(!a)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(e.data instanceof a))throw new TypeError(`buffer should be of type ${a.name}`);this.cpuData=e.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint8"&&n!=="bool"&&n!=="uint4"&&n!=="int4")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break}case"ml-tensor":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="uint64"&&n!=="int8"&&n!=="uint8"&&n!=="bool"&&n!=="uint4"&&n!=="int4")throw new TypeError(`unsupported type "${n}" to create tensor from MLTensor`);this.mlTensorData=e.mlTensor,this.downloader=e.download,this.disposer=e.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let a,o;if(typeof e=="string")if(n=e,o=r,e==="string"){if(!Array.isArray(t))throw new TypeError("A string tensor's data must be a string array.");a=t}else{let l=wa.get(e);if(l===void 0)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(t)){if(e==="float16"&&l===Uint16Array||e==="uint4"||e==="int4")throw new TypeError(`Creating a ${e} tensor from number array is not supported. Please use ${l.name} as data.`);e==="uint64"||e==="int64"?a=l.from(t,BigInt):a=l.from(t)}else if(t instanceof l)a=t;else if(t instanceof Uint8ClampedArray)if(e==="uint8")a=Uint8Array.from(t);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else if(e==="float16"&&t instanceof Uint16Array&&l!==Uint16Array)a=new globalThis.Float16Array(t.buffer,t.byteOffset,t.length);else throw new TypeError(`A ${n} tensor's data must be type of ${l}`)}else if(o=t,Array.isArray(e)){if(e.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let l=typeof e[0];if(l==="string")n="string",a=e;else if(l==="boolean")n="bool",a=Uint8Array.from(e);else throw new TypeError(`Invalid element type of data array: ${l}.`)}else if(e instanceof Uint8ClampedArray)n="uint8",a=Uint8Array.from(e);else{let l=tl.get(e.constructor);if(l===void 0)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);n=l,a=e}if(o===void 0)o=[a.length];else if(!Array.isArray(o))throw new TypeError("A tensor's dims must be a number array");i=o,this.cpuData=a,this.dataLocation="cpu"}let s=l1(i);if(this.cpuData&&s!==this.cpuData.length&&!((n==="uint4"||n==="int4")&&Math.ceil(s/2)===this.cpuData.length))throw new Error(`Tensor's size(${s}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=i,this.size=s}static async fromImage(e,t){return r1(e,t)}static fromTexture(e,t){return n1(e,t)}static fromGpuBuffer(e,t){return s1(e,t)}static fromMLTensor(e,t){return i1(e,t)}static fromPinnedBuffer(e,t,r){return a1(e,t,r)}toDataURL(e){return e1(this,e)}toImageData(e){return t1(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let t=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=t,e&&this.disposer&&(this.disposer(),this.disposer=void 0),t}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return u1(this,e)}}}),ms,d1=Qe(()=>{Jc(),ms=Ln}),rl,Yc,_s,rs,c1=Qe(()=>{Zv(),rl=(e,t)=>{(typeof ts.trace>"u"?!ts.wasm.trace:!ts.trace)||console.timeStamp(`${e}::ORT::${t}`)},Yc=(e,t)=>{var i;let r=((i=new Error().stack)==null?void 0:i.split(/\r\n|\r|\n/g))||[],n=!1;for(let s=0;s<r.length;s++){if(n&&!r[s].includes("TRACE_FUNC")){let a=`FUNC_${e}::${r[s].trim().split(" ")[1]}`;t&&(a+=`::${t}`),rl("CPU",a);return}r[s].includes("TRACE_FUNC")&&(n=!0)}},_s=e=>{(typeof ts.trace>"u"?!ts.wasm.trace:!ts.trace)||Yc("BEGIN",e)},rs=e=>{(typeof ts.trace>"u"?!ts.wasm.trace:!ts.trace)||Yc("END",e)}}),p1,kD=Qe(()=>{Jv(),d1(),c1(),p1=class AA{constructor(t){this.handler=t}async run(t,r,n){_s();let i={},s={};if(typeof t!="object"||t===null||t instanceof ms||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof ms)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(let u of r){if(typeof u!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(u)===-1)throw new RangeError(`'fetches' contains invalid output name: ${u}.`);i[u]=null}if(typeof n=="object"&&n!==null)s=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else{let u=!1,d=Object.getOwnPropertyNames(r);for(let c of this.outputNames)if(d.indexOf(c)!==-1){let p=r[c];(p===null||p instanceof ms)&&(u=!0,a=!1,i[c]=p)}if(u){if(typeof n=="object"&&n!==null)s=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else s=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let u of this.inputNames)if(typeof t[u]>"u")throw new Error(`input '${u}' is missing in 'feeds'.`);if(a)for(let u of this.outputNames)i[u]=null;let o=await this.handler.run(t,i,s),l={};for(let u in o)if(Object.hasOwnProperty.call(o,u)){let d=o[u];d instanceof ms?l[u]=d:l[u]=new ms(d.type,d.data,d.dims)}return rs(),l}async release(){return this.handler.dispose()}static async create(t,r,n,i){_s();let s,a={};if(typeof t=="string"){if(s=t,typeof r=="object"&&r!==null)a=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(s=t,typeof r=="object"&&r!==null)a=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let d=t,c=0,p=t.byteLength;if(typeof r=="object"&&r!==null)a=r;else if(typeof r=="number"){if(c=r,!Number.isSafeInteger(c))throw new RangeError("'byteOffset' must be an integer.");if(c<0||c>=d.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${d.byteLength}).`);if(p=t.byteLength-c,typeof n=="number"){if(p=n,!Number.isSafeInteger(p))throw new RangeError("'byteLength' must be an integer.");if(p<=0||c+p>d.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${d.byteLength-c}].`);if(typeof i=="object"&&i!==null)a=i;else if(typeof i<"u")throw new TypeError("'options' must be an object.")}else if(typeof n<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");s=new Uint8Array(d,c,p)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let[o,l]=await Xv(a),u=await o.createInferenceSessionHandler(s,l);return rs(),new AA(u)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}get inputMetadata(){return this.handler.inputMetadata}get outputMetadata(){return this.handler.outputMetadata}}}),Zc,ID=Qe(()=>{kD(),Zc=p1}),AD=Qe(()=>{}),OD=Qe(()=>{}),DD=Qe(()=>{}),zD=Qe(()=>{}),h1={};ro(h1,{InferenceSession:()=>Zc,TRACE:()=>rl,TRACE_FUNC_BEGIN:()=>_s,TRACE_FUNC_END:()=>rs,Tensor:()=>ms,env:()=>Cr,registerBackend:()=>ga});var gs=Qe(()=>{$D(),TD(),ID(),d1(),AD(),OD(),c1(),DD(),zD()}),ep=Qe(()=>{}),f1={};ro(f1,{default:()=>m1});var tp,rp,m1,FD=Qe(()=>{var e;KE(),ya(),dp(),tp="ort-wasm-proxy-worker",rp=((e=globalThis.self)==null?void 0:e.name)===tp,rp&&(self.onmessage=t=>{let{type:r,in:n}=t.data;try{switch(r){case"init-wasm":hp(n.wasm).then(()=>{Eh(n).then(()=>{postMessage({type:r})},i=>{postMessage({type:r,err:i})})},i=>{postMessage({type:r,err:i})});break;case"init-ep":{let{epName:i,env:s}=n;Ph(s,i).then(()=>{postMessage({type:r})},a=>{postMessage({type:r,err:a})});break}case"copy-from":{let{buffer:i}=n,s=wu(i);postMessage({type:r,out:s});break}case"create":{let{model:i,options:s}=n;Sh(i,s).then(a=>{postMessage({type:r,out:a})},a=>{postMessage({type:r,err:a})});break}case"release":kh(n),postMessage({type:r});break;case"run":{let{sessionId:i,inputIndices:s,inputs:a,outputIndices:o,options:l}=n;Ah(i,s,a,o,new Array(o.length).fill(null),l).then(u=>{u.some(d=>d[3]!=="cpu")?postMessage({type:r,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:r,out:u},Dh([...a,...u]))},u=>{postMessage({type:r,err:u})});break}case"end-profiling":Oh(n),postMessage({type:r});break;default:}}catch(i){postMessage({type:r,err:i})}}),m1=rp?null:t=>new Worker(t??Rn,{type:"module",name:tp})}),_1={};ro(_1,{default:()=>g1});var np,sp,g1,w1,BD=Qe(()=>{var e,t;sp=(np=self.location.href,async function(r={}){var $i;var n,i,s=r,a=new Promise((v,h)=>{n=v,i=h}),o=typeof window=="object",l=typeof WorkerGlobalScope<"u",u=l&&(($i=self.name)==null?void 0:$i.startsWith("em-pthread"));s.mountExternalData=(v,h)=>{v.startsWith("./")&&(v=v.substring(2)),(s.Eb||(s.Eb=new Map)).set(v,h)},s.unmountExternalData=()=>{delete s.Eb};var d=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,pc:!0}).buffer.constructor;let c=v=>async(...h)=>{var _;try{if(s.Fb)throw Error("Session already started");let M=s.Fb={dc:h[0],errors:[]},k=await v(...h);if(s.Fb!==M)throw Error("Session mismatch");(_=s.Jb)==null||_.flush();let D=M.errors;if(0<D.length){let Q=await Promise.all(D);if(Q=Q.filter(ue=>ue),0<Q.length)throw Error(Q.join(`
`))}return k}finally{s.Fb=null}};s.jsepInit=(v,h)=>{if(v==="webgpu"){[s.Jb,s.Ub,s.Yb,s.Kb,s.Xb,s.jb,s.Zb,s.ac,s.Vb,s.Wb,s.$b]=h;let _=s.Jb;s.jsepRegisterBuffer=(M,k,D,Q)=>_.registerBuffer(M,k,D,Q),s.jsepGetBuffer=M=>_.getBuffer(M),s.jsepCreateDownloader=(M,k,D)=>_.createDownloader(M,k,D),s.jsepOnCreateSession=M=>{_.onCreateSession(M)},s.jsepOnReleaseSession=M=>{_.onReleaseSession(M)},s.jsepOnRunStart=M=>_.onRunStart(M),s.bc=(M,k)=>{_.upload(M,k)}}else if(v==="webnn"){let _=h[0];[s.nc,s.Nb,s.webnnEnsureTensor,s.Ob,s.webnnDownloadTensor]=h.slice(1),s.webnnReleaseTensorId=s.Nb,s.webnnUploadTensor=s.Ob,s.webnnOnRunStart=M=>_.onRunStart(M),s.webnnOnRunEnd=_.onRunEnd.bind(_),s.webnnRegisterMLContext=(M,k)=>{_.registerMLContext(M,k)},s.webnnOnReleaseSession=M=>{_.onReleaseSession(M)},s.webnnCreateMLTensorDownloader=(M,k)=>_.createMLTensorDownloader(M,k),s.webnnRegisterMLTensor=(M,k,D,Q)=>_.registerMLTensor(M,k,D,Q),s.webnnCreateMLContext=M=>_.createMLContext(M),s.webnnRegisterMLConstant=(M,k,D,Q,ue,_e)=>_.registerMLConstant(M,k,D,Q,ue,s.Eb,_e),s.webnnRegisterGraphInput=_.registerGraphInput.bind(_),s.webnnIsGraphInput=_.isGraphInput.bind(_),s.webnnCreateTemporaryTensor=_.createTemporaryTensor.bind(_),s.webnnIsInt64Supported=_.isInt64Supported.bind(_)}};let p=()=>{let v=(h,_,M)=>(...k)=>{let D=pr,Q=_==null?void 0:_();k=h(...k);let ue=_==null?void 0:_();return Q!==ue&&(h=ue,M(Q),_=M=null),pr!=D?new Promise((_e,Te)=>{Qr={resolve:_e,reject:Te}}):k};(()=>{for(let h of["_OrtAppendExecutionProvider","_OrtCreateSession","_OrtRun","_OrtRunWithBinding","_OrtBindInput"])s[h]=v(s[h],()=>s[h],_=>s[h]=_)})(),c!==void 0&&(s._OrtRun=c(s._OrtRun),s._OrtRunWithBinding=c(s._OrtRunWithBinding)),p=void 0};s.asyncInit=()=>{p==null||p()};var m,f,w=Object.assign({},s),C=(v,h)=>{throw h},y="";(o||l)&&(l?y=self.location.href:typeof document<"u"&&document.currentScript&&(y=document.currentScript.src),np&&(y=np),y=y.startsWith("blob:")?"":y.slice(0,y.replace(/[?#].*/,"").lastIndexOf("/")+1),l&&(f=v=>{var h=new XMLHttpRequest;return h.open("GET",v,!1),h.responseType="arraybuffer",h.send(null),new Uint8Array(h.response)}),m=async v=>{if(L(v))return new Promise((_,M)=>{var k=new XMLHttpRequest;k.open("GET",v,!0),k.responseType="arraybuffer",k.onload=()=>{k.status==200||k.status==0&&k.response?_(k.response):M(k.status)},k.onerror=M,k.send(null)});var h=await fetch(v,{credentials:"same-origin"});if(h.ok)return h.arrayBuffer();throw Error(h.status+" : "+h.url)});var g=console.log.bind(console),P=console.error.bind(console),b=g,x=P;Object.assign(s,w),w=null;var T,E,S,O,B,V,W,N,te,q,K,Y,Z,de=s.wasmBinary,pe=!1,L=v=>v.startsWith("file://");function F(){return T.buffer!=O.buffer&&oe(),O}function U(){return T.buffer!=O.buffer&&oe(),B}function re(){return T.buffer!=O.buffer&&oe(),V}function me(){return T.buffer!=O.buffer&&oe(),W}function J(){return T.buffer!=O.buffer&&oe(),N}function we(){return T.buffer!=O.buffer&&oe(),te}function je(){return T.buffer!=O.buffer&&oe(),q}function Ge(){return T.buffer!=O.buffer&&oe(),Z}if(u){let v=function(h){try{var _=h.data,M=_.Bb;if(M==="load"){let k=[];self.onmessage=D=>k.push(D),self.startWorker=()=>{postMessage({Bb:"loaded"});for(let D of k)v(D);self.onmessage=v};for(let D of _.Rb)s[D]&&!s[D].proxy||(s[D]=(...Q)=>{postMessage({Bb:"callHandler",Qb:D,args:Q})},D=="print"&&(b=s[D]),D=="printErr"&&(x=s[D]));T=_.kc,oe(),Ae(_.lc)}else if(M==="run"){Rs(_.Ab),ks(_.Ab,0,0,1,0,0),Pn(),fe(_.Ab),ne||(Vi(),ne=!0);try{Ns(_.fc,_.Hb)}catch(k){if(k!="unwind")throw k}}else _.target!=="setimmediate"&&(M==="checkMailbox"?ne&&ke():M&&(x(`worker: received unknown command ${M}`),x(_)))}catch(k){throw Xs(),k}};var Ae,ne=!1;x=function(...h){h=h.join(" "),console.error(h)},self.alert=function(...h){postMessage({Bb:"alert",text:h.join(" "),ic:Qs()})},self.onunhandledrejection=h=>{throw h.reason||h},self.onmessage=v}function oe(){var v=T.buffer;s.HEAP8=O=new Int8Array(v),s.HEAP16=V=new Int16Array(v),s.HEAPU8=B=new Uint8Array(v),s.HEAPU16=W=new Uint16Array(v),s.HEAP32=N=new Int32Array(v),s.HEAPU32=te=new Uint32Array(v),s.HEAPF32=q=new Float32Array(v),s.HEAPF64=Z=new Float64Array(v),s.HEAP64=K=new BigInt64Array(v),s.HEAPU64=Y=new BigUint64Array(v)}function H(){u?startWorker(s):mt.Ca()}u||(T=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0}),oe());var be,Oe=0,Se=null;function Me(){if(--Oe==0&&Se){var v=Se;Se=null,v()}}function Ie(v){throw x(v="Aborted("+v+")"),pe=!0,v=new WebAssembly.RuntimeError(v+". Build with -sASSERTIONS for more info."),i(v),v}function $e(){return{a:{L:tt,Aa:We,b:Us,$:jn,A:z,pa:se,X:le,Z:xe,qa:Re,na:lt,ga:Et,ma:xt,J:At,Y:ut,V:Kt,oa:er,W:on,va:Hr,E:ns,Q:mn,O:gn,D:qe,u:at,r:mr,P:Ts,z:R,R:X,ja:ae,T:He,aa:Ze,M:ot,F:St,ia:fe,sa:Jt,t:ir,Ba:Wr,w:Dn,o:kr,l:yn,c:Cn,n:pi,j:ka,v:uo,p:co,f:Vs,s:po,m:ho,e:fo,k:mo,i:_o,g:Gs,d:go,da:wo,ea:Li,fa:yo,ba:Aa,ca:hi,N:Oa,xa:Ri,ua:bo,h:mi,C:vo,G:xo,ta:_l,x:$o,ra:Mo,U:To,q:Ss,y:Eo,K:Po,S:Co,za:Ni,ya:So,ka:Da,la:ji,_:Wt,B:za,I:Ui,ha:wi,H:Ba,a:T,wa:rt}}}var Le={829644:(v,h,_,M,k)=>{if(s===void 0||!s.Eb)return 1;if((v=Ot(Number(v>>>0))).startsWith("./")&&(v=v.substring(2)),!(v=s.Eb.get(v)))return 2;if(h=Number(h>>>0),_=Number(_>>>0),M=Number(M>>>0),h+_>v.byteLength)return 3;try{let D=v.subarray(h,h+_);switch(k){case 0:U().set(D,M>>>0);break;case 1:s.mc?s.mc(M,D):s.bc(M,D);break;default:return 4}return 0}catch{return 4}},830468:(v,h,_)=>{s.Ob(v,U().subarray(h>>>0,h+_>>>0))},830532:()=>s.nc(),830574:v=>{s.Nb(v)},830611:()=>{s.Vb()},830642:()=>{s.Wb()},830671:()=>{s.$b()},830696:v=>s.Ub(v),830729:v=>s.Yb(v),830761:(v,h,_)=>{s.Kb(Number(v),Number(h),Number(_),!0)},830824:(v,h,_)=>{s.Kb(Number(v),Number(h),Number(_))},830881:()=>typeof wasmOffsetConverter<"u",830938:v=>{s.jb("Abs",v,void 0)},830989:v=>{s.jb("Neg",v,void 0)},831040:v=>{s.jb("Floor",v,void 0)},831093:v=>{s.jb("Ceil",v,void 0)},831145:v=>{s.jb("Reciprocal",v,void 0)},831203:v=>{s.jb("Sqrt",v,void 0)},831255:v=>{s.jb("Exp",v,void 0)},831306:v=>{s.jb("Erf",v,void 0)},831357:v=>{s.jb("Sigmoid",v,void 0)},831412:(v,h,_)=>{s.jb("HardSigmoid",v,{alpha:h,beta:_})},831491:v=>{s.jb("Log",v,void 0)},831542:v=>{s.jb("Sin",v,void 0)},831593:v=>{s.jb("Cos",v,void 0)},831644:v=>{s.jb("Tan",v,void 0)},831695:v=>{s.jb("Asin",v,void 0)},831747:v=>{s.jb("Acos",v,void 0)},831799:v=>{s.jb("Atan",v,void 0)},831851:v=>{s.jb("Sinh",v,void 0)},831903:v=>{s.jb("Cosh",v,void 0)},831955:v=>{s.jb("Asinh",v,void 0)},832008:v=>{s.jb("Acosh",v,void 0)},832061:v=>{s.jb("Atanh",v,void 0)},832114:v=>{s.jb("Tanh",v,void 0)},832166:v=>{s.jb("Not",v,void 0)},832217:(v,h,_)=>{s.jb("Clip",v,{min:h,max:_})},832286:v=>{s.jb("Clip",v,void 0)},832338:(v,h)=>{s.jb("Elu",v,{alpha:h})},832396:v=>{s.jb("Gelu",v,void 0)},832448:v=>{s.jb("Relu",v,void 0)},832500:(v,h)=>{s.jb("LeakyRelu",v,{alpha:h})},832564:(v,h)=>{s.jb("ThresholdedRelu",v,{alpha:h})},832634:(v,h)=>{s.jb("Cast",v,{to:h})},832692:v=>{s.jb("Add",v,void 0)},832743:v=>{s.jb("Sub",v,void 0)},832794:v=>{s.jb("Mul",v,void 0)},832845:v=>{s.jb("Div",v,void 0)},832896:v=>{s.jb("Pow",v,void 0)},832947:v=>{s.jb("Equal",v,void 0)},833e3:v=>{s.jb("Greater",v,void 0)},833055:v=>{s.jb("GreaterOrEqual",v,void 0)},833117:v=>{s.jb("Less",v,void 0)},833169:v=>{s.jb("LessOrEqual",v,void 0)},833228:(v,h,_,M,k)=>{s.jb("ReduceMean",v,{keepDims:!!h,noopWithEmptyAxes:!!_,axes:M?Array.from(J().subarray(Number(M)>>>0,Number(k)>>>0)):[]})},833403:(v,h,_,M,k)=>{s.jb("ReduceMax",v,{keepDims:!!h,noopWithEmptyAxes:!!_,axes:M?Array.from(J().subarray(Number(M)>>>0,Number(k)>>>0)):[]})},833577:(v,h,_,M,k)=>{s.jb("ReduceMin",v,{keepDims:!!h,noopWithEmptyAxes:!!_,axes:M?Array.from(J().subarray(Number(M)>>>0,Number(k)>>>0)):[]})},833751:(v,h,_,M,k)=>{s.jb("ReduceProd",v,{keepDims:!!h,noopWithEmptyAxes:!!_,axes:M?Array.from(J().subarray(Number(M)>>>0,Number(k)>>>0)):[]})},833926:(v,h,_,M,k)=>{s.jb("ReduceSum",v,{keepDims:!!h,noopWithEmptyAxes:!!_,axes:M?Array.from(J().subarray(Number(M)>>>0,Number(k)>>>0)):[]})},834100:(v,h,_,M,k)=>{s.jb("ReduceL1",v,{keepDims:!!h,noopWithEmptyAxes:!!_,axes:M?Array.from(J().subarray(Number(M)>>>0,Number(k)>>>0)):[]})},834273:(v,h,_,M,k)=>{s.jb("ReduceL2",v,{keepDims:!!h,noopWithEmptyAxes:!!_,axes:M?Array.from(J().subarray(Number(M)>>>0,Number(k)>>>0)):[]})},834446:(v,h,_,M,k)=>{s.jb("ReduceLogSum",v,{keepDims:!!h,noopWithEmptyAxes:!!_,axes:M?Array.from(J().subarray(Number(M)>>>0,Number(k)>>>0)):[]})},834623:(v,h,_,M,k)=>{s.jb("ReduceSumSquare",v,{keepDims:!!h,noopWithEmptyAxes:!!_,axes:M?Array.from(J().subarray(Number(M)>>>0,Number(k)>>>0)):[]})},834803:(v,h,_,M,k)=>{s.jb("ReduceLogSumExp",v,{keepDims:!!h,noopWithEmptyAxes:!!_,axes:M?Array.from(J().subarray(Number(M)>>>0,Number(k)>>>0)):[]})},834983:v=>{s.jb("Where",v,void 0)},835036:(v,h,_)=>{s.jb("Transpose",v,{perm:h?Array.from(J().subarray(Number(h)>>>0,Number(_)>>>0)):[]})},835160:(v,h,_,M)=>{s.jb("DepthToSpace",v,{blocksize:h,mode:Ot(_),format:M?"NHWC":"NCHW"})},835293:(v,h,_,M)=>{s.jb("DepthToSpace",v,{blocksize:h,mode:Ot(_),format:M?"NHWC":"NCHW"})},835426:(v,h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt,Er)=>{s.jb("ConvTranspose",v,{format:_e?"NHWC":"NCHW",autoPad:h,dilations:[_],group:M,kernelShape:[k],pads:[D,Q],strides:[ue],wIsConst:()=>!!F()[Te>>>0],outputPadding:Ne?Array.from(J().subarray(Number(Ne)>>>0,Number(nt)>>>0)):[],outputShape:ft?Array.from(J().subarray(Number(ft)>>>0,Number(zt)>>>0)):[],activation:Ot(Er)})},835859:(v,h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt)=>{s.jb("ConvTranspose",v,{format:ue?"NHWC":"NCHW",autoPad:h,dilations:Array.from(J().subarray(Number(_)>>>0,2+(Number(_)>>>0)>>>0)),group:M,kernelShape:Array.from(J().subarray(Number(k)>>>0,2+(Number(k)>>>0)>>>0)),pads:Array.from(J().subarray(Number(D)>>>0,4+(Number(D)>>>0)>>>0)),strides:Array.from(J().subarray(Number(Q)>>>0,2+(Number(Q)>>>0)>>>0)),wIsConst:()=>!!F()[_e>>>0],outputPadding:Te?Array.from(J().subarray(Number(Te)>>>0,Number(Ne)>>>0)):[],outputShape:nt?Array.from(J().subarray(Number(nt)>>>0,Number(ft)>>>0)):[],activation:Ot(zt)})},836520:(v,h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt,Er)=>{s.jb("ConvTranspose",v,{format:_e?"NHWC":"NCHW",autoPad:h,dilations:[_],group:M,kernelShape:[k],pads:[D,Q],strides:[ue],wIsConst:()=>!!F()[Te>>>0],outputPadding:Ne?Array.from(J().subarray(Number(Ne)>>>0,Number(nt)>>>0)):[],outputShape:ft?Array.from(J().subarray(Number(ft)>>>0,Number(zt)>>>0)):[],activation:Ot(Er)})},836953:(v,h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt)=>{s.jb("ConvTranspose",v,{format:ue?"NHWC":"NCHW",autoPad:h,dilations:Array.from(J().subarray(Number(_)>>>0,2+(Number(_)>>>0)>>>0)),group:M,kernelShape:Array.from(J().subarray(Number(k)>>>0,2+(Number(k)>>>0)>>>0)),pads:Array.from(J().subarray(Number(D)>>>0,4+(Number(D)>>>0)>>>0)),strides:Array.from(J().subarray(Number(Q)>>>0,2+(Number(Q)>>>0)>>>0)),wIsConst:()=>!!F()[_e>>>0],outputPadding:Te?Array.from(J().subarray(Number(Te)>>>0,Number(Ne)>>>0)):[],outputShape:nt?Array.from(J().subarray(Number(nt)>>>0,Number(ft)>>>0)):[],activation:Ot(zt)})},837614:(v,h)=>{s.jb("GlobalAveragePool",v,{format:h?"NHWC":"NCHW"})},837705:(v,h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt)=>{s.jb("AveragePool",v,{format:zt?"NHWC":"NCHW",auto_pad:h,ceil_mode:_,count_include_pad:M,storage_order:k,dilations:D?Array.from(J().subarray(Number(D)>>>0,Number(Q)>>>0)):[],kernel_shape:ue?Array.from(J().subarray(Number(ue)>>>0,Number(_e)>>>0)):[],pads:Te?Array.from(J().subarray(Number(Te)>>>0,Number(Ne)>>>0)):[],strides:nt?Array.from(J().subarray(Number(nt)>>>0,Number(ft)>>>0)):[]})},838184:(v,h)=>{s.jb("GlobalAveragePool",v,{format:h?"NHWC":"NCHW"})},838275:(v,h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt)=>{s.jb("AveragePool",v,{format:zt?"NHWC":"NCHW",auto_pad:h,ceil_mode:_,count_include_pad:M,storage_order:k,dilations:D?Array.from(J().subarray(Number(D)>>>0,Number(Q)>>>0)):[],kernel_shape:ue?Array.from(J().subarray(Number(ue)>>>0,Number(_e)>>>0)):[],pads:Te?Array.from(J().subarray(Number(Te)>>>0,Number(Ne)>>>0)):[],strides:nt?Array.from(J().subarray(Number(nt)>>>0,Number(ft)>>>0)):[]})},838754:(v,h)=>{s.jb("GlobalMaxPool",v,{format:h?"NHWC":"NCHW"})},838841:(v,h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt)=>{s.jb("MaxPool",v,{format:zt?"NHWC":"NCHW",auto_pad:h,ceil_mode:_,count_include_pad:M,storage_order:k,dilations:D?Array.from(J().subarray(Number(D)>>>0,Number(Q)>>>0)):[],kernel_shape:ue?Array.from(J().subarray(Number(ue)>>>0,Number(_e)>>>0)):[],pads:Te?Array.from(J().subarray(Number(Te)>>>0,Number(Ne)>>>0)):[],strides:nt?Array.from(J().subarray(Number(nt)>>>0,Number(ft)>>>0)):[]})},839316:(v,h)=>{s.jb("GlobalMaxPool",v,{format:h?"NHWC":"NCHW"})},839403:(v,h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt)=>{s.jb("MaxPool",v,{format:zt?"NHWC":"NCHW",auto_pad:h,ceil_mode:_,count_include_pad:M,storage_order:k,dilations:D?Array.from(J().subarray(Number(D)>>>0,Number(Q)>>>0)):[],kernel_shape:ue?Array.from(J().subarray(Number(ue)>>>0,Number(_e)>>>0)):[],pads:Te?Array.from(J().subarray(Number(Te)>>>0,Number(Ne)>>>0)):[],strides:nt?Array.from(J().subarray(Number(nt)>>>0,Number(ft)>>>0)):[]})},839878:(v,h,_,M,k)=>{s.jb("Gemm",v,{alpha:h,beta:_,transA:M,transB:k})},839982:v=>{s.jb("MatMul",v,void 0)},840036:(v,h,_,M)=>{s.jb("ArgMax",v,{keepDims:!!h,selectLastIndex:!!_,axis:M})},840144:(v,h,_,M)=>{s.jb("ArgMin",v,{keepDims:!!h,selectLastIndex:!!_,axis:M})},840252:(v,h)=>{s.jb("Softmax",v,{axis:h})},840315:(v,h)=>{s.jb("Concat",v,{axis:h})},840375:(v,h,_,M,k)=>{s.jb("Split",v,{axis:h,numOutputs:_,splitSizes:M?Array.from(J().subarray(Number(M)>>>0,Number(k)>>>0)):[]})},840531:v=>{s.jb("Expand",v,void 0)},840585:(v,h)=>{s.jb("Gather",v,{axis:Number(h)})},840656:(v,h)=>{s.jb("GatherElements",v,{axis:Number(h)})},840735:(v,h)=>{s.jb("GatherND",v,{batch_dims:Number(h)})},840814:(v,h,_,M,k,D,Q,ue,_e,Te,Ne)=>{s.jb("Resize",v,{antialias:h,axes:_?Array.from(J().subarray(Number(_)>>>0,Number(M)>>>0)):[],coordinateTransformMode:Ot(k),cubicCoeffA:D,excludeOutside:Q,extrapolationValue:ue,keepAspectRatioPolicy:Ot(_e),mode:Ot(Te),nearestMode:Ot(Ne)})},841176:(v,h,_,M,k,D,Q)=>{s.jb("Slice",v,{starts:h?Array.from(J().subarray(Number(h)>>>0,Number(_)>>>0)):[],ends:M?Array.from(J().subarray(Number(M)>>>0,Number(k)>>>0)):[],axes:D?Array.from(J().subarray(Number(D)>>>0,Number(Q)>>>0)):[]})},841440:v=>{s.jb("Tile",v,void 0)},841492:(v,h,_)=>{s.jb("InstanceNormalization",v,{epsilon:h,format:_?"NHWC":"NCHW"})},841606:(v,h,_)=>{s.jb("InstanceNormalization",v,{epsilon:h,format:_?"NHWC":"NCHW"})},841720:v=>{s.jb("Range",v,void 0)},841773:(v,h)=>{s.jb("Einsum",v,{equation:Ot(h)})},841854:(v,h,_,M,k)=>{s.jb("Pad",v,{mode:h,value:_,pads:M?Array.from(J().subarray(Number(M)>>>0,Number(k)>>>0)):[]})},841997:(v,h,_,M,k,D)=>{s.jb("BatchNormalization",v,{epsilon:h,momentum:_,spatial:!!k,trainingMode:!!M,format:D?"NHWC":"NCHW"})},842166:(v,h,_,M,k,D)=>{s.jb("BatchNormalization",v,{epsilon:h,momentum:_,spatial:!!k,trainingMode:!!M,format:D?"NHWC":"NCHW"})},842335:(v,h,_)=>{s.jb("CumSum",v,{exclusive:Number(h),reverse:Number(_)})},842432:(v,h,_)=>{s.jb("DequantizeLinear",v,{axis:h,blockSize:_})},842522:(v,h,_,M,k)=>{s.jb("GridSample",v,{align_corners:h,mode:Ot(_),padding_mode:Ot(M),format:k?"NHWC":"NCHW"})},842692:(v,h,_,M,k)=>{s.jb("GridSample",v,{align_corners:h,mode:Ot(_),padding_mode:Ot(M),format:k?"NHWC":"NCHW"})},842862:(v,h)=>{s.jb("ScatterND",v,{reduction:Ot(h)})},842947:(v,h,_,M,k,D,Q,ue,_e)=>{s.jb("Attention",v,{numHeads:h,isUnidirectional:_,maskFilterValue:M,scale:k,doRotary:D,qkvHiddenSizes:Q?Array.from(J().subarray(Number(ue)>>>0,Number(ue)+Q>>>0)):[],pastPresentShareBuffer:!!_e})},843219:v=>{s.jb("BiasAdd",v,void 0)},843274:v=>{s.jb("BiasSplitGelu",v,void 0)},843335:v=>{s.jb("FastGelu",v,void 0)},843391:(v,h,_,M,k,D,Q,ue,_e,Te,Ne,nt,ft,zt,Er,Os)=>{s.jb("Conv",v,{format:nt?"NHWC":"NCHW",auto_pad:h,dilations:_?Array.from(J().subarray(Number(_)>>>0,Number(M)>>>0)):[],group:k,kernel_shape:D?Array.from(J().subarray(Number(D)>>>0,Number(Q)>>>0)):[],pads:ue?Array.from(J().subarray(Number(ue)>>>0,Number(_e)>>>0)):[],strides:Te?Array.from(J().subarray(Number(Te)>>>0,Number(Ne)>>>0)):[],w_is_const:()=>!!F()[Number(ft)>>>0],activation:Ot(zt),activation_params:Er?Array.from(je().subarray(Number(Er)>>>0,Number(Os)>>>0)):[]})},843975:v=>{s.jb("Gelu",v,void 0)},844027:(v,h,_,M,k,D,Q,ue,_e)=>{s.jb("GroupQueryAttention",v,{numHeads:h,kvNumHeads:_,scale:M,softcap:k,doRotary:D,rotaryInterleaved:Q,smoothSoftmax:ue,localWindowSize:_e})},844244:(v,h,_,M)=>{s.jb("LayerNormalization",v,{axis:h,epsilon:_,simplified:!!M})},844355:(v,h,_,M)=>{s.jb("LayerNormalization",v,{axis:h,epsilon:_,simplified:!!M})},844466:(v,h,_,M,k,D)=>{s.jb("MatMulNBits",v,{k:h,n:_,accuracyLevel:M,bits:k,blockSize:D})},844593:(v,h,_,M,k,D)=>{s.jb("MultiHeadAttention",v,{numHeads:h,isUnidirectional:_,maskFilterValue:M,scale:k,doRotary:D})},844752:(v,h)=>{s.jb("QuickGelu",v,{alpha:h})},844816:(v,h,_,M,k)=>{s.jb("RotaryEmbedding",v,{interleaved:!!h,numHeads:_,rotaryEmbeddingDim:M,scale:k})},844955:(v,h,_)=>{s.jb("SkipLayerNormalization",v,{epsilon:h,simplified:!!_})},845057:(v,h,_)=>{s.jb("SkipLayerNormalization",v,{epsilon:h,simplified:!!_})},845159:(v,h,_,M)=>{s.jb("GatherBlockQuantized",v,{gatherAxis:h,quantizeAxis:_,blockSize:M})},845280:v=>{s.Zb(v)},845314:(v,h)=>s.ac(Number(v),Number(h),s.Fb.dc,s.Fb.errors)};function We(v,h,_){return qr(async()=>{await s.Xb(Number(v),Number(h),Number(_))})}function tt(){return typeof wasmOffsetConverter<"u"}class Ee{constructor(h){ie(this,"name","ExitStatus");this.message=`Program terminated with exit(${h})`,this.status=h}}var it=v=>{v.terminate(),v.onmessage=()=>{}},Je=[],dt=v=>{It.length==0&&(Gr(),cr(It[0]));var h=It.pop();if(!h)return 6;Tt.push(h),Sr[v.Ab]=h,h.Ab=v.Ab;var _={Bb:"run",fc:v.ec,Hb:v.Hb,Ab:v.Ab};return h.postMessage(_,v.Mb),0},Ye=0,ze=(v,h,..._)=>{for(var M=2*_.length,k=As(),D=Is(8*M),Q=D>>>3,ue=0;ue<_.length;ue++){var _e=_[ue];typeof _e=="bigint"?(K[Q+2*ue]=1n,K[Q+2*ue+1]=_e):(K[Q+2*ue]=0n,Ge()[Q+2*ue+1>>>0]=_e)}return v=Gi(v,0,M,D,h),Ys(k),v};function rt(v){if(u)return ze(0,1,v);if(S=v,!(0<Ye)){for(var h of Tt)it(h);for(h of It)it(h);It=[],Tt=[],Sr={},pe=!0}C(0,new Ee(v))}function ct(v){if(u)return ze(1,0,v);Wt(v)}var Wt=v=>{if(S=v,u)throw ct(v),"unwind";rt(v)},It=[],Tt=[],Ur=[],Sr={},an=v=>{var h=v.Ab;delete Sr[h],It.push(v),Tt.splice(Tt.indexOf(v),1),v.Ab=0,qi(h)};function Pn(){Ur.forEach(v=>v())}var cr=v=>new Promise(h=>{v.onmessage=k=>{var D=(k=k.data).Bb;if(k.Gb&&k.Gb!=Qs()){var Q=Sr[k.Gb];Q?Q.postMessage(k,k.Mb):x(`Internal error! Worker sent a message "${D}" to target pthread ${k.Gb}, but that thread no longer exists!`)}else D==="checkMailbox"?ke():D==="spawnThread"?dt(k):D==="cleanupThread"?an(Sr[k.hc]):D==="loaded"?(v.loaded=!0,h(v)):D==="alert"?alert(`Thread ${k.ic}: ${k.text}`):k.target==="setimmediate"?v.postMessage(k):D==="callHandler"?s[k.Qb](...k.args):D&&x(`worker sent an unknown command ${D}`)},v.onerror=k=>{throw x(`worker sent an error! ${k.filename}:${k.lineno}: ${k.message}`),k};var _,M=[];for(_ of[])s.propertyIsEnumerable(_)&&M.push(_);v.postMessage({Bb:"load",Rb:M,kc:T,lc:E})});function Gr(){var v=new Worker((()=>{let h=URL;return self.location.href>"file:"&&self.location.href<"file;"?new h("ort.bundle.min.mjs",self.location.href):new URL(self.location.href)})(),{type:"module",workerData:"em-pthread",name:"em-pthread"});It.push(v)}var Rs=v=>{oe();var h=we()[v+52>>>2>>>0];v=we()[v+56>>>2>>>0],bi(h,h-v),Ys(h)},Ns=(v,h)=>{Ye=0,v=vi(v,h),0<Ye?S=v:Js(v)};class js{constructor(h){this.Ib=h-24}}function Us(v,h,_){var M=new js(v>>>=0);throw h>>>=0,_>>>=0,we()[M.Ib+16>>>2>>>0]=0,we()[M.Ib+4>>>2>>>0]=h,we()[M.Ib+8>>>2>>>0]=_,v}function vt(v,h,_,M){return u?ze(2,1,v,h,_,M):jn(v,h,_,M)}function jn(v,h,_,M){if(v>>>=0,_>>>=0,M>>>=0,d===void 0)return 6;var k=[];return u&&k.length===0?vt(v,h>>>=0,_,M):(v={ec:_,Ab:v,Hb:M,Mb:k},u?(v.Bb="spawnThread",postMessage(v,k),0):dt(v))}var Un=typeof TextDecoder<"u"?new TextDecoder:void 0,Bt=(v,h=0,_=NaN)=>{var M=(h>>>=0)+_;for(_=h;v[_]&&!(_>=M);)++_;if(16<_-h&&v.buffer&&Un)return Un.decode(v.buffer instanceof ArrayBuffer?v.subarray(h,_):v.slice(h,_));for(M="";h<_;){var k=v[h++];if(128&k){var D=63&v[h++];if((224&k)==192)M+=String.fromCharCode((31&k)<<6|D);else{var Q=63&v[h++];65536>(k=(240&k)==224?(15&k)<<12|D<<6|Q:(7&k)<<18|D<<12|Q<<6|63&v[h++])?M+=String.fromCharCode(k):(k-=65536,M+=String.fromCharCode(55296|k>>10,56320|1023&k))}}else M+=String.fromCharCode(k)}return M},Ot=(v,h)=>(v>>>=0)?Bt(U(),v,h):"";function z(v,h,_){return u?ze(3,1,v,h,_):0}function se(v,h){if(u)return ze(4,1,v,h)}var G=v=>{for(var h=0,_=0;_<v.length;++_){var M=v.charCodeAt(_);127>=M?h++:2047>=M?h+=2:55296<=M&&57343>=M?(h+=4,++_):h+=3}return h},ee=(v,h,_)=>{var M=U();if(h>>>=0,0<_){var k=h;_=h+_-1;for(var D=0;D<v.length;++D){var Q=v.charCodeAt(D);if(55296<=Q&&57343>=Q&&(Q=65536+((1023&Q)<<10)|1023&v.charCodeAt(++D)),127>=Q){if(h>=_)break;M[h++>>>0]=Q}else{if(2047>=Q){if(h+1>=_)break;M[h++>>>0]=192|Q>>6}else{if(65535>=Q){if(h+2>=_)break;M[h++>>>0]=224|Q>>12}else{if(h+3>=_)break;M[h++>>>0]=240|Q>>18,M[h++>>>0]=128|Q>>12&63}M[h++>>>0]=128|Q>>6&63}M[h++>>>0]=128|63&Q}}M[h>>>0]=0,v=h-k}else v=0;return v};function le(v,h){if(u)return ze(5,1,v,h)}function xe(v,h,_){if(u)return ze(6,1,v,h,_)}function Re(v,h,_){return u?ze(7,1,v,h,_):0}function lt(v,h){if(u)return ze(8,1,v,h)}function Et(v,h,_){if(u)return ze(9,1,v,h,_)}function xt(v,h,_,M){if(u)return ze(10,1,v,h,_,M)}function At(v,h,_,M){if(u)return ze(11,1,v,h,_,M)}function ut(v,h,_,M){if(u)return ze(12,1,v,h,_,M)}function Kt(v){if(u)return ze(13,1,v)}function er(v,h){if(u)return ze(14,1,v,h)}function on(v,h,_){if(u)return ze(15,1,v,h,_)}var fn,nr,Hr=()=>Ie(""),gr=v=>{for(var h="";U()[v>>>0];)h+=fn[U()[v++>>>0]];return h},Yr={},Mn={};function br(v,h,_={}){return function(M,k,D={}){var Q=k.name;if(!M)throw new nr(`type "${Q}" must have a positive integer typeid pointer`);if(Mn.hasOwnProperty(M)){if(D.Sb)return;throw new nr(`Cannot register type '${Q}' twice`)}Mn[M]=k,Yr.hasOwnProperty(M)&&(k=Yr[M],delete Yr[M],k.forEach(ue=>ue()))}(v,h,_)}var Wn=(v,h,_)=>{switch(h){case 1:return _?M=>F()[M>>>0]:M=>U()[M>>>0];case 2:return _?M=>re()[M>>>1>>>0]:M=>me()[M>>>1>>>0];case 4:return _?M=>J()[M>>>2>>>0]:M=>we()[M>>>2>>>0];case 8:return _?M=>K[M>>>3]:M=>Y[M>>>3];default:throw new TypeError(`invalid integer width (${h}): ${v}`)}};function ns(v,h,_){_>>>=0,br(v>>>=0,{name:h=gr(h>>>0),fromWireType:M=>M,toWireType:function(M,k){if(typeof k!="bigint"&&typeof k!="number")throw k=k===null?"null":(M=typeof k)=="object"||M==="array"||M==="function"?k.toString():""+k,new TypeError(`Cannot convert "${k}" to ${this.name}`);return typeof k=="number"&&(k=BigInt(k)),k},Cb:Or,readValueFromPointer:Wn(h,_,h.indexOf("u")==-1),Db:null})}var Or=8;function mn(v,h,_,M){br(v>>>=0,{name:h=gr(h>>>0),fromWireType:function(k){return!!k},toWireType:function(k,D){return D?_:M},Cb:Or,readValueFromPointer:function(k){return this.fromWireType(U()[k>>>0])},Db:null})}var _n=[],$r=[];function Cn(v){9<(v>>>=0)&&--$r[v+1]==0&&($r[v]=void 0,_n.push(v))}var Xt=v=>{if(!v)throw new nr("Cannot use deleted val. handle = "+v);return $r[v]},sr=v=>{switch(v){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let h=_n.pop()||$r.length;return $r[h]=v,$r[h+1]=1,h}};function ln(v){return this.fromWireType(we()[v>>>2>>>0])}var Ms={name:"emscripten::val",fromWireType:v=>{var h=Xt(v);return Cn(v),h},toWireType:(v,h)=>sr(h),Cb:Or,readValueFromPointer:ln,Db:null};function gn(v){return br(v>>>0,Ms)}var Ve=(v,h)=>{switch(h){case 4:return function(_){return this.fromWireType(je()[_>>>2>>>0])};case 8:return function(_){return this.fromWireType(Ge()[_>>>3>>>0])};default:throw new TypeError(`invalid float width (${h}): ${v}`)}};function qe(v,h,_){_>>>=0,br(v>>>=0,{name:h=gr(h>>>0),fromWireType:M=>M,toWireType:(M,k)=>k,Cb:Or,readValueFromPointer:Ve(h,_),Db:null})}function at(v,h,_,M,k){if(v>>>=0,_>>>=0,h=gr(h>>>0),k===-1&&(k=4294967295),k=ue=>ue,M===0){var D=32-8*_;k=ue=>ue<<D>>>D}var Q=h.includes("unsigned")?function(ue,_e){return _e>>>0}:function(ue,_e){return _e};br(v,{name:h,fromWireType:k,toWireType:Q,Cb:Or,readValueFromPointer:Wn(h,_,M!==0),Db:null})}function mr(v,h,_){function M(D){var Q=we()[D>>>2>>>0];return D=we()[D+4>>>2>>>0],new k(F().buffer,D,Q)}var k=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][h];br(v>>>=0,{name:_=gr(_>>>0),fromWireType:M,Cb:Or,readValueFromPointer:M},{Sb:!0})}function Ts(v,h){br(v>>>=0,{name:h=gr(h>>>0),fromWireType:function(_){for(var M,k=we()[_>>>2>>>0],D=_+4,Q=D,ue=0;ue<=k;++ue){var _e=D+ue;ue!=k&&U()[_e>>>0]!=0||(Q=Ot(Q,_e-Q),M===void 0?M=Q:(M+="\0",M+=Q),Q=_e+1)}return un(_),M},toWireType:function(_,M){M instanceof ArrayBuffer&&(M=new Uint8Array(M));var k=typeof M=="string";if(!(k||M instanceof Uint8Array||M instanceof Uint8ClampedArray||M instanceof Int8Array))throw new nr("Cannot pass non-string to std::string");var D=k?G(M):M.length,Q=bn(4+D+1),ue=Q+4;if(we()[Q>>>2>>>0]=D,k)ee(M,ue,D+1);else if(k)for(k=0;k<D;++k){var _e=M.charCodeAt(k);if(255<_e)throw un(Q),new nr("String has UTF-16 code units that do not fit in 8 bits");U()[ue+k>>>0]=_e}else for(k=0;k<D;++k)U()[ue+k>>>0]=M[k];return _!==null&&_.push(un,Q),Q},Cb:Or,readValueFromPointer:ln,Db(_){un(_)}})}var On=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Es=(v,h)=>{for(var _=v>>1,M=_+h/2;!(_>=M)&&me()[_>>>0];)++_;if(32<(_<<=1)-v&&On)return On.decode(U().slice(v,_));for(_="",M=0;!(M>=h/2);++M){var k=re()[v+2*M>>>1>>>0];if(k==0)break;_+=String.fromCharCode(k)}return _},Vn=(v,h,_)=>{if(_??(_=2147483647),2>_)return 0;var M=h;_=(_-=2)<2*v.length?_/2:v.length;for(var k=0;k<_;++k){var D=v.charCodeAt(k);re()[h>>>1>>>0]=D,h+=2}return re()[h>>>1>>>0]=0,h-M},ui=v=>2*v.length,di=(v,h)=>{for(var _=0,M="";!(_>=h/4);){var k=J()[v+4*_>>>2>>>0];if(k==0)break;++_,65536<=k?(k-=65536,M+=String.fromCharCode(55296|k>>10,56320|1023&k)):M+=String.fromCharCode(k)}return M},ci=(v,h,_)=>{if(h>>>=0,_??(_=2147483647),4>_)return 0;var M=h;_=M+_-4;for(var k=0;k<v.length;++k){var D=v.charCodeAt(k);if(55296<=D&&57343>=D&&(D=65536+((1023&D)<<10)|1023&v.charCodeAt(++k)),J()[h>>>2>>>0]=D,(h+=4)+4>_)break}return J()[h>>>2>>>0]=0,h-M},ge=v=>{for(var h=0,_=0;_<v.length;++_){var M=v.charCodeAt(_);55296<=M&&57343>=M&&++_,h+=4}return h};function R(v,h,_){if(v>>>=0,h>>>=0,_=gr(_>>>=0),h===2)var M=Es,k=Vn,D=ui,Q=ue=>me()[ue>>>1>>>0];else h===4&&(M=di,k=ci,D=ge,Q=ue=>we()[ue>>>2>>>0]);br(v,{name:_,fromWireType:ue=>{for(var _e,Te=we()[ue>>>2>>>0],Ne=ue+4,nt=0;nt<=Te;++nt){var ft=ue+4+nt*h;nt!=Te&&Q(ft)!=0||(Ne=M(Ne,ft-Ne),_e===void 0?_e=Ne:(_e+="\0",_e+=Ne),Ne=ft+h)}return un(ue),_e},toWireType:(ue,_e)=>{if(typeof _e!="string")throw new nr(`Cannot pass non-string to C++ string type ${_}`);var Te=D(_e),Ne=bn(4+Te+h);return we()[Ne>>>2>>>0]=Te/h,k(_e,Ne+4,Te+h),ue!==null&&ue.push(un,Ne),Ne},Cb:Or,readValueFromPointer:ln,Db(ue){un(ue)}})}function X(v,h){br(v>>>=0,{Tb:!0,name:h=gr(h>>>0),Cb:0,fromWireType:()=>{},toWireType:()=>{}})}function ae(v){ks(v>>>0,!l,1,!o,131072,!1),Pn()}var he=v=>{if(!pe)try{if(v(),!(0<Ye))try{u?Js(S):Wt(S)}catch(h){h instanceof Ee||h=="unwind"||C(0,h)}}catch(h){h instanceof Ee||h=="unwind"||C(0,h)}};function fe(v){v>>>=0,typeof Atomics.jc=="function"&&(Atomics.jc(J(),v>>>2,v).value.then(ke),v+=128,Atomics.store(J(),v>>>2,1))}var ke=()=>{var v=Qs();v&&(fe(v),he(Hi))};function He(v,h){(v>>>=0)==h>>>0?setTimeout(ke):u?postMessage({Gb:v,Bb:"checkMailbox"}):(v=Sr[v])&&v.postMessage({Bb:"checkMailbox"})}var et=[];function Ze(v,h,_,M,k){for(h>>>=0,M/=2,et.length=M,_=k>>>0>>>3,k=0;k<M;k++)et[k]=K[_+2*k]?K[_+2*k+1]:Ge()[_+2*k+1>>>0];return(h?Le[h]:wt[v])(...et)}var ot=()=>{Ye=0};function St(v){v>>>=0,u?postMessage({Bb:"cleanupThread",hc:v}):an(Sr[v])}function Jt(v){}var qt=(v,h)=>{var _=Mn[v];if(_===void 0)throw v=La(v),_=gr(v),un(v),new nr(`${h} has unknown type ${_}`);return _},Mr=(v,h,_)=>{var M=[];return v=v.toWireType(M,_),M.length&&(we()[h>>>2>>>0]=sr(M)),v};function ir(v,h,_){return h>>>=0,_>>>=0,v=Xt(v>>>0),h=qt(h,"emval::as"),Mr(h,_,v)}function Wr(v,h){return h>>>=0,v=Xt(v>>>0),(h=qt(h,"emval::as")).toWireType(null,v)}var Dr=v=>{try{v()}catch(h){Ie(h)}},dr=0,pr=null,Kr=0,Zr=[],wr={},Br={},wn=0,Qr=null,Gn=[];function qr(v){return function(h){if(!pe){if(dr===0){var _=!1,M=!1;h((k=0)=>{if(!pe&&(Kr=k,_=!0,M)){dr=2,Dr(()=>Qi(pr)),typeof MainLoop<"u"&&MainLoop.Pb&&MainLoop.resume(),k=!1;try{var D=function(){var _e=J()[pr+8>>>2>>>0];return _e=mt[Br[_e]],--Ye,_e()}()}catch(_e){D=_e,k=!0}var Q=!1;if(!pr){var ue=Qr;ue&&(Qr=null,(k?ue.reject:ue.resolve)(D),Q=!0)}if(k&&!Q)throw D}}),M=!0,_||(dr=1,pr=function(){var k=bn(65548),D=k+12;we()[k>>>2>>>0]=D,we()[k+4>>>2>>>0]=D+65536,D=Zr[0];var Q=wr[D];return Q===void 0&&(Q=wn++,wr[D]=Q,Br[Q]=D),D=Q,J()[k+8>>>2>>>0]=D,k}(),typeof MainLoop<"u"&&MainLoop.Pb&&MainLoop.pause(),Dr(()=>Ki(pr)))}else dr===2?(dr=0,Dr(Xi),un(pr),pr=null,Gn.forEach(he)):Ie(`invalid state: ${dr}`);return Kr}}(h=>{v().then(h)})}function Dn(v){return v>>>=0,qr(async()=>{var h=await Xt(v);return sr(h)})}var Tr=[];function kr(v,h,_,M){return _>>>=0,M>>>=0,(v=Tr[v>>>0])(null,h=Xt(h>>>0),_,M)}var Lr={},yr=v=>{var h=Lr[v];return h===void 0?gr(v):h};function yn(v,h,_,M,k){return _>>>=0,M>>>=0,k>>>=0,(v=Tr[v>>>0])(h=Xt(h>>>0),h[_=yr(_)],M,k)}var Ps=()=>typeof globalThis=="object"?globalThis:Function("return this")();function pi(v){return(v>>>=0)==0?sr(Ps()):(v=yr(v),sr(Ps()[v]))}var Ws=v=>{var h=Tr.length;return Tr.push(v),h},lo=(v,h)=>{for(var _=Array(v),M=0;M<v;++M)_[M]=qt(we()[h+4*M>>>2>>>0],"parameter "+M);return _},Sa=(v,h)=>Object.defineProperty(h,"name",{value:v});function ka(v,h,_){var M=(h=lo(v,h>>>0)).shift();v--;var k=`return function (obj, func, destructorsRef, args) {
`,D=0,Q=[];_===0&&Q.push("obj");for(var ue=["retType"],_e=[M],Te=0;Te<v;++Te)Q.push("arg"+Te),ue.push("argType"+Te),_e.push(h[Te]),k+=`  var arg${Te} = argType${Te}.readValueFromPointer(args${D?"+"+D:""});
`,D+=h[Te].Cb;return k+=`  var rv = ${_===1?"new func":"func.call"}(${Q.join(", ")});
`,M.Tb||(ue.push("emval_returnValue"),_e.push(Mr),k+=`  return emval_returnValue(retType, destructorsRef, rv);
`),ue.push(k+`};
`),v=function(Ne){var nt=Function;if(!(nt instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof nt} which is not a function`);var ft=Sa(nt.name||"unknownFunctionName",function(){});return ft.prototype=nt.prototype,ft=new ft,(Ne=nt.apply(ft,Ne))instanceof Object?Ne:ft}(ue)(..._e),_=`methodCaller<(${h.map(Ne=>Ne.name).join(", ")}) => ${M.name}>`,Ws(Sa(_,v))}function uo(v){return v=yr(v>>>0),sr(s[v])}function co(v,h){return h>>>=0,v=Xt(v>>>0),h=Xt(h),sr(v[h])}function Vs(v){9<(v>>>=0)&&($r[v+1]+=1)}function po(){return sr([])}function ho(v){v=Xt(v>>>0);for(var h=Array(v.length),_=0;_<v.length;_++)h[_]=v[_];return sr(h)}function fo(v){return sr(yr(v>>>0))}function mo(){return sr({})}function _o(v){for(var h=Xt(v>>>=0);h.length;){var _=h.pop();h.pop()(_)}Cn(v)}function Gs(v,h,_){h>>>=0,_>>>=0,v=Xt(v>>>0),h=Xt(h),_=Xt(_),v[h]=_}function go(v,h){return h>>>=0,v=(v=qt(v>>>0,"_emval_take_value")).readValueFromPointer(h),sr(v)}function wo(v,h){v=-9007199254740992>v||9007199254740992<v?NaN:Number(v),h>>>=0,v=new Date(1e3*v),J()[h>>>2>>>0]=v.getUTCSeconds(),J()[h+4>>>2>>>0]=v.getUTCMinutes(),J()[h+8>>>2>>>0]=v.getUTCHours(),J()[h+12>>>2>>>0]=v.getUTCDate(),J()[h+16>>>2>>>0]=v.getUTCMonth(),J()[h+20>>>2>>>0]=v.getUTCFullYear()-1900,J()[h+24>>>2>>>0]=v.getUTCDay(),v=(v.getTime()-Date.UTC(v.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,J()[h+28>>>2>>>0]=v}var Ia=v=>v%4==0&&(v%100!=0||v%400==0),Fi=[0,31,60,91,121,152,182,213,244,274,305,335],Bi=[0,31,59,90,120,151,181,212,243,273,304,334];function Li(v,h){v=-9007199254740992>v||9007199254740992<v?NaN:Number(v),h>>>=0,v=new Date(1e3*v),J()[h>>>2>>>0]=v.getSeconds(),J()[h+4>>>2>>>0]=v.getMinutes(),J()[h+8>>>2>>>0]=v.getHours(),J()[h+12>>>2>>>0]=v.getDate(),J()[h+16>>>2>>>0]=v.getMonth(),J()[h+20>>>2>>>0]=v.getFullYear()-1900,J()[h+24>>>2>>>0]=v.getDay();var _=(Ia(v.getFullYear())?Fi:Bi)[v.getMonth()]+v.getDate()-1|0;J()[h+28>>>2>>>0]=_,J()[h+36>>>2>>>0]=-60*v.getTimezoneOffset(),_=new Date(v.getFullYear(),6,1).getTimezoneOffset();var M=new Date(v.getFullYear(),0,1).getTimezoneOffset();v=0|(_!=M&&v.getTimezoneOffset()==Math.min(M,_)),J()[h+32>>>2>>>0]=v}function yo(v){v>>>=0;var h=new Date(J()[v+20>>>2>>>0]+1900,J()[v+16>>>2>>>0],J()[v+12>>>2>>>0],J()[v+8>>>2>>>0],J()[v+4>>>2>>>0],J()[v>>>2>>>0],0),_=J()[v+32>>>2>>>0],M=h.getTimezoneOffset(),k=new Date(h.getFullYear(),6,1).getTimezoneOffset(),D=new Date(h.getFullYear(),0,1).getTimezoneOffset(),Q=Math.min(D,k);return 0>_?J()[v+32>>>2>>>0]=+(k!=D&&Q==M):0<_!=(Q==M)&&(k=Math.max(D,k),h.setTime(h.getTime()+6e4*((0<_?Q:k)-M))),J()[v+24>>>2>>>0]=h.getDay(),_=(Ia(h.getFullYear())?Fi:Bi)[h.getMonth()]+h.getDate()-1|0,J()[v+28>>>2>>>0]=_,J()[v>>>2>>>0]=h.getSeconds(),J()[v+4>>>2>>>0]=h.getMinutes(),J()[v+8>>>2>>>0]=h.getHours(),J()[v+12>>>2>>>0]=h.getDate(),J()[v+16>>>2>>>0]=h.getMonth(),J()[v+20>>>2>>>0]=h.getYear(),v=h.getTime(),BigInt(isNaN(v)?-1:v/1e3)}function Aa(v,h,_,M,k,D,Q){return u?ze(16,1,v,h,_,M,k,D,Q):-52}function hi(v,h,_,M,k,D){if(u)return ze(17,1,v,h,_,M,k,D)}var Cs={},Ss=()=>performance.timeOrigin+performance.now();function Oa(v,h){if(u)return ze(18,1,v,h);if(Cs[v]&&(clearTimeout(Cs[v].id),delete Cs[v]),!h)return 0;var _=setTimeout(()=>{delete Cs[v],he(()=>yi(v,performance.timeOrigin+performance.now()))},h);return Cs[v]={id:_,qc:h},0}function Ri(v,h,_,M){v>>>=0,h>>>=0,_>>>=0,M>>>=0;var k=new Date().getFullYear(),D=new Date(k,0,1).getTimezoneOffset();k=new Date(k,6,1).getTimezoneOffset();var Q=Math.max(D,k);we()[v>>>2>>>0]=60*Q,J()[h>>>2>>>0]=+(D!=k),v=(h=ue=>{var _e=Math.abs(ue);return`UTC${0<=ue?"-":"+"}${String(Math.floor(_e/60)).padStart(2,"0")}${String(_e%60).padStart(2,"0")}`})(D),h=h(k),k<D?(ee(v,_,17),ee(h,M,17)):(ee(v,M,17),ee(h,_,17))}var _l=()=>Date.now();function bo(v,h,_){return 0<=v&&3>=v?(v===0?v=Date.now():v=performance.timeOrigin+performance.now(),K[_>>>0>>>3]=BigInt(Math.round(1e6*v)),0):28}var fi=[],qs=(v,h)=>{fi.length=0;for(var _;_=U()[v++>>>0];){var M=_!=105;h+=(M&=_!=112)&&h%8?4:0,fi.push(_==112?we()[h>>>2>>>0]:_==106?K[h>>>3]:_==105?J()[h>>>2>>>0]:Ge()[h>>>3>>>0]),h+=M?8:4}return fi};function mi(v,h,_){return v>>>=0,h=qs(h>>>0,_>>>0),Le[v](...h)}function vo(v,h,_){return v>>>=0,h=qs(h>>>0,_>>>0),Le[v](...h)}var xo=()=>{};function $o(v,h){return x(Ot(v>>>0,h>>>0))}var Mo=()=>{throw Ye+=1,"unwind"};function To(){return 4294901760}var Eo=()=>navigator.hardwareConcurrency;function Po(){return Ie("Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER"),0}function Co(v){v>>>=0;var h=U().length;if(v<=h||4294901760<v)return!1;for(var _=1;4>=_;_*=2){var M=h*(1+.2/_);M=Math.min(M,v+100663296);e:{M=(Math.min(4294901760,65536*Math.ceil(Math.max(v,M)/65536))-T.buffer.byteLength+65535)/65536|0;try{T.grow(M),oe();var k=1;break e}catch{}k=void 0}if(k)return!0}return!1}var Hs=()=>(Ie("Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER"),0),qn={},Hn=v=>{v.forEach(h=>{Hs()})};function Ni(){var v=Error().stack.toString().split(`
`);return v[0]=="Error"&&v.shift(),Hn(v),qn.Lb=Hs(),qn.cc=v,qn.Lb}function So(v,h,_){if(v>>>=0,h>>>=0,qn.Lb==v)var M=qn.cc;else(M=Error().stack.toString().split(`
`))[0]=="Error"&&M.shift(),Hn(M);for(var k=3;M[k]&&Hs()!=v;)++k;for(v=0;v<_&&M[v+k];++v)J()[h+4*v>>>2>>>0]=Hs();return v}var _i,Sn={},gi=()=>{if(!_i){var v,h={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:"./this.program"};for(v in Sn)Sn[v]===void 0?delete h[v]:h[v]=Sn[v];var _=[];for(v in h)_.push(`${v}=${h[v]}`);_i=_}return _i};function Da(v,h){if(u)return ze(19,1,v,h);v>>>=0,h>>>=0;var _=0;return gi().forEach((M,k)=>{var D=h+_;for(k=we()[v+4*k>>>2>>>0]=D,D=0;D<M.length;++D)F()[k++>>>0]=M.charCodeAt(D);F()[k>>>0]=0,_+=M.length+1}),0}function ji(v,h){if(u)return ze(20,1,v,h);v>>>=0,h>>>=0;var _=gi();we()[v>>>2>>>0]=_.length;var M=0;return _.forEach(k=>M+=k.length+1),we()[h>>>2>>>0]=M,0}function za(v){return u?ze(21,1,v):52}function Ui(v,h,_,M){return u?ze(22,1,v,h,_,M):52}function wi(v,h,_,M){return u?ze(23,1,v,h,_,M):70}var Fa=[null,[],[]];function Ba(v,h,_,M){if(u)return ze(24,1,v,h,_,M);h>>>=0,_>>>=0,M>>>=0;for(var k=0,D=0;D<_;D++){var Q=we()[h>>>2>>>0],ue=we()[h+4>>>2>>>0];h+=8;for(var _e=0;_e<ue;_e++){var Te=U()[Q+_e>>>0],Ne=Fa[v];Te===0||Te===10?((v===1?b:x)(Bt(Ne)),Ne.length=0):Ne.push(Te)}k+=ue}return we()[M>>>2>>>0]=k,0}u||function(){for(var v=s.numThreads-1;v--;)Gr();Je.unshift(()=>{Oe++,function(h){u?h():Promise.all(It.map(cr)).then(h)}(()=>Me())})}();for(var Wi=Array(256),Ks=0;256>Ks;++Ks)Wi[Ks]=String.fromCharCode(Ks);fn=Wi,nr=s.BindingError=class extends Error{constructor(v){super(v),this.name="BindingError"}},s.InternalError=class extends Error{constructor(v){super(v),this.name="InternalError"}},$r.push(0,1,void 0,1,null,1,!0,1,!1,1),s.count_emval_handles=()=>$r.length/2-5-_n.length;var mt,wt=[rt,ct,vt,z,se,le,xe,Re,lt,Et,xt,At,ut,Kt,er,on,Aa,hi,Oa,Da,ji,za,Ui,wi,Ba];(async function(){function v(M,k){return mt=M.exports,mt=function(){var D=mt,Q={};for(let[ue,_e]of Object.entries(D))Q[ue]=typeof _e=="function"?(...Te)=>{Zr.push(ue);try{return _e(...Te)}finally{pe||(Zr.pop(),pr&&dr===1&&Zr.length===0&&(dr=0,Ye+=1,Dr(xi),typeof Fibers<"u"&&Fibers.rc()))}}:_e;return Q}(),mt=function(){var D=mt,Q=_e=>Te=>_e(Te)>>>0,ue=_e=>()=>_e()>>>0;return(D=Object.assign({},D)).Da=Q(D.Da),D.fb=ue(D.fb),D.hb=Q(D.hb),D.tb=Q(D.tb),D.ub=ue(D.ub),D.__cxa_get_exception_ptr=Q(D.__cxa_get_exception_ptr),D}(),Ur.push(mt.ib),E=k,Me(),mt}Oe++;var h=$e();if(s.instantiateWasm)return new Promise(M=>{s.instantiateWasm(h,(k,D)=>{v(k,D),M(k.exports)})});if(u)return new Promise(M=>{Ae=k=>{var D=new WebAssembly.Instance(k,$e());M(v(D,k))}});be??(be=s.locateFile?s.locateFile?s.locateFile("ort-wasm-simd-threaded.jsep.wasm",y):y+"ort-wasm-simd-threaded.jsep.wasm":new URL(""+new URL("ort-wasm-simd-threaded.jsep-B0T3yYHD.wasm",self.location.href).href,self.location.href).href);try{var _=await async function(M){var k=be;if(!de&&typeof WebAssembly.instantiateStreaming=="function"&&!L(k))try{var D=fetch(k,{credentials:"same-origin"});return await WebAssembly.instantiateStreaming(D,M)}catch(Q){x(`wasm streaming compile failed: ${Q}`),x("falling back to ArrayBuffer instantiation")}return async function(Q,ue){try{var _e=await async function(Te){if(!de)try{var Ne=await m(Te);return new Uint8Array(Ne)}catch{}if(Te==be&&de)Te=new Uint8Array(de);else{if(!f)throw"both async and sync fetching of the wasm failed";Te=f(Te)}return Te}(Q);return await WebAssembly.instantiate(_e,ue)}catch(Te){x(`failed to asynchronously prepare wasm: ${Te}`),Ie(Te)}}(k,M)}(h);return v(_.instance,_.module)}catch(M){return i(M),Promise.reject(M)}})();var La=v=>(La=mt.Da)(v),Vi=()=>(Vi=mt.Ea)();s._OrtInit=(v,h)=>(s._OrtInit=mt.Fa)(v,h),s._OrtGetLastError=(v,h)=>(s._OrtGetLastError=mt.Ga)(v,h),s._OrtCreateSessionOptions=(v,h,_,M,k,D,Q,ue,_e,Te)=>(s._OrtCreateSessionOptions=mt.Ha)(v,h,_,M,k,D,Q,ue,_e,Te),s._OrtAppendExecutionProvider=(v,h,_,M,k)=>(s._OrtAppendExecutionProvider=mt.Ia)(v,h,_,M,k),s._OrtAddFreeDimensionOverride=(v,h,_)=>(s._OrtAddFreeDimensionOverride=mt.Ja)(v,h,_),s._OrtAddSessionConfigEntry=(v,h,_)=>(s._OrtAddSessionConfigEntry=mt.Ka)(v,h,_),s._OrtReleaseSessionOptions=v=>(s._OrtReleaseSessionOptions=mt.La)(v),s._OrtCreateSession=(v,h,_)=>(s._OrtCreateSession=mt.Ma)(v,h,_),s._OrtReleaseSession=v=>(s._OrtReleaseSession=mt.Na)(v),s._OrtGetInputOutputCount=(v,h,_)=>(s._OrtGetInputOutputCount=mt.Oa)(v,h,_),s._OrtGetInputOutputMetadata=(v,h,_,M)=>(s._OrtGetInputOutputMetadata=mt.Pa)(v,h,_,M),s._OrtFree=v=>(s._OrtFree=mt.Qa)(v),s._OrtCreateTensor=(v,h,_,M,k,D)=>(s._OrtCreateTensor=mt.Ra)(v,h,_,M,k,D),s._OrtGetTensorData=(v,h,_,M,k)=>(s._OrtGetTensorData=mt.Sa)(v,h,_,M,k),s._OrtReleaseTensor=v=>(s._OrtReleaseTensor=mt.Ta)(v),s._OrtCreateRunOptions=(v,h,_,M)=>(s._OrtCreateRunOptions=mt.Ua)(v,h,_,M),s._OrtAddRunConfigEntry=(v,h,_)=>(s._OrtAddRunConfigEntry=mt.Va)(v,h,_),s._OrtReleaseRunOptions=v=>(s._OrtReleaseRunOptions=mt.Wa)(v),s._OrtCreateBinding=v=>(s._OrtCreateBinding=mt.Xa)(v),s._OrtBindInput=(v,h,_)=>(s._OrtBindInput=mt.Ya)(v,h,_),s._OrtBindOutput=(v,h,_,M)=>(s._OrtBindOutput=mt.Za)(v,h,_,M),s._OrtClearBoundOutputs=v=>(s._OrtClearBoundOutputs=mt._a)(v),s._OrtReleaseBinding=v=>(s._OrtReleaseBinding=mt.$a)(v),s._OrtRunWithBinding=(v,h,_,M,k)=>(s._OrtRunWithBinding=mt.ab)(v,h,_,M,k),s._OrtRun=(v,h,_,M,k,D,Q,ue)=>(s._OrtRun=mt.bb)(v,h,_,M,k,D,Q,ue),s._OrtEndProfiling=v=>(s._OrtEndProfiling=mt.cb)(v),s._JsepOutput=(v,h,_)=>(s._JsepOutput=mt.db)(v,h,_),s._JsepGetNodeName=v=>(s._JsepGetNodeName=mt.eb)(v);var Qs=()=>(Qs=mt.fb)(),un=s._free=v=>(un=s._free=mt.gb)(v),bn=s._malloc=v=>(bn=s._malloc=mt.hb)(v),ks=(v,h,_,M,k,D)=>(ks=mt.kb)(v,h,_,M,k,D),Xs=()=>(Xs=mt.lb)(),Gi=(v,h,_,M,k)=>(Gi=mt.mb)(v,h,_,M,k),qi=v=>(qi=mt.nb)(v),Js=v=>(Js=mt.ob)(v),yi=(v,h)=>(yi=mt.pb)(v,h),Hi=()=>(Hi=mt.qb)(),bi=(v,h)=>(bi=mt.rb)(v,h),Ys=v=>(Ys=mt.sb)(v),Is=v=>(Is=mt.tb)(v),As=()=>(As=mt.ub)(),vi=s.dynCall_ii=(v,h)=>(vi=s.dynCall_ii=mt.vb)(v,h),Ki=v=>(Ki=mt.wb)(v),xi=()=>(xi=mt.xb)(),Qi=v=>(Qi=mt.yb)(v),Xi=()=>(Xi=mt.zb)();return s.stackSave=()=>As(),s.stackRestore=v=>Ys(v),s.stackAlloc=v=>Is(v),s.setValue=function(v,h,_="i8"){switch(_.endsWith("*")&&(_="*"),_){case"i1":case"i8":F()[v>>>0]=h;break;case"i16":re()[v>>>1>>>0]=h;break;case"i32":J()[v>>>2>>>0]=h;break;case"i64":K[v>>>3]=BigInt(h);break;case"float":je()[v>>>2>>>0]=h;break;case"double":Ge()[v>>>3>>>0]=h;break;case"*":we()[v>>>2>>>0]=h;break;default:Ie(`invalid type for setValue: ${_}`)}},s.getValue=function(v,h="i8"){switch(h.endsWith("*")&&(h="*"),h){case"i1":case"i8":return F()[v>>>0];case"i16":return re()[v>>>1>>>0];case"i32":return J()[v>>>2>>>0];case"i64":return K[v>>>3];case"float":return je()[v>>>2>>>0];case"double":return Ge()[v>>>3>>>0];case"*":return we()[v>>>2>>>0];default:Ie(`invalid type for getValue: ${h}`)}},s.UTF8ToString=Ot,s.stringToUTF8=ee,s.lengthBytesUTF8=G,function v(){if(0<Oe)Se=v;else if(u)n(s),H();else{for(;0<Je.length;)Je.shift()(s);0<Oe?Se=v:(s.calledRun=!0,pe||(H(),n(s)))}}(),s.PTR_SIZE=4,a}),g1=sp,w1=(t=(e=globalThis.self)==null?void 0:e.name)==null?void 0:t.startsWith("em-pthread"),w1&&sp()}),ip,ap,y1,Rn,b1,eu,v1,x1,op,$1,lp,M1,up,T1,dp=Qe(()=>{ep(),ip=typeof location>"u"?void 0:location.origin,ap=self.location.href>"file:"&&self.location.href<"file;",y1=()=>{{if(ap){let e=URL;return new URL(new e("ort.bundle.min.mjs",self.location.href).href,ip).href}return self.location.href}},Rn=y1(),b1=()=>{if(Rn&&!Rn.startsWith("blob:"))return Rn.substring(0,Rn.lastIndexOf("/")+1)},eu=(e,t)=>{try{let r=t??Rn;return(r?new URL(e,r):new URL(e)).origin===ip}catch{return!1}},v1=(e,t)=>{let r=t??Rn;try{return(r?new URL(e,r):new URL(e)).href}catch{return}},x1=(e,t)=>`${t??"./"}${e}`,op=async e=>{let t=await(await fetch(e,{credentials:"same-origin"})).blob();return URL.createObjectURL(t)},$1=async e=>(await import(e)).default,lp=(FD(),Zo(f1)).default,M1=async()=>{if(!Rn)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(eu(Rn))return[void 0,lp()];let e=await op(Rn);return[e,lp(e)]},up=(BD(),Zo(_1)).default,T1=async(e,t,r)=>{if(!e&&!t&&up&&Rn&&eu(Rn))return[void 0,up];{let n="ort-wasm-simd-threaded.jsep.mjs",i=e??v1(n,t),s=r&&i&&!eu(i,t),a=s?await op(i):i??x1(n,t);return[s?a:void 0,await $1(a)]}}}),cp,tu,nl,pp,E1,P1,C1,hp,xr,ya=Qe(()=>{dp(),tu=!1,nl=!1,pp=!1,E1=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},P1=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},C1=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,19,1,17,0,65,1,253,15,65,2,253,15,65,3,253,15,253,147,2,11]))}catch{return!1}},hp=async e=>{if(tu)return Promise.resolve();if(nl)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(pp)throw new Error("previous call to 'initializeWebAssembly()' failed.");nl=!0;let t=e.initTimeout,r=e.numThreads;if(e.simd!==!1){if(e.simd==="relaxed"){if(!C1())throw new Error("Relaxed WebAssembly SIMD is not supported in the current environment.")}else if(!P1())throw new Error("WebAssembly SIMD is not supported in the current environment.")}let n=E1();r>1&&!n&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+r+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),e.numThreads=r=1);let i=e.wasmPaths,s=typeof i=="string"?i:void 0,a=i==null?void 0:i.mjs,o=(a==null?void 0:a.href)??a,l=i==null?void 0:i.wasm,u=(l==null?void 0:l.href)??l,d=e.wasmBinary,[c,p]=await T1(o,s,r>1),m=!1,f=[];if(t>0&&f.push(new Promise(w=>{setTimeout(()=>{m=!0,w()},t)})),f.push(new Promise((w,C)=>{let y={numThreads:r};if(d)y.wasmBinary=d;else if(u||s)y.locateFile=g=>u??s+g;else if(o&&o.indexOf("blob:")!==0)y.locateFile=g=>new URL(g,o).href;else if(c){let g=b1();g&&(y.locateFile=P=>g+P)}p(y).then(g=>{nl=!1,tu=!0,cp=g,w(),c&&URL.revokeObjectURL(c)},g=>{nl=!1,pp=!0,C(g)})})),await Promise.race(f),m)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},xr=()=>{if(tu&&cp)return cp;throw new Error("WebAssembly is not initialized yet.")}}),ws,ru,fr,fp=Qe(()=>{ya(),ws=(e,t)=>{let r=xr(),n=r.lengthBytesUTF8(e)+1,i=r._malloc(n);return r.stringToUTF8(e,i,n),t.push(i),i},ru=(e,t,r,n)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([i,s])=>{let a=t?t+i:i;if(typeof s=="object")ru(s,a+".",r,n);else if(typeof s=="string"||typeof s=="number")n(a,s.toString());else if(typeof s=="boolean")n(a,s?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof s}`)})},fr=e=>{let t=xr(),r=t.stackSave();try{let n=t.PTR_SIZE,i=t.stackAlloc(2*n);t._OrtGetLastError(i,i+n);let s=Number(t.getValue(i,n===4?"i32":"i64")),a=t.getValue(i+n,"*"),o=a?t.UTF8ToString(a):"";throw new Error(`${e} ERROR_CODE: ${s}, ERROR_MESSAGE: ${o}`)}finally{t.stackRestore(r)}}}),S1,LD=Qe(()=>{ya(),fp(),S1=e=>{let t=xr(),r=0,n=[],i=e||{};try{if((e==null?void 0:e.logSeverityLevel)===void 0)i.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if((e==null?void 0:e.logVerbosityLevel)===void 0)i.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);(e==null?void 0:e.terminate)===void 0&&(i.terminate=!1);let s=0;return(e==null?void 0:e.tag)!==void 0&&(s=ws(e.tag,n)),r=t._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,s),r===0&&fr("Can't create run options."),(e==null?void 0:e.extra)!==void 0&&ru(e.extra,"",new WeakSet,(a,o)=>{let l=ws(a,n),u=ws(o,n);t._OrtAddRunConfigEntry(r,l,u)!==0&&fr(`Can't set a run config entry: ${a} - ${o}.`)}),[r,n]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),n.forEach(a=>t._free(a)),s}}}),k1,I1,A1,sl,O1,D1,RD=Qe(()=>{ya(),fp(),k1=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},I1=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},A1=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},sl=(e,t,r,n)=>{let i=ws(t,n),s=ws(r,n);xr()._OrtAddSessionConfigEntry(e,i,s)!==0&&fr(`Can't set a session config entry: ${t} - ${r}.`)},O1=async(e,t,r)=>{for(let n of t){let i=typeof n=="string"?n:n.name,s=[];switch(i){case"webnn":if(i="WEBNN",typeof n!="string"){let d=n==null?void 0:n.deviceType;d&&sl(e,"deviceType",d,r)}break;case"webgpu":if(i="JS",typeof n!="string"){let d=n;if(d!=null&&d.preferredLayout){if(d.preferredLayout!=="NCHW"&&d.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${d.preferredLayout}`);sl(e,"preferredLayout",d.preferredLayout,r)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${i}`)}let a=ws(i,r),o=s.length,l=0,u=0;if(o>0){l=xr()._malloc(o*xr().PTR_SIZE),r.push(l),u=xr()._malloc(o*xr().PTR_SIZE),r.push(u);for(let d=0;d<o;d++)xr().setValue(l+d*xr().PTR_SIZE,s[d][0],"*"),xr().setValue(u+d*xr().PTR_SIZE,s[d][1],"*")}await xr()._OrtAppendExecutionProvider(e,a,l,u,o)!==0&&fr(`Can't append execution provider: ${i}.`)}},D1=async e=>{let t=xr(),r=0,n=[],i=e||{};A1(i);try{let s=k1(i.graphOptimizationLevel??"all"),a=I1(i.executionMode??"sequential"),o=typeof i.logId=="string"?ws(i.logId,n):0,l=i.logSeverityLevel??2;if(!Number.isInteger(l)||l<0||l>4)throw new Error(`log serverity level is not valid: ${l}`);let u=i.logVerbosityLevel??0;if(!Number.isInteger(u)||u<0||u>4)throw new Error(`log verbosity level is not valid: ${u}`);let d=typeof i.optimizedModelFilePath=="string"?ws(i.optimizedModelFilePath,n):0;if(r=t._OrtCreateSessionOptions(s,!!i.enableCpuMemArena,!!i.enableMemPattern,a,!!i.enableProfiling,0,o,l,u,d),r===0&&fr("Can't create session options."),i.executionProviders&&await O1(r,i.executionProviders,n),i.enableGraphCapture!==void 0){if(typeof i.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${i.enableGraphCapture}`);sl(r,"enableGraphCapture",i.enableGraphCapture.toString(),n)}if(i.freeDimensionOverrides)for(let[c,p]of Object.entries(i.freeDimensionOverrides)){if(typeof c!="string")throw new Error(`free dimension override name must be a string: ${c}`);if(typeof p!="number"||!Number.isInteger(p)||p<0)throw new Error(`free dimension override value must be a non-negative integer: ${p}`);let m=ws(c,n);t._OrtAddFreeDimensionOverride(r,m,p)!==0&&fr(`Can't set a free dimension override: ${c} - ${p}.`)}return i.extra!==void 0&&ru(i.extra,"",new WeakSet,(c,p)=>{sl(r,c,p,n)}),[r,n]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r)!==0&&fr("Can't release session options."),n.forEach(a=>t._free(a)),s}}}),no,ii,ba,mp,nu,_p,gp,wp,kt=Qe(()=>{no=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${e}`)}},ii=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${e}`)}},ba=(e,t)=>{let r=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][e],n=typeof t=="number"?t:t.reduce((i,s)=>i*s,1);return r>0?Math.ceil(n*r):void 0},mp=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},nu=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},_p=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",gp=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint64"||e==="int8"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",wp=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;case"ml-tensor":return 5;default:throw new Error(`unsupported data location: ${e}`)}}}),yp,z1=Qe(()=>{ep(),yp=async e=>{if(typeof e=="string"){let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),n=r?parseInt(r,10):0;if(n<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let i=t.body.getReader(),s;try{s=new ArrayBuffer(n)}catch(o){if(o instanceof RangeError){let l=Math.ceil(n/65536);s=new WebAssembly.Memory({initial:l,maximum:l}).buffer}else throw o}let a=0;for(;;){let{done:o,value:l}=await i.read();if(o)break;let u=l.byteLength;new Uint8Array(s,a,u).set(l),a+=u}return new Uint8Array(s,0,n)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}}),F1,B1,L1,R1,bp,N1,Zt,ai=Qe(()=>{kt(),F1=["V","I","W","E","F"],B1=(e,t)=>{console.log(`[${F1[e]},${new Date().toISOString()}]${t}`)},bp=(e,t)=>{L1=e,R1=t},N1=(e,t)=>{let r=nu(e),n=nu(L1);r>=n&&B1(r,typeof t=="function"?t():t)},Zt=(...e)=>{R1&&N1(...e)}}),j1,so,Ce,su,U1,W1,V1,Nt=Qe(()=>{j1=class{static calcMatMulShape(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]}},so=class{static calcShape(e,t,r=!1){let n=e.length,i=t.length;if(n===0)return t;if(i===0)return e;let s=Math.max(e.length,t.length),a=new Array(s);if(r){if(n<2||i<2)return;let o=j1.calcMatMulShape([e[n-2],e[n-1]],[t[i-2],t[i-1]]);if(o===void 0)return;[a[s-2],a[s-1]]=o}for(let o=r?3:1;o<=s;o++){let l=n-o<0?1:e[n-o],u=i-o<0?1:t[i-o];if(l!==u&&l>1&&u>1)return;let d=Math.max(l,u);if(l&&u)a[s-o]=Math.max(l,u);else{if(d>1)return;a[s-o]=0}}return a}static isValidBroadcast(e,t){let r=e.length,n=t.length;if(r>n)return!1;for(let i=1;i<=r;i++)if(e[r-i]!==1&&e[r-i]!==t[n-i])return!1;return!0}},Ce=class Vu{static size(t){return Vu.getSizeFromDimensionRange(t,0,t.length)}static convertShape(t,r=4){let n=t.length;if(n===0)return[];let i=new Array(n),s=n-1;for(;s>=0;){if(t[s]%r===0){i[s]=t[s]/r;break}if(r%t[s]!==0)throw new Error("cannot convert shape");i[s]=1,r/=t[s],s--}for(s--;s>=0;s--)i[s]=t[s];return i}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return Vu.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return Vu.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,n){let i=1;for(let s=r;s<n;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");i*=Number(t[s])}return i}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let n=new Array(r);n[r-1]=1,n[r-2]=t[r-1];for(let i=r-3;i>=0;--i)n[i]=n[i+1]*t[i+1];return n}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(n=>this.normalizeAxis(n,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(n=>t[n]):t.slice().reverse()}static padShape(t,r){let n=t.length;return t.map((i,s)=>i+r[s]+r[s+n])}static areEqual(t,r){return t.length!==r.length?!1:t.every((n,i)=>n===r[i])}},su=class bl{static adjustPoolAttributes(t,r,n,i,s,a){if(!t&&n.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let o=0;o<r.length-2;o++)o>=n.length?n.push(r[o+2]):n[o]=r[o+2];for(let o=0;o<n.length;o++)if(o<i.length){if(i[o]<0)throw new Error("strides should be greater than or equal to 1")}else i.push(1);for(let o=0;o<n.length;o++)if(o<s.length){if(s[o]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let o=0;o<n.length*2;o++)if(o<a.length){if(a[o]<0)throw new Error("pad should be greater than or equal to 1")}else a.push(0);for(let o=0;o<n.length;o++){if(n[o]<=0)throw new Error("kernel shapes need to be greater than 0");if(a[o]>=n[o]||a[o+n.length]>=n[o])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,n,i,s,a,o){if(o){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(i.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let l=0;l<t.length-2;l++)bl.adjustPadAndReturnShape(t[l+(a?1:2)],r[l],n[l],i[l],s,l,l+t.length-2,o)}}static computePoolOutputShape(t,r,n,i,s,a,o){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let l=[r[0],r[1]];return bl.computeShapeHelper(t,r,l,n,i,s,a,o),l}static computeConvOutputShape(t,r,n,i,s,a,o){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let l=[t[0],r[0]];return bl.computeShapeHelper(!1,t,l,n,i,s,a,o),l}static computeShapeHelper(t,r,n,i,s,a,o,l){if(t)for(let u=0;u<r.length-2;u++)n.push(1);else for(let u=0;u<r.length-2;u++)n.push(bl.adjustPadAndReturnShape(r[u+2],i[u],s[u],a[u],o,u,u+r.length-2,l))}static adjustPadAndReturnShape(t,r,n,i,s,a,o,l){let u=n*(i-1)+1;if(l&&l!=="NOTSET")switch(l){case"VALID":return s[a]=0,s[o]=0,Math.floor((t-u)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(n!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let d=((t+r-1)/r-1)*r+i-t;return s[a]=Math.floor(l==="SAME_LOWER"?(d+1)/2:d/2),s[o]=d-s[a],Math.floor((t+d-i)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[a]+s[o]-u)/r+1)}},U1=class{static getShapeOfGemmResult(e,t,r,n,i){if(e.length!==2||r.length!==2)throw new Error("shape need to be of size 2");let s,a,o;t?(s=e[1],a=e[0]):(s=e[0],a=e[1]);let l=-1;if(n?(o=r[0],l=1):(o=r[1],l=0),r[l]!==a)throw new Error("dimension mismatch");if(s<=0||o<=0||a<=0)throw new Error("invalid shape specified");if(i&&!so.isValidBroadcast(i,[s,o]))throw new Error("gemm: invalid bias shape for broadcast");return[s,o,a]}},W1=-34028234663852886e22,V1=34028234663852886e22}),vp,G1=Qe(()=>{kt(),vp=(e,t)=>new(mp(t))(e)}),xp,$p,q1,Mp,H1,Tp,Ep,Pp,K1,Q1,ND=Qe(()=>{ai(),xp=(e,t=!0)=>{if(e.byteLength%8!==0)throw new Error("Invalid Uint8Array length - must be a multiple of 8 (BigInt).");let r=e.byteLength/8,n=new BigInt64Array(e.buffer,e.byteOffset,r),i=new Int32Array(r);for(let s=0;s<r;s++){let a=n[s];if(a>2147483647n||a<-2147483648n)throw new Error(`Overflow occurred when converting BigInt to Int32 at index ${s}: ${a}`);i[s]=Number(a)}return t?new Uint8Array(i.buffer):i},$p=(e,t=!0)=>{if(e.byteLength%4!==0)throw new Error("Invalid Uint8Array length - must be a multiple of 4 (Int32).");let r=e.byteLength/4,n=new Int32Array(e.buffer,e.byteOffset,r),i=BigInt64Array.from(n,BigInt);return t?new Uint8Array(i.buffer):i},q1=1,Mp=()=>q1++,H1=new Map([["float32",32],["float16",16],["int32",32],["uint32",32],["int64",64],["uint64",64],["int8",8],["uint8",8],["int4",4],["uint4",4]]),Tp=(e,t)=>{let r=H1.get(e);if(!r)throw new Error("Unsupported data type.");return t.length>0?Math.ceil(t.reduce((n,i)=>n*i)*r/8):0},Ep=class{constructor(e){this.shouldConvertInt64toInt32=!1,this.isInt64ToInt32Converted=!1;let{sessionId:t,context:r,tensor:n,dataType:i,shape:s,shouldConvertInt64toInt32:a=!1}=e;this.sessionId=t,this.mlContext=r,this.mlTensor=n,this.dataType=i,this.tensorShape=s,this.shouldConvertInt64toInt32=a}get tensor(){return this.mlTensor}get type(){return this.dataType}get shape(){return this.tensorShape}get byteLength(){return Tp(this.dataType,this.tensorShape)}destroy(){Zt("verbose",()=>"[WebNN] TensorWrapper.destroy"),this.mlTensor.destroy()}write(e){this.mlContext.writeTensor(this.mlTensor,e)}async read(e,t){if(e){let r=await this.mlContext.readTensor(this.mlTensor),n=$p(new Uint8Array(r));if(t){(t instanceof ArrayBuffer?new Uint8Array(t):new Uint8Array(t.buffer,t.byteOffset,t.byteLength)).set(n);return}else return n.buffer}else return t?this.mlContext.readTensor(this.mlTensor,t):this.mlContext.readTensor(this.mlTensor)}canReuseTensor(e,t,r){return this.mlContext===e&&this.dataType===t&&this.tensorShape.length===r.length&&this.tensorShape.every((n,i)=>n===r[i])}setIsInt64ToInt32Converted(e){this.isInt64ToInt32Converted=e}},Pp=class{constructor(e,t){this.tensorManager=e,this.wrapper=t}get tensorWrapper(){return this.wrapper}releaseTensor(){this.tensorWrapper&&(this.tensorManager.releaseTensor(this.tensorWrapper),this.wrapper=void 0)}async ensureTensor(e,t,r,n){let i=t,s=this.tensorManager.getMLContext(e),a=i==="int64"&&!s.opSupportLimits().input.dataTypes.includes("int64");if(a&&(i="int32",Zt("verbose",()=>"[WebNN] TensorIdTracker.ensureTensor: convert dataType from int64 to int32")),this.wrapper){if(this.wrapper.canReuseTensor(s,i,r))return this.wrapper.tensor;if(n){if(this.wrapper.byteLength!==Tp(i,r))throw new Error("Unable to copy data to tensor with different size.");this.activeUpload=new Uint8Array(await this.wrapper.read())}this.tensorManager.releaseTensor(this.wrapper)}let o=typeof MLTensorUsage>"u"?void 0:MLTensorUsage.READ|MLTensorUsage.WRITE;return this.wrapper=await this.tensorManager.getCachedTensor(e,i,r,o,!0,!0,a),n&&this.activeUpload&&(this.wrapper.write(this.activeUpload),this.activeUpload=void 0),this.wrapper.tensor}upload(e){let t=e;if(this.wrapper)if(this.wrapper.shouldConvertInt64toInt32&&(t=xp(e,!0),this.wrapper.setIsInt64ToInt32Converted(!0)),t.byteLength===this.wrapper.byteLength){this.wrapper.write(t);return}else Zt("verbose",()=>"Data size does not match tensor size. Releasing tensor."),this.releaseTensor();this.activeUpload?this.activeUpload.set(t):this.activeUpload=new Uint8Array(t)}async download(e){var t,r,n;if(this.activeUpload){let i=(t=this.wrapper)!=null&&t.isInt64ToInt32Converted?$p(this.activeUpload):this.activeUpload;if(e){e instanceof ArrayBuffer?new Uint8Array(e).set(i):new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(i);return}else return i.buffer}if(!this.wrapper)throw new Error("Tensor has not been created.");return e?this.wrapper.read((r=this.wrapper)==null?void 0:r.shouldConvertInt64toInt32,e):this.wrapper.read((n=this.wrapper)==null?void 0:n.shouldConvertInt64toInt32)}},K1=class{constructor(e){this.backend=e,this.tensorTrackersById=new Map,this.freeTensors=[],this.externalTensors=new Set}getMLContext(e){let t=this.backend.getMLContext(e);if(!t)throw new Error("MLContext not found for session.");return t}reserveTensorId(){let e=Mp();return this.tensorTrackersById.set(e,new Pp(this)),e}releaseTensorId(e){let t=this.tensorTrackersById.get(e);t&&(this.tensorTrackersById.delete(e),t.tensorWrapper&&this.releaseTensor(t.tensorWrapper))}async ensureTensor(e,t,r,n,i){Zt("verbose",()=>`[WebNN] TensorManager.ensureTensor {tensorId: ${t}, dataType: ${r}, shape: ${n}, copyOld: ${i}}`);let s=this.tensorTrackersById.get(t);if(!s)throw new Error("Tensor not found.");return s.ensureTensor(e,r,n,i)}upload(e,t){let r=this.tensorTrackersById.get(e);if(!r)throw new Error("Tensor not found.");r.upload(t)}async download(e,t){Zt("verbose",()=>`[WebNN] TensorManager.download {tensorId: ${e}, dstBuffer: ${t==null?void 0:t.byteLength}}`);let r=this.tensorTrackersById.get(e);if(!r)throw new Error("Tensor not found.");return r.download(t)}releaseTensorsForSession(e){for(let t of this.freeTensors)t.sessionId===e&&t.destroy();this.freeTensors=this.freeTensors.filter(t=>t.sessionId!==e)}registerTensor(e,t,r,n){let i=this.getMLContext(e),s=Mp(),a=new Ep({sessionId:e,context:i,tensor:t,dataType:r,shape:n});return this.tensorTrackersById.set(s,new Pp(this,a)),this.externalTensors.add(a),s}async getCachedTensor(e,t,r,n,i,s,a=!1){let o=this.getMLContext(e);for(let[u,d]of this.freeTensors.entries())if(d.canReuseTensor(o,t,r)){Zt("verbose",()=>`[WebNN] Reusing tensor {dataType: ${t}, shape: ${r}}`);let c=this.freeTensors.splice(u,1)[0];return c.sessionId=e,c}Zt("verbose",()=>`[WebNN] MLContext.createTensor {dataType: ${t}, shape: ${r}}`);let l=await o.createTensor({dataType:t,shape:r,dimensions:r,usage:n,writable:i,readable:s});return new Ep({sessionId:e,context:o,tensor:l,dataType:t,shape:r,shouldConvertInt64toInt32:a})}releaseTensor(e){this.externalTensors.has(e)&&this.externalTensors.delete(e),this.freeTensors.push(e)}},Q1=(...e)=>new K1(...e)}),iu,X1,J1,jD=Qe(()=>{kt(),ya(),G1(),ND(),ai(),iu=new Map([[1,"float32"],[10,"float16"],[6,"int32"],[12,"uint32"],[7,"int64"],[13,"uint64"],[22,"int4"],[21,"uint4"],[3,"int8"],[2,"uint8"],[9,"uint8"]]),X1=(e,t)=>{if(e===t)return!0;if(e===void 0||t===void 0)return!1;let r=Object.keys(e).sort(),n=Object.keys(t).sort();return r.length===n.length&&r.every((i,s)=>i===n[s]&&e[i]===t[i])},J1=class{constructor(e){this.tensorManager=Q1(this),this.mlContextBySessionId=new Map,this.sessionIdsByMLContext=new Map,this.mlContextCache=[],this.sessionGraphInputs=new Map,this.temporaryGraphInputs=[],this.temporarySessionTensorIds=new Map,bp(e.logLevel,!!e.debug)}get currentSessionId(){if(this.activeSessionId===void 0)throw new Error("No active session");return this.activeSessionId}onRunStart(e){Zt("verbose",()=>`[WebNN] onRunStart {sessionId: ${e}}`),this.activeSessionId=e}onRunEnd(e){Zt("verbose",()=>`[WebNN] onRunEnd {sessionId: ${e}}`);let t=this.temporarySessionTensorIds.get(e);if(t){for(let r of t)Zt("verbose",()=>`[WebNN] releasing temporary tensor {tensorId: ${r}}`),this.tensorManager.releaseTensorId(r);this.temporarySessionTensorIds.delete(e),this.activeSessionId=void 0}}async createMLContext(e){if(e instanceof GPUDevice){let r=this.mlContextCache.findIndex(n=>n.gpuDevice===e);if(r!==-1)return this.mlContextCache[r].mlContext;{let n=await navigator.ml.createContext(e);return this.mlContextCache.push({gpuDevice:e,mlContext:n}),n}}else if(e===void 0){let r=this.mlContextCache.findIndex(n=>n.options===void 0&&n.gpuDevice===void 0);if(r!==-1)return this.mlContextCache[r].mlContext;{let n=await navigator.ml.createContext();return this.mlContextCache.push({mlContext:n}),n}}let t=this.mlContextCache.findIndex(r=>X1(r.options,e));if(t!==-1)return this.mlContextCache[t].mlContext;{let r=await navigator.ml.createContext(e);return this.mlContextCache.push({options:e,mlContext:r}),r}}registerMLContext(e,t){this.mlContextBySessionId.set(e,t);let r=this.sessionIdsByMLContext.get(t);r||(r=new Set,this.sessionIdsByMLContext.set(t,r)),r.add(e),this.temporaryGraphInputs.length>0&&(this.sessionGraphInputs.set(e,this.temporaryGraphInputs),this.temporaryGraphInputs=[])}onReleaseSession(e){this.sessionGraphInputs.delete(e);let t=this.mlContextBySessionId.get(e);if(!t)return;this.tensorManager.releaseTensorsForSession(e),this.mlContextBySessionId.delete(e);let r=this.sessionIdsByMLContext.get(t);if(r.delete(e),r.size===0){this.sessionIdsByMLContext.delete(t);let n=this.mlContextCache.findIndex(i=>i.mlContext===t);n!==-1&&this.mlContextCache.splice(n,1)}}getMLContext(e){return this.mlContextBySessionId.get(e)}reserveTensorId(){return this.tensorManager.reserveTensorId()}releaseTensorId(e){Zt("verbose",()=>`[WebNN] releaseTensorId {tensorId: ${e}}`),this.tensorManager.releaseTensorId(e)}async ensureTensor(e,t,r,n,i){let s=iu.get(r);if(!s)throw new Error(`Unsupported ONNX data type: ${r}`);return this.tensorManager.ensureTensor(e??this.currentSessionId,t,s,n,i)}async createTemporaryTensor(e,t,r){Zt("verbose",()=>`[WebNN] createTemporaryTensor {onnxDataType: ${t}, shape: ${r}}`);let n=iu.get(t);if(!n)throw new Error(`Unsupported ONNX data type: ${t}`);let i=this.tensorManager.reserveTensorId();await this.tensorManager.ensureTensor(e,i,n,r,!1);let s=this.temporarySessionTensorIds.get(e);return s?s.push(i):this.temporarySessionTensorIds.set(e,[i]),i}uploadTensor(e,t){if(!xr().shouldTransferToMLTensor)throw new Error("Trying to upload to a MLTensor while shouldTransferToMLTensor is false");Zt("verbose",()=>`[WebNN] uploadTensor {tensorId: ${e}, data: ${t.byteLength}}`),this.tensorManager.upload(e,t)}async downloadTensor(e,t){return this.tensorManager.download(e,t)}createMLTensorDownloader(e,t){return async()=>{let r=await this.tensorManager.download(e);return vp(r,t)}}registerMLTensor(e,t,r,n){let i=iu.get(r);if(!i)throw new Error(`Unsupported ONNX data type: ${r}`);let s=this.tensorManager.registerTensor(e,t,i,n);return Zt("verbose",()=>`[WebNN] registerMLTensor {tensor: ${t}, dataType: ${i}, dimensions: ${n}} -> {tensorId: ${s}}`),s}registerMLConstant(e,t,r,n,i,s,a=!1){if(!s)throw new Error("External mounted files are not available.");let o=e;e.startsWith("./")&&(o=e.substring(2));let l=s.get(o);if(!l)throw new Error(`File with name ${o} not found in preloaded files.`);if(t+r>l.byteLength)throw new Error("Out of bounds: data offset and length exceed the external file data size.");let u=l.slice(t,t+r).buffer,d;switch(i.dataType){case"float32":d=new Float32Array(u);break;case"float16":d=typeof Float16Array<"u"&&Float16Array.from?new Float16Array(u):new Uint16Array(u);break;case"int32":d=new Int32Array(u);break;case"uint32":d=new Uint32Array(u);break;case"int64":a?(d=xp(new Uint8Array(u),!1),i.dataType="int32"):d=new BigInt64Array(u);break;case"uint64":d=new BigUint64Array(u);break;case"int8":d=new Int8Array(u);break;case"int4":case"uint4":case"uint8":d=new Uint8Array(u);break;default:throw new Error(`Unsupported data type: ${i.dataType} in creating WebNN Constant from external data.`)}return Zt("verbose",()=>`[WebNN] registerMLConstant {dataType: ${i.dataType}, shape: ${i.shape}}} ${a?"(Note: it was int64 data type and registered to int32 as workaround)":""}`),n.constant(i,d)}registerGraphInput(e){this.temporaryGraphInputs.push(e)}isGraphInput(e,t){let r=this.sessionGraphInputs.get(e);return r?r.includes(t):!1}isInt64Supported(e){var t;return!!((t=this.mlContextBySessionId.get(e))!=null&&t.opSupportLimits().input.dataTypes.includes("int64"))}flush(){}}}),Cp=Qe(()=>{}),Sp,au,ou,Y1,Z1,kp,Ip,ex,tx,UD=Qe(()=>{ai(),Cp(),Sp=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),au=[],ou=e=>Math.ceil(Number(e)/16)*16,Y1=e=>{for(let t=0;t<au.length;t++){let r=au[t];if(e<=r)return r}return Math.ceil(e/16)*16},Z1=1,kp=()=>Z1++,Ip=async(e,t,r,n)=>{let i=ou(r),s=e.device.createBuffer({size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let a=e.getCommandEncoder();e.endComputePass(),a.copyBufferToBuffer(t,0,s,0,i),e.flush(),await s.mapAsync(GPUMapMode.READ);let o=s.getMappedRange();if(n){let l=n();return l.set(new Uint8Array(o,0,r)),l}else return new Uint8Array(o.slice(0,r))}finally{s.destroy()}},ex=class{constructor(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersPending=[],this.capturedPendingBuffers=new Map;for(let[t]of Sp)au.push(t),this.freeBuffers.set(t,[]),this.freeUniformBuffers.set(t,[]);this.sessionCount=0}upload(e,t){let r=t.buffer,n=t.byteOffset,i=t.byteLength,s=ou(i),a=this.storageCache.get(e);if(!a)throw new Error("gpu data for uploading does not exist");if(Number(a.originalSize)!==i)throw new Error(`inconsistent data size. gpu data size=${a.originalSize}, data size=${i}`);let o=this.backend.device.createBuffer({mappedAtCreation:!0,size:s,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),l=o.getMappedRange();new Uint8Array(l).set(new Uint8Array(r,n,i)),o.unmap();let u=this.backend.device.createCommandEncoder();u.copyBufferToBuffer(o,0,a.gpuData.buffer,0,s),this.backend.device.queue.submit([u.finish()]),o.destroy(),Zt("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${e})`)}memcpy(e,t){let r=this.storageCache.get(e);if(!r)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(t);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(r.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let i=ou(r.originalSize),s=this.backend.getCommandEncoder();this.backend.endComputePass(),s.copyBufferToBuffer(r.gpuData.buffer,0,n.gpuData.buffer,0,i)}registerExternalBuffer(e,t,r){let n;if(r){if(n=r[0],e===r[1])return Zt("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${n}, buffer is the same, skip.`),n;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`)}else n=kp();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:e},originalSize:t}),Zt("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${t}) => id=${n}, registered.`),n}unregisterExternalBuffer(e){e!==void 0&&(this.storageCache.delete(e),Zt("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${e}`))}create(e,t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let r=Y1(e),n,i=(t&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,s=(t&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(i||s){let o=(i?this.freeBuffers:this.freeUniformBuffers).get(r);o?o.length>0?n=o.pop():n=this.backend.device.createBuffer({size:r,usage:t}):n=this.backend.device.createBuffer({size:r,usage:t})}else n=this.backend.device.createBuffer({size:r,usage:t});let a={id:kp(),type:0,buffer:n};return this.storageCache.set(a.id,{gpuData:a,originalSize:Number(e)}),Zt("verbose",()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${a.id}`),a}get(e){var t;return(t=this.storageCache.get(e))==null?void 0:t.gpuData}release(e){let t=typeof e=="bigint"?Number(e):e,r=this.storageCache.get(t);if(!r){if(this.storageCache.size===0)return 0;throw new Error("releasing data does not exist")}return Zt("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(e,t){let r=this.storageCache.get(Number(e));if(!r)throw new Error("data does not exist");await Ip(this.backend,r.gpuData.buffer,r.originalSize,t)}refreshPendingBuffers(){if(this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let e of this.buffersPending){let t=Sp.get(e.size);if((e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let r=this.freeBuffers.get(e.size)||[];t===void 0||r.length>=t?e.destroy():r.push(e)}else if((e.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let r=this.freeUniformBuffers.get(e.size)||[];t===void 0||r.length>=t?e.destroy():r.push(e)}else e.destroy()}this.buffersPending=[]}else{let e=this.capturedPendingBuffers.get(this.backend.currentSessionId);e||(e=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,e));for(let t of this.buffersPending)e.push(t);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.freeUniformBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.storageCache.forEach(e=>{e.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(e=>{e.forEach(t=>{t.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onCreateSession(){this.sessionCount+=1}onReleaseSession(e){let t=this.capturedPendingBuffers.get(e);t&&(t.forEach(r=>{r.destroy()}),this.capturedPendingBuffers.delete(e)),this.sessionCount-=1,this.sessionCount===0&&(Zt("warning",()=>"[WebGPU] Clearing webgpu buffer cache"),this.storageCache.forEach(r=>{r.gpuData.buffer.destroy()}),this.storageCache=new Map)}},tx=(...e)=>new ex(...e)}),rx,lr,jr=Qe(()=>{rx=class{constructor(e){Object.assign(this,e)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(e=>`${this[e]}`).join(";")),this.key}},lr=e=>new rx(e)}),io,lu,sn,$n,bt,Fr,Ap,ao,Ai,gt,il,Be,ht,nx,Op,sx,ix,Ut=Qe(()=>{kt(),Nt(),io=64,lu=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(Number(e)){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];case 22:return"i32";case 21:return"u32";default:throw new Error(`Unknown data type: ${e}`)}},sn=(e,t=1)=>{let r=lu(e,t);return typeof r=="string"?r:r[0]},$n=(e,t=1)=>{let r=lu(e,t);return typeof r=="string"?r:r[1]},bt=(...e)=>{let t=[];return e.forEach(r=>{r.length!==0&&t.push({type:12,data:r},{type:12,data:Ce.computeStrides(r)})}),t},Fr=e=>e%4===0?4:e%2===0?2:1,Ap=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,ao=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}<f32>(${r})`,Ai=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,gt=(e,t,r,n)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?n==="f16"?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:n==="f16"?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,il=(e,t,r,n,i)=>{let s=typeof r=="number",a=s?r:r.length,o=[...new Array(a).keys()],l=a<2?"u32":a<=4?`vec${a}<u32>`:`array<u32, ${a}>`,u=lu(t,i),d=typeof u=="string"?u:u[1],c=typeof u=="string"?u:u[0],p={indices:l,value:d,storage:c,tensor:t},m=L=>typeof L=="string"?L:`${L}u`,f={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},w=s?"uniforms.":"",C=`${w}${e}_shape`,y=`${w}${e}_strides`,g="";for(let L=0;L<a-1;L++)g+=`
    let dim${L} = current / ${gt(y,L,a)};
    let rest${L} = current % ${gt(y,L,a)};
    indices[${L}] = dim${L};
    current = rest${L};
    `;g+=`indices[${a-1}] = current;`;let P=a<2?"":`
  fn o2i_${e}(offset: u32) -> ${p.indices} {
    var indices: ${p.indices};
    var current = offset;
    ${g}
    return indices;
  }`,b=L=>(f.offsetToIndices=!0,a<2?L:`o2i_${e}(${L})`),x=[];if(a>=2)for(let L=a-1;L>=0;L--)x.push(`${gt(y,L,a)} * (indices[${L}])`);let T=a<2?"":`
  fn i2o_${e}(indices: ${p.indices}) -> u32 {
    return ${x.join("+")};
  }`,E=L=>(f.indicesToOffset=!0,a<2?L:`i2o_${e}(${L})`),S=(...L)=>a===0?"0u":`${p.indices}(${L.map(m).join(",")})`,O=(L,F)=>a<2?`${L}`:`${gt(L,F,a)}`,B=(L,F,U)=>a<2?`${L}=${U};`:`${gt(L,F,a)}=${U};`,V={},W=(L,F)=>{f.broadcastedIndicesToOffset=!0;let U=`${F.name}broadcastedIndicesTo${e}Offset`;if(U in V)return`${U}(${L})`;let re=[];for(let me=a-1;me>=0;me--){let J=F.indicesGet("outputIndices",me+F.rank-a);re.push(`${O(y,me)} * (${J} % ${O(C,me)})`)}return V[U]=`fn ${U}(outputIndices: ${F.type.indices}) -> u32 {
             return ${re.length>0?re.join("+"):"0u"};
           }`,`${U}(${L})`},N=(L,F)=>(()=>{if(p.storage===p.value)return`${e}[${L}]=${F};`;if(p.storage==="vec2<u32>"&&p.value==="i32")return`${e}[${L}]=vec2<u32>(u32(${F}), select(0u, 0xFFFFFFFFu, ${F} < 0));`;if(p.storage==="vec2<u32>"&&p.value==="u32")return`${e}[${L}]=vec2<u32>(u32(${F}), 0u);`;if(p.storage==="u32"&&p.value==="vec4<bool>")return`${e}[${L}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${F}));`;throw new Error(`not supported combination of storage type ${p.storage} and value type ${p.value} yet`)})(),te=L=>(()=>{if(p.storage===p.value)return`${e}[${L}]`;if(p.storage==="vec2<u32>"&&p.value==="i32")return`i32(${e}[${L}].x)`;if(p.storage==="vec2<u32>"&&p.value==="u32")return`u32(${e}[${L}].x)`;if(p.storage==="u32"&&p.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${L}] & 0xFFu), bool(${e}[${L}] & 0xFF00u), bool(${e}[${L}] & 0xFF0000u), bool(${e}[${L}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${p.storage} and value type ${p.value} yet`)})(),q=a<2?"":`
  fn get_${e}ByIndices(indices: ${p.indices}) -> ${d} {
    return ${te(`i2o_${e}(indices)`)};
  }`,K=a<2?"":(()=>{let L=o.map(U=>`d${U}: u32`).join(", "),F=o.map(U=>`d${U}`).join(", ");return`
  fn get_${e}(${L}) -> ${d} {
    return get_${e}ByIndices(${S(F)});
  }`})(),Y=(...L)=>{if(L.length!==a)throw new Error(`indices length must be ${a}`);let F=L.map(m).join(",");return a===0?te("0u"):a===1?te(F[0]):(f.get=!0,f.getByIndices=!0,f.indicesToOffset=!0,`get_${e}(${F})`)},Z=L=>a<2?te(L):(f.getByIndices=!0,f.indicesToOffset=!0,`get_${e}ByIndices(${L})`),de=a<2?"":`
  fn set_${e}ByIndices(indices: ${p.indices}, value: ${d}) {
    ${N(`i2o_${e}(indices)`,"value")}
  }`,pe=a<2?"":(()=>{let L=o.map(U=>`d${U}: u32`).join(", "),F=o.map(U=>`d${U}`).join(", ");return`
  fn set_${e}(${L}, value: ${d}) {
    set_${e}ByIndices(${S(F)}, value);
  }`})();return{impl:()=>{let L=[],F=!1;return f.offsetToIndices&&(L.push(P),F=!0),f.indicesToOffset&&(L.push(T),F=!0),f.broadcastedIndicesToOffset&&(Object.values(V).forEach(U=>L.push(U)),F=!0),f.set&&(L.push(pe),F=!0),f.setByIndices&&(L.push(de),F=!0),f.get&&(L.push(K),F=!0),f.getByIndices&&(L.push(q),F=!0),!s&&F&&L.unshift(`const ${C} = ${p.indices}(${r.join(",")});`,`const ${y} = ${p.indices}(${Ce.computeStrides(r).join(",")});`),L.join(`
`)},type:p,offsetToIndices:b,indicesToOffset:E,broadcastedIndicesToOffset:W,indices:S,indicesGet:O,indicesSet:B,set:(...L)=>{if(L.length!==a+1)throw new Error(`indices length must be ${a}`);let F=L[a];if(typeof F!="string")throw new Error("value must be string");let U=L.slice(0,a).map(m).join(",");return a===0?N("0u",F):a===1?N(U[0],F):(f.set=!0,f.setByIndices=!0,f.indicesToOffset=!0,`set_${e}(${U}, ${F})`)},setByOffset:N,setByIndices:(L,F)=>a<2?N(L,F):(f.setByIndices=!0,f.indicesToOffset=!0,`set_${e}ByIndices(${L}, ${F});`),get:Y,getByOffset:te,getByIndices:Z,usage:n,name:e,strides:y,shape:C,rank:a}},Be=(e,t,r,n=1)=>il(e,t,r,"input",n),ht=(e,t,r,n=1)=>il(e,t,r,"output",n),nx=(e,t,r)=>il(e,t,r,"atomicOutput",1),Op=(e,t,r,n=1)=>il(e,t,r,"internal",n),sx=class{constructor(e,t){this.normalizedDispatchGroup=e,this.limits=t,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${typeof e=="number"?`${e}u`:e}) { return; }`}mainStart(e=io){let t=typeof e=="number"?e:e[0],r=typeof e=="number"?1:e[1],n=typeof e=="number"?1:e[2];if(t>this.limits.maxComputeWorkgroupSizeX||r>this.limits.maxComputeWorkgroupSizeY||n>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${t}, ${r}, ${n}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(t*r*n>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${t}, ${r}, ${n}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let i=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,s=i?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,a=i?`let global_idx = global_id.x;
         let workgroup_index = workgroup_id.x;`:`let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
             workgroup_id.y * num_workgroups[0] + workgroup_id.x;
         let global_idx = workgroup_index * ${t*r*n}u + local_idx;`;return`@compute @workgroup_size(${t}, ${r}, ${n})
  fn main(${s}) {
    ${a}
  `}appendVariableUniforms(e){e.rank!==0&&(e.shape.startsWith("uniforms.")&&this.uniforms.push({name:e.shape.replace("uniforms.",""),type:"u32",length:e.rank}),e.strides.startsWith("uniforms.")&&this.uniforms.push({name:e.strides.replace("uniforms.",""),type:"u32",length:e.rank}))}declareVariable(e,t){if(e.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(e),this.appendVariableUniforms(e);let r=e.usage==="input"?"read":"read_write",n=e.usage==="atomicOutput"?"atomic<i32>":e.type.storage;return`@group(0) @binding(${t}) var<storage, ${r}> ${e.name}: array<${n}>;`}declareVariables(...e){return e.map(t=>this.declareVariable(t,this.variableIndex++)).join(`
`)}registerInternalVariable(e){if(e.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(e),this.appendVariableUniforms(e)}registerInternalVariables(...e){return e.forEach(t=>this.registerInternalVariable(t)),this}registerUniform(e,t,r=1){return this.uniforms.push({name:e,type:t,length:r}),this}registerUniforms(e){return this.uniforms=this.uniforms.concat(e),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let e=[];for(let{name:t,type:r,length:n}of this.uniforms)if(n&&n>4)r==="f16"?e.push(`@align(16) ${t}:array<mat2x4<${r}>, ${Math.ceil(n/8)}>`):e.push(`${t}:array<vec4<${r}>, ${Math.ceil(n/4)}>`);else{let i=n==null||n===1?r:`vec${n}<${r}>`;e.push(`${t}:${i}`)}return`
      struct Uniforms { ${e.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(e=>e.impl()).join(`
`)+this.internalVariables.map(e=>e.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let e=t=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(t)];return this.uniforms.map(t=>[e(t.type),t.length??1])}},ix=(e,t)=>new sx(e,t)}),ax,Dp,ox,lx,ux,dx,Nn,cx,px,Oi=Qe(()=>{kt(),Nt(),jr(),Ut(),ax=(e,t)=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.");if(t.length!==0&&t.length!==e[0].dims.length)throw new Error(`perm size ${t.length} does not match input rank ${e[0].dims.length}`)},Dp=(e,t)=>t.length!==0?t:[...new Array(e).keys()].reverse(),ox=(e,t)=>Ce.sortBasedOnPerm(e,Dp(e.length,t)),lx=(e,t,r,n)=>{let i=`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`;for(let s=0;s<t;++s)i+=`a[${e[s]}]=i[${s}];`;return i+="return a;}"},ux=(e,t)=>{let r=[],n=[];for(let i=0;i<e.length;++i)e[i]!==1&&r.push(e[i]),e[t[i]]!==1&&n.push(t[i]);return{newShape:r,newPerm:n}},dx=(e,t)=>{let r=0;for(let n=0;n<e.length;++n)if(t[e[n]]!==1){if(e[n]<r)return!1;r=e[n]}return!0},Nn=(e,t)=>{let r=e.dataType,n=e.dims.length,i=Dp(n,t),s=ox(e.dims,i),a=e.dims,o=s,l=n<2||dx(i,e.dims),u;if(l)return u=f=>{let w=Be("input",r,a,4),C=ht("output",r,o,4);return`
  ${f.registerUniform("output_size","u32").declareVariables(w,C)}
  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    output[global_idx] = input[global_idx];
  }`},{name:"TransposeCopy",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let f=Ce.size(s);return{outputs:[{dims:s,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(f/64/4)},programUniforms:[{type:12,data:Math.ceil(f/4)}]}},getShaderSource:u};let{newShape:d,newPerm:c}=ux(e.dims,i),p=Ce.areEqual(c,[2,3,1]),m=Ce.areEqual(c,[3,1,2]);if(d.length===2||p||m){a=p?[d[0],d[1]*d[2]]:m?[d[0]*d[1],d[2]]:d,o=[a[1],a[0]];let f=16;return u=w=>{let C=Be("a",r,a.length),y=ht("output",r,o.length);return`
  ${w.registerUniform("output_size","u32").declareVariables(C,y)}
  var<workgroup> tile : array<array<${y.type.value}, ${f+1}>, ${f}>;
  ${w.mainStart([f,f,1])}
    let stride = (uniforms.output_shape[1] - 1) / ${f} + 1;
    let workgroup_id_x = workgroup_index % stride;
    let workgroup_id_y = workgroup_index / stride;
    let input_col = workgroup_id_y * ${f}u + local_id.x;
    let input_row = workgroup_id_x * ${f}u + local_id.y;
    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {
      tile[local_id.y][local_id.x] = ${C.getByIndices(`${C.type.indices}(input_row, input_col)`)};
    }
    workgroupBarrier();

    let output_col = workgroup_id_x * ${f}u + local_id.x;
    let output_row = workgroup_id_y * ${f}u + local_id.y;
    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {
      ${y.setByIndices(`${y.type.indices}(output_row, output_col)`,"tile[local_id.x][local_id.y]")}
    }
  }`},{name:"TransposeShared",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let w=Ce.size(s);return{outputs:[{dims:s,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(o[1]/f),y:Math.ceil(o[0]/f)},programUniforms:[{type:12,data:w},...bt(a,o)]}},getShaderSource:u}}return u=f=>{let w=Be("a",r,a.length),C=ht("output",r,o.length);return`
  ${f.registerUniform("output_size","u32").declareVariables(w,C)}

  ${lx(i,n,w,C)}

  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${C.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${C.setByOffset("global_idx",w.getByIndices("aIndices"))}
  }`},{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:["rank"]},getRunData:()=>{let f=Ce.size(s);return{outputs:[{dims:s,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:[{type:12,data:f},...bt(a,o)]}},getShaderSource:u}},cx=(e,t)=>{ax(e.inputs,t.perm),e.compute(Nn(e.inputs[0],t.perm))},px=e=>lr({perm:e.perm})}),hx,fx,mx,_x,gx,wx,yx,bx,vx,xx,ys,$x,Mx,Tx,Ex,Px,Cx,Sx,kx,Ix,Ax,WD=Qe(()=>{kt(),Nt(),Ut(),Fp(),Oi(),hx={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},fx={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},mx={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},_x={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},gx=(e,t)=>{let r=[];for(let n=t-e;n<t;++n)r.push(n);return r},wx=(e,t)=>{let r=[],n=e.length;for(let s=0;s<n;s++)t.indexOf(s)===-1&&r.push(e[s]);let i=t.map(s=>e[s]);return[r,i]},yx=(e,t)=>{let r=e.length+t.length,n=[],i=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?n.push(e[i++]):n.push(1);return n},bx=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},vx=(e,t)=>{let r=[];if(!bx(e,t)){for(let n=0;n<t;++n)e.indexOf(n)===-1&&r.push(n);e.forEach(n=>r.push(n))}return r},xx=(e,t,r,n,i,s,a)=>{let o=r[0].dims,l=Ce.size(s),u=Ce.size(a),d=Be("_A",r[0].dataType,o),c=ht("output",i,s),p=64;l===1&&(p=256);let m=`
          var<workgroup> aBestValues : array<f32, ${p}>;
       `,f=w=>`
        ${w.registerUniform("reduceSize","u32").declareVariables(d,c)}
        ${m}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${w.mainStart(p)}

          let outputIndex = global_idx / ${p};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${mx[n]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${p}) {
           let candidate = f32(${d.getByOffset("offset + k")});
           bestValue = ${hx[n]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${p}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${fx[n]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${c.setByOffset("outputIndex",`${n==="mean"?`${c.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${c.type.storage}(${_x[n]})`}`)};
         }
        }`;return{name:e,shaderCache:{hint:`${t};${p}`,inputDependencies:["type"]},getShaderSource:f,getRunData:()=>({outputs:[{dims:s,dataType:i}],dispatchGroup:{x:l},programUniforms:[{type:12,data:u}]})}},ys=(e,t,r,n)=>{let i=e.inputs.length===1?r:zp(e.inputs,r),s=i.axes;s.length===0&&!i.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((m,f)=>f));let a=Ce.normalizeAxes(s,e.inputs[0].dims.length),o=a,l=e.inputs[0],u=vx(o,e.inputs[0].dims.length);u.length>0&&(l=e.compute(Nn(e.inputs[0],u),{inputs:[0],outputs:[-1]})[0],o=gx(o.length,l.dims.length));let[d,c]=wx(l.dims,o),p=d;i.keepDims&&(p=yx(d,a)),e.compute(xx(t,i.cacheKey,[l],n,e.inputs[0].dataType,p,c),{inputs:[l]})},$x=(e,t)=>{ys(e,"ReduceMeanShared",t,"mean")},Mx=(e,t)=>{ys(e,"ReduceL1Shared",t,"l1")},Tx=(e,t)=>{ys(e,"ReduceL2Shared",t,"l2")},Ex=(e,t)=>{ys(e,"ReduceLogSumExpShared",t,"logSumExp")},Px=(e,t)=>{ys(e,"ReduceMaxShared",t,"max")},Cx=(e,t)=>{ys(e,"ReduceMinShared",t,"min")},Sx=(e,t)=>{ys(e,"ReduceProdShared",t,"prod")},kx=(e,t)=>{ys(e,"ReduceSumShared",t,"sum")},Ix=(e,t)=>{ys(e,"ReduceSumSquareShared",t,"sumSquare")},Ax=(e,t)=>{ys(e,"ReduceLogSumShared",t,"logSum")}}),bs,Ox,uu,zp,vs,Dx,zx,Fx,Bx,Lx,Rx,Nx,jx,Ux,Wx,xs,Vx,Gx,qx,Hx,Kx,Qx,Xx,Jx,Yx,Zx,Fp=Qe(()=>{kt(),Nt(),jr(),Ut(),WD(),bs=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},Ox=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],uu=(e,t,r,n,i,s,a=!1,o=!1)=>{let l=[],u=r[0].dims,d=u.length,c=Ce.normalizeAxes(i,d),p=!o&&c.length===0;u.forEach((w,C)=>{p||c.indexOf(C)>=0?a&&l.push(1):l.push(w)});let m=l.length,f=Ce.size(l);return{name:e,shaderCache:t,getShaderSource:w=>{let C=[],y=Be("_A",r[0].dataType,d),g=ht("output",s,m),P=n(y,g,c),b=P[2];for(let x=0,T=0;x<d;x++)p||c.indexOf(x)>=0?(a&&T++,b=`for(var j${x}: u32 = 0; j${x} < ${u[x]}; j${x}++) {
                  ${P[2].includes("last_index")?`let last_index = j${x};`:""}
                  ${y.indicesSet("input_indices",x,`j${x}`)}
                  ${b}
                }`):(C.push(`${y.indicesSet("input_indices",x,g.indicesGet("output_indices",T))};`),T++);return`

        ${w.registerUniform("output_size","u32").declareVariables(y,g)}

        ${w.mainStart()}
          ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${y.type.indices};
          let output_indices = ${g.offsetToIndices("global_idx")};

          ${C.join(`
`)}
          ${P[0]}       // init ops for reduce max/min
          ${P[1]}
          ${b}
          ${P[3]}
          ${P.length===4?g.setByOffset("global_idx","value"):P.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:l,dataType:s}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:[{type:12,data:f},...bt(u,l)]})}},zp=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),lr({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},vs=(e,t,r,n)=>{let i=e.inputs,s=i.length===1?r:zp(i,r);e.compute(uu(t,{hint:s.cacheKey,inputDependencies:["rank"]},[i[0]],s.noopWithEmptyAxes&&s.axes.length===0?Ox:n,s.axes,i[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},Dx=(e,t)=>{bs(e.inputs),vs(e,"ReduceLogSum",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${r.getByIndices("input_indices")};`,"value = log(value);"])},zx=(e,t)=>{bs(e.inputs),vs(e,"ReduceL1",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${r.getByIndices("input_indices")});`,""])},Fx=(e,t)=>{bs(e.inputs),vs(e,"ReduceL2",t,(r,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${r.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Bx=(e,t)=>{bs(e.inputs),vs(e,"ReduceLogSumExp",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${r.getByIndices("input_indices")});`,"value = log(value);"])},Lx=(e,t)=>{bs(e.inputs),vs(e,"ReduceMax",t,(r,n,i)=>{let s=[];for(let a=0;a<r.rank;a++)(i.indexOf(a)>=0||i.length===0)&&s.push(r.indicesSet("input_indices",a,0));return[`${s.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};`,`value = max(value, ${r.getByIndices("input_indices")});`,""]})},Rx=(e,t)=>{bs(e.inputs),vs(e,"ReduceMean",t,(r,n,i)=>{let s=1;for(let a=0;a<r.rank;a++)(i.indexOf(a)>=0||i.length===0)&&(s*=e.inputs[0].dims[a]);return["var sum = f32(0);","",`sum += f32(${r.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${s});`]})},Nx=(e,t)=>{bs(e.inputs),vs(e,"ReduceMin",t,(r,n,i)=>{let s=[];for(let a=0;a<r.rank;a++)(i.indexOf(a)>=0||i.length===0)&&s.push(`input_indices[${a}] = 0;`);return[`${s.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};`,`value = min(value, ${r.getByIndices("input_indices")});`,""]})},jx=(e,t)=>{bs(e.inputs),vs(e,"ReduceProd",t,(r,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${r.getByIndices("input_indices")};`,""])},Ux=(e,t)=>{bs(e.inputs),vs(e,"ReduceSum",t,(r,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${r.getByIndices("input_indices")};`,""])},Wx=(e,t)=>{bs(e.inputs),vs(e,"ReduceSumSquare",t,(r,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${r.getByIndices("input_indices")}; value += t * t;`,""])},xs=(e,t,r)=>{if(t.length===0)return r;let n=1,i=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?n*=e[s]:i*=e[s];return i<32&&n>1024},Vx=(e,t)=>{xs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Rx(e,t):$x(e,t)},Gx=(e,t)=>{xs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?zx(e,t):Mx(e,t)},qx=(e,t)=>{xs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Fx(e,t):Tx(e,t)},Hx=(e,t)=>{xs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Bx(e,t):Ex(e,t)},Kx=(e,t)=>{xs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Lx(e,t):Px(e,t)},Qx=(e,t)=>{xs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Nx(e,t):Cx(e,t)},Xx=(e,t)=>{xs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?jx(e,t):Sx(e,t)},Jx=(e,t)=>{xs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ux(e,t):kx(e,t)},Yx=(e,t)=>{xs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Wx(e,t):Ix(e,t)},Zx=(e,t)=>{xs(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Dx(e,t):Ax(e,t)}}),Bp,e$,t$,Lp,VD=Qe(()=>{kt(),jr(),Fp(),Bp=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},e$=(e,t)=>{Bp(e.inputs);let r=(n,i,s)=>{let a=[];for(let o=0;o<n.rank;o++)(s.indexOf(o)>=0||s.length===0)&&a.push(`input_indices[${o}] = 0;`);return[`${a.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",i.setByOffset("global_idx","best_index")]};e.compute(uu("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},t$=(e,t)=>{Bp(e.inputs);let r=(n,i,s)=>{let a=[];for(let o=0;o<n.rank;o++)(s.indexOf(o)>=0||s.length===0)&&a.push(`input_indices[${o}] = 0;`);return[`${a.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",i.setByOffset("global_idx","best_index")]};e.compute(uu("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Lp=e=>lr(e)}),r$,du,n$,s$,i$,al,a$,o$,Rp=Qe(()=>{kt(),Nt(),Cp(),Ut(),r$=(e,t)=>{let r=e[0],n=e[1],i=e[2],s=e[3],a=e[4],o=e[5];if(a&&o)throw new Error("Attention cannot have both past and attention_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let l=r.dims[0],u=r.dims[1],d=r.dims[2];if(i.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(n.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(n.dims[0]!==d)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(i.dims[0]!==n.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let c=i.dims[0]/3,p=c,m=p;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let P of t.qkvHiddenSizes)if(P%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");c=t.qkvHiddenSizes[0],p=t.qkvHiddenSizes[1],m=t.qkvHiddenSizes[2]}let f=u;if(c!==p)throw new Error("qkv_hidden_sizes first element should be same as the second");if(i.dims[0]!==c+p+m)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let w=0;if(a){if(p!==m)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(a.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(a.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(a.dims[1]!==l)throw new Error('Input "past" second dimension must be batch_size');if(a.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(a.dims[4]!==p/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(w=a.dims[3])}let C=f+w,y=-1,g=0;if(s)throw new Error("Mask not supported");if(a)throw new Error("past is not supported");if(o){if(o.dims.length!==4)throw new Error('Input "attention_bias" must have 4 dimensions');if(o.dims[0]!==l||o.dims[1]!==t.numHeads||o.dims[2]!==u||o.dims[3]!==C)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:l,sequenceLength:u,pastSequenceLength:w,kvSequenceLength:f,totalSequenceLength:C,maxSequenceLength:y,inputHiddenSize:d,hiddenSize:c,vHiddenSize:m,headSize:Math.floor(c/t.numHeads),vHeadSize:Math.floor(m/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:g,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},du=(e,t,r)=>t&&e?`
      let total_sequence_length_input = u32(${t.getByOffset("0")});
      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);
      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;
      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;
      total_sequence_length = u32(${e==null?void 0:e.getByOffset("batchIdx")}) + 1;
      var past_sequence_length: u32 = 0;
      if (is_first_prompt == false) {
        past_sequence_length = total_sequence_length - sequence_length;
      }
       `:`
    ${r?"let past_sequence_length = uniforms.past_sequence_length":""};
    let present_sequence_length = total_sequence_length;
    `,n$=(e,t,r,n,i,s,a,o)=>{let l=Fr(a?1:s),u=64,d=s/l;d<u&&(u=32);let c=Math.ceil(s/l/u),p=[{type:12,data:t},{type:12,data:r},{type:12,data:n},{type:12,data:i},{type:12,data:d},{type:12,data:c}],m=sn(e.dataType,l),f=$n(1,l),w=["type"];a&&w.push("type"),o&&w.push("type");let C=y=>{let g=ht("x",e.dataType,e.dims,l),P=[g],b=a?Be("seq_lens",a.dataType,a.dims):void 0;b&&P.push(b);let x=o?Be("total_sequence_length_input",o.dataType,o.dims):void 0;x&&P.push(x);let T=$n(e.dataType),E=[{name:"batch_size",type:"u32"},{name:"num_heads",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"sequence_length",type:"u32"},{name:"total_sequence_length",type:"u32"},{name:"elements_per_thread",type:"u32"}];return`
  var<workgroup> thread_max: array<f32, ${u}>;
  var<workgroup> thread_sum: array<f32, ${u}>;
  ${y.registerUniforms(E).declareVariables(...P)}
  ${y.mainStart([u,1,1])}
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let sequence_length = uniforms.sequence_length;
    var total_sequence_length = uniforms.total_sequence_length;
    ${du(b,x,!1)}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = (global_idx / ${u}) * uniforms.total_sequence_length + local_offset;
    let seq_causal_length = ${a?"u32(past_sequence_length + workgroup_id.y + 1)":"total_sequence_length"};
    var thread_max_vector = ${f}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      thread_max_vector = max(${f}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(()=>{switch(l){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${l}`)}})()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${u}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${f}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      sum_vector += exp(${f}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(()=>{switch(l){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${l}`)}})()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${u}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        x[offset + i] = ${g.type.value}(${T}(1.0) / ${T}(seq_causal_length));
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        var f32input = ${f}(x[offset + i]);
        x[offset + i] = ${g.type.value}(exp(f32input - max_value) / sum);
      }
    }
      ${a?`
        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {
          x[offset + total_seq_id] = ${g.type.value}(${T}(0));
        }`:""};
  }`};return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${u};${m};${l}`,inputDependencies:w},getShaderSource:C,getRunData:()=>({outputs:[],dispatchGroup:{x:1,y:i,z:t*r},programUniforms:p})}},s$=(e,t,r,n,i,s,a,o,l)=>{let u=a+s.kvSequenceLength,d=[s.batchSize,s.numHeads,s.sequenceLength,u],c=e>1&&n,p=s.kvNumHeads?s.kvNumHeads:s.numHeads,m=c?[s.batchSize,p,u,s.headSize]:void 0,f=s.nReps?s.nReps:1,w=s.scale===0?1/Math.sqrt(s.headSize):s.scale,C=Fr(s.headSize),y=s.headSize/C,g=12,P={x:Math.ceil(u/g),y:Math.ceil(s.sequenceLength/g),z:s.batchSize*s.numHeads},b=[{type:12,data:s.sequenceLength},{type:12,data:y},{type:12,data:u},{type:12,data:s.numHeads},{type:12,data:s.headSize},{type:1,data:w},{type:12,data:a},{type:12,data:s.kvSequenceLength},{type:12,data:f}],x=c&&n&&Ce.size(n.dims)>0,T=["type","type"];x&&T.push("type"),i&&T.push("type"),o&&T.push("type"),l&&T.push("type");let E=[{dims:d,dataType:t.dataType,gpuDataType:0}];c&&E.push({dims:m,dataType:t.dataType,gpuDataType:0});let S=O=>{let B=Be("q",t.dataType,t.dims,C),V=Be("key",r.dataType,r.dims,C),W=[B,V];if(x){let de=Be("past_key",n.dataType,n.dims,C);W.push(de)}i&&W.push(Be("attention_bias",i.dataType,i.dims));let N=o?Be("seq_lens",o.dataType,o.dims):void 0;N&&W.push(N);let te=l?Be("total_sequence_length_input",l.dataType,l.dims):void 0;te&&W.push(te);let q=ht("output",t.dataType,d),K=[q];c&&K.push(ht("present_key",t.dataType,m,C));let Y=$n(1,C),Z=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${g}u;

  var<workgroup> tileQ: array<${B.type.storage}, ${g*g}>;
  var<workgroup> tileK: array<${B.type.storage}, ${g*g}>;
  ${O.registerUniforms(Z).declareVariables(...W,...K)}
  ${O.mainStart([g,g,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let kvHeadIdx = ${f===1?"headIdx":"headIdx / uniforms.n_reps"};
    let kv_num_heads = ${f===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let sequence_length = uniforms.M;
    var total_sequence_length = uniforms.N;
    ${du(N,te,!0)}
    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;
    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
    ${x&&c?"let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;":""};
    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;
    ${c?"let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;":""}
    var value = ${Y}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${x&&c?`
              if (n + local_id.y < past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];
              }`:`
          if (n + local_id.y < uniforms.kv_sequence_length) {
            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
          }`}
      ${c?`if (n + local_id.y < present_sequence_length) {
        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];
      }`:""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
          value += ${Y}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {
      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(()=>{switch(C){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${C}`)}})()};
        output[outputIdx] = ${q.type.value} (sum * uniforms.alpha) + ${i?"attention_bias[outputIdx]":"0.0"};
    }
  }`};return{name:"AttentionProbs",shaderCache:{hint:`${C};${i!==void 0};${n!==void 0};${e}`,inputDependencies:T},getRunData:()=>({outputs:E,dispatchGroup:P,programUniforms:b}),getShaderSource:S}},i$=(e,t,r,n,i,s,a=void 0,o=void 0)=>{let l=s+i.kvSequenceLength,u=i.nReps?i.nReps:1,d=i.vHiddenSize*u,c=e>1&&n,p=i.kvNumHeads?i.kvNumHeads:i.numHeads,m=c?[i.batchSize,p,l,i.headSize]:void 0,f=[i.batchSize,i.sequenceLength,d],w=12,C={x:Math.ceil(i.vHeadSize/w),y:Math.ceil(i.sequenceLength/w),z:i.batchSize*i.numHeads},y=[{type:12,data:i.sequenceLength},{type:12,data:l},{type:12,data:i.vHeadSize},{type:12,data:i.numHeads},{type:12,data:i.headSize},{type:12,data:d},{type:12,data:s},{type:12,data:i.kvSequenceLength},{type:12,data:u}],g=c&&n&&Ce.size(n.dims)>0,P=["type","type"];g&&P.push("type"),a&&P.push("type"),o&&P.push("type");let b=[{dims:f,dataType:t.dataType,gpuDataType:0}];c&&b.push({dims:m,dataType:t.dataType,gpuDataType:0});let x=T=>{let E=Be("probs",t.dataType,t.dims),S=Be("v",r.dataType,r.dims),O=[E,S];g&&O.push(Be("past_value",n.dataType,n.dims));let B=a?Be("seq_lens",a.dataType,a.dims):void 0;a&&O.push(B);let V=o?Be("total_sequence_length_input",o.dataType,o.dims):void 0;o&&O.push(V);let W=[ht("output",t.dataType,f)];c&&W.push(ht("present_value",t.dataType,m));let N=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${w}u;
  var<workgroup> tileQ: array<${E.type.value}, ${w*w}>;
  var<workgroup> tileV: array<${E.type.value}, ${w*w}>;
  ${T.registerUniforms(N).declareVariables(...O,...W)}
  ${T.mainStart([w,w,1])}
   let headIdx = workgroup_id.z % uniforms.num_heads;
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let kvHeadIdx = ${u===1?"headIdx":"headIdx / uniforms.n_reps"};
   let kv_num_heads = ${u===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
   let m = global_id.y;
   let n = global_id.x;
   let sequence_length = uniforms.M;
   var total_sequence_length = uniforms.K;
   ${du(B,V,!0)}
   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch
   ${g&&c?"let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;":""};
   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;
   ${c?"let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;":""}
   var value = ${E.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${g&&c?`
        if (w + local_id.y < past_sequence_length) {
          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];
        }
      `:`
            if (w + local_id.y < uniforms.kv_sequence_length) {
              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];
            }`}
        ${c?`
            if (w + local_id.y < present_sequence_length) {
          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];
        }`:""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + headIdx * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return{name:"AttentionScore",shaderCache:{hint:`${n!==void 0};${e}`,inputDependencies:P},getRunData:()=>({outputs:b,dispatchGroup:C,programUniforms:y}),getShaderSource:x}},al=(e,t,r,n,i,s,a,o,l,u,d=void 0,c=void 0)=>{let p=Math.min(e.outputCount,1+(a?1:0)+(o?1:0)),m=p>1?u.pastSequenceLength:0,f=m+u.kvSequenceLength,w=l&&Ce.size(l.dims)>0?l:void 0,C=[t,r];p>1&&a&&Ce.size(a.dims)>0&&C.push(a),w&&C.push(w),d&&C.push(d),c&&C.push(c);let y=e.compute(s$(p,t,r,a,w,u,m,d,c),{inputs:C,outputs:p>1?[-1,1]:[-1]})[0];e.compute(n$(y,u.batchSize,u.numHeads,m,u.sequenceLength,f,d,c),{inputs:d&&c?[y,d,c]:[y],outputs:[]});let g=[y,n];p>1&&o&&Ce.size(o.dims)>0&&g.push(o),d&&g.push(d),c&&g.push(c),e.compute(i$(p,y,n,o,u,m,d,c),{inputs:g,outputs:p>1?[0,2]:[0]})},a$=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],n=t.sequenceLength,i=t.inputHiddenSize,s=t.headSize,a=12,o={x:Math.ceil(t.headSize/a),y:Math.ceil(t.sequenceLength/a),z:t.batchSize*t.numHeads},l=[e.inputs[0],e.inputs[1],e.inputs[2]],u=[{type:12,data:n},{type:12,data:i},{type:12,data:s},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],d=c=>{let p=ht("output_q",l[0].dataType,r),m=ht("output_k",l[0].dataType,r),f=ht("output_v",l[0].dataType,r),w=Be("input",l[0].dataType,l[0].dims),C=Be("weight",l[1].dataType,l[1].dims),y=Be("bias",l[2].dataType,l[2].dims),g=w.type.storage,P=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${a}u;
  var<workgroup> tileInput: array<${g}, ${a*a}>;
  var<workgroup> tileWeightQ: array<${g}, ${a*a}>;
  var<workgroup> tileWeightK: array<${g}, ${a*a}>;
  var<workgroup> tileWeightV: array<${g}, ${a*a}>;
  ${c.registerUniforms(P).declareVariables(w,C,y,p,m,f)}
  ${c.mainStart([a,a,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${g}(0);
    var valueK = ${g}(0);
    var valueV = ${g}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:o,programUniforms:u}),getShaderSource:d},{inputs:l,outputs:[-1,-1,-1]})},o$=(e,t)=>{let r=r$(e.inputs,t),[n,i,s]=a$(e,r);return al(e,n,i,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r)}}),l$,u$,d$,c$,GD=Qe(()=>{gs(),kt(),Nt(),jr(),Ut(),l$=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(n,i,s)=>{let a=i.length;if(a!==n.length)throw new Error(`${s}: num dimensions != ${a}`);i.forEach((o,l)=>{if(o!==n[l])throw new Error(`${s}: dim[${l}] do not match`)})};if(e[0].dims.length>1){let n=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,n,"Invalid input scale"),r(e[2].dims,n,"Invalid input B"),r(e[3].dims,n,"Invalid input mean"),r(e[4].dims,n,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},u$=(e,t)=>{let{epsilon:r,spatial:n,format:i}=t,s=e[0].dims,a=n?Fr(s[s.length-1]):1,o=i==="NHWC"&&s.length>1?a:1,l=Ce.size(s)/a,u=n,d=u?s.length:s,c=Be("x",e[0].dataType,e[0].dims,a),p=Be("scale",e[1].dataType,e[1].dims,o),m=Be("bias",e[2].dataType,e[2].dims,o),f=Be("inputMean",e[3].dataType,e[3].dims,o),w=Be("inputVar",e[4].dataType,e[4].dims,o),C=ht("y",e[0].dataType,d,a),y=()=>{let P="";if(n)P=`let cOffset = ${s.length===1?"0u":i==="NHWC"?`outputIndices[${s.length-1}] / ${a}`:"outputIndices[1]"};`;else if(i==="NCHW")P=`
            ${C.indicesSet("outputIndices","0","0")}
            let cOffset = ${C.indicesToOffset("outputIndices")};`;else{P=`var cIndices = ${p.type.indices}(0);
                       cIndices[0] = outputIndices[${s.length-1}];`;for(let b=1;b<p.rank;b++)P+=`cIndices[${b}] = outputIndices[${b}];`;P+=`let cOffset = ${p.indicesToOffset("cIndices")};`}return P},g=P=>`
  const epsilon = ${r};
  ${P.registerUniform("outputSize","u32").declareVariables(c,p,m,f,w,C)}
  ${P.mainStart()}
  ${P.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${C.offsetToIndices(`global_idx * ${a}`)};
    ${y()}
    let scale = ${p.getByOffset("cOffset")};
    let bias = ${m.getByOffset("cOffset")};
    let inputMean = ${f.getByOffset("cOffset")};
    let inputVar = ${w.getByOffset("cOffset")};
    let x = ${c.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${C.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${n}_${a}`,inputDependencies:u?["rank","type","type","type","type"]:void 0},getShaderSource:g,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:u?[{type:12,data:l},...bt(s)]:[{type:12,data:l}]})}},d$=e=>lr(e),c$=(e,t)=>{let{inputs:r,outputCount:n}=e,i=d$({...t,outputCount:n});if(Cr.webgpu.validateInputContent&&l$(r,i),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(u$(r,i))}}),p$,h$,f$,qD=Qe(()=>{Nt(),Ut(),p$=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},h$=e=>{let t=e[0].dims,r=e[0].dims[2],n=Ce.size(t)/4,i=e[0].dataType,s=Be("input",i,t,4),a=Be("bias",i,[r],4),o=Be("residual",i,t,4),l=ht("output",i,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:u=>`
  const channels = ${r}u / 4;
  ${u.declareVariables(s,a,o,l)}

  ${u.mainStart()}
    ${u.guardAgainstOutOfBoundsWorkgroupSizes(n)}
    let value = ${s.getByOffset("global_idx")}
      + ${a.getByOffset("global_idx % channels")} + ${o.getByOffset("global_idx")};
    ${l.setByOffset("global_idx","value")}
  }`}},f$=e=>{p$(e.inputs),e.compute(h$(e.inputs))}}),m$,rr,_$,g$,w$,y$,b$,v$,x$,$$,M$,T$,E$,P$,C$,S$,ol,k$,cu,I$,A$,O$,D$,z$,F$,B$,L$,R$,N$,j$,U$,W$,V$,G$,q$,Np,H$,jp,Up,K$,Q$,X$,J$,Y$,Z$,Wp=Qe(()=>{kt(),Nt(),jr(),Ut(),m$=(e,t,r,n,i,s,a)=>{let o=Math.ceil(t/4),l="";typeof i=="string"?l=`${i}(a)`:l=i("a");let u=Be("inputData",r,[o],4),d=ht("outputData",n,[o],4),c=[{name:"vec_size",type:"u32"}];return a&&c.push(...a),`
      ${e.registerUniforms(c).declareVariables(u,d)}

  ${s??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${u.getByOffset("global_idx")};
    ${d.setByOffset("global_idx",l)}
  }`},rr=(e,t,r,n,i,s=e.dataType,a,o)=>{let l=[{type:12,data:Math.ceil(Ce.size(e.dims)/4)}];return a&&l.push(...a),{name:t,shaderCache:{hint:i,inputDependencies:["type"]},getShaderSource:u=>m$(u,Ce.size(e.dims),e.dataType,s,r,n,o),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(Ce.size(u[0].dims)/64/4)},programUniforms:l})}},_$=e=>{e.compute(rr(e.inputs[0],"Abs","abs"))},g$=e=>{e.compute(rr(e.inputs[0],"Acos","acos"))},w$=e=>{e.compute(rr(e.inputs[0],"Acosh","acosh"))},y$=e=>{e.compute(rr(e.inputs[0],"Asin","asin"))},b$=e=>{e.compute(rr(e.inputs[0],"Asinh","asinh"))},v$=e=>{e.compute(rr(e.inputs[0],"Atan","atan"))},x$=e=>{e.compute(rr(e.inputs[0],"Atanh","atanh"))},$$=e=>lr(e),M$=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(rr(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},T$=e=>{let t,r,n=e.length>=2&&e[1].data!==0,i=e.length>=3&&e[2].data!==0;switch(e[0].dataType){case 1:t=n?e[1].getFloat32Array()[0]:-34028234663852886e22,r=i?e[2].getFloat32Array()[0]:34028234663852886e22;break;case 10:t=n?e[1].getUint16Array()[0]:64511,r=i?e[2].getUint16Array()[0]:31743;break;default:throw new Error("Unsupport data type")}return lr({min:t,max:r})},E$=(e,t)=>{let r=t||T$(e.inputs),n=$n(e.inputs[0].dataType);e.compute(rr(e.inputs[0],"Clip",i=>`clamp(${i}, vec4<${n}>(uniforms.min), vec4<${n}>(uniforms.max))`,void 0,r.cacheKey,void 0,[{type:e.inputs[0].dataType,data:r.min},{type:e.inputs[0].dataType,data:r.max}],[{name:"min",type:n},{name:"max",type:n}]),{inputs:[0]})},P$=e=>{e.compute(rr(e.inputs[0],"Ceil","ceil"))},C$=e=>{e.compute(rr(e.inputs[0],"Cos","cos"))},S$=e=>{e.compute(rr(e.inputs[0],"Cosh","cosh"))},ol=e=>lr(e),k$=(e,t)=>{let r=$n(e.inputs[0].dataType);e.compute(rr(e.inputs[0],"Elu",n=>`elu_vf32(${n})`,`
  const elu_alpha_ = ${r}(${t.alpha});

  fn elu_f32(a: ${r}) -> ${r} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},cu=(e="f32")=>`
const r0: ${e} = 0.3275911;
const r1: ${e} = 0.254829592;
const r2: ${e} = -0.284496736;
const r3: ${e} = 1.421413741;
const r4: ${e} = -1.453152027;
const r5: ${e} = 1.061405429;

fn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,I$=e=>{let t=$n(e.inputs[0].dataType);e.compute(rr(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,cu(t)))},A$=e=>{e.compute(rr(e.inputs[0],"Exp","exp"))},O$=e=>{e.compute(rr(e.inputs[0],"Floor","floor"))},D$=e=>{let t=$n(e.inputs[0].dataType);e.compute(rr(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,cu(t)))},z$=(e,t)=>{let r=$n(e.inputs[0].dataType);e.compute(rr(e.inputs[0],"LeakyRelu",n=>`select(leaky_relu_alpha_ * ${n}, ${n}, ${n} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},F$=e=>{e.compute(rr(e.inputs[0],"Not",t=>`!${t}`))},B$=e=>{e.compute(rr(e.inputs[0],"Neg",t=>`-${t}`))},L$=e=>{e.compute(rr(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},R$=e=>{let t=$n(e.inputs[0].dataType);e.compute(rr(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},N$=e=>{e.compute(rr(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},j$=e=>lr(e),U$=(e,t)=>{let r=$n(e.inputs[0].dataType);e.compute(rr(e.inputs[0],"HardSigmoid",n=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${n} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},W$=e=>{e.compute(rr(e.inputs[0],"Sin","sin"))},V$=e=>{e.compute(rr(e.inputs[0],"Sinh","sinh"))},G$=e=>{e.compute(rr(e.inputs[0],"Sqrt","sqrt"))},q$=e=>{e.compute(rr(e.inputs[0],"Tan","tan"))},Np=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,H$=e=>{e.compute(rr(e.inputs[0],"Tanh",Np))},jp=(e="f32")=>`
const fast_gelu_a: ${e} = 0.5;
const fast_gelu_b: ${e} = 0.7978845608028654;
const fast_gelu_c: ${e} = 0.035677408136300125;

fn tanh_v(v: vec4<${e}>) -> vec4<${e}> {
  return ${Np("v")};
}
`,Up=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,K$=e=>{let t=$n(e.inputs[0].dataType);e.compute(rr(e.inputs[0],"FastGelu",Up,jp(t),void 0,e.inputs[0].dataType))},Q$=(e,t)=>{let r=$n(e.inputs[0].dataType);return e.compute(rr(e.inputs[0],"ThresholdedRelu",n=>`select(vec4<${r}>(0.0), ${n}, ${n} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},X$=e=>{e.compute(rr(e.inputs[0],"Log","log"))},J$=(e,t)=>`
const alpha = vec4<${e}>(${t});
const one = ${e}(1.0);
const zero = ${e}(0.0);

fn quick_gelu_impl(x: vec4<${e}>) -> vec4<${e}> {
  let v = x *alpha;
  var x1 : vec4<${e}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`,Y$=e=>`quick_gelu_impl(${e})`,Z$=(e,t)=>{let r=$n(e.inputs[0].dataType);e.compute(rr(e.inputs[0],"QuickGelu",Y$,J$(r,t.alpha),t.cacheKey,e.inputs[0].dataType))}}),eM,tM,rM,HD=Qe(()=>{Nt(),Ut(),Wp(),eM=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},tM=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=Be("input",e[0].dataType,e[0].dims,4),n=Be("bias",e[0].dataType,[e[0].dims[2]],4),i=ht("output",e[0].dataType,t,4),s=Ce.size(t)/4,a=sn(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:o=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${o.declareVariables(r,n,i)}

  ${cu(a)}

  ${o.mainStart()}
    ${o.guardAgainstOutOfBoundsWorkgroupSizes(s)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${i.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},rM=e=>{eM(e.inputs),e.compute(tM(e.inputs))}}),nM,sM,$s,iM,aM,oM,lM,uM,dM,cM,pM,hM,fM,KD=Qe(()=>{kt(),Nt(),Ut(),nM=(e,t,r,n,i,s,a,o,l,u,d,c)=>{let p,m;typeof o=="string"?p=m=(g,P)=>`${o}((${g}),(${P}))`:typeof o=="function"?p=m=o:(p=o.scalar,m=o.vector);let f=ht("outputData",d,n.length,4),w=Be("aData",l,t.length,4),C=Be("bData",u,r.length,4),y;if(i)if(s){let g=Ce.size(t)===1,P=Ce.size(r)===1,b=t.length>0&&t[t.length-1]%4===0,x=r.length>0&&r[r.length-1]%4===0;g||P?y=f.setByOffset("global_idx",m(g?`${w.type.value}(${w.getByOffset("0")}.x)`:w.getByOffset("global_idx"),P?`${C.type.value}(${C.getByOffset("0")}.x)`:C.getByOffset("global_idx"))):y=`
            let outputIndices = ${f.offsetToIndices("global_idx * 4u")};
            let offsetA = ${w.broadcastedIndicesToOffset("outputIndices",f)};
            let offsetB = ${C.broadcastedIndicesToOffset("outputIndices",f)};
            ${f.setByOffset("global_idx",m(a||b?w.getByOffset("offsetA / 4u"):`${w.type.value}(${w.getByOffset("offsetA / 4u")}[offsetA % 4u])`,a||x?C.getByOffset("offsetB / 4u"):`${C.type.value}(${C.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else y=f.setByOffset("global_idx",m(w.getByOffset("global_idx"),C.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let g=(P,b,x="")=>{let T=`aData[indexA${b}][componentA${b}]`,E=`bData[indexB${b}][componentB${b}]`;return`
            let outputIndices${b} = ${f.offsetToIndices(`global_idx * 4u + ${b}u`)};
            let offsetA${b} = ${w.broadcastedIndicesToOffset(`outputIndices${b}`,f)};
            let offsetB${b} = ${C.broadcastedIndicesToOffset(`outputIndices${b}`,f)};
            let indexA${b} = offsetA${b} / 4u;
            let indexB${b} = offsetB${b} / 4u;
            let componentA${b} = offsetA${b} % 4u;
            let componentB${b} = offsetB${b} % 4u;
            ${P}[${b}] = ${x}(${p(T,E)});
          `};d===9?y=`
            var data = vec4<u32>(0);
            ${g("data",0,"u32")}
            ${g("data",1,"u32")}
            ${g("data",2,"u32")}
            ${g("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:y=`
            ${g("outputData[global_idx]",0)}
            ${g("outputData[global_idx]",1)}
            ${g("outputData[global_idx]",2)}
            ${g("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(w,C,f)}

        ${c??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${y}
      }`},sM=(e,t,r,n,i,s,a=r.dataType)=>{let o=r.dims.map(w=>Number(w)??1),l=n.dims.map(w=>Number(w)??1),u=!Ce.areEqual(o,l),d=o,c=Ce.size(o),p=!1,m=!1,f=[u];if(u){let w=so.calcShape(o,l,!1);if(!w)throw new Error("Can't perform binary op on the given tensors");d=w.slice(),c=Ce.size(d);let C=Ce.size(o)===1,y=Ce.size(l)===1,g=o.length>0&&o[o.length-1]%4===0,P=l.length>0&&l[l.length-1]%4===0;f.push(C),f.push(y),f.push(g),f.push(P);let b=1;for(let x=1;x<d.length;x++){let T=o[o.length-x],E=l[l.length-x];if(T===E)b*=T;else break}b%4===0?(m=!0,p=!0):(C||y||g||P)&&(p=!0)}else p=!0;return f.push(p),{name:e,shaderCache:{hint:t+f.map(w=>w.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:w=>nM(w,o,l,d,p,u,m,i,r.dataType,n.dataType,a,s),getRunData:()=>({outputs:[{dims:d,dataType:a}],dispatchGroup:{x:Math.ceil(c/64/4)},programUniforms:[{type:12,data:Math.ceil(Ce.size(d)/4)},...bt(o,l,d)]})}},$s=(e,t,r,n,i,s)=>{e.compute(sM(t,i??"",e.inputs[0],e.inputs[1],r,n,s))},iM=e=>{$s(e,"Add",(t,r)=>`${t}+${r}`)},aM=e=>{$s(e,"Div",(t,r)=>`${t}/${r}`)},oM=e=>{$s(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},lM=e=>{$s(e,"Mul",(t,r)=>`${t}*${r}`)},uM=e=>{let t=Be("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;$s(e,"Pow",{scalar:(r,n)=>`pow_custom(${r},${n})`,vector:(r,n)=>`pow_vector_custom(${r},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},dM=e=>{$s(e,"Sub",(t,r)=>`${t}-${r}`)},cM=e=>{$s(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},pM=e=>{$s(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},hM=e=>{$s(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},fM=e=>{$s(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}}),mM,_M,gM,wM,yM,bM,QD=Qe(()=>{kt(),Nt(),jr(),Ut(),mM=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");let r=0,n=e[r],i=n.dataType,s=n.dims.length;e.forEach((a,o)=>{if(o!==r){if(a.dataType!==i)throw new Error("input tensors should be one type");if(a.dims.length!==s)throw new Error("input tensors should have the same shape");a.dims.forEach((l,u)=>{if(u!==t&&l!==n.dims[u])throw new Error("non concat dimensions must match")})}})},_M=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,gM=(e,t)=>{let r=e.length,n=[];for(let i=0;i<r;++i){let s=t.setByOffset("global_idx",e[i].getByIndices("indices"));r===1?n.push(s):i===0?n.push(`if (inputIndex == ${i}u) { ${s} }`):i===r-1?n.push(`else { ${s} }`):n.push(`else if (inputIndex == ${i}) { ${s} }`)}return n.join(`
`)},wM=(e,t,r,n)=>{let i=Ce.size(r),s=new Array(e.length),a=new Array(e.length),o=0,l=[],u=[],d=[{type:12,data:i}];for(let w=0;w<e.length;++w)o+=e[w].dims[t],s[w]=o,u.push(e[w].dims.length),a[w]=Be(`input${w}`,n,u[w]),l.push("rank"),d.push({type:12,data:s[w]});for(let w=0;w<e.length;++w)d.push(...bt(e[w].dims));d.push(...bt(r));let c=ht("output",n,r.length),p=c.indicesGet("indices",t),m=Array.from(Array(s.length).keys()).map(w=>`uniforms.sizeInConcatAxis${w}`).join(","),f=w=>`

  ${(()=>{w.registerUniform("outputSize","u32");for(let C=0;C<e.length;C++)w.registerUniform(`sizeInConcatAxis${C}`,"u32");return w.declareVariables(...a,c)})()}

  ${_M(s.length,m)}

  ${w.mainStart()}
    ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${c.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${p});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${s.length}u>(${m});
      ${p} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${gM(a,c)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:r,dataType:n}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:d}),getShaderSource:f}},yM=(e,t)=>{let r=e.inputs,n=r[0].dims,i=Ce.normalizeAxis(t.axis,n.length);mM(r,i);let s=n.slice();s[i]=r.reduce((o,l)=>o+(l.dims.length>i?l.dims[i]:0),0);let a=r.filter(o=>Ce.size(o.dims)>0);e.compute(wM(a,i,s,r[0].dataType),{inputs:a})},bM=e=>lr({axis:e.axis})}),va,xa,$a,Vp,Ma=Qe(()=>{kt(),Nt(),va=(e,t,r="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${t}(0.0));`;case"Sigmoid":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${t}(${r}(uniforms.clip_min)), ${t}(${r}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${t}(0.0), min(${t}(1.0), ${r}(uniforms.alpha) * value + ${r}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${r}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case"Tanh":return`let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},xa=(e,t)=>{e.activation==="Clip"?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&t.push({type:1,data:e.alpha})},$a=(e,t)=>{e.activation==="Clip"?t.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?t.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&t.push({name:"alpha",type:"f32"})},Vp=e=>{let t=(e==null?void 0:e.activation)||"";if(t==="HardSigmoid"){let[r,n]=(e==null?void 0:e.activation_params)||[.2,.5];return{activation:t,alpha:r,beta:n}}else if(t==="Clip"){let[r,n]=(e==null?void 0:e.activation_params)||[W1,V1];return{activation:t,clipMax:n,clipMin:r}}else if(t==="LeakyRelu"){let[r]=(e==null?void 0:e.activation_params)||[.01];return{activation:t,alpha:r}}return{activation:t}}}),hn,vM,Gp=Qe(()=>{hn=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},vM=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `}),xM,XD=Qe(()=>{xM=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`}),ll,qp,Hp=Qe(()=>{kt(),Nt(),Ut(),Ma(),ll=(e,t,r,n,i)=>{let s=n-r;return`
      ${Array.from({length:r}).map((a,o)=>`
      if (${gt(t.shape,o,t.rank)} != 1) {
        ${t.indicesSet(e,o,gt(i,o+s,n))}
      } else {
        ${t.indicesSet(e,o,0)}
      }`).join("")}
`},qp=(e,t,r,n,i=!1,s)=>{let a=e[0].dims,o=e[1].dims,l=a[a.length-2],u=o[o.length-1],d=a[a.length-1],c=Fr(u),p=Fr(d),m=Fr(l),f=Ce.size(r)/c/m,w=e.length>2,C=n?n.slice(0,-2):r.slice(0,-2),y=[Ce.size(C),l,u],g=[{type:12,data:f},{type:12,data:l},{type:12,data:u},{type:12,data:d}];xa(t,g),g.push(...bt(C,a,o)),w&&g.push(...bt(e[2].dims)),g.push(...bt(y));let P=b=>{let x=Op("batch_dims",e[0].dataType,C.length),T=Be("a",e[0].dataType,a.length,p),E=Be("b",e[1].dataType,o.length,c),S=ht("output",e[0].dataType,y.length,c),O=sn(S.type.tensor),B=va(t,S.type.value,O),V=[T,E],W="";if(w){let q=i?c:1;V.push(Be("bias",e[2].dataType,e[2].dims.length,q)),W=`${i?`value += bias[col / ${q}];`:`value += ${S.type.value}(bias[row + i]);`}`}let N=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];$a(t,N);let te=()=>{let q=`var a_data: ${T.type.value};`;for(let K=0;K<p;K++)q+=`
              let b_data${K} = b[(b_offset + (k + ${K}) * uniforms.N + col) / ${c}];`;for(let K=0;K<m;K++){q+=`a_data = a[(a_offset + (row + ${K}) * uniforms.K + k) / ${p}];`;for(let Y=0;Y<p;Y++)q+=`
            values[${K}] = fma(${E.type.value}(a_data${p===1?"":`[${Y}]`}), b_data${Y}, values[${K}]);
`}return q};return`
  ${b.registerUniforms(N).registerInternalVariables(x).declareVariables(...V,S)}
  ${b.mainStart()}
    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${c})) * ${c};
    var index1 = global_idx / (uniforms.N / ${c});
    let stride1 = uniforms.M / ${m};
    let row = (index1 % stride1) * ${m};
    let batch = index1 / stride1;

    ${r.length===2?"":`let batch_indices = ${x.offsetToIndices("batch")};`}

    var a_indices: ${T.type.indices};
    ${ll("a_indices",T,T.rank-2,x.rank,"batch_indices")}
    ${T.indicesSet("a_indices",T.rank-2,0)}
    ${T.indicesSet("a_indices",T.rank-1,0)}
    let a_offset = ${T.indicesToOffset("a_indices")};

    var b_indices: ${E.type.indices};
    ${ll("b_indices",E,E.rank-2,x.rank,"batch_indices")}
    ${E.indicesSet("b_indices",E.rank-2,0)}
    ${E.indicesSet("b_indices",E.rank-1,0)}
    let b_offset = ${E.indicesToOffset("b_indices")};
    var values: array<${S.type.value}, ${m}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${p}) {
      ${te()}
    }
    for (var i = 0u; i < ${m}u; i++) {
      var value = values[i];
      ${W}
      ${B}
      let cur_indices = ${S.type.indices}(batch, row + i, col);
      let offset = ${S.indicesToOffset("cur_indices")};
      ${S.setByOffset(`offset / ${c}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activation};${c};${p};${m};${i}`,inputDependencies:w?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:s?s(r):r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(f/64)},programUniforms:g}),getShaderSource:P}}}),$M,MM,Kp,Qp,TM,Xp,EM,pu,Jp=Qe(()=>{kt(),Nt(),Ut(),Ma(),Hp(),Gp(),$M=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,MM=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,Kp=(e,t,r="f32",n,i=!1,s=32,a=!1,o=32)=>{let l=t[1]*e[1],u=t[0]*e[0],d=i?l:s,c=i?s:l,p=d/t[0],m=s/t[1];if(!((i&&p===4&&e[1]===4||!i&&(p===3||p===4))&&d%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${i} is true, innerElementSize ${p} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${p} must be 3 or 4.
  tileAWidth ${d} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${p}<${r}>, ${d/p}>, ${c}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${u/e[0]}>, ${s}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${p};
const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${a?"0":"i32(globalId.z)"};
  ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${l};

  let num_tiles = ${a?`${Math.ceil(o/s)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${a?`i32(globalId.z) * ${o}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${m};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${$M(i,n)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${m}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${n?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${p===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${MM(i,p)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},Qp=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,TM=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Xp=(e,t,r="f32",n,i=!1,s=32,a=!1,o=32,l=!1)=>{let u=e[1]*t[1],d=e[0]*t[0],c=i?u:s,p=i?s:u;if(!(p%t[1]===0&&c%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${p} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${c} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let m=p/t[1],f=c/t[0],w=s/t[1],C=l?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${u};
    let globalColStart = i32(workgroupId.x) * ${d};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${p}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${c}; inputCol = inputCol + ${t[0]}) {
          ${Qp(i,n)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${d}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${n?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${i?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${u};

let tileRowA = i32(localId.y) * ${m};
let tileColA = i32(localId.x) * ${f};
let tileRowB = i32(localId.y) * ${w};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${m}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${f}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${Qp(i,n)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${n?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${TM(i)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${c}>, ${p}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${d}>, ${s}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${s};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${a?"0":"i32(globalId.z)"};
    ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${a?`${Math.ceil(o/s)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${a?`i32(globalId.z) * ${o}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;
    ${C}
  }
`},EM=(e,t,r,n,i=!1)=>{let[s,a,o,l]=n,u=sn(n[0].type.tensor);return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${s.type.indices}) -> ${hn(e,u)} {
      var value = ${hn(e,u)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        var aIndices: ${a.type.indices};
        ${ll("aIndices",a,a.rank-2,s.rank,"batchIndices")}
        ${a.indicesSet("aIndices",a.rank-2,"u32(row)")}
        ${a.indicesSet("aIndices",a.rank-1,"u32(colIn)")}
        value = ${a.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${s.type.indices}) -> ${hn(e,u)} {
      var value = ${hn(e,u)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        var bIndices: ${o.type.indices};
        ${ll("bIndices",o,o.rank-2,s.rank,"batchIndices")}
        ${o.indicesSet("bIndices",o.rank-2,"u32(row)")}
        ${o.indicesSet("bIndices",o.rank-1,"u32(colIn)")}
        value = ${o.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${hn(e,u)}) {
      let col = colIn * ${e};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${i?"bias[colIn]":`${hn(e,u)}(bias[row])`};`:""}
        ${r}
        ${l.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},pu=(e,t,r,n,i=!1,s)=>{let a=e[0].dims,o=e[1].dims,l=a.slice(0,-2),u=o.slice(0,-2),d=n?n.slice(0,-2):r.slice(0,-2),c=Ce.size(d),p=a[a.length-2],m=a[a.length-1],f=o[o.length-1],w=m%4===0&&f%4===0,C=p<=8?[4,1,1]:[4,4,1],y=[8,8,1],g=[Math.ceil(f/y[0]/C[0]),Math.ceil(p/y[1]/C[1]),Math.ceil(c/y[2]/C[2])],P=w?4:1,b=[...l,p,m/P],x=b.length,T=[...u,m,f/P],E=T.length,S=[c,p,f/P],O=[{type:6,data:p},{type:6,data:f},{type:6,data:m}];xa(t,O),O.push(...bt(d,b,T));let B=["rank","rank"],V=e.length>2;V&&(O.push(...bt(e[2].dims)),B.push("rank")),O.push(...bt(S));let W=N=>{let te=d.length,q=Op("batchDims",e[0].dataType,te,1),K=sn(e[0].dataType),Y=Be("a",e[0].dataType,x,P),Z=Be("b",e[1].dataType,E,P),de=ht("result",e[0].dataType,S.length,P),pe=[Y,Z];if(V){let me=i?P:1;pe.push(Be("bias",e[2].dataType,e[2].dims.length,me))}let L=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];$a(t,L);let F=sn(de.type.tensor),U=va(t,de.type.value,F),re=EM(P,V,U,[q,Y,Z,de],i);return`
  ${N.registerUniforms(L).registerInternalVariables(q).declareVariables(...pe,de)}
  ${re}
  ${w?Kp(C,y,K,q):Xp(C,y,K,q)}
                   `};return{name:"MatMul",shaderCache:{hint:`${C};${t.activation};${w};${i}`,inputDependencies:B},getRunData:()=>({outputs:[{dims:s?s(r):r,dataType:e[0].dataType}],dispatchGroup:{x:g[0],y:g[1],z:g[2]},programUniforms:O}),getShaderSource:W}}}),PM,CM,JD=Qe(()=>{kt(),ai(),Ut(),Ma(),Gp(),XD(),Jp(),PM=(e,t,r,n,i=!1,s,a=4,o=4,l=4,u="f32")=>{let d=O=>{switch(O){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${u}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${O} is not supported.`)}},c=O=>{switch(O){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${O} is not supported.`)}},p=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,m=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,f=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",w=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",C=e?"row":"col",y=e?"col":"row",g=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${C} / outWidth;
    let outCol = ${C} % outWidth;

    let WRow = ${y} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${y} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${y} % inChannels;
    var resData = ${hn(a,u)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${f} && xCol >= 0 && xCol < ${w}) {
      ${p}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${d(a)}
    }
    return resData;`,P=e?t&&n?`
    let col = colIn * ${a};
    ${g}`:`
    let col = colIn * ${a};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${g}
    }
    return ${hn(a,u)}(0.0);`:n&&r?`
    let col = colIn * ${a};
    ${g}`:`
    let col = colIn * ${a};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${g}
    }
    return ${hn(a,u)}(0.0);`,b=e?n&&r?c(o):`
    let col = colIn * ${o};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${c(o)}
    }
    return ${hn(o,u)}(0.0);`:`
    let col = colIn * ${o};
    if (row < uniforms.dim_inner && col < uniforms.dim_a_outer) {
      ${c(o)}
    }
    return ${hn(o,u)}(0.0);`,x=hn(l,u),T=hn(e?a:o,u),E=hn(e?o:a,u),S=va(s,x,u);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${T} {
      ${e?P:b}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${E} {
      ${e?b:P}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${x}) {
      let col = colIn * ${l};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${m}
      ${vM(i)}
      ${S}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},CM=(e,t,r,n,i,s,a,o,l)=>{let u=t.format==="NHWC",d=u?e[0].dims[3]:e[0].dims[1],c=r[0],p=u?r[2]:r[3],m=u?r[1]:r[2],f=u?r[3]:r[1],w=u&&(d%4===0||d%3===0)&&f%4===0,C=u?f:p*m,y=u?p*m:f,g=[8,8,1],P=n<=8?[4,1,1]:[4,4,1],b=[Math.ceil(C/g[0]/P[0]),Math.ceil(y/g[1]/P[1]),Math.ceil(c/g[2]/P[2])];Zt("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${b}`);let x=w?u&&d%4!==0?3:4:1,T=g[1]*P[1],E=g[0]*P[0],S=Math.max(g[0]*x,g[1]),O=n%T===0,B=i%E===0,V=s%S===0,W=w?[x,4,4]:[1,1,1],N=[{type:6,data:n},{type:6,data:i},{type:6,data:s},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];xa(t,N),N.push(...bt(e[0].dims,e[1].dims));let te=["rank","rank"];a&&(N.push(...bt(e[2].dims)),te.push("rank")),N.push(...bt(r));let q=K=>{let Y=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];$a(t,Y);let Z=w?4:1,de=sn(e[0].dataType),pe=`
      fn setOutputAtIndex(flatIndex : i32, value : ${w?`vec4<${de}>`:de}) {
        result[flatIndex] = ${w?`vec4<${de}>`:de}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${w?`vec4<${de}>`:de}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${w?"/ 4":""}, value);
      }`,L=Be("x",e[0].dataType,e[0].dims.length,x===3?1:x),F=Be("w",e[1].dataType,e[1].dims.length,Z),U=[L,F],re=ht("result",e[0].dataType,r.length,Z);if(a){let me=Be("bias",e[2].dataType,e[2].dims.length,Z);U.push(me),pe+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${w?`vec4<${de}>`:de} {
          return bias[coords.${u?"w":"y"}${w?"/ 4":""}];
        }`}return`
        ${xM("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${K.registerUniforms(Y).declareVariables(...U,re)}
        ${pe}
        ${PM(u,O,B,V,a,t,W[0],W[1],W[2],de)}
        ${w?Kp(P,g,de,void 0,!u,S):Xp(P,g,de,void 0,!u,S,!1,void 0,o)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${t.cacheKey};${x};${w};${O};${B};${V};${T};${E};${S}`,inputDependencies:te},getRunData:()=>({outputs:[{dims:l?l(r):r,dataType:e[0].dataType}],dispatchGroup:{x:b[0],y:b[1],z:b[2]},programUniforms:N}),getShaderSource:q}}}),SM,Yp,ul,kM,Zp,IM,AM,OM,YD=Qe(()=>{kt(),ai(),Nt(),Ut(),Ma(),Gp(),SM=e=>{let t=1;for(let r=0;r<e.length;r++)t*=e[r];return t},Yp=e=>typeof e=="number"?[e,e,e]:e,ul=(e,t)=>t<=1?e:e+(e-1)*(t-1),kM=(e,t,r,n=1)=>{let i=ul(t,n);return Math.floor((e[0]*(r-1)-r+i)/2)},Zp=(e,t,r,n,i)=>{i==null&&(i=kM(e,t[0],n[0]));let s=[0,0,0,r];for(let a=0;a<3;a++)e[a]+2*i>=t[a]&&(s[a]=Math.trunc((e[a]-t[a]+2*i)/n[a]+1));return s},IM=(e,t,r,n,i,s,a,o,l,u)=>{let d,c,p,m;if(e==="VALID"&&(e=0),typeof e=="number"){d={top:e,bottom:e,left:e,right:e,front:e,back:e};let f=Zp([t,r,n,1],[o,l,u],1,[i,s,a],e);c=f[0],p=f[1],m=f[2]}else if(Array.isArray(e)){if(!e.every((w,C,y)=>w===y[0]))throw Error(`Unsupported padding parameter: ${e}`);d={top:e[0],bottom:e[1],left:e[2],right:e[3],front:e[4],back:e[5]};let f=Zp([t,r,n,1],[o,l,u],1,[i,s,a],e[0]);c=f[0],p=f[1],m=f[2]}else if(e==="SAME_UPPER"){c=Math.ceil(t/i),p=Math.ceil(r/s),m=Math.ceil(n/a);let f=(c-1)*i+o-t,w=(p-1)*s+l-r,C=(m-1)*a+u-n,y=Math.floor(f/2),g=f-y,P=Math.floor(w/2),b=w-P,x=Math.floor(C/2),T=C-x;d={top:P,bottom:b,left:x,right:T,front:y,back:g}}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:d,outDepth:c,outHeight:p,outWidth:m}},AM=(e,t,r,n,i,s=!1,a="channelsLast")=>{let o,l,u,d,c;if(a==="channelsLast")[o,l,u,d,c]=e;else if(a==="channelsFirst")[o,c,l,u,d]=e;else throw new Error(`Unknown dataFormat ${a}`);let[p,,m,f,w]=t,[C,y,g]=Yp(r),[P,b,x]=Yp(n),T=ul(m,P),E=ul(f,b),S=ul(w,x),{padInfo:O,outDepth:B,outHeight:V,outWidth:W}=IM(i,l,u,d,C,y,g,T,E,S),N=s?p*c:p,te=[0,0,0,0,0];return a==="channelsFirst"?te=[o,N,B,V,W]:a==="channelsLast"&&(te=[o,B,V,W,N]),{batchSize:o,dataFormat:a,inDepth:l,inHeight:u,inWidth:d,inChannels:c,outDepth:B,outHeight:V,outWidth:W,outChannels:N,padInfo:O,strideDepth:C,strideHeight:y,strideWidth:g,filterDepth:m,filterHeight:f,filterWidth:w,effectiveFilterDepth:T,effectiveFilterHeight:E,effectiveFilterWidth:S,dilationDepth:P,dilationHeight:b,dilationWidth:x,inShape:e,outShape:te,filterShape:t}},OM=(e,t,r,n,i,s)=>{let a=s==="channelsLast";a?e[0].dims[3]:e[0].dims[1];let o=[64,1,1],l={x:r.map((C,y)=>y)},u=[Math.ceil(SM(l.x.map(C=>r[C]))/o[0]),1,1];Zt("verbose",()=>`[conv3d_naive_webgpu] dispatch = ${u}`);let d=1,c=Ce.size(r),p=[{type:12,data:c},{type:12,data:n},{type:12,data:i},{type:12,data:t.strides},{type:12,data:t.dilations}];xa(t,p),p.push(...bt(e[0].dims,e[1].dims));let m=["rank","rank"],f=e.length===3;f&&(p.push(...bt(e[2].dims)),m.push("rank")),p.push(...bt(r));let w=C=>{let y=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:n.length},{name:"pads",type:"u32",length:i.length},{name:"strides",type:"u32",length:t.strides.length},{name:"dilations",type:"u32",length:t.dilations.length}];$a(t,y);let g=1,P=sn(e[0].dataType),b=Be("x",e[0].dataType,e[0].dims.length,d),x=Be("W",e[1].dataType,e[1].dims.length,g),T=[b,x],E=ht("result",e[0].dataType,r.length,g),S="";if(f){let V=Be("bias",e[2].dataType,e[2].dims.length,g);T.push(V),S+=`
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${P} {
          return bias[${a?gt("coords",4,5):gt("coords",1,5)}];
        }`}let O=hn(d,P),B=va(t,O,P);return`
            ${S}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${b.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${x.getByIndices("aIndices")};
            }
          ${C.registerUniforms(y).declareVariables(...T,E)}
          ${C.mainStart()}
          ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${E.offsetToIndices("global_idx")};
              let batch = ${gt("coords",0,b.rank)};
              let d2 = ${a?gt("coords",b.rank-1,b.rank):gt("coords",1,b.rank)};
              let xFRCCorner = vec3<u32>(${a?gt("coords",1,b.rank):gt("coords",2,b.rank)},
              ${a?gt("coords",2,b.rank):gt("coords",3,b.rank)},
              ${a?gt("coords",3,b.rank):gt("coords",4,b.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${a?gt("uniforms.x_shape",1,b.rank):gt("uniforms.x_shape",2,b.rank)};
              let xShapeZ = ${a?gt("uniforms.x_shape",2,b.rank):gt("uniforms.x_shape",3,b.rank)};
              let xShapeW = ${a?gt("uniforms.x_shape",3,b.rank):gt("uniforms.x_shape",4,b.rank)};
              let xShapeU = ${a?gt("uniforms.x_shape",4,b.rank):gt("uniforms.x_shape",1,b.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${a?`let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            `:`let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${a?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${a?`let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      `:`let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${a?`let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      `:`let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${f?"value = value + getBiasByOutputCoords(coords)":""};
              ${B}
              result[global_idx] = f32(value);
          }`};return{name:"Conv3DNaive",shaderCache:{hint:`${t.cacheKey};${a};${d};${f}`,inputDependencies:m},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:u[0],y:u[1],z:u[2]},programUniforms:p}),getShaderSource:w}}}),DM,zM,ZD=Qe(()=>{kt(),Nt(),Ut(),Ma(),DM=(e,t,r,n)=>{let i=e.length>2,s=i?"value += b[output_channel];":"",a=e[0].dims,o=e[1].dims,l=t.format==="NHWC",u=l?r[3]:r[1],d=u/t.group,c=l&&d>=4?Fr(u):1,p=Ce.size(r)/c,m=[{type:12,data:p},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:d}];xa(t,m),m.push(...bt(a,[o[0],o[1],o[2],o[3]/c]));let f=i?["rank","rank","rank"]:["rank","rank"];m.push(...bt([r[0],r[1],r[2],r[3]/c]));let w=C=>{let y=ht("output",e[0].dataType,r.length,c),g=sn(y.type.tensor),P=va(t,y.type.value,g),b=Be("x",e[0].dataType,a.length),x=Be("w",e[1].dataType,o.length,c),T=[b,x];i&&T.push(Be("b",e[2].dataType,e[2].dims,c));let E=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:t.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];$a(t,E);let S=l?`
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {
            let input_channel = in_channel_offset + wInChannel;
            let xVal = ${b.get("batch","xHeight","xWidth","input_channel")};
            let wVal = ${x.get("wHeight","wWidth","wInChannel","output_channel")};
            value += xVal * wVal;
          }
        }
      }
      `:`
      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
        let input_channel = in_channel_offset + wInChannel;
        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {
              continue;
            }

            let xVal = ${b.get("batch","input_channel","xHeight","xWidth")};
            let wVal = ${x.get("output_channel","wInChannel","wHeight","wWidth")};
            value += xVal * wVal;
          }
        }
      }
      `;return`
  ${C.registerUniforms(E).declareVariables(...T,y)}

  ${C.mainStart()}
    ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${y.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${l?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${l?1:2}], outputIndices[${l?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel * ${c} / uniforms.output_channels_per_group;
    var in_channel_offset = group_id * uniforms.w_shape[${l?2:1}];

    var value: ${y.type.value} = ${y.type.value}(0);
    ${S}
    ${s}
    ${P}
    ${y.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:`${t.cacheKey}_${c}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:n?n(r):r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:m}),getShaderSource:w}},zM=(e,t,r,n)=>{let i=e.length>2,s=Fr(r[3]),a=Fr(r[2]),o=Ce.size(r)/s/a,l=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/s],u=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/s],d=[r[0],r[1],r[2],r[3]/s],c=[{type:12,data:o},{type:6,data:[t.strides[0],t.strides[1]]},{type:6,data:[t.pads[0],t.pads[1]]}];xa(t,c),c.push(...bt(l,u,d));let p=(a-1)*t.strides[1]+u[1],m=f=>{let w=ht("output",e[0].dataType,d.length,s),C=sn(w.type.tensor),y=va(t,w.type.value,C),g=Be("x",e[0].dataType,l.length,s),P=Be("w",e[1].dataType,u.length,s),b=[g,P];i&&b.push(Be("b",e[2].dataType,e[2].dims,s));let x=i?"value += b[output_channel];":"",T=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return $a(t,T),`
  ${f.registerUniforms(T).declareVariables(...b,w)}
  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${a}u;
    let col = (index1 % width1) * ${a}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${g.type.value}, ${p}>;
    var values: array<${w.type.value}, ${a}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${u[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${p}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${g.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${g.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${u[1]}; w_width++) {
          let w_val = ${P.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${a}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${a}u; i++) {
      var value = values[i];
      ${x}
      ${y}
      ${w.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${t.cacheKey};${s};${a};${p};${u[0]};${u[1]}`,inputDependencies:i?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:n?n(r):r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:c}),getShaderSource:m}}}),FM,hu,BM,fu,eh,th,LM,RM,rh,ez=Qe(()=>{Nt(),JD(),YD(),Jp(),ZD(),Ma(),Hp(),Oi(),FM=(e,t,r,n,i,s)=>{let a=e[0],o=e.slice(s?1:2,s?3:4),l=o.length,u=t[0],d=t.slice(2).map((p,m)=>p+(p-1)*(r[m]-1)),c=o.map((p,m)=>p+n[m]+n[m+l]).map((p,m)=>Math.floor((p-d[m]+i[m])/i[m]));return c.splice(0,0,a),c.splice(s?3:1,0,u),c},hu=[2,3,1,0],BM=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length>5)throw new Error("greater than 5D is not supported");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[1]*t.group;if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let i=e[0].dims.length-2;if(t.dilations.length!==i)throw new Error(`dilations should be ${i}D`);if(t.strides.length!==i)throw new Error(`strides should be ${i}D`);if(t.pads.length!==i*2)throw new Error(`pads should be ${i*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},fu=(e,t)=>{let r=e.kernelShape.slice();r.length<t[1].dims.length-2&&r.push(...Array(t[1].dims.length-2-r.length).fill(0));for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let n=e.pads.slice();su.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,n,e.format==="NHWC",e.autoPad);let i=Object.assign({},e);return Object.assign(i,{kernelShape:r,pads:n}),i},eh=e=>{let t=Vp(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],i=e.dilations,s=e.group,a=e.kernel_shape,o=e.pads,l=e.strides,u=e.w_is_const();return{autoPad:n,format:r,dilations:i,group:s,kernelShape:a,pads:o,strides:l,wIsConst:u,...t,cacheKey:`${e.format};${t.activation};`}},th=(e,t,r,n)=>{let i=r.format==="NHWC",s=FM(t[0].dims,t[1].dims,r.dilations,r.pads,r.strides,i);if(r.group!==1){let T=[t[0]];if(i){let E=e.kernelCustomData.wT??e.compute(Nn(t[1],hu),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=E),T.push(E)}else T.push(t[1]);t.length===3&&T.push(t[2]),!e.adapterInfo.isArchitecture("ampere")&&i&&t[1].dims[0]===r.group&&t[1].dims[1]===1&&r.dilations[0]===1&&r.dilations[1]===1?e.compute(zM(T,r,s,n),{inputs:T}):e.compute(DM(T,r,s,n),{inputs:T});return}let a=t.length===3,o=t[0].dims[i?1:2],l=t[0].dims[i?2:3],u=t[0].dims[i?3:1],d=t[1].dims[2],c=t[1].dims[3],p=s[i?1:2],m=s[i?2:3],f=s[i?3:1],w=i&&d===o&&c===l&&r.pads[0]===0&&r.pads[1]===0;if(w||d===1&&c===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let T=s[0],E,S,O,B=[];if(i){let N=e.kernelCustomData.wT??e.compute(Nn(t[1],hu),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=N),w){let te=o*l*u;E=t[0].reshape([1,T,te]),S=N.reshape([1,te,f]),O=[1,T,f]}else E=t[0].reshape([T,o*l,u]),S=N.reshape([1,u,f]),O=[T,p*m,f];B.push(E),B.push(S)}else E=t[0].reshape([T,u,o*l]),S=t[1].reshape([1,f,u]),O=[T,f,p*m],B.push(S),B.push(E);a&&B.push(t[2]);let V=O[2],W=B[0].dims[B[0].dims.length-1];V<8&&W<8?e.compute(qp(B,r,s,O,i,n),{inputs:B}):e.compute(pu(B,r,s,O,i,n),{inputs:B});return}let C=!0,y=e.kernelCustomData.wT??e.compute(Nn(t[1],hu),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=y);let g=[t[0],y];a&&g.push(t[2]);let P=i?p*m:f,b=i?f:p*m,x=d*c*u;e.compute(CM(g,r,s,P,b,x,a,C,n),{inputs:g})},LM=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let i=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),a=[1].concat(t.dilations),o=[1].concat(t.kernelShape),l=fu({...t,pads:i,strides:s,dilations:a,kernelShape:o},n);th(e,n,l,u=>r?[u[0],u[2],u[3]]:[u[0],u[1],u[3]])},RM=(e,t,r)=>{let n=r.format==="NHWC"?"channelsLast":"channelsFirst",i=fu(r,t),s=r.autoPad==="NOTSET"?r.pads:r.autoPad,a=AM(t[0].dims,t[1].dims,r.strides,r.dilations,s,!1,n);e.compute(OM(t,i,a.outShape,[a.filterDepth,a.filterHeight,a.filterWidth],[a.padInfo.front,a.padInfo.top,a.padInfo.left],n))},rh=(e,t)=>{if(BM(e.inputs,t),e.inputs[0].dims.length===3)LM(e,t);else if(e.inputs[0].dims.length===5)RM(e,e.inputs,t);else{let r=fu(t,e.inputs);th(e,e.inputs,r)}}}),NM,tz=Qe(()=>{kt(),ai(),Nt(),Ut(),NM=(e,t,r)=>{let n=e.length>2,i=t.outputShape,s=t.format==="NHWC",a=t.group,o=e[1].dims,l=o[2]/a,u=o[3],d=s?Fr(l):1,c=s&&u===1&&l>=4,p=c?Math.floor(l/4)*4:Math.floor(l/d)*d,m=l-p,f=s?Fr(u):1,w=s?u===1?d:f:1,C=Ce.size(i)/f,y=[Math.ceil(C/64),1,1];Zt("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${y}`);let g=["rank","rank"],P=[t.strides[0],t.strides[1]],b=[t.kernelShape[s?1:2],t.kernelShape[s?2:3]],x=[t.dilations[0],t.dilations[1]],T=[b[0]+(t.dilations[0]<=1?0:(t.kernelShape[s?1:2]-1)*(t.dilations[0]-1)),b[1]+(t.dilations[1]<=1?0:(t.kernelShape[s?2:3]-1)*(t.dilations[1]-1))],E=[T[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),T[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],S=[{type:12,data:C},{type:12,data:P},{type:12,data:b},{type:12,data:x},{type:12,data:T},{type:6,data:E},{type:12,data:p},{type:12,data:l},{type:12,data:u},...bt(e[0].dims,e[1].dims)];n&&(S.push(...bt(e[2].dims)),g.push("rank")),S.push(...bt(i));let O=B=>{let V=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:P.length},{name:"filter_dims",type:"u32",length:b.length},{name:"dilations",type:"u32",length:b.length},{name:"effective_filter_dims",type:"u32",length:T.length},{name:"pads",type:"i32",length:E.length},{name:"input_channels_per_group_int",type:"u32"},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],W=sn(e[0].dataType),N=s?1:2,te=s?2:3,q=s?3:1,K=Be("W",e[1].dataType,e[1].dims.length,w),Y=Be("Dy",e[0].dataType,e[0].dims.length,d),Z=[Y,K];n&&Z.push(Be("bias",e[2].dataType,[i[q]].length,f));let de=ht("result",e[0].dataType,i.length,f),pe=()=>{let U="";if(c)d===4?U+=`
        let xValue = ${Y.getByOffset("x_offset")};
        let wValue = ${K.getByOffset("w_offset")};
        dotProd = dotProd + dot(xValue, wValue);
        x_offset += 1u;
        w_offset += 1u;`:d===2?U+=`
          dotProd = dotProd + dot(vec4<${W}>(${Y.getByOffset("x_offset")}, ${Y.getByOffset("x_offset + 1u")}), vec4<${W}>(${K.getByOffset("w_offset")}, ${K.getByOffset("w_offset + 1u")}));
          x_offset += 2u;
          w_offset += 2u;`:d===1&&(U+=`
          dotProd = dotProd + dot(vec4<${W}>(${Y.getByOffset("x_offset")}, ${Y.getByOffset("x_offset + 1u")}, ${Y.getByOffset("x_offset + 2u")}, ${Y.getByOffset("x_offset + 3u")}), vec4<${W}>(${K.getByOffset("w_offset")}, ${K.getByOffset("w_offset + 1u")}, ${K.getByOffset("w_offset + 2u")}, ${K.getByOffset("w_offset + 3u")}));
          x_offset += 4u;
          w_offset += 4u;`);else if(U+=`
                  let xValue = ${s?Y.getByOffset(`${Y.indicesToOffset(`${Y.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${d}`):Y.get("batch","inputChannel","idyR","idyC")};
        `,d===1)U+=`
          let w_offset = ${K.indicesToOffset(`${K.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)};
          let wValue = ${K.getByOffset(`w_offset / ${w}`)};
          dotProd = dotProd + xValue * wValue;`;else for(let re=0;re<d;re++)U+=`
            let wValue${re} = ${K.getByOffset(`${K.indicesToOffset(`${K.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel + ${re}, wOutChannel)`)} / ${w}`)};
            dotProd = dotProd + xValue[${re}] * wValue${re};`;return U},L=()=>{if(m===0)return"";if(!c)throw new Error(`packInputAs4 ${c} is not true.`);let U="";if(d===1){U+="dotProd = dotProd";for(let re=0;re<m;re++)U+=`
            + ${Y.getByOffset(`x_offset + ${re}`)} * ${K.getByOffset(`w_offset + ${re}`)}`;U+=";"}else if(d===2){if(m!==2)throw new Error(`Invalid inputChannelsRemainder ${m}.`);U+=`
          let xValue = ${Y.getByOffset("x_offset")};
          let wValue = ${K.getByOffset("w_offset")};
          dotProd = dotProd + dot(xValue, wValue);`}return U},F=`
            let outputIndices = ${de.offsetToIndices(`global_idx * ${f}`)};
            let batch = ${de.indicesGet("outputIndices",0)};
            let d1 = ${de.indicesGet("outputIndices",q)};
            let r = ${de.indicesGet("outputIndices",N)};
            let c = ${de.indicesGet("outputIndices",te)};
            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
            let dyRCorner = dyCorner.x;
            let dyCCorner = dyCorner.y;
            let groupId = d1 / uniforms.output_channels_per_group;
            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
            // ? = to be determined. : = across all values in that axis.
            var dotProd = ${de.type.value}(0.0);
            var wR: u32 = 0;
            if (uniforms.dilations.x == 1) {
              // Minimum wR >= 0 that satisfies (dyRCorner + wR) % (uniforms.strides.x) == 0
              wR = u32(((dyRCorner + i32(uniforms.strides.x) - 1) / i32(uniforms.strides.x)) * i32(uniforms.strides.x) - dyRCorner);
            }
            for (; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
              if (wR % uniforms.dilations.x != 0) {
                continue;
              }
              let dyR = (${W}(dyRCorner) + ${W}(wR)) / ${W}(uniforms.strides[0]);
              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
              if (dyR < 0.0 || dyR >= ${W}(uniforms.Dy_shape[${N}]) || fract(dyR) > 0.0 ||
                  wRPerm < 0) {
                continue;
              }
              let idyR: u32 = u32(dyR);
              var wC: u32 = 0;
              if (uniforms.dilations.y == 1) {
                // Minimum wC >= 0 that satisfies (dyCCorner + wC) % (uniforms.strides.y) == 0
                wC = u32(((dyCCorner + i32(uniforms.strides.y) - 1) / i32(uniforms.strides.y)) * i32(uniforms.strides.y) - dyCCorner);
              }
              for (; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
                if (wC % uniforms.dilations.y != 0) {
                  continue;
                }
                let dyC = (${W}(dyCCorner) + ${W}(wC)) / ${W}(uniforms.strides.y);
                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
                if (dyC < 0.0 || dyC >= ${W}(uniforms.Dy_shape[${te}]) ||
                    fract(dyC) > 0.0 || wCPerm < 0) {
                  continue;
                }
                let idyC: u32 = u32(dyC);
                var inputChannel = groupId * uniforms.input_channels_per_group;
                ${c?`
                var x_offset = ${Y.indicesToOffset(`${Y.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${d};
                var w_offset = ${K.indicesToOffset(`${K.type.indices}(wRPerm, wCPerm, inputChannel, wOutChannel)`)} / ${w};
                  `:""}
                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group_int; d2 = d2 + ${c?4:d}) {
                  ${pe()}
                  inputChannel = inputChannel + ${c?4:d};
                }
                ${L()}
                wC = wC + uniforms.strides.y - 1;
              }
              wR = wR + uniforms.strides[0] - 1;
            }
            let value = dotProd${n?` + bias[d1 / ${f}]`:""};
            ${de.setByOffset("global_idx","value")};
          `;return`
    ${B.registerUniforms(V).declareVariables(...Z,de)}
      ${B.mainStart()}
      ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
    ${F}}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${t.cacheKey};${d}${w}${f}${c}${m}`,inputDependencies:g},getRunData:()=>({dispatchGroup:{x:y[0],y:y[1],z:y[2]},outputs:[{dims:r?r(i):i,dataType:e[0].dataType}],programUniforms:S}),getShaderSource:O}}}),jM,UM,WM,nh,VM,GM,sh,qM,HM,rz=Qe(()=>{tz(),Ma(),Oi(),jM=(e,t,r,n,i,s)=>(e-1)*t+r+(n-1)*i+1-s,UM=(e,t,r,n,i)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[n]=s,r[i]=e-s):t==="SAME_LOWER"&&(r[n]=e-s,r[i]=s)},WM=(e,t,r,n,i,s,a,o,l,u)=>{let d=e.length-2,c=u.length===0;l.length<d&&l.push(...Array(d-l.length).fill(0));let p=e[0],m=t[o?3:1]*i;for(let f=0,w=e.length-d-(o?1:0);f<d;++f,++w){let C=e[w],y=c?C*a[f]:u[f],g=jM(C,a[f],s[f],t[w],r[f],y);UM(g,n,s,f,f+d),c&&u.push(a[f]*(C-1)+l[f]+(t[w]-1)*r[f]+1-s[f]-s[f+d])}u.splice(0,0,p),u.splice(o?3:1,0,m)},nh=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((c,p)=>c*p,1)===0){r.length=0;for(let c=2;c<t[1].dims.length;++c)r.push(t[1].dims[c])}let n=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(n?3:1,0,t[1].dims[1]);let i=e.pads.slice(),s=e.outputShape.slice(),a=e.outputPadding.slice(),o=t[0].dims,l=e.dilations.slice();if(l.reduce((c,p)=>c+p,0)===0){let c=t[0].dims.length-2;l=new Array(c).fill(1)}let u=e.strides.slice();if(u.reduce((c,p)=>c+p,0)===0){let c=t[0].dims.length-2;u=new Array(c).fill(1)}WM(o,r,l,e.autoPad,e.group,i,u,n,a,s);let d=Object.assign({},e);return Object.assign(d,{kernelShape:r,pads:i,outputPadding:a,outputShape:s,dilations:l,strides:u}),d},VM=e=>{let t=Vp(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],i=e.dilations,s=e.group,a=e.kernelShape,o=e.pads,l=e.strides,u=e.wIsConst(),d=e.outputPadding,c=e.outputShape;return{autoPad:n,format:r,dilations:i,group:s,kernelShape:a,outputPadding:d,outputShape:c,pads:o,strides:l,wIsConst:u,...t,cacheKey:`${e.format};${t.activation};`}},GM=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[0];if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let i=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==i))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((a,o)=>a+o,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((a,o)=>a+o,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((a,o)=>a+o,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((a,o)=>a+o,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},sh=(e,t,r,n)=>{let i=e.kernelCustomData.wT??e.compute(Nn(t[1],[2,3,0,1]),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=i);let s=[t[0],i];t.length===3&&s.push(t[2]),e.compute(NM(s,r,n),{inputs:s})},qM=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let i=t.kernelShape;(i.length===0||i[0]===0)&&(i=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let a=t.strides;(a.length===0||a[0]===0)&&(a=[1]);let o=t.pads;o.length===0&&(o=[0,0]),o=[0,o[0],0,o[1]],a=[1].concat(a),s=[1].concat(s),i=[1].concat(i);let l=t.outputPadding;l=[0].concat(l);let u=nh({...t,pads:o,strides:a,dilations:s,kernelShape:i,outputPadding:l},n);sh(e,n,u,d=>r?[d[0],d[2],d[3]]:[d[0],d[1],d[3]])},HM=(e,t)=>{if(GM(e.inputs,t),e.inputs[0].dims.length===3)qM(e,t);else{let r=nh(t,e.inputs);sh(e,e.inputs,r)}}}),KM,QM,XM,nz=Qe(()=>{kt(),Nt(),jr(),Ut(),KM=(e,t,r,n)=>{let i=Ce.size(t),s=t.length,a=Be("input",e,s),o=ht("output",e,s),l=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),u=Ce.normalizeAxis(l,s),d=c=>{let p=` i32(${a.indicesGet("inputIndices","uniforms.axis")}) `,m=gt("uniforms.input_shape","uniforms.axis",s),f=n.reverse?p+(n.exclusive?" + 1":""):"0",w=n.reverse?m:p+(n.exclusive?"":" + 1");return`
                ${c.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(a,o)}
                ${c.mainStart()}
                  ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${o.offsetToIndices("global_idx")};
                  var sum = ${o.type.value}(0);
                  let first : i32 = ${f};
                  let last : i32 = ${w};
                  for (var i : i32 = first; i < last; i++) {
                    ${a.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${a.getByIndices("inputIndices")};
                  }
                  ${o.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:n.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:12,data:i},{type:12,data:u},...bt(t,t)]}),getShaderSource:d}},QM=(e,t)=>{let r=e.inputs[0].dims,n=e.inputs[0].dataType,i=e.inputs[1];e.compute(KM(n,r,i,t),{inputs:[0]})},XM=e=>{let t=e.exclusive===1,r=e.reverse===1;return lr({exclusive:t,reverse:r})}}),JM,YM,ZM,e2,t2,sz=Qe(()=>{kt(),Nt(),jr(),Ut(),JM=e=>{if(!e||e.length!==1)throw new Error("DepthToSpace requires 1 input.");if(e[0].dims.length!==4)throw new Error("DepthToSpace requires 4D input.")},YM=(e,t,r,n)=>{let i=[];i.push(`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let s=0;s<t;++s)i.push(r.indicesSet("a",e[s],`i[${s}]`));return i.push("return a;}"),i.join(`
`)},ZM=(e,t)=>{let r,n,i,s,a,o,l=t.format==="NHWC",u=t.blocksize,d=t.mode==="DCR";l?([r,n,i,s]=e.dims,a=d?[r,n,i,u,u,s/u**2]:[r,n,i,s/u**2,u,u],o=d?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([r,n,i,s]=[e.dims[0],e.dims[2],e.dims[3],e.dims[1]],a=d?[r,u,u,s/u**2,n,i]:[r,s/u**2,u,u,n,i],o=d?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let c=e.reshape(a),p=c.dims.length,m=e.dataType,f=Be("a",m,p),w=ht("output",m,p),C=y=>`
  ${y.registerUniform("output_size","u32").declareVariables(f,w)}

  ${YM(o,p,f,w)}

  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${w.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${w.setByOffset("global_idx",f.getByIndices("aIndices"))}
  }`;return{name:"DepthToSpace",shaderCache:{hint:`${e.dims};${t.blocksize};${t.mode}`,inputDependencies:["rank"]},getRunData:y=>{let g=l?[r,n*u,i*u,s/u**2]:[r,s/u**2,n*u,i*u],P=Ce.size(g),b=c.dims,x=Ce.sortBasedOnPerm(b,o);return{outputs:[{dims:g,dataType:y[0].dataType}],dispatchGroup:{x:Math.ceil(P/64)},programUniforms:[{type:12,data:P},...bt(b,x)]}},getShaderSource:C}},e2=(e,t)=>{JM(e.inputs),e.compute(ZM(e.inputs[0],t))},t2=e=>lr({blocksize:e.blocksize,mode:e.mode,format:e.format})}),mu,dl,ih,r2,n2,s2,i2,ah,a2,o2,l2,iz=Qe(()=>{kt(),Nt(),jr(),Ut(),mu="[a-zA-Z]|\\.\\.\\.",dl="("+mu+")+",ih="^"+dl+"$",r2="("+dl+",)*"+dl,n2="^"+r2+"$",s2=class{constructor(e=-1){this.symbolToIndices=new Map,this.inputIndex=e}addSymbol(e,t){let r=this.symbolToIndices.get(e);r===void 0?r=[t]:r.push(t),this.symbolToIndices.set(e,r)}},i2=class{constructor(e,t){var i;this.equation=t,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[r,n]=t.includes("->")?t.split("->",2):[t,""];if(!r.match(RegExp(n2)))throw new Error("Invalid LHS term");if(r.split(",").forEach((s,a)=>{let o=e[a].dims.slice();if(!s.match(RegExp(ih)))throw new Error("Invalid LHS term");let l=this.processTerm(s,!0,o,a);this.lhs.push(l)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([s,a])=>a.count===1||s==="...").map(([s])=>s).join("");else if(!n.match(RegExp(dl)))throw new Error("Invalid RHS");(i=n.match(RegExp(mu,"g")))==null||i.forEach(s=>{if(s==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let a=this.symbolToInfo.get(s);if(a===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(a.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(e,t,r){let n=this.symbolToInfo.get(e);if(n!==void 0){if(n.dimValue!==t&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(r)}else n={count:1,dimValue:t,inputIndices:[r]};this.symbolToInfo.set(e,n)}processTerm(e,t,r,n=-1){let i=r.length,s=!1,a=[],o=0;if(!e.match(RegExp(ih))&&!t&&e!=="")throw new Error("Invalid LHS term");let l=e.match(RegExp(mu,"g")),u=new s2(n);return l==null||l.forEach((d,c)=>{if(d==="..."){if(s)throw new Error("Only one ellipsis is allowed per input term");s=!0;let p=i-l.length+1;if(p<0)throw new Error("Ellipsis out of bounds");if(a=r.slice(o,o+p),this.hasEllipsis){if(this.ellipsisDims.length!==a.length||this.ellipsisDims.toString()!==a.toString())throw new Error("Ellipsis dimensions mismatch")}else if(t)this.hasEllipsis=!0,this.ellipsisDims=a;else throw new Error("Ellipsis must be specified in the LHS");for(let m=0;m<a.length;m++){let f=String.fromCharCode(48+m);u.addSymbol(f,c+m),this.addSymbol(f,r[o++],n)}}else u.addSymbol(d,c+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(d,r[o++],n)}),u}},ah=e=>e+"_max",a2=(e,t,r,n)=>{let i=e.map(u=>u.length).map((u,d)=>Be(`input${d}`,t,u)),s=Ce.size(n),a=ht("output",t,n.length),o=[...r.symbolToInfo.keys()].filter(u=>!r.rhs.symbolToIndices.has(u)),l=u=>{let d=[],c="var prod = 1.0;",p="var sum = 0.0;",m="sum += prod;",f=[],w=[],C=[],y=[],g=r.symbolToInfo.size===r.rhs.symbolToIndices.size;r.symbolToInfo.forEach((b,x)=>{var T;if(r.rhs.symbolToIndices.has(x)){let E=(T=r.rhs.symbolToIndices.get(x))==null?void 0:T[0];E!==void 0&&r.lhs.forEach((S,O)=>{if(b.inputIndices.includes(O)){let B=S.symbolToIndices.get(x);if(B===void 0)throw new Error("Invalid symbol error");B.forEach(V=>{d.push(`${i[O].indicesSet(`input${O}Indices`,V,a.indicesGet("outputIndices",E))}`)})}})}else r.lhs.forEach((E,S)=>{if(b.inputIndices.includes(S)){let O=E.symbolToIndices.get(x);if(O===void 0)throw new Error("Invalid symbol error");O.forEach(B=>{f.push(`${i[S].indicesSet(`input${S}Indices`,B,`${x}`)}`)}),y.push(`prod *= ${i[S].getByIndices(`input${S}Indices`)};`)}}),w.push(`for(var ${x}: u32 = 0; ${x} < uniforms.${ah(x)}; ${x}++) {`),C.push("}")});let P=g?[...d,`let sum = ${i.map((b,x)=>b.getByIndices(`input${x}Indices`)).join(" * ")};`]:[...d,p,...w,...f,c,...y,m,...C];return`
            ${u.registerUniforms(o.map(b=>({name:`${ah(b)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...i,a)}

            ${u.mainStart()}
            ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${a.offsetToIndices("global_idx")};
            ${i.map((b,x)=>`var input${x}Indices: ${i[x].type.indices};`).join(`
`)}
            ${P.join(`
`)};
            ${a.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:r.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let u=o.filter(c=>r.symbolToInfo.has(c)).map(c=>{var p;return{type:12,data:((p=r.symbolToInfo.get(c))==null?void 0:p.dimValue)||0}});u.push({type:12,data:s});let d=e.map((c,p)=>[...bt(c)]).reduce((c,p)=>c.concat(p),u);return d.push(...bt(n)),{outputs:[{dims:n,dataType:t}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:d}},getShaderSource:l}},o2=(e,t)=>{let r=new i2(e.inputs,t.equation),n=r.outputDims,i=e.inputs.map((s,a)=>s.dims);e.compute(a2(i,e.inputs[0].dataType,r,n))},l2=e=>{let t=e.equation.replace(/\s+/g,"");return lr({equation:t})}}),u2,oh,d2,c2,p2,az=Qe(()=>{kt(),Nt(),Ut(),u2=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=r.length<t.length?0:r.length-t.length,i=t.length<r.length?0:t.length-r.length;for(;n<r.length&&i<t.length;++n,++i)if(r[n]!==t[i]&&r[n]!==1&&t[i]!==1)throw new Error("Expand requires shape to be broadcastable to input")},oh=(e,t)=>{let r=e.length-t.length,n=[];for(let i=0;i<r;++i)n.push(e[i]);for(let i=0;i<t.length;++i)n.push(t[i]===1?e[i+r]:t[i]);return n},d2=(e,t)=>e.length>t.length?oh(e,t):oh(t,e),c2=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=d2(t,r),i=e[0].dataType,s=i===9||Ce.size(t)===1,a=i===9||t.length>0&&t[t.length-1]%4===0?4:1,o=s||n.length>0&&n[n.length-1]%4===0?4:1,l=Math.ceil(Ce.size(n)/o),u=c=>{let p=Be("input",i,t.length,a),m=ht("output",i,n.length,o),f;if(i===9){let w=(C,y,g="")=>`
          let outputIndices${y} = ${m.offsetToIndices(`outputOffset + ${y}u`)};
          let offset${y} = ${p.broadcastedIndicesToOffset(`outputIndices${y}`,m)};
          let index${y} = offset${y} / 4u;
          let component${y} = offset${y} % 4u;
          ${C}[${y}] = ${g}(${p.getByOffset(`index${y}`)}[component${y}]);
        `;f=`
        let outputOffset = global_idx * ${o};
        var data = vec4<u32>(0);
        ${w("data",0,"u32")}
        ${w("data",1,"u32")}
        ${w("data",2,"u32")}
        ${w("data",3,"u32")}
        ${m.setByOffset("global_idx","data")}
      }`}else f=`
        let outputIndices = ${m.offsetToIndices(`global_idx * ${o}`)};
        let inputOffset = ${p.broadcastedIndicesToOffset("outputIndices",m)};
        let data = ${m.type.value}(${p.getByOffset(`inputOffset / ${a}`)});
        ${m.setByOffset("global_idx","data")}
      }`;return`
    ${c.registerUniform("vec_size","u32").declareVariables(p,m)}
    ${c.mainStart()}
    ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${f}`},d=[{type:12,data:l},...bt(t,n)];return{name:"Expand",shaderCache:{hint:`${n.length};${a}${o}`,inputDependencies:["rank"]},getShaderSource:u,getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:d})}},p2=e=>{u2(e.inputs),e.compute(c2(e.inputs),{inputs:[0]})}}),h2,f2,oz=Qe(()=>{kt(),Nt(),Ut(),Wp(),h2=e=>{let t=e[0].dataType,r=Ce.size(e[0].dims),n=Ce.size(e[1].dims),i=n%4===0,s=a=>{let o=Be("x",t,[1],4),l=Be("bias",t,[1],4),u=ht("y",t,[1],4),d=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],c=m=>`
      let bias${m}_offset: u32 = (global_idx * 4 + ${m}) % uniforms.bias_size;
      let bias${m} = ${l.getByOffset(`bias${m}_offset / 4`)}[bias${m}_offset % 4];`,p=i?`
      let bias = ${l.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${c(0)}${c(1)}${c(2)}${c(3)}
      let bias = ${o.type.value}(bias0, bias1, bias2, bias3);`;return`${a.registerUniforms(d).declareVariables(o,l,u)}

    ${jp($n(t))}

    ${a.mainStart(io)}
      ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${o.getByOffset("global_idx")};
      ${p}
      let x_in = x + bias;
      ${u.setByOffset("global_idx",Up("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${i}`,inputDependencies:["type","type"]},getShaderSource:s,getRunData:a=>({outputs:[{dims:a[0].dims,dataType:a[0].dataType}],programUniforms:[{type:12,data:Math.ceil(r/4)},{type:12,data:n}],dispatchGroup:{x:Math.ceil(r/io/4)}})}},f2=e=>{e.inputs.length<2||Ce.size(e.inputs[1].dims)===0?K$(e):e.compute(h2(e.inputs))}}),m2,_2,g2,w2,lz=Qe(()=>{kt(),Nt(),jr(),Ut(),m2=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},_2=(e,t)=>{let r=e[0].dims,n=e[1].dims,i=r.length,s=Ce.normalizeAxis(t.axis,i),a=r.slice(0);a.splice(s,1,...n);let o=r[s],l=e[0].dataType===9?4:1,u=Math.ceil(Ce.size(a)/l),d=[{type:12,data:u},{type:6,data:o},{type:12,data:s},...bt(e[0].dims,e[1].dims,a)],c=p=>{let m=Be("data",e[0].dataType,e[0].dims.length,l),f=Be("inputIndices",e[1].dataType,e[1].dims.length),w=ht("output",e[0].dataType,a.length,l),C=g=>{let P=n.length,b=`var indicesIndices${g}  = ${f.type.indices}(0);`;for(let x=0;x<P;x++)b+=`${P>1?`indicesIndices${g}[${x}]`:`indicesIndices${g}`} = ${a.length>1?`outputIndices${g}[uniforms.axis + ${x}]`:`outputIndices${g}`};`;b+=`
          var idx${g} = ${f.getByIndices(`indicesIndices${g}`)};
          if (idx${g} < 0) {
            idx${g} = idx${g} + uniforms.axisDimLimit;
          }
          var dataIndices${g} : ${m.type.indices};
        `;for(let x=0,T=0;x<i;x++)x===s?(b+=`${i>1?`dataIndices${g}[${x}]`:`dataIndices${g}`} = u32(idx${g});`,T+=P):(b+=`${i>1?`dataIndices${g}[${x}]`:`dataIndices${g}`} = ${a.length>1?`outputIndices${g}[${T}]`:`outputIndices${g}`};`,T++);return b},y;if(e[0].dataType===9){let g=(P,b,x="")=>`
          let outputIndices${b} = ${w.offsetToIndices(`outputOffset + ${b}u`)};
          ${C(b)};
          let offset${b} = ${m.indicesToOffset(`dataIndices${b}`)};
          let index${b} = offset${b} / 4u;
          let component${b} = offset${b} % 4u;
          ${P}[${b}] = ${x}(${m.getByOffset(`index${b}`)}[component${b}]);
        `;y=`
        let outputOffset = global_idx * ${l};
        var value = vec4<u32>(0);
        ${g("value",0,"u32")}
        ${g("value",1,"u32")}
        ${g("value",2,"u32")}
        ${g("value",3,"u32")}
        ${w.setByOffset("global_idx","value")}
      `}else y=`
      let outputIndices = ${w.offsetToIndices("global_idx")};
      ${C("")};
      let value = ${m.getByIndices("dataIndices")};
      ${w.setByOffset("global_idx","value")};
      `;return`
      ${p.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(m,f,w)}
      ${p.mainStart()}
        ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${y}
      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:d}),getShaderSource:c}},g2=e=>lr({axis:e.axis}),w2=(e,t)=>{let r=e.inputs;m2(r),e.compute(_2(e.inputs,t))}}),y2,b2,v2,uz=Qe(()=>{kt(),Nt(),Ut(),y2=(e,t,r,n,i,s,a,o,l)=>{let u=[{type:12,data:s},{type:12,data:n},{type:12,data:i},{type:12,data:r},{type:12,data:a},{type:12,data:o},{type:12,data:l}],d=[s];u.push(...bt(t.dims,d));let c=p=>{let m=Be("indices_data",t.dataType,t.dims.length),f=ht("input_slice_offsets_data",12,1,1),w=[m,f],C=[{name:"output_size",type:"u32"},{name:"batch_dims",type:"u32"},{name:"input_dims",type:"u32",length:i.length},{name:"sizes_from_slice_dims_data",type:"u32",length:r.length},{name:"num_slices_per_batch",type:"u32"},{name:"input_batch_stride",type:"u32"},{name:"num_slice_dims",type:"u32"}];return`
  ${p.registerUniforms(C).declareVariables(...w)}
  ${p.mainStart()}
    ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let batch_idx = global_idx / uniforms.num_slices_per_batch;
    let base_offset = batch_idx * uniforms.input_batch_stride;

    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;
    var relative_slice_offset = 0;
    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {
      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);
      let input_dim_idx = uniforms.batch_dims + dim_idx;
      if (index < 0) {
        ${i.length===1?"index += i32(uniforms.input_dims);":"index += i32(uniforms.input_dims[input_dim_idx]);"}
      }
      ${r.length===1?"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);":"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);"}
    }

    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);
  }`};return e.compute({name:"computeSliceOffsets",shaderCache:{hint:`${i.length}_${r.length}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:d,dataType:e.inputs[1].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:u}),getShaderSource:c},{inputs:[t],outputs:[-1]})[0]},b2=(e,t)=>{let r=e.inputs,n=r[0].dims,i=r[0].dataType,s=r[1].dims,a=s[s.length-1],o=Ce.sizeToDimension(s,s.length-1),l=Ce.sizeFromDimension(n,t.batchDims+a),u=Ce.sizeToDimension(n,t.batchDims),d=Ce.sizeFromDimension(n,t.batchDims),c=o/u,p=new Array(a),m=l;for(let b=0;b<a;++b)p[a-1-b]=m,m*=n[t.batchDims+a-1-b];let f=y2(e,r[1],p,t.batchDims,n,o,c,d,a),w=t.batchDims+a;if(w>n.length)throw new Error("last dimension of indices must not be larger than rank of input tensor");let C=s.slice(0,-1).concat(n.slice(w)),y=Ce.size(C),g=[{type:12,data:y},{type:12,data:l},...bt(r[0].dims,f.dims,C)],P=b=>{let x=Be("data",r[0].dataType,r[0].dims.length),T=Be("slice_offsets",12,f.dims.length),E=ht("output",r[0].dataType,C.length);return`
          ${b.registerUniform("output_size","u32").registerUniform("slice_size","u32").declareVariables(x,T,E)}
            ${b.mainStart()}
            ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];
          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];
        }`};e.compute({name:"GatherND",shaderCache:{hint:t.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:C,dataType:i}],dispatchGroup:{x:Math.ceil(y/64)},programUniforms:g}),getShaderSource:P},{inputs:[r[0],f]})},v2=e=>({batchDims:e.batch_dims,cacheKey:""})}),x2,$2,M2,T2,dz=Qe(()=>{kt(),Nt(),jr(),Ut(),x2=(e,t)=>{if(e.length<3||e.length>4)throw new Error("GatherBlockQuantized requires 3 or 4 inputs.");let r=Ce.normalizeAxis(t.quantizeAxis,e[0].dims.length),n=t.blockSize,i=e[0],s=e[2],a=e.length===4?e[3]:void 0;if(s.dims.length!==i.dims.length||!i.dims.map((o,l)=>l===r?Math.ceil(o/n)===s.dims[l]:o===s.dims[l]).reduce((o,l)=>o&&l,!0))throw new Error("Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.");if(a){if(a.dataType!==i.dataType)throw new Error("Zero point must have the same data type as the input tensor.");if(a.dims.length!==s.dims.length||!a.dims.map((o,l)=>o===s.dims[l]).reduce((o,l)=>o&&l,!0))throw new Error("Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.")}},$2=(e,t)=>{let r=e[0].dims,n=e[1].dims,i=r.length,s=Ce.normalizeAxis(t.gatherAxis,i),a=Ce.normalizeAxis(t.quantizeAxis,i),o=r.slice(0);o.splice(s,1,...n);let l=Ce.size(o),u=e[2].dataType,d=e[0].dataType===22,c=[{type:12,data:l},{type:12,data:a},{type:12,data:s},{type:12,data:t.blockSize},...bt(...e.map((m,f)=>m.dims),o)],p=m=>{let f=Be("data",e[0].dataType,e[0].dims.length),w=Be("inputIndices",e[1].dataType,e[1].dims.length),C=Be("scales",e[2].dataType,e[2].dims.length),y=e.length>3?Be("zeroPoint",e[3].dataType,e[3].dims.length):void 0,g=ht("output",u,o.length),P=[f,w,C];y&&P.push(y);let b=[{name:"output_size",type:"u32"},{name:"quantize_axis",type:"u32"},{name:"gather_axis",type:"u32"},{name:"block_size",type:"u32"}];return`
        ${m.registerUniforms(b).declareVariables(...P,g)}
        ${m.mainStart()}
        let output_indices = ${g.offsetToIndices("global_idx")};
        var indices_indices = ${w.type.indices}(0);
        ${n.length>1?`
          for (var i: u32 = 0; i < ${n.length}; i++) {
            let index = ${g.indicesGet("output_indices","uniforms.gather_axis + i")};
            ${w.indicesSet("indices_indices","i","index")};
          }`:`indices_indices = ${g.indicesGet("output_indices","uniforms.gather_axis")};`};
        var data_indices = ${f.type.indices}(0);
        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {
          let index = ${g.indicesGet("output_indices","i")};
          ${f.indicesSet("data_indices","i","index")};
        }
        var index_from_indices = ${w.getByIndices("indices_indices")};
        if (index_from_indices < 0) {
          index_from_indices += ${r[s]};
        }
        ${f.indicesSet("data_indices","uniforms.gather_axis","u32(index_from_indices)")};
        for (var i = uniforms.gather_axis + 1; i < ${o.length}; i++) {
          let index = ${g.indicesGet("output_indices",`i + ${n.length} - 1`)};
          ${f.indicesSet("data_indices","i","index")};
        }
        let data_offset = ${f.indicesToOffset("data_indices")};
        let data_index = data_offset % 8;
        // Convert 4-bit packed data to 8-bit packed data.
        let packed_4bit_quantized_data = ${f.getByOffset("data_offset / 8")};
        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;
        let quantized_data_vec = ${d?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_quantized_data));
        let quantized_data = quantized_data_vec[data_index / 2];
        var scale_indices = data_indices;
        let quantize_axis_index = ${C.indicesGet("data_indices","uniforms.quantize_axis")} / uniforms.block_size;
        ${C.indicesSet("scale_indices","uniforms.quantize_axis","quantize_axis_index")};
        var scale = ${C.getByIndices("scale_indices")};
        ${y?`
              let zero_point_indices = scale_indices;
              let zero_point_offset = ${y.indicesToOffset("zero_point_indices")};
              let zero_point_index = zero_point_offset % 8;
              let packed_4bit_zero_points = ${y.getByOffset("zero_point_offset / 8")};
              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;
              let zero_point_vec = ${d?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_zero_points));
              let zero_point = zero_point_vec[zero_point_index / 2];`:"var zero_point = 0"};
        let dequantized_data = ${$n(u)}(quantized_data - zero_point) * scale;
        ${g.setByOffset("global_idx","dequantized_data")};
    }`};return{name:"GatherBlockQuantized",shaderCache:{hint:`${t.cacheKey};${e.filter((m,f)=>f!==1).map(m=>m.dims.join("_")).join(";")}`,inputDependencies:Array.from({length:e.length},(m,f)=>"rank")},getRunData:()=>({outputs:[{dims:o,dataType:u}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:c}),getShaderSource:p}},M2=(e,t)=>{let r=e.inputs;x2(r,t),e.compute($2(e.inputs,t))},T2=e=>lr({blockSize:e.blockSize,gatherAxis:e.gatherAxis,quantizeAxis:e.quantizeAxis})}),E2,P2,C2,S2,cz=Qe(()=>{kt(),Nt(),jr(),Ut(),E2=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},P2=(e,t)=>{let r=e[0].dims,n=e[0].dataType,i=r.length,s=e[1].dims,a=e[1].dataType,o=Ce.normalizeAxis(t.axis,i),l=r[o],u=s.slice(0),d=Ce.size(u),c=Be("input",n,i),p=Be("indicesInput",a,s.length),m=ht("output",n,u.length),f=[{type:12,data:d},{type:6,data:l},{type:12,data:o}];return f.push(...bt(r,s,u)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:f}),getShaderSource:w=>`
      ${w.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(c,p,m)}
      ${w.mainStart()}
      ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${m.offsetToIndices("global_idx")};

      var idx = ${p.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${c.type.indices}(outputIndices);
      ${c.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${c.getByIndices("inputIndices")};

      ${m.setByOffset("global_idx","value")};
  }`}},C2=e=>lr({axis:e.axis}),S2=(e,t)=>{let r=e.inputs;E2(r),e.compute(P2(e.inputs,t))}}),k2,I2,A2,O2,pz=Qe(()=>{kt(),Nt(),Ut(),k2=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},I2=(e,t)=>{let r=e[0].dims.slice(),n=e[1].dims.slice(),[i,s,a]=U1.getShapeOfGemmResult(r,t.transA,n,t.transB,e.length===3?e[2].dims:void 0),o=[i,s];if(!o)throw new Error("Can't use gemm on the given tensors");let l=16,u=Math.ceil(s/l),d=Math.ceil(i/l),c=!0,p=Ce.size(o),m=[{type:12,data:c?u:p},{type:12,data:i},{type:12,data:s},{type:12,data:a},{type:1,data:t.alpha},{type:1,data:t.beta}],f=["type","type"];e.length===3&&(m.push(...bt(e[2].dims)),f.push("rank")),m.push(...bt(o));let w=y=>{let g="";t.transA&&t.transB?g="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?g="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?g="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(g="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let P=t.alpha===1?"":"value *= uniforms.alpha;",b=Be("a",e[0].dataType,e[0].dims),x=Be("b",e[1].dataType,e[1].dims),T=b.type.value,E=null,S=[b,x];e.length===3&&(E=Be("c",e[2].dataType,e[2].dims.length),S.push(E));let O=ht("output",e[0].dataType,o.length);S.push(O);let B=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${y.registerUniforms(B).declareVariables(...S)}

  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${T}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${g}
    }

    ${P}
    ${E!=null?`let cOffset = ${E.broadcastedIndicesToOffset("vec2(m, n)",O)}; value += ${T}(uniforms.beta) * ${E.getByOffset("cOffset")};`:""}
    output[global_idx] = value;
  }`},C=y=>{let g=Be("a",e[0].dataType,e[0].dims),P=Be("b",e[1].dataType,e[1].dims),b=null,x=[g,P];e.length===3&&(b=Be("c",e[2].dataType,e[2].dims.length),x.push(b));let T=ht("output",e[0].dataType,o.length);x.push(T);let E=[{name:"num_tile_n",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}],S="",O="";t.transA&&t.transB?(O=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${g.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${P.type.value}(0);
      }
      `,S="value += tile_a[k][local_id.y] * tile_b[local_id.x][k];"):t.transA&&!t.transB?(O=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${g.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${P.type.value}(0);
      }
      `,S="value += tile_a[k][local_id.y] * tile_b[k][local_id.x];"):!t.transA&&t.transB?(O=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${g.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${P.type.value}(0);
      }
      `,S="value += tile_a[local_id.y][k] * tile_b[local_id.x][k];"):!t.transA&&!t.transB&&(O=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${g.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${P.type.value}(0);
      }
      `,S="value += tile_a[local_id.y][k] * tile_b[k][local_id.x];");let B=t.alpha===1?"":"value *= uniforms.alpha;";return`
  ${y.registerUniforms(E).declareVariables(...x)}
  var<workgroup> tile_a: array<array<${g.type.storage}, ${l}>, ${l}>;
  var<workgroup> tile_b: array<array<${P.type.storage}, ${l}>, ${l}>;
  ${y.mainStart([l,l,1])}
    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * ${l};
    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * ${l};
    let num_tiles = (uniforms.K - 1) / ${l} + 1;
    var k_start = 0u;
    var value = ${T.type.value}(0);
    for (var t: u32 = 0u; t < num_tiles; t++) {
      ${O}
      k_start = k_start + ${l};
      workgroupBarrier();

      for (var k: u32 = 0u; k < ${l}; k++) {
        ${S}
      }
      workgroupBarrier();
    }

    ${B}
    let m = tile_row_start + local_id.y;
    let n = tile_col_start + local_id.x;
    ${b!=null?`let cOffset = ${b.broadcastedIndicesToOffset("vec2(m, n)",T)}; value += ${T.type.value}(uniforms.beta) * ${b.getByOffset("cOffset")};`:""}
    if (m < uniforms.M && n < uniforms.N) {
      output[m * uniforms.N + n] = value;
    }
  }`};return c?{name:"GemmShared",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:u*d},programUniforms:m}),getShaderSource:C}:{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:m}),getShaderSource:w}},A2=e=>{let t=e.transA,r=e.transB,n=e.alpha,i=e.beta;return{transA:t,transB:r,alpha:n,beta:i,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},O2=(e,t)=>{k2(e.inputs),e.compute(I2(e.inputs,t))}}),Ls,oi,Ta,Ea,D2,z2,F2,B2,L2,R2,N2,j2,U2,W2,hz=Qe(()=>{kt(),Nt(),jr(),Ut(),[Ls,oi,Ta,Ea]=[0,1,2,3],D2=e=>{if(e[0].dims.length!==4)throw new Error("only 4-D tensor is supported.");if(e[0].dims.length!==e[1].dims.length)throw new Error("input dimensions must be equal to grid dimensions");if(e[0].dims.length-2!==e[1].dims[e[1].dims.length-1])throw new Error(`last dimension of grid must be equal to ${e[0].dims.length-2}`);if(e[0].dims[0]!==e[1].dims[0])throw new Error("grid batch size must match input batch size")},z2=`
  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {
    let cubic_alpha = -0.75f;
    let x_abs = abs(x);
    var coeffs: vec4<f32>;
    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);
    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);
    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);
    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);
    return coeffs;
  }
`,F2=e=>`
  fn gs_bicubic_interpolate(p: mat4x4<${e}>, x: f32, y: f32) -> ${e} {
    var v: vec4<f32>;
    var coeffs = gs_get_cubic_coeffs(x);
    for (var i = 0; i < 4; i++) {
      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];
    }
    coeffs = gs_get_cubic_coeffs(y);
    let pixel = ${e}(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);
    return pixel;
  }
`,B2=e=>`
  fn gs_denormalize(n: f32, length: i32) -> f32 {
    ${e.alignCorners===0?`
    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]
    return ((n + 1.0) * f32(length) - 1.0) / 2.0;
    `:`
    // alignCorners: true => [-1, 1] to [0, length - 1]
    return (n + 1.0) / 2.0 * (f32(length - 1));
    `}
  }
`,L2=e=>`
  ${e.paddingMode==="reflection"?`
      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {
        var dx = 0.0;
        var fx = f32(x);
        let range = x_max - x_min;
        if (fx < x_min) {
          dx = x_min - fx;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_min + r;
          } else {
            fx = x_max - r;
          }
        } else if (fx > x_max) {
          dx = fx - x_max;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_max - r;
          } else {
            fx = x_min + r;
          }
        }
        return u32(fx);
      }`:""}
`,R2=(e,t,r)=>`
  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> ${t} {
     var pixel = ${t}(0);
     var indices = vec4<u32>(0);
     indices[${Ls}] = batch;
     indices[${oi}] = channel;`+(()=>{switch(r.paddingMode){case"zeros":return`
          if (r >= 0 && r < H && c >=0 && c < W) {
            indices[${Ta}] = u32(r);
            indices[${Ea}] = u32(c);
          } else {
            return ${t}(0);
          }
        `;case"border":return`
          indices[${Ta}] = u32(clamp(r, 0, H - 1));
          indices[${Ea}] = u32(clamp(c, 0, W - 1));
        `;case"reflection":return`
          indices[${Ta}] = gs_reflect(r, border[1], border[3]);
          indices[${Ea}] = gs_reflect(c, border[0], border[2]);
        `;default:throw new Error(`padding mode ${r.paddingMode} is not supported`)}})()+`
    return ${e.getByIndices("indices")};
  }
`,N2=(e,t,r)=>(()=>{switch(r.mode){case"nearest":return`
          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[${Ls}], indices[${oi}], border);
        `;case"bilinear":return`
          let x1 = i32(floor(x));
          let y1 = i32(floor(y));
          let x2 = x1 + 1;
          let y2 = y1 + 1;

          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[${Ls}], indices[${oi}], border);
          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[${Ls}], indices[${oi}], border);
          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[${Ls}], indices[${oi}], border);
          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[${Ls}], indices[${oi}], border);

          let dx2 = ${t}(f32(x2) - x);
          let dx1 = ${t}(x - f32(x1));
          let dy2 = ${t}(f32(y2) - y);
          let dy1 = ${t}(y - f32(y1));
          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);
        `;case"bicubic":return`
          let x0 = i32(floor(x)) - 1;
          let y0 = i32(floor(y)) - 1;
          var p: mat4x4<${t}>;
          for (var h = 0; h < 4; h++) {
            for (var w = 0; w < 4; w++) {
              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[${Ls}], indices[${oi}], border);
            }
          }

          let dx = x - f32(x0 + 1);
          let dy = y - f32(y0 + 1);
          let result = gs_bicubic_interpolate(p, dx, dy);
        `;default:throw new Error(`mode ${r.mode} is not supported`)}})()+`${e.setByOffset("global_idx","result")}`,j2=(e,t)=>{let r=Be("x",e[0].dataType,e[0].dims.length),n=[e[1].dims[0],e[1].dims[1],e[1].dims[2]],i=Be("grid",e[1].dataType,n.length,2),s=[e[0].dims[0],e[0].dims[1],e[1].dims[1],e[1].dims[2]];t.format==="NHWC"&&(s=[e[0].dims[0],e[1].dims[1],e[1].dims[2],e[0].dims[3]],[Ls,oi,Ta,Ea]=[0,3,1,2]);let a=ht("output",e[0].dataType,s.length),o=r.type.value,l=Ce.size(s),u=[{type:12,data:l},...bt(e[0].dims,n,s)],d=c=>`
  ${c.registerUniform("output_size","u32").declareVariables(r,i,a)}
  ${z2}
  ${F2(o)}
  ${B2(t)}
  ${L2(t)}
  ${R2(r,o,t)}

  ${c.mainStart()}
    ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let H_in = i32(uniforms.x_shape[${Ta}]);
      let W_in = i32(uniforms.x_shape[${Ea}]);

      ${t.alignCorners===0?`
      let x_min = -0.5;
      let x_max = f32(W_in) - 0.5;
      let y_min = -0.5;
      let y_max = f32(H_in) - 0.5;
      `:`
      let x_min = 0.0;
      let x_max = f32(W_in) - 1.0;
      let y_min = 0.0;
      let y_max = f32(H_in) - 1.0;
      `};
      let border = vec4<f32>(x_min, y_min, x_max, y_max);

      let indices = ${a.offsetToIndices("global_idx")};
      var grid_indices = vec3<u32>(indices[${Ls}], indices[${Ta}], indices[${Ea}]);
      let nxy = ${i.getByIndices("grid_indices")};
      var x = gs_denormalize(f32(nxy[0]), W_in);
      var y = gs_denormalize(f32(nxy[1]), H_in);

      ${N2(a,o,t)}
  }`;return{name:"GridSample",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:["type","type"]},getRunData:c=>{let p=Ce.size(s);return{outputs:[{dims:s,dataType:c[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:u}},getShaderSource:d}},U2=(e,t)=>{D2(e.inputs),e.compute(j2(e.inputs,t))},W2=e=>lr({alignCorners:e.align_corners,mode:e.mode,paddingMode:e.padding_mode,format:e.format})}),En,V2,G2,lh,q2,cl,H2,K2=Qe(()=>{kt(),Nt(),jr(),Cp(),Rp(),Ut(),Oi(),En=(e,t)=>e.length>t&&e[t].dims.length>0?e[t]:void 0,V2=(e,t)=>{let r=e[0],n=En(e,1),i=En(e,2),s=En(e,3),a=En(e,4),o=En(e,5),l=En(e,6),u=En(e,7);if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let d=r.dims[0],c=r.dims[1],p=r.dims.length===3?r.dims[2]:t.numHeads*r.dims[4],m=c,f=0,w=0,C=Math.floor(p/t.numHeads);if(l&&u&&Ce.size(l.dims)&&Ce.size(u.dims)){if(l.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(l.dims[0]!==d||l.dims[1]!==t.numHeads||l.dims[3]!==C)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(u.dims[0]!==d||u.dims[1]!==t.numHeads||u.dims[3]!==C)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(l.dims[2]!==u.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(u.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');f=l.dims[2],w=l.dims[2]}else if(l&&Ce.size(l.dims)||u&&Ce.size(u.dims))throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let y;if(n&&Ce.size(n.dims)>0){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(n.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');y=2,m=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==C)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(i)throw new Error('Expect "value" be none when "key" has packed kv format.');y=5,m=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==C)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');y=0,m=n.dims[2]}}else{if(r.dims.length!==5)throw new Error('Input "query" is expected to have 5 dimensions when key is empty');if(r.dims[2]!==t.numHeads||r.dims[3]!==3)throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');y=3}if(s&&Ce.size(s.dims)>0){if(s.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(n&&n.dims.length===5&&n.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let g=f+m,P=0;if(a&&Ce.size(a.dims)>0){P=8;let E=a.dims;throw E.length===1?E[0]===d?P=1:E[0]===3*d+2&&(P=3):E.length===2&&E[0]===d&&E[1]===g&&(P=5),P===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, total_sequence_length)'):new Error("Mask not supported")}let b=!1,x=p;if(i&&Ce.size(i.dims)>0){if(i.dims.length!==3&&i.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==i.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(i.dims.length===3){if(m!==i.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');x=i.dims[2]}else{if(m!==i.dims[2])throw new Error('Input "key" and "value" shall have the same dim 2 (kv_sequence_length)');x=i.dims[1]*i.dims[3],b=!0}}let T=!1;if(a&&Ce.size(a.dims)>0)throw new Error("Key padding mask is not supported");if(o&&Ce.size(o.dims)>0){if(o.dims.length!==4)throw new Error('Input "attention_bias" is expected to have 4 dimensions');if(o.dims[0]!==d||o.dims[1]!==t.numHeads||o.dims[2]!==c||o.dims[3]!==g)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:d,sequenceLength:c,pastSequenceLength:f,kvSequenceLength:m,totalSequenceLength:g,maxSequenceLength:w,inputHiddenSize:0,hiddenSize:p,vHiddenSize:x,headSize:C,vHeadSize:Math.floor(x/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:P,scale:t.scale,broadcastResPosBias:T,passPastInKv:b,qkvFormat:y}},G2=e=>lr({...e}),lh=lr({perm:[0,2,1,3]}),q2=(e,t,r,n,i,s,a)=>{let o=[n,i,s],l=Ce.size(o),u=[{type:12,data:l},{type:12,data:a},{type:12,data:s}],d=c=>{let p=ht("qkv_with_bias",t.dataType,o),m=Be("qkv",t.dataType,o),f=Be("bias",r.dataType,o),w=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${c.registerUniforms(w).declareVariables(m,f,p)}
  ${c.mainStart()}
    ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:o,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:u}),getShaderSource:d},{inputs:[t,r],outputs:[-1]})[0]},cl=(e,t,r,n,i,s,a,o)=>{let l=s;if(a&&Ce.size(a.dims)>0){if(n===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return l=q2(e,s,a,t,n,r*i,o),l=l.reshape([t,n,r,i]),r===1||n===1?l:e.compute(Nn(l,lh.perm),{inputs:[l],outputs:[-1]})[0]}else return s.dims.length===3&&(l=s.reshape([t,n,r,i])),r===1||n===1?l:e.compute(Nn(l,lh.perm),{inputs:[l],outputs:[-1]})[0]},H2=(e,t)=>{let r=V2(e.inputs,t),n=e.inputs[0],i=En(e.inputs,1),s=En(e.inputs,2),a=En(e.inputs,3),o=En(e.inputs,4),l=En(e.inputs,5),u=En(e.inputs,6),d=En(e.inputs,7);if(n.dims.length===5)throw new Error("Packed QKV is not implemented");if((i==null?void 0:i.dims.length)===5)throw new Error("Packed KV is not implemented");let c=i&&s&&i.dims.length===4&&s.dims.length===4,p=cl(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,n,a,0);if(c)return al(e,p,i,s,o,void 0,u,d,l,r);if(!i||!s)throw new Error("key and value must be provided");let m=cl(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,i,a,r.hiddenSize),f=cl(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,s,a,2*r.hiddenSize);al(e,p,m,f,o,void 0,u,d,l,r)}}),Q2,X2,J2,Y2,uh,Z2,eT,tT=Qe(()=>{kt(),Nt(),jr(),Ut(),Q2=e=>{if(!e||e.length<1)throw new Error("too few inputs")},X2=(e,t)=>{let r=[],n=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(i=>r.push(Number(i))),n=r.length),lr({numOutputs:n,axis:t.axis,splitSizes:r})},J2=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${gt("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,Y2=e=>{let t=e.length,r=[];for(let n=0;n<t;++n){let i=e[n].setByIndices("indices","input[global_idx]");t===1?r.push(i):n===0?r.push(`if (output_number == ${n}u) { ${i} }`):n===t-1?r.push(`else { ${i} }`):r.push(`else if (output_number == ${n}) { ${i} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},uh=(e,t)=>{let r=e[0].dims,n=Ce.size(r),i=e[0].dataType,s=Ce.normalizeAxis(t.axis,r.length),a=new Array(t.numOutputs),o=Be("input",i,r.length),l=new Array(t.numOutputs),u=[],d=[],c=0,p=[{type:12,data:n}];for(let f=0;f<t.numOutputs;f++){c+=t.splitSizes[f],l[f]=c;let w=r.slice();w[s]=t.splitSizes[f],d.push(w),a[f]=ht(`output${f}`,i,w.length),u.push({dims:d[f],dataType:e[0].dataType})}p.push({type:12,data:l},...bt(r,...d));let m=f=>`
  ${f.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",l.length).declareVariables(o,...a)}
  ${J2(l.length)}
  ${Y2(a)}

  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${o.offsetToIndices("global_idx")};
    var index = ${o.indicesGet("indices",s)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${gt("uniforms.size_in_split_axis","output_number - 1u",l.length)};
      ${o.indicesSet("indices",s,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:m,getRunData:()=>({outputs:u,dispatchGroup:{x:Math.ceil(n/64)},programUniforms:p})}},Z2=(e,t)=>{Q2(e.inputs);let r=e.inputs.length===1?t:X2(e.inputs,t);e.compute(uh(e.inputs,r),{inputs:[0]})},eT=e=>{let t=e.axis,r=e.splitSizes,n=e.numOutputs<0?r.length:e.numOutputs;if(n!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return lr({axis:t,numOutputs:n,splitSizes:r})}}),rT,_u,nT,sT=Qe(()=>{kt(),Nt(),jr(),Ut(),rT=(e,t)=>{let[r,n,i,s]=e,{numHeads:a,rotaryEmbeddingDim:o}=t;if(r.dims.length!==3&&r.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${r.dims.length}`);if(!Ce.areEqual(n.dims,[])&&!Ce.areEqual(n.dims,[1])&&n.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${n.dims.length}`);if(i.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${i.dims.length}`);if(s.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${s.dims.length}`);if(!Ce.areEqual(i.dims,s.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(o>0&&a===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let l=r.dims[0],u=r.dims[r.dims.length-2],d=i.dims[0],c=Ce.sizeFromDimension(r.dims,1)/u,p=o===0?i.dims[1]*2:c/a;if(o>p)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(n.dims.length===2){if(l!==n.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${n.dims[0]}`);if(u!==n.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${n.dims[1]}`)}if(p/2!==i.dims[1]&&o/2!==i.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${i.dims[1]}`);if(u>d)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},_u=(e,t)=>{let{interleaved:r,numHeads:n,rotaryEmbeddingDim:i,scale:s}=t,a=e[0].dims[0],o=Ce.sizeFromDimension(e[0].dims,1),l=e[0].dims[e[0].dims.length-2],u=o/l,d=e[2].dims[1],c=i===0?d*2:u/n,p=new Array(a,l,u/c,c-d),m=Ce.computeStrides(p),f=[{type:1,data:s},{type:12,data:p},{type:12,data:m},...e[0].dims.length===3?new Array({type:12,data:[o,u,c,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[o,c,l*c,1]}):[],...bt(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],w=C=>{let y=Be("input",e[0].dataType,e[0].dims.length),g=Be("position_ids",e[1].dataType,e[1].dims.length),P=Be("cos_cache",e[2].dataType,e[2].dims.length),b=Be("sin_cache",e[3].dataType,e[3].dims.length),x=ht("output",e[0].dataType,e[0].dims.length);return C.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:p.length},{name:"global_strides",type:"u32",length:m.length},{name:"input_output_strides",type:"u32",length:m.length}]),`
        ${C.declareVariables(y,g,P,b,x)}

        ${C.mainStart(io)}
          let half_rotary_emb_dim = uniforms.${P.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${C.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${g.broadcastedIndicesToOffset("bsnh.xy",ht("",g.type.tensor,2))};
            let position_id =
                u32(${g.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${r});
            let j = i + select(half_rotary_emb_dim, 1, ${r});
            let re = ${y.getByOffset("i")} * ${P.get("position_id","bsnh[3]")} -
                ${y.getByOffset("j")} * ${b.get("position_id","bsnh[3]")};
            ${x.setByOffset("i","re")}
            let im = ${y.getByOffset("i")} * ${b.get("position_id","bsnh[3]")} +
                ${y.getByOffset("j")} * ${P.get("position_id","bsnh[3]")};
            ${x.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${x.setByOffset("k",y.getByOffset("k"))}
          }
        }`};return{name:"RotaryEmbedding",shaderCache:{hint:lr({interleaved:r}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:w,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(Ce.size(p)/io)},programUniforms:f})}},nT=(e,t)=>{rT(e.inputs,t),e.compute(_u(e.inputs,t))}}),iT,aT,dh,oT,lT,fz=Qe(()=>{jr(),kt(),Rp(),K2(),tT(),Oi(),sT(),Ut(),iT=(e,t)=>{if(t.doRotary&&e.length<=7)throw new Error("cos_cache and sin_cache inputs are required if do_rotary is specified");let r=e[0],n=e[1],i=e[2],s=e[3],a=e[4];if(t.doRotary!==0&&e.length<=7)throw new Error("cos_cast and sin_cache are expected if do_rotary attribute is non-zero");if(t.localWindowSize!==-1)throw new Error("Local attention is not supported");if(t.softcap!==0)throw new Error("Softcap is not supported");if(t.rotaryInterleaved!==0)throw new Error("Rotary interleaved is not supported");if(t.smoothSoftmax)throw new Error("Smooth softmax is not supported");if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let o=!1,l=r.dims[0],u=r.dims[1],d=r.dims.length===3?o?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],c=u,p=0,m=!n||n.dims.length===0,f=Math.floor(m?d/(t.numHeads+2*t.kvNumHeads):d/t.numHeads);m&&(d=f*t.numHeads);let w=s&&s.dims.length!==0,C=a&&a.dims.length!==0;if(w&&s.dims.length===4&&s.dims[0]===l&&s.dims[1]!==t.kvNumHeads&&s.dims[2]===t.kvNumHeads&&s.dims[3]===f)throw new Error("BSNH pastKey/pastValue is not supported");if(w&&C){if(s.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(a.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');p=s.dims[2]}else if(w||C)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let y=1;if(n&&n.dims.length>0){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(r.dims[2]%n.dims[2]!==0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');c=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==f)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(i)throw new Error('Expect "value" be none when "key" has packed kv format.');c=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==f)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');c=n.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');y=3}let g=0,P=!1,b=t.kvNumHeads?f*t.kvNumHeads:d;if(i&&i.dims.length>0){if(i.dims.length!==3&&i.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==i.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(i.dims.length===3){if(c!==i.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');b=i.dims[2]}else{if(c!==i.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');b=i.dims[1]*i.dims[3],P=!0}}let x=e.length>4?e[5]:void 0;if(x&&x.dims.length!==1&&x.dims[0]!==l)throw new Error('Input "seqlens" is expected to have 1 dimension and the same dim 0 as batch_size');return{batchSize:l,sequenceLength:u,pastSequenceLength:p,kvSequenceLength:c,totalSequenceLength:-1,maxSequenceLength:-1,inputHiddenSize:0,hiddenSize:d,vHiddenSize:b,headSize:f,vHeadSize:Math.floor(b/t.kvNumHeads),numHeads:t.numHeads,kvNumHeads:t.kvNumHeads,nReps:t.numHeads/t.kvNumHeads,pastPresentShareBuffer:!1,maskType:g,scale:t.scale,broadcastResPosBias:!1,passPastInKv:P,qkvFormat:y}},aT=lr({perm:[0,2,1,3]}),dh=(e,t,r)=>{let n=t,i=r.kvNumHeads;return t.dims.length===3&&r.kvSequenceLength!==0&&(n=t.reshape([r.batchSize,r.kvSequenceLength,i,r.headSize]),n=e.compute(Nn(n,aT.perm),{inputs:[n],outputs:[-1]})[0]),n},oT=(e,t,r,n)=>{let i=7,s=["type","type"],a=[e*t],o=e*t,l=[{type:12,data:o},{type:12,data:t},{type:12,data:e}],u=d=>{let c=Be("seq_lens",r.dataType,r.dims),p=Be("total_seq_lens",n.dataType,n.dims),m=ht("pos_ids",i,a),f=[{name:"output_size",type:"u32"},{name:"sequence_length",type:"u32"},{name:"batch_size",type:"u32"}];return`
  ${d.registerUniforms(f).declareVariables(c,p,m)}
  ${d.mainStart()}
    ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let total_sequence_length = u32(${p.getByOffset("0")});
    let is_subsequent_prompt = uniforms.sequence_length > 1 && uniforms.sequence_length != total_sequence_length;
    let is_first_prompt = !is_subsequent_prompt && uniforms.sequence_length == total_sequence_length;
    let batch_idx = global_idx / uniforms.sequence_length;
    let sequence_idx = i32(global_idx % uniforms.sequence_length);
    var pos_id: i32 = 0;
    let seqlen = ${c.getByOffset("batch_idx")};
    let total_seqlen = seqlen + 1;
    if (is_first_prompt) {
      if (sequence_idx < total_seqlen) {
        pos_id = sequence_idx;
      } else {
        pos_id = 1;
      }
      ${m.setByOffset("global_idx","pos_id")}
    } else if (is_subsequent_prompt) {
      let past_seqlen = total_seqlen - i32(uniforms.sequence_length);
      if (past_seqlen + sequence_idx < total_seqlen) {
        pos_id = past_seqlen + sequence_idx;
      } else {
        pos_id = 1;
      }
      ${m.setByOffset("global_idx","pos_id")}
    } else if (global_idx < uniforms.batch_size) {
      ${m.setByOffset("global_idx","seqlen")}
    };
  }
  `};return{name:"GeneratePositionIds",shaderCache:{hint:`${e};${t}`,inputDependencies:s},getRunData:()=>({outputs:[{dims:a,dataType:i}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:l}),getShaderSource:u}},lT=(e,t)=>{var b;let r=iT(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(((b=e.inputs[1])==null?void 0:b.dims.length)===5)throw new Error("Packed KV is not implemented");let n=e.inputs[0],i=e.inputs[1]&&e.inputs[1].dims.length>0?e.inputs[1]:void 0,s=e.inputs[2]&&e.inputs[2].dims.length>0?e.inputs[2]:void 0,a=e.inputs[3]&&e.inputs[3].dims.length!==0?e.inputs[3]:void 0,o=e.inputs[4]&&e.inputs[4].dims.length!==0?e.inputs[4]:void 0,l=e.inputs.length>4?e.inputs[5]:void 0,u=e.inputs.length>5?e.inputs[6]:void 0,d=r.kvNumHeads?r.kvNumHeads:r.numHeads,c=lr({axis:2,numOutputs:3,splitSizes:[r.numHeads*r.headSize,d*r.headSize,d*r.headSize]}),[p,m,f]=!i&&!s?e.compute(uh([n],c),{inputs:[n],outputs:[-1,-1,-1]}):[n,i,s],w,C;if(t.doRotary){let x=e.compute(oT(r.batchSize,r.sequenceLength,l,u),{inputs:[l,u],outputs:[-1]})[0],T=e.inputs[7],E=e.inputs[8],S=lr({interleaved:t.rotaryInterleaved!==0,numHeads:r.numHeads,rotaryEmbeddingDim:0,scale:t.scale}),O=[p,x,T,E],B=[-1];w=e.compute(_u(O,S),{inputs:O,outputs:B})[0],O.splice(0,1,m);let V=lr({interleaved:t.rotaryInterleaved!==0,numHeads:r.kvNumHeads,rotaryEmbeddingDim:0,scale:t.scale});C=e.compute(_u(O,V),{inputs:O,outputs:B})[0]}let y=cl(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,t.doRotary?w:p,void 0,0),g=dh(e,t.doRotary?C:m,r),P=dh(e,f,r);al(e,y,g,P,void 0,void 0,a,o,void 0,r,l,u)}}),ch,uT,dT,cT,mz=Qe(()=>{kt(),Nt(),Oi(),Ut(),ch=(e,t,r,n,i,s,a,o)=>{let l=Fr(s),u=l===1?"f32":`vec${l}f`,d=l===1?"vec2f":`mat2x${l}f`,c=i*a,p=64;c===1&&(p=256);let m=[i,a,s/l],f=[i,a,2],w=["rank","type","type"],C=[];C.push(...bt(m,f));let y=g=>{let P=Be("x",t.dataType,3,l),b=Be("scale",r.dataType,r.dims),x=Be("bias",n.dataType,n.dims),T=ht("output",1,3,2),E=[P,b,x,T];return`
  var<workgroup> workgroup_shared : array<${d}, ${p}>;
  const workgroup_size = ${p}u;
  ${g.declareVariables(...E)}
  ${g.mainStart(p)}
    let batch = workgroup_index / uniforms.x_shape[1];
    let channel = workgroup_index % uniforms.x_shape[1];
    let hight = uniforms.x_shape[2];
    // initialize workgroup memory
    var sum = ${u}(0);
    var squared_sum = ${u}(0);
    for (var h = local_idx; h < hight; h += workgroup_size) {
      let value = ${u}(${P.get("batch","channel","h")});
      sum += value;
      squared_sum += value * value;
    }
    workgroup_shared[local_idx] = ${d}(sum, squared_sum);
    workgroupBarrier();

    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (local_idx < currSize) {
        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];
      }
      workgroupBarrier();
    }
    if (local_idx == 0) {
      let sum_final = ${Ai("workgroup_shared[0][0]",l)} / f32(hight * ${l});
      let squared_sum_final = ${Ai("workgroup_shared[0][1]",l)} / f32(hight * ${l});

      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${o}));
      let channel_scale = inv_std_dev * f32(scale[channel]);
      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;
      output[workgroup_index] = vec2f(channel_scale, channel_shift);
    }
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${l};${o};${p}`,inputDependencies:w},getRunData:()=>({outputs:[{dims:f,dataType:1}],dispatchGroup:{x:c},programUniforms:C}),getShaderSource:y},{inputs:[t,r,n],outputs:[-1]})[0]},uT=(e,t,r)=>{let n=t[0].dims,i=n,s=2,a=n[0],o=n[1],l=Ce.sizeFromDimension(n,s),u=Fr(l),d=Ce.size(i)/u,c=ch(e,t[0],t[1],t[2],a,l,o,r.epsilon),p=[a,o,l/u],m=[a,o],f=["type","none"],w=C=>{let y=Be("x",t[0].dataType,p.length,u),g=Be("scale_shift",1,m.length,2),P=ht("output",t[0].dataType,p.length,u),b=[y,g,P];return`
  ${C.registerUniform("output_size","u32").declareVariables(...b)}
  ${C.mainStart()}
  ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let outputIndices = ${P.offsetToIndices("global_idx")};
      let batch = outputIndices[0];
      let channel = outputIndices[1];
      let scale_shift = ${g.getByIndices("vec2<u32>(batch, channel)")};
      let value = ${y.getByOffset("global_idx")} * ${P.type.value}(scale_shift.x) + ${P.type.value}(scale_shift.y);
      ${P.setByOffset("global_idx","value")};
  }`};e.compute({name:"InstanceNormalization",shaderCache:{hint:`${u}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:i,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:[{type:12,data:d},...bt(p,m,p)]}),getShaderSource:w},{inputs:[t[0],c]})},dT=(e,t,r)=>{let n=t[0].dims,i=n,s=n[0],a=n[n.length-1],o=Ce.sizeFromDimension(n,1)/a,l=Fr(a),u=Ce.size(i)/l,d=[{type:12,data:o},{type:12,data:Math.floor(a/l)}],c=["type","type"],p=!1,m=[0,n.length-1];for(let y=0;y<n.length-2;y++)p=p||n[y+1]!==1,m.push(y+1);p=p&&n[n.length-1]!==1;let f=p?e.compute(Nn(e.inputs[0],m),{inputs:[e.inputs[0]],outputs:[-1]})[0]:e.inputs[0].reshape(Array.from({length:n.length},(y,g)=>n[m[g]])),w=ch(e,f,t[1],t[2],s,o,a,r.epsilon),C=y=>{let g=sn(t[0].dataType),P=l===1?"vec2f":`mat${l}x2f`,b=E=>{let S=E===0?"x":"y",O=l===1?"f32":`vec${l}f`;switch(l){case 1:return`${g}(${O}(scale.${S}))`;case 2:return`vec2<${g}>(${O}(scale[0].${S}, scale[1].${S}))`;case 4:return`vec4<${g}>(${O}(scale[0].${S}, scale[1].${S}, scale[2].${S}, scale[3].${S}))`;default:throw new Error(`Not supported compoents ${l}`)}},x=Be("input",t[0].dataType,t[0].dims,l),T=ht("output",t[0].dataType,i,l);return`
  @group(0) @binding(0) var<storage, read> input : array<${x.type.storage}>;
  @group(0) @binding(1) var<storage, read> scale_input : array<${P}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${T.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${y.mainStart()}
    let current_image_number = global_idx / (uniforms.C * uniforms.H);
    let current_channel_number = global_idx % uniforms.C;

    let scale_offset = current_image_number * uniforms.C + current_channel_number;
    let scale = scale_input[scale_offset];
    output[global_idx] = fma(input[global_idx], ${b(0)}, ${b(1)});
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${l}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:i,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:d}),getShaderSource:C},{inputs:[t[0],w]})},cT=(e,t)=>{t.format==="NHWC"?dT(e,e.inputs,t):uT(e,e.inputs,t)}}),pT,hT,fT,_z=Qe(()=>{kt(),Nt(),Ut(),pT=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},hT=(e,t,r)=>{let n=t.simplified,i=e[0].dims,s=e[1],a=!n&&e[2],o=i,l=Ce.normalizeAxis(t.axis,i.length),u=Ce.sizeToDimension(i,l),d=Ce.sizeFromDimension(i,l),c=Ce.size(s.dims),p=a?Ce.size(a.dims):0;if(c!==d||a&&p!==d)throw new Error(`Size of X.shape()[axis:] == ${d}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${c} and bias size of ${p}`);let m=[];for(let x=0;x<i.length;++x)x<l?m.push(i[x]):m.push(1);let f=Fr(d),w=["type","type"],C=[{type:12,data:u},{type:1,data:d},{type:12,data:Math.floor(d/f)},{type:1,data:t.epsilon}];a&&w.push("type");let y=r>1,g=r>2,P=x=>{let T=sn(e[0].dataType),E=[Be("x",e[0].dataType,e[0].dims,f),Be("scale",s.dataType,s.dims,f)];a&&E.push(Be("bias",a.dataType,a.dims,f)),E.push(ht("output",e[0].dataType,o,f)),y&&E.push(ht("mean_data_output",1,m)),g&&E.push(ht("inv_std_output",1,m));let S=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${x.registerUniforms(S).declareVariables(...E)}
  ${x.mainStart()}
    ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${Ap("f32",f)};
    var mean_square_vector = ${Ap("f32",f)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${ao(T,f,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${Ai("mean_vector",f)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${Ai("mean_square_vector",f)} / uniforms.norm_size ${n?"":"- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${ao(T,f,"x[j + offset]")};
      let f32scale = ${ao(T,f,"scale[j]")};
      output[j + offset] = ${E[0].type.value}((f32input ${n?"":"- mean"}) * inv_std_dev * f32scale
        ${a?`+ ${ao(T,f,"bias[j]")}`:""}
      );
    }

    ${y?"mean_data_output[global_idx] = mean":""};
    ${g?"inv_std_output[global_idx] = inv_std_dev":""};
  }`},b=[{dims:o,dataType:e[0].dataType}];return y&&b.push({dims:m,dataType:1}),g&&b.push({dims:m,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${f};${r};${n}`,inputDependencies:w},getRunData:()=>({outputs:b,dispatchGroup:{x:Math.ceil(u/64)},programUniforms:C}),getShaderSource:P}},fT=(e,t)=>{pT(e.inputs),e.compute(hT(e.inputs,t,e.outputCount))}}),mT,_T,gz=Qe(()=>{Nt(),Hp(),Jp(),mT=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},_T=e=>{mT(e.inputs);let t=so.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");let r=t[t.length-1],n=e.inputs[0].dims[e.inputs[0].dims.length-1];if(r<8&&n<8)e.compute(qp(e.inputs,{activation:""},t));else{let i=t[t.length-2],s=Ce.size(e.inputs[0].dims.slice(0,-2)),a=Ce.size(e.inputs[1].dims.slice(0,-2));if(s!==1&&i===1&&a===1){let o=e.inputs[0].reshape([1,s,n]),l=e.inputs[1].reshape([1,n,r]),u=[1,s,r],d=[o,l];e.compute(pu(d,{activation:""},t,u),{inputs:d})}else e.compute(pu(e.inputs,{activation:""},t))}}}),gT,wT,yT,bT,vT,wz=Qe(()=>{kt(),Nt(),jr(),Ut(),gT=(e,t)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let r=e[0],n=r.dims.length;if(r.dims[n-1]!==t.k)throw new Error("The last dim of input shape does not match the k value");let i=Math.floor((t.k+t.blockSize-1)/t.blockSize),s=t.blockSize/8*t.bits,a=e[1];if(!Ce.areEqual(a.dims,[t.n,i,s]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let o=e[2].dims;if(Ce.size(o)!==t.n*i)throw new Error("scales input size error.");if(e.length===4){let l=e[3].dims,u=t.bits>4?t.n*i:t.n*Math.floor((i+1)/2);if(Ce.size(l)!==u)throw new Error("zeroPoints input size error.")}},wT=(e,t)=>{let r=e[0].dims,n=r.length,i=r[n-2],s=t.k,a=t.n,o=r.slice(0,n-2),l=Ce.size(o),u=e[1].dims[2]/4,d=e[0].dataType,c=Fr(t.k),p=Fr(u),m=Fr(a),f=o.concat([i,a]),w=i>1&&a/m%2===0?2:1,C=Ce.size(f)/m/w,y=64,g=[],P=[l,i,s/c],b=Ce.convertShape(e[1].dims).slice();b.splice(-1,1,u/p),g.push(...bt(P)),g.push(...bt(b)),g.push(...bt(e[2].dims)),e.length===4&&g.push(...bt(Ce.convertShape(e[3].dims)));let x=[l,i,a/m];g.push(...bt(x));let T=E=>{let S=P.length,O=Be("a",e[0].dataType,S,c),B=Be("b",12,b.length,p),V=Be("scales",e[2].dataType,e[2].dims.length),W=[O,B,V],N=e.length===4?Be("zero_points",12,e[3].dims.length):void 0;N&&W.push(N);let te=x.length,q=ht("output",e[0].dataType,te,m),K=sn(e[0].dataType),Y=(()=>{switch(c){case 1:return`array<${K}, 8>`;case 2:return`mat4x2<${K}>`;case 4:return`mat2x4<${K}>`;default:throw new Error(`${c}-component is not supported.`)}})(),Z=()=>{let L=`
          // reuse a data
            var input_offset = ${O.indicesToOffset(`${O.type.indices}(batch, row, word_offset)`)};
            var a_data: ${Y};
            for (var j: u32 = 0; j < ${8/c}; j++) {
              a_data[j] = ${O.getByOffset("input_offset")};
              input_offset++;
            }
          `;for(let F=0;F<m*w;F++)L+=`
            b_value = ${p===1?`b${F}_data`:`b${F}_data[i]`};
            b_value_lower = unpack4xU8(b_value & b_mask);
            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);
            b_quantized_values = ${Y}(${Array.from({length:4},(U,re)=>`${K}(b_value_lower[${re}]), ${K}(b_value_upper[${re}])`).join(", ")});
            b_dequantized_values = ${c===1?`${Y}(${Array.from({length:8},(U,re)=>`(b_quantized_values[${re}] - ${N?`zero_point${F}`:"zero_point"}) * scale${F}`).join(", ")});`:`(b_quantized_values - ${Y}(${Array(8).fill(`${N?`zero_point${F}`:"zero_point"}`).join(",")})) * scale${F};`};
            workgroup_shared[local_id.x * ${w} + ${Math.floor(F/m)}]${m>1?`[${F%m}]`:""} += ${Array.from({length:8/c},(U,re)=>`${c===1?`a_data[${re}] * b_dequantized_values[${re}]`:`dot(a_data[${re}], b_dequantized_values[${re}])`}`).join(" + ")};
          `;return L},de=()=>{let L=`
            var col_index = col * ${m};
            ${N?`
            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;
            var zero_point_byte_count: u32;
            var zero_point_word_index: u32;
            var zero_point_byte_offset: u32;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32;
            var zero_point_word: u32;`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${K}(8);`}
            `;for(let F=0;F<m*w;F++)L+=`
            let scale${F} = ${V.getByOffset("col_index * nBlocksPerCol + block")};
            ${N?`
            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);
            zero_point_word_index = zero_point_byte_count >> 0x2u;
            zero_point_byte_offset = zero_point_byte_count & 0x3u;
            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            zero_point_word = ${N.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point${F} = ${K}((zero_point_word) & 0xFu);`:""}
            col_index += 1;`;return L},pe=()=>{let L=`col_index = col * ${m};`;for(let F=0;F<m*w;F++)L+=`
            let b${F}_data = ${B.getByIndices(`${B.type.indices}(col_index, block, word)`)};
            col_index += 1;`;return L+=`
            var b_value: u32;
            let b_mask: u32 = 0x0F0F0F0Fu;
            var b_value_lower: vec4<u32>;
            var b_value_upper: vec4<u32>;
            var b_quantized_values: ${Y};
            var b_dequantized_values: ${Y};`,L};return`
        var<workgroup> workgroup_shared: array<${q.type.value}, ${w*y}>;
        ${E.declareVariables(...W,q)}
        ${E.mainStart([y,1,1])}
          let output_indices = ${q.offsetToIndices(`(global_idx / ${y}) * ${w}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let nBlocksPerCol = uniforms.b_shape[1];

          for (var block = local_id.x; block < nBlocksPerCol; block += ${y}) {
            //process one block
            var word_offset: u32 = block * ${t.blockSize/c};
            ${de()}
            for (var word: u32 = 0; word < ${u}; word += ${p}) {
              ${pe()}
              for (var i: u32 = 0; i < ${p}; i++) {
                ${Z()}
                word_offset += ${8/c};
              }
            }
          }
          workgroupBarrier();

          if (local_id.x < ${w}) {
            var output_value: ${q.type.value} = ${q.type.value}(0);
            var workgroup_shared_offset: u32 = local_id.x;
            for (var b: u32 = 0u; b < ${y}u; b++) {
              output_value += workgroup_shared[workgroup_shared_offset];
              workgroup_shared_offset += ${w};
            }
            ${q.setByIndices(`${q.type.indices}(batch, row, col + local_id.x)`,"output_value")};
          }
        }`};return{name:"MatMulNBits",shaderCache:{hint:`${t.blockSize};${t.bits};${c};${p};${m};${w};${y}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:f,dataType:d}],dispatchGroup:{x:C},programUniforms:g}),getShaderSource:T}},yT=(e,t)=>{let r=e[0].dims,n=r.length,i=r[n-2],s=t.k,a=t.n,o=r.slice(0,n-2),l=Ce.size(o),u=e[1].dims[2]/4,d=e[0].dataType,c=Fr(t.k),p=Fr(u),m=o.concat([i,a]),f=128,w=a%8===0?8:a%4===0?4:1,C=f/w,y=C*p*8,g=y/c,P=y/t.blockSize,b=Ce.size(m)/w,x=[],T=[l,i,s/c],E=Ce.convertShape(e[1].dims).slice();E.splice(-1,1,u/p),x.push(...bt(T)),x.push(...bt(E)),x.push(...bt(e[2].dims)),e.length===4&&x.push(...bt(Ce.convertShape(e[3].dims)));let S=[l,i,a];x.push(...bt(S));let O=B=>{let V=T.length,W=Be("a",e[0].dataType,V,c),N=Be("b",12,E.length,p),te=Be("scales",e[2].dataType,e[2].dims.length),q=[W,N,te],K=e.length===4?Be("zero_points",12,e[3].dims.length):void 0;K&&q.push(K);let Y=S.length,Z=ht("output",e[0].dataType,Y),de=sn(e[0].dataType),pe=()=>{switch(c){case 1:return`
          let a_data0 = vec4<${de}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);
          let a_data1 = vec4<${de}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;case 2:return`
          let a_data0 = vec4<${de}>(sub_a[word_offset], sub_a[word_offset + 1]);
          let a_data1 = vec4<${de}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;case 4:return`
          let a_data0 = sub_a[word_offset];
          let a_data1 = sub_a[word_offset + 1];`;default:throw new Error(`${c}-component is not supported.`)}};return`
        var<workgroup> sub_a: array<${W.type.value}, ${g}>;
        var<workgroup> inter_results: array<array<${Z.type.value}, ${C}>, ${w}>;
        ${B.declareVariables(...q,Z)}
        ${B.mainStart([C,w,1])}
          let output_indices = ${Z.offsetToIndices(`workgroup_index * ${w}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let n_blocks_per_col = uniforms.b_shape[1];
          let num_tiles =  (n_blocks_per_col - 1) / ${P} + 1;

          // Loop over shared dimension.
          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {
            let a_col_start = tile * ${g};
            // load one tile A data into shared memory.
            for (var a_offset = local_idx; a_offset < ${g}; a_offset += ${f})
            {
              let a_col = a_col_start + a_offset;
              if (a_col < uniforms.a_shape[2])
              {
                sub_a[a_offset] = ${W.getByIndices(`${W.type.indices}(batch, row, a_col)`)};
              } else {
                sub_a[a_offset] = ${W.type.value}(0);
              }
            }
            workgroupBarrier();

            // each thread process one block
            let b_row = col + local_id.y;
            let block = tile * ${P} + local_id.x;
            ${K?`
            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;
            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);
            let zero_point_word_index = zero_point_byte_count >> 0x2u;
            let zero_point_byte_offset = zero_point_byte_count & 0x3u;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            let zero_point_word = ${K.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point = ${de}((zero_point_word) & 0xFu);`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${de}(8);`}
            let scale = ${te.getByOffset("b_row * n_blocks_per_col + block")};
            let b_data = ${N.getByIndices(`${N.type.indices}(b_row, block, 0)`)};
            var word_offset = local_id.x * ${t.blockSize/c};
            for (var i: u32 = 0; i < ${p}; i++) {
              ${pe()}
              let b_value = ${p===1?"b_data":"b_data[i]"};
              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);
              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);
              let b_quantized_values = mat2x4<${de}>(${Array.from({length:4},(L,F)=>`${de}(b_value_lower[${F}]), ${de}(b_value_upper[${F}])`).join(", ")});
              let b_dequantized_values = (b_quantized_values - mat2x4<${de}>(${Array(8).fill("zero_point").join(",")})) * scale;
              inter_results[local_id.y][local_id.x] += ${Array.from({length:2},(L,F)=>`${`dot(a_data${F}, b_dequantized_values[${F}])`}`).join(" + ")};
              word_offset += ${8/c};
            }
            workgroupBarrier();
          }

          if (local_idx < ${w}) {
            var output_value: ${Z.type.value} = ${Z.type.value}(0);
            for (var b = 0u; b < ${C}; b++) {
              output_value += inter_results[local_idx][b];
            }
            if (col + local_idx < uniforms.output_shape[2])
            {
              ${Z.setByIndices(`${Z.type.indices}(batch, row, col + local_idx)`,"output_value")}
            }
          }
        }`};return{name:"BlockwiseMatMulNBits32",shaderCache:{hint:`${t.blockSize};${c};${p};${C};${w}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:m,dataType:d}],dispatchGroup:{x:b},programUniforms:x}),getShaderSource:O}},bT=(e,t)=>{gT(e.inputs,t),t.blockSize===32&&e.adapterInfo.isVendor("intel")&&e.adapterInfo.isArchitecture("gen-12lp")?e.compute(yT(e.inputs,t)):e.compute(wT(e.inputs,t))},vT=e=>lr(e)}),xT,$T,MT,TT,ET,PT,CT,ST,kT,yz=Qe(()=>{kt(),Nt(),Ut(),xT=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},$T=(e,t,r)=>{let n="";for(let i=t-1;i>=0;--i)n+=`
            k = i32(${e.indicesGet("indices",i)}) - ${gt("uniforms.pads",i,r)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${gt("uniforms.x_shape",i,t)})) {
              break;
            }
            offset += k * i32(${gt("uniforms.x_strides",i,t)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${n}
            value = x[offset];
          }
      `},MT=(e,t,r)=>{let n="";for(let i=t-1;i>=0;--i)n+=`
                k = i32(${e.indicesGet("indices",i)}) - ${gt("uniforms.pads",i,r)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${gt("uniforms.x_shape",i,t)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${gt("uniforms.x_shape",i,t)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${gt("uniforms.x_strides",i,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},TT=(e,t,r)=>{let n="";for(let i=t-1;i>=0;--i)n+=`
                k = i32(${e.indicesGet("indices",i)}) - ${gt("uniforms.pads",i,r)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${gt("uniforms.x_shape",i,t)})) {
                  k = i32(${gt("uniforms.x_shape",i,t)}) - 1;
                }
                offset += k * i32(${gt("uniforms.x_strides",i,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},ET=(e,t,r)=>{let n="";for(let i=t-1;i>=0;--i)n+=`
                k = i32(${e.indicesGet("indices",i)}) - ${gt("uniforms.pads",i,r)};
                if (k < 0)  {
                  k += i32(${gt("uniforms.x_shape",i,t)}]);
                }
                if (k >= i32(${gt("uniforms.x_shape",i,t)})) {
                  k -= i32(${gt("uniforms.x_shape",i,t)});
                }
                offset += k * i32(${gt("uniforms.x_strides",i,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},PT=(e,t,r)=>{switch(r.mode){case 0:return $T(e,t,r.pads.length);case 1:return MT(e,t,r.pads.length);case 2:return TT(e,t,r.pads.length);case 3:return ET(e,t,r.pads.length);default:throw new Error("Invalid mode")}},CT=(e,t)=>{let r=Ce.padShape(e[0].dims.slice(),t.pads),n=e[0].dims,i=Ce.size(r),s=[{type:12,data:i},{type:6,data:t.pads}],a=e.length>=3&&e[2].data;t.mode===0&&s.push({type:a?e[2].dataType:1,data:t.value}),s.push(...bt(e[0].dims,r));let o=["rank"],l=u=>{let d=ht("output",e[0].dataType,r.length),c=Be("x",e[0].dataType,n.length),p=c.type.value,m=PT(d,n.length,t),f=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&f.push({name:"constant_value",type:a?p:"f32"}),`
            ${u.registerUniforms(f).declareVariables(c,d)}
            ${u.mainStart()}
            ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${d.offsetToIndices("global_idx")};

            var value = ${p}(0);
            ${m}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}${a}`,inputDependencies:o},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(Ce.size(r)/64)},programUniforms:s}),getShaderSource:l}},ST=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),n=e.length>=3&&e[2].data?e[2].dataType===10?e[2].getUint16Array()[0]:e[2].getFloat32Array()[0]:0,i=e[0].dims.length,s=new Int32Array(2*i).fill(0);if(e.length>=4){let o=e[3].getBigInt64Array();for(let l=0;l<o.length;l++)s[Number(o[l])]=Number(r[l]),s[Number(o[l])+i]=Number(r[l+o.length])}else r.forEach((o,l)=>s[Number(l)]=Number(o));let a=[];return s.forEach(o=>a.push(o)),{mode:t.mode,value:n,pads:a}}else return t},kT=(e,t)=>{xT(e.inputs);let r=ST(e.inputs,t);e.compute(CT(e.inputs,r),{inputs:[0]})}}),pl,ph,hh,fh,mh,IT,AT,_h,gh,OT,DT,wh,zT,FT,yh,BT,LT,RT,NT,bz=Qe(()=>{gs(),kt(),Nt(),Ut(),pl=e=>{if(Cr.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},ph=(e,t,r)=>{let n=t.format==="NHWC",i=e.dims.slice();n&&i.splice(1,0,i.pop());let s=Object.hasOwnProperty.call(t,"dilations"),a=t.kernelShape.slice(),o=t.strides.slice(),l=s?t.dilations.slice():[],u=t.pads.slice();su.adjustPoolAttributes(r,i,a,o,l,u);let d=su.computePoolOutputShape(r,i,o,l,a,u,t.autoPad),c=Object.assign({},t);s?Object.assign(c,{kernelShape:a,strides:o,pads:u,dilations:l,cacheKey:t.cacheKey}):Object.assign(c,{kernelShape:a,strides:o,pads:u,cacheKey:t.cacheKey});let p=d.slice();return p.push(p.splice(1,1)[0]),[c,n?p:d]},hh=(e,t)=>{let r=t.format==="NHWC",n=Ce.size(e),i=Ce.size(t.kernelShape),s=[{type:12,data:n},{type:12,data:i}],a=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let o=t.kernelShape[t.kernelShape.length-1],l=t.strides[t.strides.length-1],u=t.pads[t.pads.length/2-1],d=t.pads[t.pads.length-1],c=!!(u+d);s.push({type:12,data:o},{type:12,data:l},{type:12,data:u},{type:12,data:d}),a.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let p=!1;if(t.kernelShape.length===2){let m=t.kernelShape[t.kernelShape.length-2],f=t.strides[t.strides.length-2],w=t.pads[t.pads.length/2-2],C=t.pads[t.pads.length-2];p=!!(w+C),s.push({type:12,data:m},{type:12,data:f},{type:12,data:w},{type:12,data:C}),a.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[s,a,!0,c,p]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let o=Ce.computeStrides(t.kernelShape);s.push({type:12,data:o},{type:12,data:t.pads},{type:12,data:t.strides}),a.push({name:"kernelStrides",type:"u32",length:o.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let l=t.pads.reduce((u,d)=>u+d);return[s,a,!!l,!1,!1]}},fh=(e,t,r,n,i,s,a,o,l,u,d,c)=>{let p=i.format==="NHWC",m=t.type.value,f=ht("output",t.type.tensor,n);if(i.kernelShape.length<=2){let w="",C="",y="",g=r-(p?2:1);if(d?w=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${g}] = indices[${g}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${g}] < 0 || xIndices[${g}]
                      >= uniforms.x_shape[${g}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`:w=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${g}] = indices[${g}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${s}
                }`,i.kernelShape.length===2){let P=r-(p?3:2);c?C=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${P}] = indices[${P}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${P}] < 0 || xIndices[${P}] >= uniforms.x_shape[${P}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:C=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${P}] = indices[${P}] * uniforms.sh - uniforms.phStart + j;
                `,y=`
              }
            `}return`
            ${e.registerUniforms(l).declareVariables(t,f)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${f.offsetToIndices("global_idx")};
              var xIndices = ${f.offsetToIndices("global_idx")};

              var value = ${m}(${o});
              var pad = 0;
              ${C}
              ${w}
              ${y}
              ${a}

              output[global_idx] = value;
            }`}else{if(p)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let w=i.kernelShape.length,C=i.pads.length,y="";return u?y=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${s}
              }`:y=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${s}
            `,`
            ${e.registerUniforms(l).declareVariables(t,f)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${f.offsetToIndices("global_idx")};
              var xIndices = ${f.offsetToIndices("global_idx")};

              var offsets: array<u32, ${w}>;

              var value = ${m}(${o});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${w-1}u; j++) {
                  offsets[j] = offset / ${gt("uniforms.kernelStrides","j",w)};
                  offset -= offsets[j] * ${gt("uniforms.kernelStrides","j",w)};
                }
                offsets[${w-1}] = offset;

                isPad = false;
                for (var j = ${r-w}u; j < ${r}u; j++) {
                  xIndices[j] = indices[j] * ${gt("uniforms.strides",`j - ${r-w}u`,w)}
                    + offsets[j - ${r-w}u] - ${gt("uniforms.pads","j - 2u",C)};
                  ${y}
              }
              ${a}

              output[global_idx] = value;
            }`}},mh=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,IT=e=>`${mh(e)};${e.countIncludePad}`,AT=e=>`${mh(e)};${e.storageOrder};${e.dilations}`,_h=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),gh=(e,t,r,n)=>{let[i,s]=ph(t,n,r),a=Be("x",t.dataType,t.dims.length),o=a.type.value,l="value += x_val;",u="";i.countIncludePad?u+=`value /= ${o}(uniforms.kernelSize);`:u+=`value /= ${o}(i32(uniforms.kernelSize) - pad);`;let[d,c,p,m,f]=hh(s,i);d.push(...bt(t.dims,s));let w=["rank"];return{name:e,shaderCache:{hint:`${n.cacheKey};${p};${m};${f}`,inputDependencies:w},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(Ce.size(s)/64)},programUniforms:d}),getShaderSource:C=>fh(C,a,t.dims.length,s.length,i,l,u,0,c,p,m,f)}},OT=e=>{let t=e.count_include_pad!==0,r=_h(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let n={countIncludePad:t,...r,cacheKey:""};return{...n,cacheKey:IT(n)}},DT=(e,t)=>{pl(e.inputs),e.compute(gh("AveragePool",e.inputs[0],!1,t))},wh={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},zT=e=>{let t=e.format;return{format:t,...wh,cacheKey:t}},FT=(e,t)=>{pl(e.inputs),e.compute(gh("GlobalAveragePool",e.inputs[0],!0,t))},yh=(e,t,r,n)=>{let[i,s]=ph(t,n,r),a=`
      value = max(x_val, value);
    `,o="",l=Be("x",t.dataType,t.dims.length),u=["rank"],[d,c,p,m,f]=hh(s,i);return d.push(...bt(t.dims,s)),{name:e,shaderCache:{hint:`${n.cacheKey};${p};${m};${f}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(Ce.size(s)/64)},programUniforms:d}),getShaderSource:w=>fh(w,l,t.dims.length,s.length,i,a,o,t.dataType===10?-65504:-1e5,c,p,m,f)}},BT=(e,t)=>{pl(e.inputs),e.compute(yh("MaxPool",e.inputs[0],!1,t))},LT=e=>{let t=e.storage_order,r=e.dilations,n=_h(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(n.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let i={storageOrder:t,dilations:r,...n,cacheKey:""};return{...i,cacheKey:AT(i)}},RT=e=>{let t=e.format;return{format:t,...wh,cacheKey:t}},NT=(e,t)=>{pl(e.inputs),e.compute(yh("GlobalMaxPool",e.inputs[0],!0,t))}}),jT,UT,WT,VT,vz=Qe(()=>{kt(),Nt(),jr(),Ut(),jT=(e,t)=>{if(e.length<2||e.length>3)throw new Error("DequantizeLinear requires 2 or 3 inputs.");if(e.length===3&&e[1].dims===e[2].dims)throw new Error("x-scale and x-zero-point must have the same shape.");if(e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[0].dataType===6&&e.length>2)throw new Error("In the case of dequantizing int32 there is no zero point.");if(e[1].dims.length!==0&&e[1].dims.length!==1&&e[1].dims.length!==e[0].dims.length)throw new Error("scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.");if(e.length>2){if(e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[1].dims.length!==e[2].dims.length)throw new Error("scale and zero-point inputs must have the same rank.");if(!e[1].dims.map((r,n)=>r===e[2].dims[n]).reduce((r,n)=>r&&n,!0))throw new Error("scale and zero-point inputs must have the same shape.")}if(t.blockSize>0){if(e[1].dims.length===0||e[1].dims.length===1&&e[1].dims[0]===1)throw new Error("blockSize must be set only for block quantization.");if(!e[1].dims.map((i,s)=>s===t.axis||i===e[0].dims[s]).reduce((i,s)=>i&&s,!0))throw new Error("For block qunatization, scale input shape to match the input shape except for the axis");if(e[1].dims.length!==e[0].dims.length)throw new Error("For block qunatization the scale input rank must be the same as the x rank.");let r=e[0].dims[t.axis],n=e[1].dims[t.axis];if(t.blockSize<Math.ceil(r/n)||t.blockSize>Math.ceil(r/(n-1)-1))throw new Error("blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].")}},UT=(e,t)=>{let r=Ce.normalizeAxis(t.axis,e[0].dims.length),n=e[0].dataType,i=n===3,s=e[0].dims,a=e[1].dataType,o=Ce.size(s),l=n===3||n===2,u=l?[Math.ceil(Ce.size(e[0].dims)/4)]:e[0].dims,d=e[1].dims,c=e.length>2?e[2]:void 0,p=c?l?[Math.ceil(Ce.size(c.dims)/4)]:c.dims:void 0,m=d.length===0||d.length===1&&d[0]===1,f=m===!1&&d.length===1,w=Fr(o),C=m&&(!l||w===4),y=C?w:1,g=C&&!l?w:1,P=Be("input",l?12:n,u.length,g),b=Be("scale",a,d.length),x=c?Be("zero_point",l?12:n,p.length):void 0,T=ht("output",a,s.length,y),E=[P,b];x&&E.push(x);let S=[u,d];c&&S.push(p);let O=[{type:12,data:o/y},{type:12,data:r},{type:12,data:t.blockSize},...bt(...S,s)],B=V=>{let W=[{name:"output_size",type:"u32"},{name:"axis",type:"u32"},{name:"block_size",type:"u32"}];return`
      ${V.registerUniforms(W).declareVariables(...E,T)}
      ${V.mainStart()}
          ${V.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let output_indices = ${T.offsetToIndices("global_idx")};

          // Set input x
          ${l?`
            let input = ${P.getByOffset("global_idx / 4")};
            let x_vec = ${i?"unpack4xI8(input)":"unpack4xU8(input)"};
            let x_value = ${y===1?"x_vec[global_idx % 4]":"x_vec"};`:`let x_value = ${P.getByOffset("global_idx")};`};

          // Set scale input
          ${m?`let scale_value= ${b.getByOffset("0")}`:f?`
            let scale_index = ${T.indicesGet("output_indices","uniforms.axis")};
            let scale_value= ${b.getByOffset("scale_index")};`:`
            var scale_indices: ${b.type.indices} = output_indices;
            let index = ${b.indicesGet("scale_indices","uniforms.axis")} / uniforms.block_size;
            ${b.indicesSet("scale_indices","uniforms.axis","index")};
            let scale_value= ${b.getByIndices("scale_indices")};`};

          // Set zero-point input
          ${x?m?l?`
                let zero_point_input = ${x.getByOffset("0")};
                let zero_point_vec =  ${i?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value= zero_point_vec[0]`:`let zero_point_value = ${x.getByOffset("0")}`:f?l?`
                let zero_point_index = ${T.indicesGet("output_indices","uniforms.axis")};
                let zero_point_input = ${x.getByOffset("zero_point_index / 4")};
                let zero_point_vec =  ${i?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_index % 4]`:`
                let zero_point_index = ${T.indicesGet("output_indices","uniforms.axis")};
                let zero_point_value = ${x.getByOffset("zero_point_index")};`:l?`
                let zero_point_offset = ${b.indicesToOffset("scale_indices")};
                let zero_point_input = ${x.getByOffset("zero_point_offset / 4")};
                let zero_point_vec = ${i?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_offset % 4];`:`let zero_point_value = ${x.getByIndices("scale_indices")};`:`let zero_point_value = ${l?i?"i32":"u32":P.type.value}(0);`};
      // Compute and write output
      ${T.setByOffset("global_idx",`${T.type.value}(x_value - zero_point_value) * scale_value`)};
      }`};return{name:"DequantizeLinear",shaderCache:{hint:t.cacheKey,inputDependencies:x?["rank","rank","rank"]:["rank","rank"]},getShaderSource:B,getRunData:()=>({outputs:[{dims:s,dataType:a}],dispatchGroup:{x:Math.ceil(o/y/64),y:1,z:1},programUniforms:O})}},WT=(e,t)=>{jT(e.inputs,t),e.compute(UT(e.inputs,t))},VT=e=>lr({axis:e.axis,blockSize:e.blockSize})}),GT,qT,HT,xz=Qe(()=>{gs(),kt(),Ut(),GT=(e,t,r)=>{let n=e===t,i=e<t&&r<0,s=e>t&&r>0;if(n||i||s)throw new Error("Range these inputs' contents are invalid.")},qT=(e,t,r,n)=>{let i=Math.abs(Math.ceil((t-e)/r)),s=[i],a=i,o=[{type:12,data:a},{type:n,data:e},{type:n,data:r},...bt(s)],l=u=>{let d=ht("output",n,s.length),c=d.type.value,p=[{name:"outputSize",type:"u32"},{name:"start",type:c},{name:"delta",type:c}];return`
        ${u.registerUniforms(p).declareVariables(d)}
        ${u.mainStart()}
        ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${c}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${n}`},getShaderSource:l,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:o})}},HT=e=>{let t=0,r=0,n=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],n=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],n=e.inputs[2].getFloat32Array()[0]),Cr.webgpu.validateInputContent&&GT(t,r,n),e.compute(qT(t,r,n,e.inputs[0].dataType),{inputs:[]})}}),KT,bh,vh,QT,XT,JT,$z=Qe(()=>{kt(),Nt(),jr(),Ut(),KT=(e,t,r,n)=>{if(e!=="none"&&n!=="i32"&&n!=="u32"&&n!=="f32")throw new Error(`Input ${n} is not supported with reduction ${e}.`);let i=`{
                var oldValue = 0;
                loop {
                  let newValueF32 =`,s=`;
                  let newValue = bitcast<i32>(newValueF32);
                  let res = atomicCompareExchangeWeak(&${t}, oldValue, newValue);
                  if res.exchanged {
                    break;
                  }
                  oldValue = res.old_value;
                }
              }`;switch(e){case"none":return`${t}=${r};`;case"add":return n==="i32"||n==="u32"?`atomicAdd(&${t}, bitcast<${n}>(${r}));`:`
              ${i}bitcast<${n}>(oldValue) + (${r})${s}`;case"max":return n==="i32"||n==="u32"?`atomicMax(&${t}, bitcast<${n}>(${r}));`:`
                ${i}max(bitcast<f32>(oldValue), (${r}))${s}`;case"min":return n==="i32"||n==="u32"?`atomicMin(&${t}, bitcast<${n}>(${r}));`:`${i}min(bitcast<${n}>(oldValue), (${r}))${s}`;case"mul":return`${i}(bitcast<${n}>(oldValue) * (${r}))${s}`;default:throw new Error(`Reduction ${e} is not supported.`)}},bh=(e,t)=>`${e===1?`
    let element_count_dim = uniforms.output_strides;
    let dim_value = uniforms.output_shape;`:`
    let element_count_dim = uniforms.output_strides[${t?"i - indices_start":"i"}];
    let dim_value = uniforms.output_shape[${t?"i - indices_start":"i"} + uniforms.last_index_dimension];`}
    
    if (index >= 0) {
      if (index >= i32(dim_value)) {
        index = i32(dim_value - 1);
      }
    } else {
      if (index < -i32(dim_value)) {
        index = 0;
      } else {
        index += i32(dim_value);
      }
    }
    data_offset += u32((u32(index) * element_count_dim));`,vh=(e,t,r)=>`for (var i = 0u; i < uniforms.num_updates_elements; i++) {
        let value = updates[uniforms.num_updates_elements * ${r?"global_idx":"idx"} + i];
        ${KT(e.reduction,"output[data_offset + i]","value",t)}
      }`,QT=(e,t)=>{let r=e[0].dims,n=e[1].dims,i=r,s=1,a=Math.ceil(Ce.size(n)/s),o=n[n.length-1],l=Ce.sizeFromDimension(r,o),u=Ce.sizeFromDimension(n,0)/o,d=[{type:12,data:a},{type:12,data:o},{type:12,data:l},...bt(e[1].dims,e[2].dims,i)],c=p=>{let m=Be("indices",e[1].dataType,e[1].dims.length),f=Be("updates",e[2].dataType,e[2].dims.length,s),w=t.reduction!=="none"&&t.reduction!==""?nx("output",e[0].dataType,i.length):ht("output",e[0].dataType,i.length,s);return`
      ${p.registerUniform("output_size","u32").registerUniform("last_index_dimension","u32").registerUniform("num_updates_elements","u32").declareVariables(m,f,w)}
      ${p.mainStart()}
        ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
  var hasDuplicates = false;
  if (${t.reduction==="none"}) {
    for (var i = 0; i < ${u}; i = i + 1) {
      for (var j = i + 1; j < ${u}; j = j + 1) {
        var index_i = i32(indices[i].x);
        var index_j = i32(indices[j].x);
        if (index_i == index_j) {
          hasDuplicates = true;
          break;
        }
      }
      if (hasDuplicates) {
        break;
      }
    }
  }

  if (${t.reduction==="none"} && hasDuplicates) {
    if (global_idx != 0u) {
      return;
    }
    // Process each index-update pair individually when duplicates exist
    for (var idx = 0u; idx < ${u}u; idx++) {
      var data_offset = 0u;
      for (var i = 0u; i < uniforms.last_index_dimension; i++) {
        var index = i32(indices[idx * uniforms.last_index_dimension + i].x);
        ${bh(r.length,!1)}
      }
      ${vh(t,w.type.value,!1)}
    }
    return;
  }

  var data_offset = 0u;
  var indices_start = uniforms.last_index_dimension * global_idx;
  var indices_end = indices_start + uniforms.last_index_dimension;
  for (var i = indices_start; i < indices_end; i++) {
    var index = i32(indices[i].x);
    ${bh(r.length,!0)}
  }
  ${vh(t,w.type.value,!0)}
  }`};return{name:"ScatterND",shaderCache:{hint:`${t.cacheKey}_${t.reduction}`,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:d}),getShaderSource:c}},XT=e=>lr({reduction:e.reduction}),JT=(e,t)=>{e.compute(QT(e.inputs,t),{inputs:[e.inputs[1],e.inputs[2]],outputs:[]})}}),YT,ZT,eE,xh,tE,rE,nE,sE,iE,aE,oE,lE,$h,uE,dE,cE,pE,hE,fE,mE,Mz=Qe(()=>{kt(),Nt(),jr(),Ut(),YT=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},ZT=(e,t,r)=>{t.every(i=>i>=0&&i<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let n=new Array(r).fill(1);return t.forEach((i,s)=>n[i]=e[s]),n},eE=(e,t,r,n,i,s)=>{let[a,o,l]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],u=e[0].dims.length;if(a>0&&e.length>a&&e[a].dims.length>0)e[a].getFloat32Array().forEach(d=>s.push(d));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(o>0&&e.length>o&&e[o].dims.length===1&&e[o].dims[0]>0){if(e[o].getFloat32Array().forEach(d=>n.push(d)),n.length!==0&&n.length!==u&&r>=18&&n.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");YT(n,t),t.axes.length>0&&ZT(n,t.axes,u).forEach((d,c)=>n[c]=d)}if(l>0&&e.length>l&&e[l].dims.length===1&&e[l].dims[0]>0&&(e[l].getBigInt64Array().forEach(d=>i.push(Number(d))),i.length!==0&&i.length!==u&&r>=18&&i.length!==t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(n.length!==0&&n.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(i.length!==0&&i.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof n<"u"&&typeof i<"u"&&n.length>0&&i.length>u)throw new Error("Resize requires only of scales or sizes to be specified")},xh=(e,t,r,n)=>`
  // The whole part and the fractional part are calculated separately due to inaccuracy of floating
  // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
  // offset-by-one error later in floor().
  let big = (${e}) * (${t});
  let whole = ${n}(big / (${r}));
  let fract = ${n}(big % (${r})) / ${n}(${r});
  return whole + fract;
`,tE=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`
          if (xScale < 1.0 || floor(xScale) != xScale) {
            return ${t}(xResized) / ${t}(xScale);
          } else {
            ${xh("xResized","lengthOriginal","lengthResized",t)}
          }
        `;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    ${xh("xResized","lengthOriginal - 1","lengthResized - 1",t)}
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +
                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /
                        ${t}(lengthResized - 1);
                  } else {
                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);
                  const adjustment = ${t}(lengthResized) / outputWidth;
                  const center = ${t}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",rE=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",nE=(e,t,r)=>{let n=new Array(r).fill(0).concat(new Array(r).fill(1)),i=e.length===0?n:e.slice();return t.length>0?(t.forEach((s,a)=>{n[s]=i[a],n[a+r]=i[t.length+a]}),n):i},sE=(e,t,r,n)=>{let i=[];if(r.length>0)if(n.length>0){if(e.forEach(s=>i.push(s)),Math.max(...n)>e.length)throw new Error("axes is out of bound");n.forEach((s,a)=>i[s]=r[a])}else r.forEach(s=>i.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");i=e.map((s,a)=>Math.round(s*t[a]))}return i},iE=(e,t,r)=>{let n=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let i=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=n),r.axes.forEach(s=>i[s]=Math.round(e[s]*t[s]))):(t.fill(n,0,t.length),i.forEach((s,a)=>i[a]=Math.round(s*t[a]))),i},aE=(e,t,r,n,i)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      var original_indices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${gt("uniforms.scales","i",n)};
        var roi_low = ${gt("uniforms.roi","i",i)};
        var roi_hi = ${gt("uniforms.roi",`i + ${t.length}`,i)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${gt("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${gt("uniforms.output_shape","i",r.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,oE=(e,t,r,n,i,s,a)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${n.length}; i++) {
        var output_index = ${t.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${gt("uniforms.scales","i",i)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${gt("uniforms.roi","i",s)};
          var roi_hi = ${gt("uniforms.roi",`i + ${r.length}`,s)};
          var input_shape_i = ${gt("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${gt("uniforms.output_shape","i",n.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${a} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i","input_index")}
      }
      return input_indices;
    }`,lE=(e,t)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${gt("uniforms.input_shape","i",t.length)}) {
          return false;
        }
      }
      return true;
    }`,$h=(e,t,r,n)=>e.rank>n?`
    ${e.indicesSet("input_indices",t,"channel")};
    ${e.indicesSet("input_indices",r,"batch")};
`:"",uE=(e,t,r,n,i)=>{let[s,a,o,l]=r.length===2?[-1,0,1,-1]:[0,2,3,1],u=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${u} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",a,`max(0, min(row, ${r[a]} - 1))`)};
      ${e.indicesSet("input_indices",o,`max(0, min(col, ${r[o]} - 1))`)};
      ${$h(e,l,s,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${u} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${u} = originalIndices[${a}];
      var col:${u} = originalIndices[${o}];
      ${n?`if (row < 0 || row > (${r[a]} - 1) || col < 0 || col > (${r[o]} - 1)) {
        return ${i};
      }`:""};
      row = max(0, min(row, ${r[a]} - 1));
      col = max(0, min(col, ${r[o]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${r.length>2?`u32(originalIndices[${l}])`:"0"};
      var batch: u32 =  ${r.length>2?`u32(originalIndices[${s}])`:"0"};
      var x11: ${u} = getInputValue(batch, channel, row1, col1);
      var x12: ${u} = getInputValue(batch, channel, row1, col2);
      var x21: ${u} = getInputValue(batch, channel, row2, col1);
      var x22: ${u} = getInputValue(batch, channel, row2, col2);
      var dx1: ${u} = abs(row - ${u}(row1));
      var dx2: ${u} = abs(${u}(row2) - row);
      var dy1: ${u} = abs(col - ${u}(col1));
      var dy2: ${u} = abs(${u}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},dE=(e,t,r,n,i,s,a,o,l,u)=>{let d=r.length===2,[c,p]=d?[0,1]:[2,3],m=e.type.value,f=w=>{let C=w===c?"row":"col";return`
      fn ${C}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${m} {
        var output_index = ${t.indicesGet("output_indices",w)};
        var originalIdx: ${m} = getOriginalCoordinateFromResizedCoordinate(output_index, ${i[w]},
        ${n[w]}, ${r[w]}, ${s[w]}, ${s[w]} + ${r.length});
        var fractOriginalIdx: ${m} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${o} && (originalIdx < 0 || originalIdx > (${r[w]} - 1))) {
          return ${l};
        }
        var data: array<${m}, 4> = array<${m}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${C}: ${m} = originalIdx + ${m}(i);
          if (${C} < 0 || ${C} >= ${r[w]}) {
            ${u?`coefs[i + 1] = 0.0;
                        continue;`:o?`return ${l};`:`${C} = max(0, min(${C}, ${r[w]} - 1));`};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",w,`u32(${C})`)};
          data[i + 1] = ${w===c?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${f(c)};
    ${f(p)};
  fn getCubicInterpolationCoefs(s: ${m}) -> array<${m}, 4> {
    var absS = abs(s);
    var coeffs: array<${m}, 4> = array<${m}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${m} = 1.0 - absS;
    var twoMinusAbsS: ${m} = 2.0 - absS;
    var onePlusAbsS: ${m} = 1.0 + absS;
    coeffs[0] = ((${a} * onePlusAbsS - 5 * ${a}) * onePlusAbsS + 8 * ${a}) * onePlusAbsS - 4 * ${a};
    coeffs[1] = ((${a} + 2) * absS - (${a} + 3)) * absS * absS + 1;
    coeffs[2] = ((${a} + 2) * oneMinusAbsS - (${a} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${a} * twoMinusAbsS - 5 * ${a}) * twoMinusAbsS + 8 * ${a}) * twoMinusAbsS - 4 * ${a};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${m}, 4>, coefs: array<${m}, 4>) -> ${m} {
    var coefsSum: ${m} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${m} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},cE=(e,t,r,n,i)=>{let[s,a,o,l,u]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],d=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${d} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",a,`max(0, min(depth, ${r[a]} - 1))`)};
      ${e.indicesSet("input_indices",o,`max(0, min(height, ${r[o]} - 1))`)};
      ${e.indicesSet("input_indices",l,`max(0, min(width, ${r[l]} - 1))`)};
      ${$h(e,u,s,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${d} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${d} = originalIndices[${a}];
      var height:${d} = originalIndices[${o}];
      var width:${d} = originalIndices[${l}];
      ${n?`if (depth < 0 || depth > (${r[a]} - 1) || height < 0 || height > (${r[o]} - 1) || width < 0 || (width > ${r[l]} - 1)) {
      return ${i};
        }`:""};

    depth = max(0, min(depth, ${r[a]} - 1));
      height = max(0, min(height, ${r[o]} - 1));
      width = max(0, min(width, ${r[l]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${r.length>3?`u32(originalIndices[${u}])`:"0"};
      var batch: u32 =  ${r.length>3?`u32(originalIndices[${s}])`:"0"};

      var x111: ${d} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${d} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${d} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${d} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${d} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${d} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${d} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${d} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${d} = abs(depth - ${d}(depth1));
      var dx2: ${d} = abs(${d}(depth2) - depth);
      var dy1: ${d} = abs(height - ${d}(height1));
      var dy2: ${d} = abs(${d}(height2) - height);
      var dz1: ${d} = abs(width - ${d}(width1));
      var dz2: ${d} = abs(${d}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},pE=(e,t,r,n,i,s)=>{let a=e.dims,o=nE(s,t.axes,a.length),l=sE(a,n,i,t.axes),u=n.slice();n.length===0&&(u=a.map((g,P)=>g===0?1:l[P]/g),t.keepAspectRatioPolicy!=="stretch"&&(l=iE(a,u,t)));let d=ht("output",e.dataType,l.length),c=Be("input",e.dataType,a.length),p=Ce.size(l),m=a.length===l.length&&a.every((g,P)=>g===l[P]),f=t.coordinateTransformMode==="tf_crop_and_resize",w=t.extrapolationValue,C=c.type.value,y=g=>`
      ${m?"":`
      ${tE(t.coordinateTransformMode,C)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${lE(c,a)};
              ${rE(t.nearestMode,r,C)};
              ${oE(c,d,a,l,u.length,o.length,f)};
              `;case"linear":return`
              ${aE(d,a,l,u.length,o.length)};
              ${(()=>{if(a.length===2||a.length===4)return`${uE(c,d,a,f,w)}`;if(a.length===3||a.length===5)return`${cE(c,d,a,f,w)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(a.length===2||a.length===4)return`${dE(c,d,a,l,u,o,t.cubicCoeffA,f,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${g.registerUniform("output_size","u32").registerUniform("scales","f32",u.length).registerUniform("roi","f32",o.length).declareVariables(c,d)}
      ${g.mainStart()}
        ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${m?"output[global_idx] = input[global_idx];":`
        let output_indices = ${d.offsetToIndices("global_idx")};
        var input_indices: ${c.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${c.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${a.length===2||a.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${u.length>0?t.mode==="cubic"?u:u.length:""}|${i.length>0?i:""}|${o.length>0?o:""}|${m}|${t.mode==="nearest"?a.length:a}`,inputDependencies:["rank"]},getShaderSource:y,getRunData:()=>({outputs:[{dims:l,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:[{type:12,data:p},{type:1,data:u},{type:1,data:o},...bt(a,l)]})}},hE=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},fE=(e,t)=>{let r=[],n=[],i=[],s=hE(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");eE(e.inputs,t,s,r,n,i),e.compute(pE(e.inputs[0],t,s,r,n,i),{inputs:[0]})},mE=e=>{let t=e.antialias,r=e.axes,n=e.coordinateTransformMode,i=e.cubicCoeffA,s=e.excludeOutside!==0,a=e.extrapolationValue,o=e.keepAspectRatioPolicy,l=e.mode,u=e.nearestMode===""?"simple":e.nearestMode;return lr({antialias:t,axes:r,coordinateTransformMode:n,cubicCoeffA:i,excludeOutside:s,extrapolationValue:a,keepAspectRatioPolicy:o,mode:l,nearestMode:u})}}),_E,gE,wE,Tz=Qe(()=>{kt(),Nt(),Ut(),_E=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],n=e[2];if(t.dataType!==r.dataType||t.dataType!==n.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let i=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==i)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(n.dims.length!==1)throw new Error("Gamma must be 1D");if(n.dims[n.dims.length-1]!==i)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let a=e[3];if(a.dims.length!==1)throw new Error("Beta must be 1D");if(a.dims[a.dims.length-1]!==i)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let a=e[4];if(a.dims.length!==1)throw new Error("Bias must be 1D");if(a.dims[a.dims.length-1]!==i)throw new Error("Bias must have the same hidden size as input")}},gE=(e,t,r,n)=>{let i=t.simplified,s=e[0].dims,a=Ce.size(s),o=s,l=a,u=s.slice(-1)[0],d=n?s.slice(0,-1).concat(1):[],c=!i&&e.length>3,p=e.length>4,m=n&&r>1,f=n&&r>2,w=r>3,C=64,y=Fr(u),g=[{type:12,data:l},{type:12,data:y},{type:12,data:u},{type:1,data:t.epsilon}],P=x=>{let T=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],E=[Be("x",e[0].dataType,e[0].dims,y),Be("skip",e[1].dataType,e[1].dims,y),Be("gamma",e[2].dataType,e[2].dims,y)];c&&E.push(Be("beta",e[3].dataType,e[3].dims,y)),p&&E.push(Be("bias",e[4].dataType,e[4].dims,y)),E.push(ht("output",e[0].dataType,o,y)),m&&E.push(ht("mean_output",1,d)),f&&E.push(ht("inv_std_output",1,d)),w&&E.push(ht("input_skip_bias_sum",e[0].dataType,o,y));let S=sn(e[0].dataType),O=sn(1,y);return`

      ${x.registerUniforms(T).declareVariables(...E)}
      var<workgroup> sum_shared : array<${O}, ${C}>;
      var<workgroup> sum_squared_shared : array<${O}, ${C}>;

      ${x.mainStart([C,1,1])}
        let ix = local_id.x;
        let iy = global_id.x / ${C};

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / ${C};
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == ${C-1}) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${p?"bias[offset1d + i]":S+"(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${w?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${ao(S,y,"value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = ${C};
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${Ai("sum",y)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${Ai("square_sum",y)} / f32(uniforms.hidden_size) ${i?"":"- mean * mean"} + uniforms.epsilon);
        ${m?"mean_output[global_idx] = mean;":""}
        ${f?"inv_std_output[global_idx] = inv_std_dev;":""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${i?"":`- ${S}(mean)`}) *
            ${S}(inv_std_dev) * gamma[offset1d + i]
            ${c?"+ beta[offset1d + i]":""};
        }
      }`},b=[{dims:o,dataType:e[0].dataType}];return r>1&&b.push({dims:d,dataType:1}),r>2&&b.push({dims:d,dataType:1}),r>3&&b.push({dims:s,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${y};${m};${f};${w}`,inputDependencies:e.map((x,T)=>"type")},getShaderSource:P,getRunData:()=>({outputs:b,dispatchGroup:{x:Math.ceil(l/u)},programUniforms:g})}},wE=(e,t)=>{_E(e.inputs);let r=[0];e.outputCount>1&&r.push(-3),e.outputCount>2&&r.push(-3),e.outputCount>3&&r.push(3),e.compute(gE(e.inputs,t,e.outputCount,!1),{outputs:r})}}),yE,hl,bE,Mh,vE,xE,$E,ME,Ez=Qe(()=>{kt(),Nt(),jr(),Ut(),yE=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,n)=>{if(e[n+1].dataType!==6&&e[n+1].dataType!==7)throw new Error(`Input ${n} must be an array of int32 or int64`)})},hl=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(n=>r.push(Number(n)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(n=>r.push(Number(n)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},bE=(e,t)=>{if(e.length>1){let r=hl(e,1),n=hl(e,2),i=hl(e,3);return i.length===0&&(i=[...Array(e[0].dims.length).keys()]),lr({starts:r,ends:n,axes:i})}else return t},Mh=(e,t,r,n,i)=>{let s=e;return e<0&&(s+=r[n[t]]),i[t]<0?Math.max(0,Math.min(s,r[n[t]]-1)):Math.max(0,Math.min(s,r[n[t]]))},vE=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${gt("uniforms.input_shape","i",r.length)};
            let steps_i = ${gt("uniforms.steps","i",r.length)};
            let signs_i = ${gt("uniforms.signs","i",r.length)};
            let starts_i = ${gt("uniforms.starts","i",r.length)};
            var output_index = ${t.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,xE=(e,t)=>{let r=e[0].dims,n=Ce.size(r),i=t.axes.length>0?Ce.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=hl(e,4);s.forEach(y=>y!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(i.length).fill(1));let a=t.starts.map((y,g)=>Mh(y,g,r,i,s)),o=t.ends.map((y,g)=>Mh(y,g,r,i,s));if(i.length!==a.length||i.length!==o.length)throw new Error("start, ends and axes should have the same number of elements");if(i.length!==r.length)for(let y=0;y<r.length;++y)i.includes(y)||(a.splice(y,0,0),o.splice(y,0,r[y]),s.splice(y,0,1));let l=s.map(y=>Math.sign(y));s.forEach((y,g,P)=>{if(y<0){let b=(o[g]-a[g])/y,x=a[g],T=x+b*s[g];a[g]=T,o[g]=x,P[g]=-y}});let u=r.slice(0);i.forEach((y,g)=>{u[y]=Math.ceil((o[y]-a[y])/s[y])});let d={dims:u,dataType:e[0].dataType},c=ht("output",e[0].dataType,u.length),p=Be("input",e[0].dataType,e[0].dims.length),m=Ce.size(u),f=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:a.length},{name:"signs",type:"i32",length:l.length},{name:"steps",type:"u32",length:s.length}],w=[{type:12,data:m},{type:12,data:a},{type:6,data:l},{type:12,data:s},...bt(e[0].dims,u)],C=y=>`
      ${y.registerUniforms(f).declareVariables(p,c)}
        ${vE(p,c,r)}
        ${y.mainStart()}
          ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${c.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${c.setByOffset("global_idx",p.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${l.length}_${a.length}_${s.length}`,inputDependencies:["rank"]},getShaderSource:C,getRunData:()=>({outputs:[d],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:w})}},$E=(e,t)=>{yE(e.inputs,t);let r=bE(e.inputs,t);e.compute(xE(e.inputs,r),{inputs:[0]})},ME=e=>{let t=e.starts,r=e.ends,n=e.axes;return lr({starts:t,ends:r,axes:n})}}),TE,EE,PE,CE,Pz=Qe(()=>{kt(),Nt(),jr(),Oi(),Ut(),TE=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},EE=(e,t)=>{let r=e.inputs[0],n=r.dims,i=Ce.size(n),s=n.length,a=Ce.normalizeAxis(t.axis,s),o=a<n.length-1,l,u=[];o?(u=Array.from({length:s},(E,S)=>S),u[a]=s-1,u[s-1]=a,l=e.compute(Nn(r,u),{inputs:[r],outputs:[-1]})[0]):l=r;let d=l.dims,c=d[s-1],p=i/c,m=Fr(c),f=c/m,w=64;p===1&&(w=256);let C=(E,S)=>S===4?`max(max(${E}.x, ${E}.y), max(${E}.z, ${E}.w))`:S===2?`max(${E}.x, ${E}.y)`:S===3?`max(max(${E}.x, ${E}.y), ${E}.z)`:E,y=Be("x",l.dataType,l.dims,m),g=ht("result",l.dataType,l.dims,m),P=y.type.value,b=sn(l.dataType)==="f32"?`var threadMax = ${P}(-3.402823e+38f);`:`var threadMax = ${P}(-65504.0h);`,x=E=>`
      var<workgroup> rowMaxShared : ${P};
      var<workgroup> rowSumShared : ${P};
      var<workgroup> threadShared : array<${P}, ${w}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${P} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${P}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${E.registerUniform("packedCols","i32").declareVariables(y,g)}
      ${E.mainStart(w)}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${w};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${b}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${P}(${C("threadShared[0]",m)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${P}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${P}(${Ai("threadShared[0]",m)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`,T=e.compute({name:"Softmax",shaderCache:{hint:`${m};${w}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:d,dataType:l.dataType}],dispatchGroup:{x:p},programUniforms:[{type:6,data:f}]}),getShaderSource:x},{inputs:[l],outputs:[o?-1:0]})[0];o&&e.compute(Nn(T,u),{inputs:[T]})},PE=(e,t)=>{TE(e.inputs),EE(e,t)},CE=e=>lr({axis:e.axis})}),Th,SE,kE,IE,AE,Cz=Qe(()=>{kt(),Nt(),Ut(),Th=e=>Array.from(e.getBigInt64Array(),Number),SE=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==10&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Th(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},kE=(e,t)=>{let r=[];for(let n=0;n<e.length;++n)r.push(e[n]*t[n]);return r},IE=(e,t)=>{let r=e[0].dims,n=t??Th(e[1]),i=kE(r,n),s=Ce.size(i),a=e[0].dataType,o=Be("input",a,r.length),l=ht("output",a,i.length),u=d=>`
      const inputShape = ${o.indices(...r)};
      ${d.registerUniform("output_size","u32").declareVariables(o,l)}
      ${d.mainStart()}
      ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${l.offsetToIndices("global_idx")};
      var input_indices: ${o.type.indices};
      for (var i = 0; i < ${r.length}; i++) {
        let input_dim_i = ${o.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${l.indicesGet("output_indices","i")}  % input_dim_i;

        ${o.indicesSet("input_indices","i","input_dim_value")}
      }
      ${l.setByOffset("global_idx",o.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${n}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:[{type:12,data:s},...bt(e[0].dims,i)]}),getShaderSource:u}},AE=e=>{SE(e.inputs),e.compute(IE(e.inputs),{inputs:[0]})}}),OE,DE,zE,Sz=Qe(()=>{kt(),Nt(),Ut(),OE=(e,t,r,n,i)=>{let s=ht("output_data",i,r.length,4),a=Be("a_data",t[1].dataType,t[1].dims.length,4),o=Be("b_data",t[2].dataType,t[2].dims.length,4),l=Be("c_data",t[0].dataType,t[0].dims.length,4),u,d=(c,p,m)=>`select(${p}, ${c}, ${m})`;if(!n)u=s.setByOffset("global_idx",d(a.getByOffset("global_idx"),o.getByOffset("global_idx"),l.getByOffset("global_idx")));else{let c=(p,m,f="")=>{let w=`a_data[index_a${m}][component_a${m}]`,C=`b_data[index_b${m}][component_b${m}]`,y=`bool(c_data[index_c${m}] & (0xffu << (component_c${m} * 8)))`;return`
            let output_indices${m} = ${s.offsetToIndices(`global_idx * 4u + ${m}u`)};
            let offset_a${m} = ${a.broadcastedIndicesToOffset(`output_indices${m}`,s)};
            let offset_b${m} = ${o.broadcastedIndicesToOffset(`output_indices${m}`,s)};
            let offset_c${m} = ${l.broadcastedIndicesToOffset(`output_indices${m}`,s)};
            let index_a${m} = offset_a${m} / 4u;
            let index_b${m} = offset_b${m} / 4u;
            let index_c${m} = offset_c${m} / 4u;
            let component_a${m} = offset_a${m} % 4u;
            let component_b${m} = offset_b${m} % 4u;
            let component_c${m} = offset_c${m} % 4u;
            ${p}[${m}] = ${f}(${d(w,C,y)});
          `};i===9?u=`
            var data = vec4<u32>(0);
            ${c("data",0,"u32")}
            ${c("data",1,"u32")}
            ${c("data",2,"u32")}
            ${c("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:u=`
            ${c("output_data[global_idx]",0)}
            ${c("output_data[global_idx]",1)}
            ${c("output_data[global_idx]",2)}
            ${c("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(l,a,o,s)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${u}
      }`},DE=e=>{let t=e[1].dims,r=e[2].dims,n=e[0].dims,i=e[1].dataType,s=!(Ce.areEqual(t,r)&&Ce.areEqual(r,n)),a=t,o=Ce.size(t);if(s){let u=so.calcShape(so.calcShape(t,r,!1),n,!1);if(!u)throw new Error("Can't perform where op on the given tensors");a=u,o=Ce.size(a)}let l=Math.ceil(o/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:u=>OE(u,e,a,s,i),getRunData:()=>({outputs:[{dims:a,dataType:i}],dispatchGroup:{x:Math.ceil(o/64/4)},programUniforms:[{type:12,data:l},...bt(n,t,r,a)]})}},zE=e=>{e.compute(DE(e.inputs))}}),FE,kz=Qe(()=>{VD(),Rp(),GD(),qD(),HD(),KD(),QD(),ez(),rz(),nz(),sz(),iz(),az(),oz(),lz(),uz(),dz(),cz(),pz(),hz(),fz(),mz(),_z(),gz(),wz(),K2(),yz(),bz(),vz(),xz(),$z(),Fp(),Mz(),sT(),Tz(),Ez(),Pz(),tT(),Cz(),Oi(),Wp(),Sz(),FE=new Map([["Abs",[_$]],["Acos",[g$]],["Acosh",[w$]],["Add",[iM]],["ArgMax",[t$,Lp]],["ArgMin",[e$,Lp]],["Asin",[y$]],["Asinh",[b$]],["Atan",[v$]],["Atanh",[x$]],["Attention",[o$]],["AveragePool",[DT,OT]],["BatchNormalization",[c$]],["BiasAdd",[f$]],["BiasSplitGelu",[rM]],["Cast",[M$,$$]],["Ceil",[P$]],["Clip",[E$]],["Concat",[yM,bM]],["Conv",[rh,eh]],["ConvTranspose",[HM,VM]],["Cos",[C$]],["Cosh",[S$]],["CumSum",[QM,XM]],["DepthToSpace",[e2,t2]],["DequantizeLinear",[WT,VT]],["Div",[aM]],["Einsum",[o2,l2]],["Elu",[k$,ol]],["Equal",[oM]],["Erf",[I$]],["Exp",[A$]],["Expand",[p2]],["FastGelu",[f2]],["Floor",[O$]],["FusedConv",[rh,eh]],["Gather",[w2,g2]],["GatherElements",[S2,C2]],["GatherBlockQuantized",[M2,T2]],["GatherND",[b2,v2]],["Gelu",[D$]],["Gemm",[O2,A2]],["GlobalAveragePool",[FT,zT]],["GlobalMaxPool",[NT,RT]],["Greater",[cM]],["GreaterOrEqual",[hM]],["GridSample",[U2,W2]],["GroupQueryAttention",[lT]],["HardSigmoid",[U$,j$]],["InstanceNormalization",[cT]],["LayerNormalization",[fT]],["LeakyRelu",[z$,ol]],["Less",[pM]],["LessOrEqual",[fM]],["Log",[X$]],["MatMul",[_T]],["MatMulNBits",[bT,vT]],["MaxPool",[BT,LT]],["Mul",[lM]],["MultiHeadAttention",[H2,G2]],["Neg",[B$]],["Not",[F$]],["Pad",[kT]],["Pow",[uM]],["QuickGelu",[Z$,ol]],["Range",[HT]],["Reciprocal",[L$]],["ReduceMin",[Qx]],["ReduceMean",[Vx]],["ReduceMax",[Kx]],["ReduceSum",[Jx]],["ReduceProd",[Xx]],["ReduceL1",[Gx]],["ReduceL2",[qx]],["ReduceLogSum",[Zx]],["ReduceLogSumExp",[Hx]],["ReduceSumSquare",[Yx]],["Relu",[R$]],["Resize",[fE,mE]],["RotaryEmbedding",[nT]],["ScatterND",[JT,XT]],["Sigmoid",[N$]],["Sin",[W$]],["Sinh",[V$]],["Slice",[$E,ME]],["SkipLayerNormalization",[wE]],["Split",[Z2,eT]],["Sqrt",[G$]],["Softmax",[PE,CE]],["Sub",[dM]],["Tan",[q$]],["Tanh",[H$]],["ThresholdedRelu",[Q$,ol]],["Tile",[AE]],["Transpose",[cx,px]],["Where",[zE]]])}),BE,Iz=Qe(()=>{gs(),ai(),Ut(),BE=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,t){this.repo.set(e,t)}run(e,t,r,n,i){_s(e.programInfo.name);let s=this.backend.device,a=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let o=[];for(let u of t)o.push({binding:o.length,resource:{buffer:u.buffer}});for(let u of r)o.push({binding:o.length,resource:{buffer:u.buffer}});i&&o.push({binding:o.length,resource:i});let l=s.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:o,label:e.programInfo.name});if(this.backend.sessionStatus==="capturing"){let u={kernelId:this.backend.currentKernelId,computePipeline:e.computePipeline,bindGroup:l,dispatchGroup:n};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(u)}a.setPipeline(e.computePipeline),a.setBindGroup(0,l),a.dispatchWorkgroups(...n),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),rs(e.programInfo.name)}dispose(){}build(e,t){_s(e.name);let r=this.backend.device,n=[];[{feature:"shader-f16",extension:"f16"},{feature:"subgroups",extension:"subgroups"}].forEach(u=>{r.features.has(u.feature)&&n.push(`enable ${u.extension};`)});let i=ix(t,this.backend.device.limits),s=e.getShaderSource(i),a=`${n.join(`
`)}
${i.additionalImplementations}
${s}`,o=r.createShaderModule({code:a,label:e.name});Zt("verbose",()=>`[WebGPU] ${e.name} shader code: ${a}`);let l=r.createComputePipeline({compute:{module:o,entryPoint:"main"},layout:"auto",label:e.name});return rs(e.name),{programInfo:e,computePipeline:l,uniformVariablesInfo:i.variablesInfo}}normalizeDispatchGroupSize(e){let t=typeof e=="number"?e:e.x,r=typeof e=="number"?1:e.y||1,n=typeof e=="number"?1:e.z||1,i=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=i&&r<=i&&n<=i)return[t,r,n];let s=t*r*n,a=Math.ceil(Math.sqrt(s));if(a>i){if(a=Math.ceil(Math.cbrt(s)),a>i)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[a,a,a]}else return[a,a,1]}}}),LE={};ro(LE,{WebGpuBackend:()=>UE});var RE,NE,jE,UE,Az=Qe(()=>{gs(),kt(),ai(),G1(),UD(),kz(),Iz(),RE=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let n=0;n<e.length;++n){let i=e[n].dataType;switch(t[n]){case"none":{r.push("");break}case"type":{r.push(`${i}`);break}case"rank":{let s=e[n].dims.length;r.push(`${i};${s}`);break}case"dims":{let s=e[n].dims.join(",");r.push(`${i};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[n]}`)}}return r.join("|")},NE=(e,t,r)=>{var i,s;let n=e.name;return(i=e.shaderCache)!=null&&i.hint&&(n+="["+e.shaderCache.hint+"]"),n+=":"+r+`:${RE(t,((s=e.shaderCache)==null?void 0:s.inputDependencies)??new Array(t.length).fill("dims"))}`,n},jE=class{constructor(e){e&&(this.architecture=e.architecture,this.vendor=e.vendor)}isArchitecture(e){return this.architecture===e}isVendor(e){return this.vendor===e}},UE=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e,t){this.env=e;let r=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ},requiredFeatures:r},i=s=>t.features.has(s)&&r.push(s)&&!0;i("chromium-experimental-timestamp-query-inside-passes")||i("timestamp-query"),i("shader-f16"),i("subgroups"),this.device=await t.requestDevice(n),this.adapterInfo=new jE(t.info||await t.requestAdapterInfo()),this.gpuDataManager=tx(this),this.programManager=new BE(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,bp(e.logLevel,!!e.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:t,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let e=this.getCommandEncoder(),t={};this.queryType==="at-passes"&&(t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=e.beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;_s(),this.endComputePass();let e;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),e=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(e,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&e.mapAsync(GPUMapMode.READ).then(()=>{var n;let t=new BigUint64Array(e.getMappedRange()),r=this.pendingQueries.get(e);for(let i=0;i<t.length/2;i++){let s=r[i],a=s.kernelId,o=this.kernels.get(a),l=o.kernelType,u=o.kernelName,d=s.programName,c=s.inputTensorViews,p=s.outputTensorViews,m=t[i*2],f=t[i*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=m);let w=Number(m-this.queryTimeBase),C=Number(f-this.queryTimeBase);if(!Number.isSafeInteger(w)||!Number.isSafeInteger(C))throw new RangeError("incorrect timestamp range");if((n=this.env.webgpu.profiling)!=null&&n.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:c.map(y=>({dims:y.dims,dataType:ii(y.dataType)})),outputsMetadata:p.map(y=>({dims:y.dims,dataType:ii(y.dataType)})),kernelId:a,kernelType:l,kernelName:u,programName:d,startTime:w,endTime:C});else{let y="";c.forEach((P,b)=>{y+=`input[${b}]: [${P.dims}] | ${ii(P.dataType)}, `});let g="";p.forEach((P,b)=>{g+=`output[${b}]: [${P.dims}] | ${ii(P.dataType)}, `}),console.log(`[profiling] kernel "${a}|${l}|${u}|${d}" ${y}${g}execution time: ${C-w} ns`)}rl("GPU",`${d}::${m}::${f}`)}e.unmap(),this.pendingQueries.delete(e)}),rs()}run(e,t,r,n,i,s){_s(e.name);let a=[];for(let g=0;g<t.length;++g){let P=t[g].data;if(P===0)continue;let b=this.gpuDataManager.get(P);if(!b)throw new Error(`no GPU data for input: ${P}`);a.push(b)}let{outputs:o,dispatchGroup:l,programUniforms:u}=e.getRunData(t),d=r.length===0?o.map((g,P)=>P):r;if(d.length!==o.length)throw new Error(`Output size ${d.length} must be equal to ${o.length}.`);let c=[],p=[];for(let g=0;g<o.length;++g){if(!Number.isInteger(d[g])||d[g]<-3||d[g]>=s)throw new Error(`Invalid output index: ${d[g]}`);if(d[g]===-3)continue;let P=d[g]===-1,b=d[g]===-2,x=P||b?i(o[g].dataType,o[g].dims):n(d[g],o[g].dataType,o[g].dims);if(c.push(x),x.data===0)continue;let T=this.gpuDataManager.get(x.data);if(!T)throw new Error(`no GPU data for output: ${x.data}`);if(P&&this.temporaryData.push(T),b){let E=this.kernelPersistentData.get(this.currentKernelId);E||(E=[],this.kernelPersistentData.set(this.currentKernelId,E)),E.push(T)}p.push(T)}if(a.length!==t.length||p.length!==c.length){if(p.length===0)return rs(e.name),c;throw new Error(`Program ${e.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let m;if(u){let g=0,P=[];u.forEach(E=>{let S=typeof E.data=="number"?[E.data]:E.data;if(S.length===0)return;let O=E.type===10?2:4,B,V;E.type===10?(V=S.length>4?16:S.length>2?8:S.length*O,B=S.length>4?16:O*S.length):(V=S.length<=2?S.length*O:16,B=16),g=Math.ceil(g/V)*V,P.push(g);let W=E.type===10?8:4;g+=S.length>4?Math.ceil(S.length/W)*B:S.length*O});let b=16;g=Math.ceil(g/b)*b;let x=new ArrayBuffer(g);u.forEach((E,S)=>{let O=P[S],B=typeof E.data=="number"?[E.data]:E.data;if(E.type===6)new Int32Array(x,O,B.length).set(B);else if(E.type===12)new Uint32Array(x,O,B.length).set(B);else if(E.type===10)new Uint16Array(x,O,B.length).set(B);else if(E.type===1)new Float32Array(x,O,B.length).set(B);else throw new Error(`Unsupported uniform type: ${ii(E.type)}`)});let T=this.gpuDataManager.create(g,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(T.buffer,0,x,0,g),this.gpuDataManager.release(T.id),m={offset:0,size:g,buffer:T.buffer}}let f=this.programManager.normalizeDispatchGroupSize(l),w=f[1]===1&&f[2]===1,C=NE(e,t,w),y=this.programManager.getArtifact(C);if(y||(y=this.programManager.build(e,f),this.programManager.setArtifact(C,y),Zt("info",()=>`[artifact] key: ${C}, programName: ${e.name}`)),u&&y.uniformVariablesInfo){if(u.length!==y.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${y.uniformVariablesInfo.length}, got ${u.length} in program "${y.programInfo.name}".`);for(let g=0;g<u.length;g++){let P=u[g],b=P.type,x=typeof P.data=="number"?1:P.data.length,[T,E]=y.uniformVariablesInfo[g];if(b!==T||x!==E)throw new Error(`Uniform variable ${g} mismatch: expect type ${T} with size ${E}, got type ${b} with size ${x} in program "${y.programInfo.name}".`)}}if(Zt("info",()=>`[ProgramManager] run "${e.name}" (key=${C}) with ${f[0]}x${f[1]}x${f[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let g={kernelId:this.currentKernelId,programName:y.programInfo.name,inputTensorViews:t,outputTensorViews:c};this.pendingKernels.push(g),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(g)}return this.programManager.run(y,a,p,f,m),rs(e.name),c}upload(e,t){this.gpuDataManager.upload(e,t)}memcpy(e,t){this.gpuDataManager.memcpy(e,t)}async download(e,t){await this.gpuDataManager.download(e,t)}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,t,r,n){let i=FE.get(e);if(!i)throw new Error(`kernel not implemented: ${e}`);let s={kernelType:e,kernelName:n,kernelEntry:i[0],attributes:[i[1],r]};this.kernels.set(t,s)}releaseKernel(e){let t=this.kernelPersistentData.get(e);if(t){for(let r of t)this.gpuDataManager.release(r.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,t,r){let n=this.kernels.get(e);if(!n)throw new Error(`kernel not created: ${e}`);let i=n.kernelType,s=n.kernelName,a=n.kernelEntry,o=n.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${i}] ${s}" is not allowed to be called recursively`);this.currentKernelId=e,o[0]&&(o[1]=o[0](o[1]),o[0]=void 0),Zt("info",()=>`[WebGPU] Start to run kernel "[${i}] ${s}"...`);let l=this.env.debug;this.temporaryData=[];try{return l&&this.device.pushErrorScope("validation"),a(t,o[1]),0}catch(u){return r.push(Promise.resolve(`[WebGPU] Kernel "[${i}] ${s}" failed. ${u}`)),1}finally{l&&r.push(this.device.popErrorScope().then(u=>u?`GPU validation error for kernel "[${i}] ${s}": ${u.message}`:null));for(let u of this.temporaryData)this.gpuDataManager.release(u.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(e,t,r,n){let i=this.sessionExternalDataMapping.get(e);i||(i=new Map,this.sessionExternalDataMapping.set(e,i));let s=i.get(t),a=this.gpuDataManager.registerExternalBuffer(r,n,s);return i.set(t,[a,r]),a}unregisterBuffers(e){let t=this.sessionExternalDataMapping.get(e);t&&(t.forEach(r=>this.gpuDataManager.unregisterExternalBuffer(r[0])),this.sessionExternalDataMapping.delete(e))}getBuffer(e){let t=this.gpuDataManager.get(e);if(!t)throw new Error(`no GPU data for buffer: ${e}`);return t.buffer}createDownloader(e,t,r){return async()=>{let n=await Ip(this,e,t);return vp(n.buffer,r)}}writeTimestamp(e){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,e)}setQueryType(){var e;this.queryType="none",(((e=this.env.webgpu.profiling)==null?void 0:e.mode)==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){Zt("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){Zt("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){Zt("info","replay"),this.sessionStatus="replaying";let e=this.capturedCommandList.get(this.currentSessionId),t=this.capturedPendingKernels.get(this.currentSessionId),r=e.length;this.pendingKernels=[];for(let n=0;n<r;n++){let i=this.getComputePassEncoder(),s=e[n];this.writeTimestamp(this.pendingDispatchNumber*2),i.setPipeline(s.computePipeline),i.setBindGroup(0,s.bindGroup),i.dispatchWorkgroups(...s.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(t[n]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onCreateSession(){this.gpuDataManager.onCreateSession()}onReleaseSession(e){this.unregisterBuffers(e),this.capturedCommandList.has(e)&&this.capturedCommandList.delete(e),this.capturedPendingKernels.has(e)&&this.capturedPendingKernels.delete(e),this.gpuDataManager.onReleaseSession(e)}onRunStart(e){this.currentSessionId=e,this.setQueryType()}}}),WE={};ro(WE,{init:()=>GE});var gu,VE,GE,Oz=Qe(()=>{kt(),ai(),Nt(),jD(),gu=class OA{constructor(t,r,n,i){this.module=t,this.dataType=r,this.data=n,this.dims=i}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=Ce.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=Ce.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=Ce.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}getUint16Array(){if(this.dataType!==10&&this.dataType!==4)throw new Error("Invalid data type");let t=Ce.size(this.dims);return t===0?new Uint16Array:new Uint16Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(Ce.size(t)!==Ce.size(this.dims))throw new Error("Invalid new shape");return new OA(this.module,this.dataType,this.data,t)}},VE=class{constructor(e,t,r){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=t.adapterInfo;let n=e.PTR_SIZE,i=r/e.PTR_SIZE,s=n===4?"i32":"i64";this.opKernelContext=Number(e.getValue(n*i++,s));let a=Number(e.getValue(n*i++,s));this.outputCount=Number(e.getValue(n*i++,s)),this.customDataOffset=Number(e.getValue(n*i++,"*")),this.customDataSize=Number(e.getValue(n*i++,s));let o=[];for(let l=0;l<a;l++){let u=Number(e.getValue(n*i++,s)),d=Number(e.getValue(n*i++,"*")),c=Number(e.getValue(n*i++,s)),p=[];for(let m=0;m<c;m++)p.push(Number(e.getValue(n*i++,s)));o.push(new gu(e,u,d,p))}this.inputs=o}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(e,t){var a;let r=((a=t==null?void 0:t.inputs)==null?void 0:a.map(o=>typeof o=="number"?this.inputs[o]:o))??this.inputs,n=(t==null?void 0:t.outputs)??[],i=(o,l,u)=>new gu(this.module,l,this.output(o,u),u),s=(o,l)=>{let u=ba(o,l);if(!u)throw new Error(`Unsupported data type: ${o}`);let d=u>0?this.backend.gpuDataManager.create(u).id:0;return new gu(this.module,o,d,l)};return this.backend.run(e,r,n,i,s,this.outputCount)}output(e,t){let r=this.module.stackSave();try{let n=this.module.PTR_SIZE,i=n===4?"i32":"i64",s=this.module.stackAlloc((1+t.length)*n);this.module.setValue(s,t.length,i);for(let a=0;a<t.length;a++)this.module.setValue(s+n*(a+1),t[a],i);return this.module._JsepOutput(this.opKernelContext,e,s)}catch(n){throw new Error(`Failed to generate kernel's output[${e}] with dims [${t}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(r)}}},GE=async(e,t,r,n)=>{let i=t.jsepInit;if(!i)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(e==="webgpu"){let s=(Az(),Zo(LE)).WebGpuBackend,a=new s;await a.initialize(r,n),i("webgpu",[a,o=>a.alloc(Number(o)),o=>a.free(o),(o,l,u,d=!1)=>{if(d)Zt("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${Number(o)}, dst=${Number(l)}, size=${Number(u)}`),a.memcpy(Number(o),Number(l));else{Zt("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${Number(o)}, gpuDataId=${Number(l)}, size=${Number(u)}`);let c=t.HEAPU8.subarray(Number(o>>>0),Number(o>>>0)+Number(u));a.upload(Number(l),c)}},async(o,l,u)=>{Zt("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${o}, dataOffset=${l}, size=${u}`),await a.download(Number(o),()=>t.HEAPU8.subarray(Number(l)>>>0,Number(l+u)>>>0))},(o,l,u)=>a.createKernel(o,Number(l),u,t.UTF8ToString(t._JsepGetNodeName(Number(l)))),o=>a.releaseKernel(o),(o,l,u,d)=>{Zt("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${o}, contextDataOffset=${l}`);let c=new VE(t,a,Number(l));return a.computeKernel(Number(o),c,d)},()=>a.captureBegin(),()=>a.captureEnd(),()=>a.replay()])}else{let s=new J1(r);i("webnn",[s,()=>s.reserveTensorId(),a=>s.releaseTensorId(a),async(a,o,l,u,d)=>s.ensureTensor(a,o,l,u,d),(a,o)=>{s.uploadTensor(a,o)},async(a,o)=>s.downloadTensor(a,o)])}}}),qE,Eh,Ph,Di,HE,Ch,wu,Sh,kh,Ih,Ah,Oh,Dh,KE=Qe(()=>{LD(),RD(),kt(),ya(),fp(),z1(),qE=(e,t)=>{xr()._OrtInit(e,t)!==0&&fr("Can't initialize onnxruntime.")},Eh=async e=>{qE(e.wasm.numThreads,nu(e.logLevel))},Ph=async(e,t)=>{var r,n;(n=(r=xr()).asyncInit)==null||n.call(r);{let i=(Oz(),Zo(WE)).init;if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let s=e.webgpu.adapter;if(s){if(typeof s.limits!="object"||typeof s.features!="object"||typeof s.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let a=e.webgpu.powerPreference;if(a!==void 0&&a!=="low-power"&&a!=="high-performance")throw new Error(`Invalid powerPreference setting: "${a}"`);let o=e.webgpu.forceFallbackAdapter;if(o!==void 0&&typeof o!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${o}"`);if(s=await navigator.gpu.requestAdapter({powerPreference:a,forceFallbackAdapter:o}),!s)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await i("webgpu",xr(),e,s)}if(t==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await i("webnn",xr(),e)}}},Di=new Map,HE=e=>{let t=xr(),r=t.stackSave();try{let n=t.PTR_SIZE,i=t.stackAlloc(2*n);t._OrtGetInputOutputCount(e,i,i+n)!==0&&fr("Can't get session input/output count.");let s=n===4?"i32":"i64";return[Number(t.getValue(i,s)),Number(t.getValue(i+n,s))]}finally{t.stackRestore(r)}},Ch=(e,t)=>{let r=xr(),n=r.stackSave(),i=0;try{let s=r.PTR_SIZE,a=r.stackAlloc(2*s);r._OrtGetInputOutputMetadata(e,t,a,a+s)!==0&&fr("Can't get session input/output metadata.");let o=Number(r.getValue(a,"*"));i=Number(r.getValue(a+s,"*"));let l=r.HEAP32[i/4];if(l===0)return[o,0];let u=r.HEAPU32[i/4+1],d=[];for(let c=0;c<u;c++){let p=Number(r.getValue(i+8+c*s,"*"));d.push(p!==0?r.UTF8ToString(p):Number(r.getValue(i+8+(c+u)*s,"*")))}return[o,l,d]}finally{r.stackRestore(n),i!==0&&r._OrtFree(i)}},wu=e=>{let t=xr(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},Sh=async(e,t)=>{var c,p,m,f;let r,n,i=xr();Array.isArray(e)?[r,n]=e:e.buffer===i.HEAPU8.buffer?[r,n]=[e.byteOffset,e.byteLength]:[r,n]=wu(e);let s=0,a=0,o=0,l=[],u=[],d=[];try{if([a,l]=await D1(t),(t==null?void 0:t.externalData)&&i.mountExternalData){let S=[];for(let O of t.externalData){let B=typeof O=="string"?O:O.path;S.push(yp(typeof O=="string"?O:O.data).then(V=>{i.mountExternalData(B,V)}))}await Promise.all(S)}for(let S of(t==null?void 0:t.executionProviders)??[])if((typeof S=="string"?S:S.name)==="webnn"){if(i.shouldTransferToMLTensor=!1,typeof S!="string"){let O=S,B=O==null?void 0:O.context,V=O==null?void 0:O.gpuDevice,W=O==null?void 0:O.deviceType,N=O==null?void 0:O.powerPreference;B?i.currentContext=B:V?i.currentContext=await i.webnnCreateMLContext(V):i.currentContext=await i.webnnCreateMLContext({deviceType:W,powerPreference:N})}else i.currentContext=await i.webnnCreateMLContext();break}s=await i._OrtCreateSession(r,n,a),(c=i.webgpuOnCreateSession)==null||c.call(i,s),s===0&&fr("Can't create a session."),(p=i.jsepOnCreateSession)==null||p.call(i),i.currentContext&&(i.webnnRegisterMLContext(s,i.currentContext),i.currentContext=void 0,i.shouldTransferToMLTensor=!0);let[w,C]=HE(s),y=!!(t!=null&&t.enableGraphCapture),g=[],P=[],b=[],x=[],T=[];for(let S=0;S<w;S++){let[O,B,V]=Ch(s,S);O===0&&fr("Can't get an input name."),u.push(O);let W=i.UTF8ToString(O);g.push(W),b.push(B===0?{name:W,isTensor:!1}:{name:W,isTensor:!0,type:ii(B),shape:V})}for(let S=0;S<C;S++){let[O,B,V]=Ch(s,S+w);O===0&&fr("Can't get an output name."),d.push(O);let W=i.UTF8ToString(O);P.push(W),x.push(B===0?{name:W,isTensor:!1}:{name:W,isTensor:!0,type:ii(B),shape:V});{if(y&&(t==null?void 0:t.preferredOutputLocation)===void 0){T.push("gpu-buffer");continue}let N=typeof(t==null?void 0:t.preferredOutputLocation)=="string"?t.preferredOutputLocation:((m=t==null?void 0:t.preferredOutputLocation)==null?void 0:m[W])??"cpu";if(N!=="cpu"&&N!=="cpu-pinned"&&N!=="gpu-buffer"&&N!=="ml-tensor")throw new Error(`Not supported preferred output location: ${N}.`);if(y&&N!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${N}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);T.push(N)}}let E=null;return T.some(S=>S==="gpu-buffer"||S==="ml-tensor")&&(o=i._OrtCreateBinding(s),o===0&&fr("Can't create IO binding."),E={handle:o,outputPreferredLocations:T,outputPreferredLocationsEncoded:T.map(S=>wp(S))}),Di.set(s,[s,u,d,E,y,!1]),[s,g,P,b,x]}catch(w){throw u.forEach(C=>i._OrtFree(C)),d.forEach(C=>i._OrtFree(C)),o!==0&&i._OrtReleaseBinding(o)!==0&&fr("Can't release IO binding."),s!==0&&i._OrtReleaseSession(s)!==0&&fr("Can't release session."),w}finally{i._free(r),a!==0&&i._OrtReleaseSessionOptions(a)!==0&&fr("Can't release session options."),l.forEach(w=>i._free(w)),(f=i.unmountExternalData)==null||f.call(i)}},kh=e=>{var l,u,d;let t=xr(),r=Di.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[n,i,s,a,o]=r;a&&(o&&t._OrtClearBoundOutputs(a.handle)!==0&&fr("Can't clear bound outputs."),t._OrtReleaseBinding(a.handle)!==0&&fr("Can't release IO binding.")),(l=t.jsepOnReleaseSession)==null||l.call(t,e),(u=t.webnnOnReleaseSession)==null||u.call(t,e),(d=t.webgpuOnReleaseSession)==null||d.call(t,e),i.forEach(c=>t._OrtFree(c)),s.forEach(c=>t._OrtFree(c)),t._OrtReleaseSession(n)!==0&&fr("Can't release session."),Di.delete(e)},Ih=async(e,t,r,n,i,s,a=!1)=>{if(!e){t.push(0);return}let o=xr(),l=o.PTR_SIZE,u=e[0],d=e[1],c=e[3],p=c,m,f;if(u==="string"&&(c==="gpu-buffer"||c==="ml-tensor"))throw new Error("String tensor is not supported on GPU.");if(a&&c!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${s} when enableGraphCapture is true.`);if(c==="gpu-buffer"){let y=e[2].gpuBuffer;f=ba(no(u),d);{let g=o.jsepRegisterBuffer;if(!g)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');m=g(n,s,y,f)}}else if(c==="ml-tensor"){let y=e[2].mlTensor;f=ba(no(u),d);let g=o.webnnRegisterMLTensor;if(!g)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');m=g(n,y,no(u),d)}else{let y=e[2];if(Array.isArray(y)){f=l*y.length,m=o._malloc(f),r.push(m);for(let g=0;g<y.length;g++){if(typeof y[g]!="string")throw new TypeError(`tensor data at index ${g} is not a string`);o.setValue(m+g*l,ws(y[g],r),"*")}}else{let g=o.webnnIsGraphInput;if(u!=="string"&&g){let P=o.UTF8ToString(i);if(g(n,P)){let b=no(u);f=ba(b,d),p="ml-tensor";let x=o.webnnCreateTemporaryTensor,T=o.webnnUploadTensor;if(!x||!T)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');let E=await x(n,b,d);T(E,new Uint8Array(y.buffer,y.byteOffset,y.byteLength)),m=E}else f=y.byteLength,m=o._malloc(f),r.push(m),o.HEAPU8.set(new Uint8Array(y.buffer,y.byteOffset,f),m)}else f=y.byteLength,m=o._malloc(f),r.push(m),o.HEAPU8.set(new Uint8Array(y.buffer,y.byteOffset,f),m)}}let w=o.stackSave(),C=o.stackAlloc(4*d.length);try{d.forEach((g,P)=>o.setValue(C+P*l,g,l===4?"i32":"i64"));let y=o._OrtCreateTensor(no(u),m,f,C,d.length,wp(p));y===0&&fr(`Can't create tensor for input/output. session=${n}, index=${s}.`),t.push(y)}finally{o.stackRestore(w)}},Ah=async(e,t,r,n,i,s)=>{var V,W,N,te;let a=xr(),o=a.PTR_SIZE,l=Di.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);let u=l[0],d=l[1],c=l[2],p=l[3],m=l[4],f=l[5],w=t.length,C=n.length,y=0,g=[],P=[],b=[],x=[],T=a.stackSave(),E=a.stackAlloc(w*o),S=a.stackAlloc(w*o),O=a.stackAlloc(C*o),B=a.stackAlloc(C*o);try{[y,g]=S1(s);for(let Y=0;Y<w;Y++)await Ih(r[Y],P,x,e,d[t[Y]],t[Y],m);for(let Y=0;Y<C;Y++)await Ih(i[Y],b,x,e,c[n[Y]],w+n[Y],m);for(let Y=0;Y<w;Y++)a.setValue(E+Y*o,P[Y],"*"),a.setValue(S+Y*o,d[t[Y]],"*");for(let Y=0;Y<C;Y++)a.setValue(O+Y*o,b[Y],"*"),a.setValue(B+Y*o,c[n[Y]],"*");if(p&&!f){let{handle:Y,outputPreferredLocations:Z,outputPreferredLocationsEncoded:de}=p;if(d.length!==w)throw new Error(`input count from feeds (${w}) is expected to be always equal to model's input count (${d.length}).`);for(let pe=0;pe<w;pe++){let L=t[pe];await a._OrtBindInput(Y,d[L],P[pe])!==0&&fr(`Can't bind input[${pe}] for session=${e}.`)}for(let pe=0;pe<C;pe++){let L=n[pe];(V=i[pe])!=null&&V[3]?a._OrtBindOutput(Y,c[L],b[pe],0)!==0&&fr(`Can't bind pre-allocated output[${pe}] for session=${e}.`):a._OrtBindOutput(Y,c[L],0,de[L])!==0&&fr(`Can't bind output[${pe}] to ${Z[pe]} for session=${e}.`)}Di.set(e,[u,d,c,p,m,!0])}(W=a.jsepOnRunStart)==null||W.call(a,u),(N=a.webnnOnRunStart)==null||N.call(a,u);let q;p?q=await a._OrtRunWithBinding(u,p.handle,C,O,y):q=await a._OrtRun(u,S,E,w,B,C,O,y),q!==0&&fr("failed to call OrtRun().");let K=[];for(let Y=0;Y<C;Y++){let Z=Number(a.getValue(O+Y*o,"*"));if(Z===b[Y]){K.push(i[Y]);continue}let de=a.stackSave(),pe=a.stackAlloc(4*o),L=!1,F,U=0;try{a._OrtGetTensorData(Z,pe,pe+o,pe+2*o,pe+3*o)!==0&&fr(`Can't access output tensor data on index ${Y}.`);let re=o===4?"i32":"i64",me=Number(a.getValue(pe,re));U=a.getValue(pe+o,"*");let J=a.getValue(pe+o*2,"*"),we=Number(a.getValue(pe+o*3,re)),je=[];for(let ne=0;ne<we;ne++)je.push(Number(a.getValue(J+ne*o,re)));a._OrtFree(J)!==0&&fr("Can't free memory for tensor dims.");let Ge=je.reduce((ne,oe)=>ne*oe,1);F=ii(me);let Ae=p==null?void 0:p.outputPreferredLocations[n[Y]];if(F==="string"){if(Ae==="gpu-buffer"||Ae==="ml-tensor")throw new Error("String tensor is not supported on GPU.");let ne=[];for(let oe=0;oe<Ge;oe++){let H=a.getValue(U+oe*o,"*"),be=a.getValue(U+(oe+1)*o,"*"),Oe=oe===Ge-1?void 0:be-H;ne.push(a.UTF8ToString(H,Oe))}K.push([F,je,ne,"cpu"])}else if(Ae==="gpu-buffer"&&Ge>0){let ne=a.jsepGetBuffer;if(!ne)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let oe=ne(U),H=ba(me,Ge);if(H===void 0||!_p(F))throw new Error(`Unsupported data type: ${F}`);L=!0,K.push([F,je,{gpuBuffer:oe,download:a.jsepCreateDownloader(oe,H,F),dispose:()=>{a._OrtReleaseTensor(Z)!==0&&fr("Can't release tensor.")}},"gpu-buffer"])}else if(Ae==="ml-tensor"&&Ge>0){let ne=a.webnnEnsureTensor,oe=a.webnnIsInt64Supported;if(!ne||!oe)throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');if(ba(me,Ge)===void 0||!gp(F))throw new Error(`Unsupported data type: ${F}`);if(F==="int64"&&!oe(e))throw new Error('preferredLocation "ml-tensor" for int64 output is not supported by current WebNN Context.');let H=await ne(e,U,me,je,!1);L=!0,K.push([F,je,{mlTensor:H,download:a.webnnCreateMLTensorDownloader(U,F),dispose:()=>{a.webnnReleaseTensorId(U),a._OrtReleaseTensor(Z)}},"ml-tensor"])}else{let ne=mp(F),oe=new ne(Ge);new Uint8Array(oe.buffer,oe.byteOffset,oe.byteLength).set(a.HEAPU8.subarray(U,U+oe.byteLength)),K.push([F,je,oe,"cpu"])}}finally{a.stackRestore(de),F==="string"&&U&&a._free(U),L||a._OrtReleaseTensor(Z),(te=a.webnnOnRunEnd)==null||te.call(a,u)}}return p&&!m&&(a._OrtClearBoundOutputs(p.handle)!==0&&fr("Can't clear bound outputs."),Di.set(e,[u,d,c,p,m,!1])),K}finally{a.stackRestore(T),P.forEach(q=>a._OrtReleaseTensor(q)),b.forEach(q=>a._OrtReleaseTensor(q)),x.forEach(q=>a._free(q)),y!==0&&a._OrtReleaseRunOptions(y),g.forEach(q=>a._free(q))}},Oh=e=>{let t=xr(),r=Di.get(e);if(!r)throw new Error("invalid session id");let n=r[0],i=t._OrtEndProfiling(n);i===0&&fr("Can't get an profile file name."),t._OrtFree(i)},Dh=e=>{let t=[];for(let r of e){let n=r[2];!Array.isArray(n)&&"buffer"in n&&t.push(n.buffer)}return t}}),zi,An,oo,fl,ml,yu,zh,bu,Pa,Ca,QE,XE,JE,YE,ZE,eP,tP,rP,nP=Qe(()=>{gs(),KE(),ya(),dp(),zi=()=>!!Cr.wasm.proxy&&typeof document<"u",oo=!1,fl=!1,ml=!1,bu=new Map,Pa=(e,t)=>{let r=bu.get(e);r?r.push(t):bu.set(e,[t])},Ca=()=>{if(oo||!fl||ml||!An)throw new Error("worker not ready")},QE=e=>{switch(e.data.type){case"init-wasm":oo=!1,e.data.err?(ml=!0,zh[1](e.data.err)):(fl=!0,zh[0]()),yu&&(URL.revokeObjectURL(yu),yu=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=bu.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}}},XE=async()=>{if(!fl){if(oo)throw new Error("multiple calls to 'initWasm()' detected.");if(ml)throw new Error("previous call to 'initWasm()' failed.");if(oo=!0,zi())return new Promise((e,t)=>{An==null||An.terminate(),M1().then(([r,n])=>{try{An=n,An.onerror=s=>t(s),An.onmessage=QE,zh=[e,t];let i={type:"init-wasm",in:Cr};!i.in.wasm.wasmPaths&&(r||ap)&&(i.in.wasm.wasmPaths={wasm:new URL(""+new URL("ort-wasm-simd-threaded.jsep-B0T3yYHD.wasm",self.location.href).href,self.location.href).href}),An.postMessage(i),yu=r}catch(i){t(i)}},t)});try{await hp(Cr.wasm),await Eh(Cr),fl=!0}catch(e){throw ml=!0,e}finally{oo=!1}}},JE=async e=>{if(zi())return Ca(),new Promise((t,r)=>{Pa("init-ep",[t,r]);let n={type:"init-ep",in:{epName:e,env:Cr}};An.postMessage(n)});await Ph(Cr,e)},YE=async e=>zi()?(Ca(),new Promise((t,r)=>{Pa("copy-from",[t,r]);let n={type:"copy-from",in:{buffer:e}};An.postMessage(n,[e.buffer])})):wu(e),ZE=async(e,t)=>{if(zi()){if(t!=null&&t.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return Ca(),new Promise((r,n)=>{Pa("create",[r,n]);let i={type:"create",in:{model:e,options:{...t}}},s=[];e instanceof Uint8Array&&s.push(e.buffer),An.postMessage(i,s)})}else return Sh(e,t)},eP=async e=>{if(zi())return Ca(),new Promise((t,r)=>{Pa("release",[t,r]);let n={type:"release",in:e};An.postMessage(n)});kh(e)},tP=async(e,t,r,n,i,s)=>{if(zi()){if(r.some(a=>a[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(i.some(a=>a))throw new Error("pre-allocated output tensor is not supported for proxy.");return Ca(),new Promise((a,o)=>{Pa("run",[a,o]);let l=r,u={type:"run",in:{sessionId:e,inputIndices:t,inputs:l,outputIndices:n,options:s}};An.postMessage(u,Dh(l))})}else return Ah(e,t,r,n,i,s)},rP=async e=>{if(zi())return Ca(),new Promise((t,r)=>{Pa("end-profiling",[t,r]);let n={type:"end-profiling",in:e};An.postMessage(n)});Oh(e)}}),Fh,sP,iP,Dz=Qe(()=>{gs(),nP(),kt(),ep(),z1(),Fh=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];case"ml-tensor":return[e.type,e.dims,{mlTensor:e.mlTensor},"ml-tensor"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},sP=e=>{switch(e[3]){case"cpu":return new ms(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!_p(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:n,dispose:i}=e[2];return ms.fromGpuBuffer(r,{dataType:t,dims:e[1],download:n,dispose:i})}case"ml-tensor":{let t=e[0];if(!gp(t))throw new Error(`not supported data type: ${t} for deserializing MLTensor tensor`);let{mlTensor:r,download:n,dispose:i}=e[2];return ms.fromMLTensor(r,{dataType:t,dims:e[1],download:n,dispose:i})}default:throw new Error(`invalid data location: ${e[3]}`)}},iP=class{async fetchModelAndCopyToWasmMemory(e){return YE(await yp(e))}async loadModel(e,t){_s();let r;typeof e=="string"?r=await this.fetchModelAndCopyToWasmMemory(e):r=e,[this.sessionId,this.inputNames,this.outputNames,this.inputMetadata,this.outputMetadata]=await ZE(r,t),rs()}async dispose(){return eP(this.sessionId)}async run(e,t,r){_s();let n=[],i=[];Object.entries(e).forEach(c=>{let p=c[0],m=c[1],f=this.inputNames.indexOf(p);if(f===-1)throw new Error(`invalid input '${p}'`);n.push(m),i.push(f)});let s=[],a=[];Object.entries(t).forEach(c=>{let p=c[0],m=c[1],f=this.outputNames.indexOf(p);if(f===-1)throw new Error(`invalid output '${p}'`);s.push(m),a.push(f)});let o=n.map((c,p)=>Fh(c,()=>`input "${this.inputNames[i[p]]}"`)),l=s.map((c,p)=>c?Fh(c,()=>`output "${this.outputNames[a[p]]}"`):null),u=await tP(this.sessionId,i,o,a,l,r),d={};for(let c=0;c<u.length;c++)d[this.outputNames[a[c]]]=s[c]??sP(u[c]);return rs(),d}startProfiling(){}endProfiling(){rP(this.sessionId)}}}),aP={};ro(aP,{OnnxruntimeWebAssemblyBackend:()=>Lh,initializeFlags:()=>Bh,wasmBackend:()=>oP});var Bh,Lh,oP,zz=Qe(()=>{gs(),nP(),Dz(),Bh=()=>{(typeof Cr.wasm.initTimeout!="number"||Cr.wasm.initTimeout<0)&&(Cr.wasm.initTimeout=0);let e=Cr.wasm.simd;if(typeof e!="boolean"&&e!==void 0&&e!=="fixed"&&e!=="relaxed"&&(console.warn(`Property "env.wasm.simd" is set to unknown value "${e}". Reset it to \`false\` and ignore SIMD feature checking.`),Cr.wasm.simd=!1),typeof Cr.wasm.proxy!="boolean"&&(Cr.wasm.proxy=!1),typeof Cr.wasm.trace!="boolean"&&(Cr.wasm.trace=!1),typeof Cr.wasm.numThreads!="number"||!Number.isInteger(Cr.wasm.numThreads)||Cr.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)Cr.wasm.numThreads=1;else{let t=typeof navigator>"u"?vD("node:os").cpus().length:navigator.hardwareConcurrency;Cr.wasm.numThreads=Math.min(4,Math.ceil((t||1)/2))}},Lh=class{async init(e){Bh(),await XE(),await JE(e)}async createInferenceSessionHandler(e,t){let r=new iP;return await r.loadModel(e,t),r}},oP=new Lh});gs(),gs(),gs();var Fz="1.22.0-dev.20250409-89f8206ba4",Bz=h1;{let e=(zz(),Zo(aP)).wasmBackend;ga("webgpu",e,5),ga("webnn",e,5),ga("cpu",e,10),ga("wasm",e,10)}Object.defineProperty(Cr.versions,"web",{value:Fz,enumerable:!0});/**
* @license
* Copyright 2021 Google LLC. All Rights Reserved.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* =============================================================================
*//**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */var Lz=Object.freeze({__proto__:null,get InferenceSession(){return Zc},get TRACE(){return rl},get TRACE_FUNC_BEGIN(){return _s},get TRACE_FUNC_END(){return rs},get Tensor(){return ms},default:Bz,get env(){return Cr},get registerBackend(){return ga}}),li={},Rz={"onnxruntime-common":e=>{e.exports=gD},"onnxruntime-web":e=>{e.exports=Lz},"?2ce3":()=>{},"?7992":()=>{},"?5af5":()=>{},"?2b25":()=>{},"?db59":()=>{},"?383f":()=>{},"?fa4b":()=>{},"./node_modules/@huggingface/jinja/dist/index.js":(e,t,r)=>{r.r(t),r.d(t,{Environment:()=>ze,Interpreter:()=>ct,Template:()=>Ot,parse:()=>J,tokenize:()=>d});var n=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Comment:"Comment"}),i=class{constructor(z,se){this.value=z,this.type=se}};function s(z){return/\w/.test(z)}function a(z){return/[0-9]/.test(z)}var o=[["{%",n.OpenStatement],["%}",n.CloseStatement],["{{",n.OpenExpression],["}}",n.CloseExpression],["(",n.OpenParen],[")",n.CloseParen],["{",n.OpenCurlyBracket],["}",n.CloseCurlyBracket],["[",n.OpenSquareBracket],["]",n.CloseSquareBracket],[",",n.Comma],[".",n.Dot],[":",n.Colon],["|",n.Pipe],["<=",n.ComparisonBinaryOperator],[">=",n.ComparisonBinaryOperator],["==",n.ComparisonBinaryOperator],["!=",n.ComparisonBinaryOperator],["<",n.ComparisonBinaryOperator],[">",n.ComparisonBinaryOperator],["+",n.AdditiveBinaryOperator],["-",n.AdditiveBinaryOperator],["~",n.AdditiveBinaryOperator],["*",n.MultiplicativeBinaryOperator],["/",n.MultiplicativeBinaryOperator],["%",n.MultiplicativeBinaryOperator],["=",n.Equals]],l=new Map([["n",`
`],["t","	"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function u(z,se={}){return z.endsWith(`
`)&&(z=z.slice(0,-1)),se.lstrip_blocks&&(z=z.replace(/^[ \t]*({[#%-])/gm,"$1")),se.trim_blocks&&(z=z.replace(/([#%-]})\n/g,"$1")),z.replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{").replace(/-#}\s*/g,"#}").replace(/\s*{#-/g,"{#").replace(/{%\s*(end)?generation\s*%}/gs,"")}function d(z,se={}){var lt,Et;const G=[],ee=u(z,se);let le=0,xe=0;const Re=xt=>{let At="";for(;xt(ee[le]);){if(ee[le]==="\\"){if(++le,le>=ee.length)throw new SyntaxError("Unexpected end of input");const ut=ee[le++],Kt=l.get(ut);if(Kt===void 0)throw new SyntaxError(`Unexpected escaped character: ${ut}`);At+=Kt;continue}if(At+=ee[le++],le>=ee.length)throw new SyntaxError("Unexpected end of input")}return At};e:for(;le<ee.length;){const xt=(lt=G.at(-1))==null?void 0:lt.type;if(xt===void 0||xt===n.CloseStatement||xt===n.CloseExpression||xt===n.Comment){let ut="";for(;le<ee.length&&!(ee[le]==="{"&&(ee[le+1]==="%"||ee[le+1]==="{"||ee[le+1]==="#"));)ut+=ee[le++];if(ut.length>0){G.push(new i(ut,n.Text));continue}}if(ee[le]==="{"&&ee[le+1]==="#"){le+=2;let ut="";for(;ee[le]!=="#"||ee[le+1]!=="}";){if(le+2>=ee.length)throw new SyntaxError("Missing end of comment tag");ut+=ee[le++]}G.push(new i(ut,n.Comment)),le+=2;continue}Re(ut=>/\s/.test(ut));const At=ee[le];if(At==="-"||At==="+"){const ut=(Et=G.at(-1))==null?void 0:Et.type;if(ut===n.Text||ut===void 0)throw new SyntaxError(`Unexpected character: ${At}`);switch(ut){case n.Identifier:case n.NumericLiteral:case n.StringLiteral:case n.CloseParen:case n.CloseSquareBracket:break;default:{++le;const Kt=Re(a);G.push(new i(`${At}${Kt}`,Kt.length>0?n.NumericLiteral:n.UnaryOperator));continue}}}for(const[ut,Kt]of o){if(ut==="}}"&&xe>0)continue;if(ee.slice(le,le+ut.length)===ut){G.push(new i(ut,Kt)),Kt===n.OpenExpression?xe=0:Kt===n.OpenCurlyBracket?++xe:Kt===n.CloseCurlyBracket&&--xe,le+=ut.length;continue e}}if(At==="'"||At==='"'){++le;const ut=Re(Kt=>Kt!==At);G.push(new i(ut,n.StringLiteral)),++le;continue}if(a(At)){let ut=Re(a);if(ee[le]==="."&&a(ee[le+1])){++le;const Kt=Re(a);ut=`${ut}.${Kt}`}G.push(new i(ut,n.NumericLiteral));continue}if(s(At)){const ut=Re(s);G.push(new i(ut,n.Identifier));continue}throw new SyntaxError(`Unexpected character: ${At}`)}return G}var c=class{constructor(){ie(this,"type","Statement")}},p=class extends c{constructor(se){super();ie(this,"type","Program");this.body=se}},m=class extends c{constructor(se,G,ee){super();ie(this,"type","If");this.test=se,this.body=G,this.alternate=ee}},f=class extends c{constructor(se,G,ee,le){super();ie(this,"type","For");this.loopvar=se,this.iterable=G,this.body=ee,this.defaultBlock=le}},w=class extends c{constructor(){super(...arguments);ie(this,"type","Break")}},C=class extends c{constructor(){super(...arguments);ie(this,"type","Continue")}},y=class extends c{constructor(se,G,ee){super();ie(this,"type","Set");this.assignee=se,this.value=G,this.body=ee}},g=class extends c{constructor(se,G,ee){super();ie(this,"type","Macro");this.name=se,this.args=G,this.body=ee}},P=class extends c{constructor(se){super();ie(this,"type","Comment");this.value=se}},b=class extends c{constructor(){super(...arguments);ie(this,"type","Expression")}},x=class extends b{constructor(se,G,ee){super();ie(this,"type","MemberExpression");this.object=se,this.property=G,this.computed=ee}},T=class extends b{constructor(se,G){super();ie(this,"type","CallExpression");this.callee=se,this.args=G}},E=class extends b{constructor(se){super();ie(this,"type","Identifier");this.value=se}},S=class extends b{constructor(se){super();ie(this,"type","Literal");this.value=se}},O=class extends S{constructor(){super(...arguments);ie(this,"type","IntegerLiteral")}},B=class extends S{constructor(){super(...arguments);ie(this,"type","FloatLiteral")}},V=class extends S{constructor(){super(...arguments);ie(this,"type","StringLiteral")}},W=class extends S{constructor(){super(...arguments);ie(this,"type","ArrayLiteral")}},N=class extends S{constructor(){super(...arguments);ie(this,"type","TupleLiteral")}},te=class extends S{constructor(){super(...arguments);ie(this,"type","ObjectLiteral")}},q=class extends b{constructor(se,G,ee){super();ie(this,"type","BinaryExpression");this.operator=se,this.left=G,this.right=ee}},K=class extends b{constructor(se,G){super();ie(this,"type","FilterExpression");this.operand=se,this.filter=G}},Y=class extends c{constructor(se,G){super();ie(this,"type","FilterStatement");this.filter=se,this.body=G}},Z=class extends b{constructor(se,G){super();ie(this,"type","SelectExpression");this.lhs=se,this.test=G}},de=class extends b{constructor(se,G,ee){super();ie(this,"type","TestExpression");this.operand=se,this.negate=G,this.test=ee}},pe=class extends b{constructor(se,G){super();ie(this,"type","UnaryExpression");this.operator=se,this.argument=G}},L=class extends b{constructor(se=void 0,G=void 0,ee=void 0){super();ie(this,"type","SliceExpression");this.start=se,this.stop=G,this.step=ee}},F=class extends b{constructor(se,G){super();ie(this,"type","KeywordArgumentExpression");this.key=se,this.value=G}},U=class extends b{constructor(se){super();ie(this,"type","SpreadExpression");this.argument=se}},re=class extends c{constructor(se,G,ee){super();ie(this,"type","CallStatement");this.call=se,this.callerArgs=G,this.body=ee}},me=class extends b{constructor(se,G,ee){super();ie(this,"type","Ternary");this.condition=se,this.trueExpr=G,this.falseExpr=ee}};function J(z){const se=new p([]);let G=0;function ee(Ve,qe){const at=z[G++];if(!at||at.type!==Ve)throw new Error(`Parser Error: ${qe}. ${at.type} !== ${Ve}.`);return at}function le(Ve){if(!Et(Ve))throw new SyntaxError(`Expected ${Ve}`);++G}function xe(){switch(z[G].type){case n.Comment:return new P(z[G++].value);case n.Text:return xt();case n.OpenStatement:return At();case n.OpenExpression:return ut();default:throw new SyntaxError(`Unexpected token type: ${z[G].type}`)}}function Re(...Ve){return G+Ve.length<=z.length&&Ve.every((qe,at)=>qe===z[G+at].type)}function lt(...Ve){var qe,at,mr;return((qe=z[G])==null?void 0:qe.type)===n.OpenStatement&&((at=z[G+1])==null?void 0:at.type)===n.Identifier&&Ve.includes((mr=z[G+1])==null?void 0:mr.value)}function Et(...Ve){return G+Ve.length<=z.length&&Ve.every((qe,at)=>z[G+at].type==="Identifier"&&qe===z[G+at].value)}function xt(){return new V(ee(n.Text,"Expected text token").value)}function At(){if(ee(n.OpenStatement,"Expected opening statement token"),z[G].type!==n.Identifier)throw new SyntaxError(`Unknown statement, got ${z[G].type}`);const Ve=z[G].value;let qe;switch(Ve){case"set":++G,qe=Kt();break;case"if":++G,qe=er(),ee(n.OpenStatement,"Expected {% token"),le("endif"),ee(n.CloseStatement,"Expected %} token");break;case"macro":++G,qe=on(),ee(n.OpenStatement,"Expected {% token"),le("endmacro"),ee(n.CloseStatement,"Expected %} token");break;case"for":++G,qe=nr(),ee(n.OpenStatement,"Expected {% token"),le("endfor"),ee(n.CloseStatement,"Expected %} token");break;case"call":{++G;let at=null;Re(n.OpenParen)&&(at=_n());const mr=gn();if(mr.type!=="Identifier")throw new SyntaxError("Expected identifier following call statement");const Ts=_n();ee(n.CloseStatement,"Expected closing statement token");const On=[];for(;!lt("endcall");)On.push(xe());ee(n.OpenStatement,"Expected '{%'"),le("endcall"),ee(n.CloseStatement,"Expected closing statement token");const Es=new T(mr,Ts);qe=new re(Es,at,On);break}case"break":++G,ee(n.CloseStatement,"Expected closing statement token"),qe=new w;break;case"continue":++G,ee(n.CloseStatement,"Expected closing statement token"),qe=new C;break;case"filter":{++G;let at=gn();at instanceof E&&Re(n.OpenParen)&&(at=mn(at)),ee(n.CloseStatement,"Expected closing statement token");const mr=[];for(;!lt("endfilter");)mr.push(xe());ee(n.OpenStatement,"Expected '{%'"),le("endfilter"),ee(n.CloseStatement,"Expected '%}'"),qe=new Y(at,mr);break}default:throw new SyntaxError(`Unknown statement type: ${Ve}`)}return qe}function ut(){ee(n.OpenExpression,"Expected opening expression token");const Ve=Hr();return ee(n.CloseExpression,"Expected closing expression token"),Ve}function Kt(){const Ve=fn();let qe=null;const at=[];if(Re(n.Equals))++G,qe=fn();else{for(ee(n.CloseStatement,"Expected %} token");!lt("endset");)at.push(xe());ee(n.OpenStatement,"Expected {% token"),le("endset")}return ee(n.CloseStatement,"Expected closing statement token"),new y(Ve,qe,at)}function er(){const Ve=Hr();ee(n.CloseStatement,"Expected closing statement token");const qe=[],at=[];for(;!lt("elif","else","endif");)qe.push(xe());if(lt("elif")){++G,++G;const mr=er();at.push(mr)}else if(lt("else"))for(++G,++G,ee(n.CloseStatement,"Expected closing statement token");!lt("endif");)at.push(xe());return new m(Ve,qe,at)}function on(){const Ve=gn();if(Ve.type!=="Identifier")throw new SyntaxError("Expected identifier following macro statement");const qe=_n();ee(n.CloseStatement,"Expected closing statement token");const at=[];for(;!lt("endmacro");)at.push(xe());return new g(Ve,qe,at)}function fn(Ve=!1){const qe=Ve?gn:Hr,at=[qe()],mr=Re(n.Comma);for(;mr&&(++G,at.push(qe()),!!Re(n.Comma)););return mr?new N(at):at[0]}function nr(){const Ve=fn(!0);if(!(Ve instanceof E||Ve instanceof N))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${Ve.type} instead`);if(!Et("in"))throw new SyntaxError("Expected `in` keyword following loop variable");++G;const qe=Hr();ee(n.CloseStatement,"Expected closing statement token");const at=[];for(;!lt("endfor","else");)at.push(xe());const mr=[];if(lt("else"))for(++G,++G,ee(n.CloseStatement,"Expected closing statement token");!lt("endfor");)mr.push(xe());return new f(Ve,qe,at,mr)}function Hr(){return gr()}function gr(){const Ve=Yr();if(Et("if")){++G;const qe=Yr();if(Et("else")){++G;const at=gr();return new me(qe,Ve,at)}else return new Z(Ve,qe)}return Ve}function Yr(){let Ve=Mn();for(;Et("or");){const qe=z[G];++G;const at=Mn();Ve=new q(qe,Ve,at)}return Ve}function Mn(){let Ve=br();for(;Et("and");){const qe=z[G];++G;const at=br();Ve=new q(qe,Ve,at)}return Ve}function br(){let Ve;for(;Et("not");){const qe=z[G];++G;const at=br();Ve=new pe(qe,at)}return Ve??Wn()}function Wn(){let Ve=ns();for(;;){let qe;if(Et("not","in"))qe=new i("not in",n.Identifier),G+=2;else if(Et("in"))qe=z[G++];else if(Re(n.ComparisonBinaryOperator))qe=z[G++];else break;const at=ns();Ve=new q(qe,Ve,at)}return Ve}function ns(){let Ve=sr();for(;Re(n.AdditiveBinaryOperator);){const qe=z[G];++G;const at=sr();Ve=new q(qe,Ve,at)}return Ve}function Or(){const Ve=Xt(gn());return Re(n.OpenParen)?mn(Ve):Ve}function mn(Ve){let qe=new T(Ve,_n());return qe=Xt(qe),Re(n.OpenParen)&&(qe=mn(qe)),qe}function _n(){ee(n.OpenParen,"Expected opening parenthesis for arguments list");const Ve=$r();return ee(n.CloseParen,"Expected closing parenthesis for arguments list"),Ve}function $r(){const Ve=[];for(;!Re(n.CloseParen);){let qe;if(z[G].type===n.MultiplicativeBinaryOperator&&z[G].value==="*"){++G;const at=Hr();qe=new U(at)}else if(qe=Hr(),Re(n.Equals)){if(++G,!(qe instanceof E))throw new SyntaxError("Expected identifier for keyword argument");const at=Hr();qe=new F(qe,at)}Ve.push(qe),Re(n.Comma)&&++G}return Ve}function Cn(){const Ve=[];let qe=!1;for(;!Re(n.CloseSquareBracket);)Re(n.Colon)?(Ve.push(void 0),++G,qe=!0):(Ve.push(Hr()),Re(n.Colon)&&(++G,qe=!0));if(Ve.length===0)throw new SyntaxError("Expected at least one argument for member/slice expression");if(qe){if(Ve.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new L(...Ve)}return Ve[0]}function Xt(Ve){for(;Re(n.Dot)||Re(n.OpenSquareBracket);){const qe=z[G];++G;let at;const mr=qe.type===n.OpenSquareBracket;if(mr)at=Cn(),ee(n.CloseSquareBracket,"Expected closing square bracket");else if(at=gn(),at.type!=="Identifier")throw new SyntaxError("Expected identifier following dot operator");Ve=new x(Ve,at,mr)}return Ve}function sr(){let Ve=ln();for(;Re(n.MultiplicativeBinaryOperator);){const qe=z[G++],at=ln();Ve=new q(qe,Ve,at)}return Ve}function ln(){let Ve=Ms();for(;Et("is");){++G;const qe=Et("not");qe&&++G;const at=gn();if(!(at instanceof E))throw new SyntaxError("Expected identifier for the test");Ve=new de(Ve,qe,at)}return Ve}function Ms(){let Ve=Or();for(;Re(n.Pipe);){++G;let qe=gn();if(!(qe instanceof E))throw new SyntaxError("Expected identifier for the filter");Re(n.OpenParen)&&(qe=mn(qe)),Ve=new K(Ve,qe)}return Ve}function gn(){const Ve=z[G++];switch(Ve.type){case n.NumericLiteral:{const qe=Ve.value;return qe.includes(".")?new B(Number(qe)):new O(Number(qe))}case n.StringLiteral:{let qe=Ve.value;for(;Re(n.StringLiteral);)qe+=z[G++].value;return new V(qe)}case n.Identifier:return new E(Ve.value);case n.OpenParen:{const qe=fn();return ee(n.CloseParen,"Expected closing parenthesis, got ${tokens[current].type} instead."),qe}case n.OpenSquareBracket:{const qe=[];for(;!Re(n.CloseSquareBracket);)qe.push(Hr()),Re(n.Comma)&&++G;return++G,new W(qe)}case n.OpenCurlyBracket:{const qe=new Map;for(;!Re(n.CloseCurlyBracket);){const at=Hr();ee(n.Colon,"Expected colon between key and value in object literal");const mr=Hr();qe.set(at,mr),Re(n.Comma)&&++G}return++G,new te(qe)}default:throw new SyntaxError(`Unexpected token: ${Ve.type}`)}}for(;G<z.length;)se.body.push(xe());return se}function we(z,se,G=1){se===void 0&&(se=z,z=0);const ee=[];for(let le=z;le<se;le+=G)ee.push(le);return ee}function je(z,se,G,ee=1){const le=Math.sign(ee);le>=0?(se=(se??(se=0))<0?Math.max(z.length+se,0):Math.min(se,z.length),G=(G??(G=z.length))<0?Math.max(z.length+G,0):Math.min(G,z.length)):(se=(se??(se=z.length-1))<0?Math.max(z.length+se,-1):Math.min(se,z.length-1),G=(G??(G=-1))<-1?Math.max(z.length+G,-1):Math.min(G,z.length-1));const xe=[];for(let Re=se;le*Re<le*G;Re+=ee)xe.push(z[Re]);return xe}function Ge(z){return z.replace(/\b\w/g,se=>se.toUpperCase())}function Ae(z){return ne(new Date,z)}function ne(z,se){const G=new Intl.DateTimeFormat(void 0,{month:"long"}),ee=new Intl.DateTimeFormat(void 0,{month:"short"}),le=xe=>xe<10?"0"+xe:xe.toString();return se.replace(/%[YmdbBHM%]/g,xe=>{switch(xe){case"%Y":return z.getFullYear().toString();case"%m":return le(z.getMonth()+1);case"%d":return le(z.getDate());case"%b":return ee.format(z);case"%B":return G.format(z);case"%H":return le(z.getHours());case"%M":return le(z.getMinutes());case"%%":return"%";default:return xe}})}function oe(z){return z.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function H(z,se,G,ee){if(ee===0)return z;let le=ee==null||ee<0?1/0:ee;const xe=se.length===0?new RegExp("(?=)","gu"):new RegExp(oe(se),"gu");return z.replaceAll(xe,Re=>le>0?(--le,G):Re)}var be=class extends Error{},Oe=class extends Error{},Se=class{constructor(z=void 0){ie(this,"type","RuntimeValue");ie(this,"value");ie(this,"builtins",new Map);this.value=z}__bool__(){return new Le(!!this.value)}toString(){return String(this.value)}},Me=class extends Se{constructor(){super(...arguments);ie(this,"type","IntegerValue")}},Ie=class extends Se{constructor(){super(...arguments);ie(this,"type","FloatValue")}toString(){return this.value%1===0?this.value.toFixed(1):this.value.toString()}},$e=class extends Se{constructor(){super(...arguments);ie(this,"type","StringValue");ie(this,"builtins",new Map([["upper",new Je(()=>new $e(this.value.toUpperCase()))],["lower",new Je(()=>new $e(this.value.toLowerCase()))],["strip",new Je(()=>new $e(this.value.trim()))],["title",new Je(()=>new $e(Ge(this.value)))],["capitalize",new Je(()=>new $e(this.value.charAt(0).toUpperCase()+this.value.slice(1)))],["length",new Me(this.value.length)],["rstrip",new Je(()=>new $e(this.value.trimEnd()))],["lstrip",new Je(()=>new $e(this.value.trimStart()))],["startswith",new Je(se=>{if(se.length===0)throw new Error("startswith() requires at least one argument");const G=se[0];if(G instanceof $e)return new Le(this.value.startsWith(G.value));if(G instanceof Ee){for(const ee of G.value){if(!(ee instanceof $e))throw new Error("startswith() tuple elements must be strings");if(this.value.startsWith(ee.value))return new Le(!0)}return new Le(!1)}throw new Error("startswith() argument must be a string or tuple of strings")})],["endswith",new Je(se=>{if(se.length===0)throw new Error("endswith() requires at least one argument");const G=se[0];if(G instanceof $e)return new Le(this.value.endsWith(G.value));if(G instanceof Ee){for(const ee of G.value){if(!(ee instanceof $e))throw new Error("endswith() tuple elements must be strings");if(this.value.endsWith(ee.value))return new Le(!0)}return new Le(!1)}throw new Error("endswith() argument must be a string or tuple of strings")})],["split",new Je(se=>{const G=se[0]??new dt;if(!(G instanceof $e||G instanceof dt))throw new Error("sep argument must be a string or null");const ee=se[1]??new Me(-1);if(!(ee instanceof Me))throw new Error("maxsplit argument must be a number");let le=[];if(G instanceof dt){const xe=this.value.trimStart();for(const{0:Re,index:lt}of xe.matchAll(/\S+/g)){if(ee.value!==-1&&le.length>=ee.value&&lt!==void 0){le.push(Re+xe.slice(lt+Re.length));break}le.push(Re)}}else{if(G.value==="")throw new Error("empty separator");le=this.value.split(G.value),ee.value!==-1&&le.length>ee.value&&le.push(le.splice(ee.value).join(G.value))}return new Ee(le.map(xe=>new $e(xe)))})],["replace",new Je(se=>{if(se.length<2)throw new Error("replace() requires at least two arguments");const G=se[0],ee=se[1];if(!(G instanceof $e&&ee instanceof $e))throw new Error("replace() arguments must be strings");let le;if(se.length>2?se[2].type==="KeywordArgumentsValue"?le=se[2].value.get("count")??new dt:le=se[2]:le=new dt,!(le instanceof Me||le instanceof dt))throw new Error("replace() count argument must be a number or null");return new $e(H(this.value,G.value,ee.value,le.value))})]]))}},Le=class extends Se{constructor(){super(...arguments);ie(this,"type","BooleanValue")}},We=class extends Se{constructor(){super(...arguments);ie(this,"type","ObjectValue");ie(this,"builtins",new Map([["get",new Je(([se,G])=>{if(!(se instanceof $e))throw new Error(`Object key must be a string: got ${se.type}`);return this.value.get(se.value)??G??new dt})],["items",new Je(()=>this.items())],["keys",new Je(()=>this.keys())],["values",new Je(()=>this.values())]]))}__bool__(){return new Le(this.value.size>0)}items(){return new Ee(Array.from(this.value.entries()).map(([se,G])=>new Ee([new $e(se),G])))}keys(){return new Ee(Array.from(this.value.keys()).map(se=>new $e(se)))}values(){return new Ee(Array.from(this.value.values()))}},tt=class extends We{constructor(){super(...arguments);ie(this,"type","KeywordArgumentsValue")}},Ee=class extends Se{constructor(){super(...arguments);ie(this,"type","ArrayValue");ie(this,"builtins",new Map([["length",new Me(this.value.length)]]))}__bool__(){return new Le(this.value.length>0)}},it=class extends Ee{constructor(){super(...arguments);ie(this,"type","TupleValue")}},Je=class extends Se{constructor(){super(...arguments);ie(this,"type","FunctionValue")}},dt=class extends Se{constructor(){super(...arguments);ie(this,"type","NullValue")}},Ye=class extends Se{constructor(){super(...arguments);ie(this,"type","UndefinedValue")}},ze=class{constructor(z){ie(this,"variables",new Map([["namespace",new Je(z=>{if(z.length===0)return new We(new Map);if(z.length!==1||!(z[0]instanceof We))throw new Error("`namespace` expects either zero arguments or a single object argument");return z[0]})]]));ie(this,"tests",new Map([["boolean",z=>z.type==="BooleanValue"],["callable",z=>z instanceof Je],["odd",z=>{if(!(z instanceof Me))throw new Error(`cannot odd on ${z.type}`);return z.value%2!==0}],["even",z=>{if(!(z instanceof Me))throw new Error(`cannot even on ${z.type}`);return z.value%2===0}],["false",z=>z.type==="BooleanValue"&&!z.value],["true",z=>z.type==="BooleanValue"&&z.value],["none",z=>z.type==="NullValue"],["string",z=>z.type==="StringValue"],["number",z=>z instanceof Me||z instanceof Ie],["integer",z=>z instanceof Me],["iterable",z=>z.type==="ArrayValue"||z.type==="StringValue"],["mapping",z=>z.type==="ObjectValue"],["lower",z=>{const se=z.value;return z.type==="StringValue"&&se===se.toLowerCase()}],["upper",z=>{const se=z.value;return z.type==="StringValue"&&se===se.toUpperCase()}],["none",z=>z.type==="NullValue"],["defined",z=>z.type!=="UndefinedValue"],["undefined",z=>z.type==="UndefinedValue"],["equalto",(z,se)=>z.value===se.value],["eq",(z,se)=>z.value===se.value]]));this.parent=z}set(z,se){return this.declareVariable(z,Wt(se))}declareVariable(z,se){if(this.variables.has(z))throw new SyntaxError(`Variable already declared: ${z}`);return this.variables.set(z,se),se}setVariable(z,se){return this.variables.set(z,se),se}resolve(z){if(this.variables.has(z))return this;if(this.parent)return this.parent.resolve(z);throw new Error(`Unknown variable: ${z}`)}lookupVariable(z){try{return this.resolve(z).variables.get(z)??new Ye}catch{return new Ye}}};function rt(z){z.set("false",!1),z.set("true",!0),z.set("none",null),z.set("raise_exception",se=>{throw new Error(se)}),z.set("range",we),z.set("strftime_now",Ae),z.set("True",!0),z.set("False",!1),z.set("None",null)}var ct=class{constructor(z){ie(this,"global");this.global=z??new ze}run(z){return this.evaluate(z,this.global)}evaluateBinaryExpression(z,se){const G=this.evaluate(z.left,se);switch(z.operator.value){case"and":return G.__bool__().value?this.evaluate(z.right,se):G;case"or":return G.__bool__().value?G:this.evaluate(z.right,se)}const ee=this.evaluate(z.right,se);switch(z.operator.value){case"==":return new Le(G.value==ee.value);case"!=":return new Le(G.value!=ee.value)}if(G instanceof Ye||ee instanceof Ye){if(ee instanceof Ye&&["in","not in"].includes(z.operator.value))return new Le(z.operator.value==="not in");throw new Error(`Cannot perform operation ${z.operator.value} on undefined values`)}else{if(G instanceof dt||ee instanceof dt)throw new Error("Cannot perform operation on null values");if(z.operator.value==="~")return new $e(G.value.toString()+ee.value.toString());if((G instanceof Me||G instanceof Ie)&&(ee instanceof Me||ee instanceof Ie)){const le=G.value,xe=ee.value;switch(z.operator.value){case"+":case"-":case"*":{const Re=z.operator.value==="+"?le+xe:z.operator.value==="-"?le-xe:le*xe;return G instanceof Ie||ee instanceof Ie?new Ie(Re):new Me(Re)}case"/":return new Ie(le/xe);case"%":{const Re=le%xe;return G instanceof Ie||ee instanceof Ie?new Ie(Re):new Me(Re)}case"<":return new Le(le<xe);case">":return new Le(le>xe);case">=":return new Le(le>=xe);case"<=":return new Le(le<=xe)}}else if(G instanceof Ee&&ee instanceof Ee)switch(z.operator.value){case"+":return new Ee(G.value.concat(ee.value))}else if(ee instanceof Ee){const le=ee.value.find(xe=>xe.value===G.value)!==void 0;switch(z.operator.value){case"in":return new Le(le);case"not in":return new Le(!le)}}}if(G instanceof $e||ee instanceof $e)switch(z.operator.value){case"+":return new $e(G.value.toString()+ee.value.toString())}if(G instanceof $e&&ee instanceof $e)switch(z.operator.value){case"in":return new Le(ee.value.includes(G.value));case"not in":return new Le(!ee.value.includes(G.value))}if(G instanceof $e&&ee instanceof We)switch(z.operator.value){case"in":return new Le(ee.value.has(G.value));case"not in":return new Le(!ee.value.has(G.value))}throw new SyntaxError(`Unknown operator "${z.operator.value}" between ${G.type} and ${ee.type}`)}evaluateArguments(z,se){const G=[],ee=new Map;for(const le of z)if(le.type==="SpreadExpression"){const xe=le,Re=this.evaluate(xe.argument,se);if(!(Re instanceof Ee))throw new Error(`Cannot unpack non-iterable type: ${Re.type}`);for(const lt of Re.value)G.push(lt)}else if(le.type==="KeywordArgumentExpression"){const xe=le;ee.set(xe.key.value,this.evaluate(xe.value,se))}else{if(ee.size>0)throw new Error("Positional arguments must come before keyword arguments");G.push(this.evaluate(le,se))}return[G,ee]}applyFilter(z,se,G){if(se.type==="Identifier"){const ee=se;if(ee.value==="tojson")return new $e(It(z));if(z instanceof Ee)switch(ee.value){case"list":return z;case"first":return z.value[0];case"last":return z.value[z.value.length-1];case"length":return new Me(z.value.length);case"reverse":return new Ee(z.value.reverse());case"sort":return new Ee(z.value.sort((le,xe)=>{if(le.type!==xe.type)throw new Error(`Cannot compare different types: ${le.type} and ${xe.type}`);switch(le.type){case"IntegerValue":case"FloatValue":return le.value-xe.value;case"StringValue":return le.value.localeCompare(xe.value);default:throw new Error(`Cannot compare type: ${le.type}`)}}));case"join":return new $e(z.value.map(le=>le.value).join(""));case"string":return new $e(It(z));case"unique":{const le=new Set,xe=[];for(const Re of z.value)le.has(Re.value)||(le.add(Re.value),xe.push(Re));return new Ee(xe)}default:throw new Error(`Unknown ArrayValue filter: ${ee.value}`)}else if(z instanceof $e)switch(ee.value){case"length":case"upper":case"lower":case"title":case"capitalize":{const le=z.builtins.get(ee.value);if(le instanceof Je)return le.value([],G);if(le instanceof Me)return le;throw new Error(`Unknown StringValue filter: ${ee.value}`)}case"trim":return new $e(z.value.trim());case"indent":return new $e(z.value.split(`
`).map((le,xe)=>xe===0||le.length===0?le:"    "+le).join(`
`));case"join":case"string":return z;case"int":{const le=parseInt(z.value,10);return new Me(isNaN(le)?0:le)}case"float":{const le=parseFloat(z.value);return new Ie(isNaN(le)?0:le)}default:throw new Error(`Unknown StringValue filter: ${ee.value}`)}else if(z instanceof Me||z instanceof Ie)switch(ee.value){case"abs":return z instanceof Me?new Me(Math.abs(z.value)):new Ie(Math.abs(z.value));case"int":return new Me(Math.floor(z.value));case"float":return new Ie(z.value);default:throw new Error(`Unknown NumericValue filter: ${ee.value}`)}else if(z instanceof We)switch(ee.value){case"items":return new Ee(Array.from(z.value.entries()).map(([le,xe])=>new Ee([new $e(le),xe])));case"length":return new Me(z.value.size);default:throw new Error(`Unknown ObjectValue filter: ${ee.value}`)}else if(z instanceof Le)switch(ee.value){case"bool":return new Le(z.value);case"int":return new Me(z.value?1:0);case"float":return new Ie(z.value?1:0);case"string":return new $e(z.value?"true":"false");default:throw new Error(`Unknown BooleanValue filter: ${ee.value}`)}throw new Error(`Cannot apply filter "${ee.value}" to type: ${z.type}`)}else if(se.type==="CallExpression"){const ee=se;if(ee.callee.type!=="Identifier")throw new Error(`Unknown filter: ${ee.callee.type}`);const le=ee.callee.value;if(le==="tojson"){const[,xe]=this.evaluateArguments(ee.args,G),Re=xe.get("indent")??new dt;if(!(Re instanceof Me||Re instanceof dt))throw new Error("If set, indent must be a number");return new $e(It(z,Re.value))}else if(le==="join"){let xe;if(z instanceof $e)xe=Array.from(z.value);else if(z instanceof Ee)xe=z.value.map(xt=>xt.value);else throw new Error(`Cannot apply filter "${le}" to type: ${z.type}`);const[Re,lt]=this.evaluateArguments(ee.args,G),Et=Re.at(0)??lt.get("separator")??new $e("");if(!(Et instanceof $e))throw new Error("separator must be a string");return new $e(xe.join(Et.value))}else if(le==="int"||le==="float"){const[xe,Re]=this.evaluateArguments(ee.args,G),lt=xe.at(0)??Re.get("default")??(le==="int"?new Me(0):new Ie(0));if(z instanceof $e){const Et=le==="int"?parseInt(z.value,10):parseFloat(z.value);return isNaN(Et)?lt:le==="int"?new Me(Et):new Ie(Et)}else{if(z instanceof Me||z instanceof Ie)return z;if(z instanceof Le)return le==="int"?new Me(z.value?1:0):new Ie(z.value?1:0);throw new Error(`Cannot apply filter "${le}" to type: ${z.type}`)}}else if(le==="default"){const[xe,Re]=this.evaluateArguments(ee.args,G),lt=xe[0]??new $e(""),Et=xe[1]??Re.get("boolean")??new Le(!1);if(!(Et instanceof Le))throw new Error("`default` filter flag must be a boolean");return z instanceof Ye||Et.value&&!z.__bool__().value?lt:z}if(z instanceof Ee){switch(le){case"selectattr":case"rejectattr":{const xe=le==="selectattr";if(z.value.some(ut=>!(ut instanceof We)))throw new Error(`\`${le}\` can only be applied to array of objects`);if(ee.args.some(ut=>ut.type!=="StringLiteral"))throw new Error(`arguments of \`${le}\` must be strings`);const[Re,lt,Et]=ee.args.map(ut=>this.evaluate(ut,G));let xt;if(lt){const ut=G.tests.get(lt.value);if(!ut)throw new Error(`Unknown test: ${lt.value}`);xt=ut}else xt=(...ut)=>ut[0].__bool__().value;const At=z.value.filter(ut=>{const Kt=ut.value.get(Re.value),er=Kt?xt(Kt,Et):!1;return xe?er:!er});return new Ee(At)}case"map":{const[,xe]=this.evaluateArguments(ee.args,G);if(xe.has("attribute")){const Re=xe.get("attribute");if(!(Re instanceof $e))throw new Error("attribute must be a string");const lt=xe.get("default"),Et=z.value.map(xt=>{if(!(xt instanceof We))throw new Error("items in map must be an object");return xt.value.get(Re.value)??lt??new Ye});return new Ee(Et)}else throw new Error("`map` expressions without `attribute` set are not currently supported.")}}throw new Error(`Unknown ArrayValue filter: ${le}`)}else if(z instanceof $e){switch(le){case"indent":{const[xe,Re]=this.evaluateArguments(ee.args,G),lt=xe.at(0)??Re.get("width")??new Me(4);if(!(lt instanceof Me))throw new Error("width must be a number");const Et=xe.at(1)??Re.get("first")??new Le(!1),xt=xe.at(2)??Re.get("blank")??new Le(!1),At=z.value.split(`
`),ut=" ".repeat(lt.value),Kt=At.map((er,on)=>!Et.value&&on===0||!xt.value&&er.length===0?er:ut+er);return new $e(Kt.join(`
`))}case"replace":{const xe=z.builtins.get("replace");if(!(xe instanceof Je))throw new Error("replace filter not available");const[Re,lt]=this.evaluateArguments(ee.args,G);return xe.value([...Re,new tt(lt)],G)}}throw new Error(`Unknown StringValue filter: ${le}`)}else throw new Error(`Cannot apply filter "${le}" to type: ${z.type}`)}throw new Error(`Unknown filter: ${se.type}`)}evaluateFilterExpression(z,se){const G=this.evaluate(z.operand,se);return this.applyFilter(G,z.filter,se)}evaluateTestExpression(z,se){const G=this.evaluate(z.operand,se),ee=se.tests.get(z.test.value);if(!ee)throw new Error(`Unknown test: ${z.test.value}`);const le=ee(G);return new Le(z.negate?!le:le)}evaluateSelectExpression(z,se){return this.evaluate(z.test,se).__bool__().value?this.evaluate(z.lhs,se):new Ye}evaluateUnaryExpression(z,se){const G=this.evaluate(z.argument,se);switch(z.operator.value){case"not":return new Le(!G.value);default:throw new SyntaxError(`Unknown operator: ${z.operator.value}`)}}evaluateTernaryExpression(z,se){return this.evaluate(z.condition,se).__bool__().value?this.evaluate(z.trueExpr,se):this.evaluate(z.falseExpr,se)}evalProgram(z,se){return this.evaluateBlock(z.body,se)}evaluateBlock(z,se){let G="";for(const ee of z){const le=this.evaluate(ee,se);le.type!=="NullValue"&&le.type!=="UndefinedValue"&&(G+=le.toString())}return new $e(G)}evaluateIdentifier(z,se){return se.lookupVariable(z.value)}evaluateCallExpression(z,se){const[G,ee]=this.evaluateArguments(z.args,se);ee.size>0&&G.push(new tt(ee));const le=this.evaluate(z.callee,se);if(le.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${le.type}`);return le.value(G,se)}evaluateSliceExpression(z,se,G){if(!(z instanceof Ee||z instanceof $e))throw new Error("Slice object must be an array or string");const ee=this.evaluate(se.start,G),le=this.evaluate(se.stop,G),xe=this.evaluate(se.step,G);if(!(ee instanceof Me||ee instanceof Ye))throw new Error("Slice start must be numeric or undefined");if(!(le instanceof Me||le instanceof Ye))throw new Error("Slice stop must be numeric or undefined");if(!(xe instanceof Me||xe instanceof Ye))throw new Error("Slice step must be numeric or undefined");return z instanceof Ee?new Ee(je(z.value,ee.value,le.value,xe.value)):new $e(je(Array.from(z.value),ee.value,le.value,xe.value).join(""))}evaluateMemberExpression(z,se){const G=this.evaluate(z.object,se);let ee;if(z.computed){if(z.property.type==="SliceExpression")return this.evaluateSliceExpression(G,z.property,se);ee=this.evaluate(z.property,se)}else ee=new $e(z.property.value);let le;if(G instanceof We){if(!(ee instanceof $e))throw new Error(`Cannot access property with non-string: got ${ee.type}`);le=G.value.get(ee.value)??G.builtins.get(ee.value)}else if(G instanceof Ee||G instanceof $e)if(ee instanceof Me)le=G.value.at(ee.value),G instanceof $e&&(le=new $e(G.value.at(ee.value)));else if(ee instanceof $e)le=G.builtins.get(ee.value);else throw new Error(`Cannot access property with non-string/non-number: got ${ee.type}`);else{if(!(ee instanceof $e))throw new Error(`Cannot access property with non-string: got ${ee.type}`);le=G.builtins.get(ee.value)}return le instanceof Se?le:new Ye}evaluateSet(z,se){const G=z.value?this.evaluate(z.value,se):this.evaluateBlock(z.body,se);if(z.assignee.type==="Identifier"){const ee=z.assignee.value;se.setVariable(ee,G)}else if(z.assignee.type==="TupleLiteral"){const ee=z.assignee;if(!(G instanceof Ee))throw new Error(`Cannot unpack non-iterable type in set: ${G.type}`);const le=G.value;if(le.length!==ee.value.length)throw new Error(`Too ${ee.value.length>le.length?"few":"many"} items to unpack in set`);for(let xe=0;xe<ee.value.length;++xe){const Re=ee.value[xe];if(Re.type!=="Identifier")throw new Error(`Cannot unpack to non-identifier in set: ${Re.type}`);se.setVariable(Re.value,le[xe])}}else if(z.assignee.type==="MemberExpression"){const ee=z.assignee,le=this.evaluate(ee.object,se);if(!(le instanceof We))throw new Error("Cannot assign to member of non-object");if(ee.property.type!=="Identifier")throw new Error("Cannot assign to member with non-identifier property");le.value.set(ee.property.value,G)}else throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(z.assignee)}`);return new dt}evaluateIf(z,se){const G=this.evaluate(z.test,se);return this.evaluateBlock(G.__bool__().value?z.body:z.alternate,se)}evaluateFor(z,se){const G=new ze(se);let ee,le;if(z.iterable.type==="SelectExpression"){const xt=z.iterable;le=this.evaluate(xt.lhs,G),ee=xt.test}else le=this.evaluate(z.iterable,G);if(!(le instanceof Ee||le instanceof We))throw new Error(`Expected iterable or object type in for loop: got ${le.type}`);le instanceof We&&(le=le.keys());const xe=[],Re=[];for(let xt=0;xt<le.value.length;++xt){const At=new ze(G),ut=le.value[xt];let Kt;if(z.loopvar.type==="Identifier")Kt=er=>er.setVariable(z.loopvar.value,ut);else if(z.loopvar.type==="TupleLiteral"){const er=z.loopvar;if(ut.type!=="ArrayValue")throw new Error(`Cannot unpack non-iterable type: ${ut.type}`);const on=ut;if(er.value.length!==on.value.length)throw new Error(`Too ${er.value.length>on.value.length?"few":"many"} items to unpack`);Kt=fn=>{for(let nr=0;nr<er.value.length;++nr){if(er.value[nr].type!=="Identifier")throw new Error(`Cannot unpack non-identifier type: ${er.value[nr].type}`);fn.setVariable(er.value[nr].value,on.value[nr])}}}else throw new Error(`Invalid loop variable(s): ${z.loopvar.type}`);ee&&(Kt(At),!this.evaluate(ee,At).__bool__().value)||(xe.push(ut),Re.push(Kt))}let lt="",Et=!0;for(let xt=0;xt<xe.length;++xt){const At=new Map([["index",new Me(xt+1)],["index0",new Me(xt)],["revindex",new Me(xe.length-xt)],["revindex0",new Me(xe.length-xt-1)],["first",new Le(xt===0)],["last",new Le(xt===xe.length-1)],["length",new Me(xe.length)],["previtem",xt>0?xe[xt-1]:new Ye],["nextitem",xt<xe.length-1?xe[xt+1]:new Ye]]);G.setVariable("loop",new We(At)),Re[xt](G);try{const ut=this.evaluateBlock(z.body,G);lt+=ut.value}catch(ut){if(ut instanceof Oe)continue;if(ut instanceof be)break;throw ut}Et=!1}if(Et){const xt=this.evaluateBlock(z.defaultBlock,G);lt+=xt.value}return new $e(lt)}evaluateMacro(z,se){return se.setVariable(z.name.value,new Je((G,ee)=>{var Re;const le=new ze(ee);G=G.slice();let xe;((Re=G.at(-1))==null?void 0:Re.type)==="KeywordArgumentsValue"&&(xe=G.pop());for(let lt=0;lt<z.args.length;++lt){const Et=z.args[lt],xt=G[lt];if(Et.type==="Identifier"){const At=Et;if(!xt)throw new Error(`Missing positional argument: ${At.value}`);le.setVariable(At.value,xt)}else if(Et.type==="KeywordArgumentExpression"){const At=Et,ut=xt??(xe==null?void 0:xe.value.get(At.key.value))??this.evaluate(At.value,le);le.setVariable(At.key.value,ut)}else throw new Error(`Unknown argument type: ${Et.type}`)}return this.evaluateBlock(z.body,le)})),new dt}evaluateCallStatement(z,se){const G=new Je((lt,Et)=>{const xt=new ze(Et);if(z.callerArgs)for(let At=0;At<z.callerArgs.length;++At){const ut=z.callerArgs[At];if(ut.type!=="Identifier")throw new Error(`Caller parameter must be an identifier, got ${ut.type}`);xt.setVariable(ut.value,lt[At]??new Ye)}return this.evaluateBlock(z.body,xt)}),[ee,le]=this.evaluateArguments(z.call.args,se);ee.push(new tt(le));const xe=this.evaluate(z.call.callee,se);if(xe.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${xe.type}`);const Re=new ze(se);return Re.setVariable("caller",G),xe.value(ee,Re)}evaluateFilterStatement(z,se){const G=this.evaluateBlock(z.body,se);return this.applyFilter(G,z.filter,se)}evaluate(z,se){if(!z)return new Ye;switch(z.type){case"Program":return this.evalProgram(z,se);case"Set":return this.evaluateSet(z,se);case"If":return this.evaluateIf(z,se);case"For":return this.evaluateFor(z,se);case"Macro":return this.evaluateMacro(z,se);case"CallStatement":return this.evaluateCallStatement(z,se);case"Break":throw new be;case"Continue":throw new Oe;case"IntegerLiteral":return new Me(z.value);case"FloatLiteral":return new Ie(z.value);case"StringLiteral":return new $e(z.value);case"ArrayLiteral":return new Ee(z.value.map(G=>this.evaluate(G,se)));case"TupleLiteral":return new it(z.value.map(G=>this.evaluate(G,se)));case"ObjectLiteral":{const G=new Map;for(const[ee,le]of z.value){const xe=this.evaluate(ee,se);if(!(xe instanceof $e))throw new Error(`Object keys must be strings: got ${xe.type}`);G.set(xe.value,this.evaluate(le,se))}return new We(G)}case"Identifier":return this.evaluateIdentifier(z,se);case"CallExpression":return this.evaluateCallExpression(z,se);case"MemberExpression":return this.evaluateMemberExpression(z,se);case"UnaryExpression":return this.evaluateUnaryExpression(z,se);case"BinaryExpression":return this.evaluateBinaryExpression(z,se);case"FilterExpression":return this.evaluateFilterExpression(z,se);case"FilterStatement":return this.evaluateFilterStatement(z,se);case"TestExpression":return this.evaluateTestExpression(z,se);case"SelectExpression":return this.evaluateSelectExpression(z,se);case"Ternary":return this.evaluateTernaryExpression(z,se);case"Comment":return new dt;default:throw new SyntaxError(`Unknown node type: ${z.type}`)}}};function Wt(z){switch(typeof z){case"number":return Number.isInteger(z)?new Me(z):new Ie(z);case"string":return new $e(z);case"boolean":return new Le(z);case"undefined":return new Ye;case"object":return z===null?new dt:Array.isArray(z)?new Ee(z.map(Wt)):new We(new Map(Object.entries(z).map(([se,G])=>[se,Wt(G)])));case"function":return new Je((se,G)=>{const ee=z(...se.map(le=>le.value))??null;return Wt(ee)});default:throw new Error(`Cannot convert to runtime value: ${z}`)}}function It(z,se,G){const ee=G??0;switch(z.type){case"NullValue":case"UndefinedValue":return"null";case"IntegerValue":case"FloatValue":case"StringValue":case"BooleanValue":return JSON.stringify(z.value);case"ArrayValue":case"ObjectValue":{const le=se?" ".repeat(se):"",xe=`
`+le.repeat(ee),Re=xe+le;if(z.type==="ArrayValue"){const lt=z.value.map(Et=>It(Et,se,ee+1));return se?`[${Re}${lt.join(`,${Re}`)}${xe}]`:`[${lt.join(", ")}]`}else{const lt=Array.from(z.value.entries()).map(([Et,xt])=>{const At=`"${Et}": ${It(xt,se,ee+1)}`;return se?`${Re}${At}`:At});return se?`{${lt.join(",")}${xe}}`:`{${lt.join(", ")}}`}}default:throw new Error(`Cannot convert to JSON: ${z.type}`)}}var Tt=`
`,Ur="{%- ",Sr=" -%}";function an(z){switch(z.operator.type){case"MultiplicativeBinaryOperator":return 4;case"AdditiveBinaryOperator":return 3;case"ComparisonBinaryOperator":return 2;case"Identifier":return z.operator.value==="and"?1:z.operator.value==="in"||z.operator.value==="not in"?2:0}return 0}function Pn(z,se="	"){const G=typeof se=="number"?" ".repeat(se):se;return Gr(z.body,0,G).replace(/\n$/,"")}function cr(...z){return Ur+z.join(" ")+Sr}function Gr(z,se,G){return z.map(ee=>Rs(ee,se,G)).join(Tt)}function Rs(z,se,G){const ee=G.repeat(se);switch(z.type){case"Program":return Gr(z.body,se,G);case"If":return Ns(z,se,G);case"For":return js(z,se,G);case"Set":return Us(z,se,G);case"Macro":return vt(z,se,G);case"Break":return ee+cr("break");case"Continue":return ee+cr("continue");case"CallStatement":return jn(z,se,G);case"FilterStatement":return Un(z,se,G);case"Comment":return ee+"{# "+z.value+" #}";default:return ee+"{{- "+Bt(z)+" -}}"}}function Ns(z,se,G){const ee=G.repeat(se),le=[];let xe=z;for(;xe&&(le.push({test:xe.test,body:xe.body}),xe.alternate.length===1&&xe.alternate[0].type==="If");)xe=xe.alternate[0];let Re=ee+cr("if",Bt(le[0].test))+Tt+Gr(le[0].body,se+1,G);for(let lt=1;lt<le.length;++lt)Re+=Tt+ee+cr("elif",Bt(le[lt].test))+Tt+Gr(le[lt].body,se+1,G);return xe&&xe.alternate.length>0&&(Re+=Tt+ee+cr("else")+Tt+Gr(xe.alternate,se+1,G)),Re+=Tt+ee+cr("endif"),Re}function js(z,se,G){const ee=G.repeat(se);let le="";if(z.iterable.type==="SelectExpression"){const Re=z.iterable;le=`${Bt(Re.lhs)} if ${Bt(Re.test)}`}else le=Bt(z.iterable);let xe=ee+cr("for",Bt(z.loopvar),"in",le)+Tt+Gr(z.body,se+1,G);return z.defaultBlock.length>0&&(xe+=Tt+ee+cr("else")+Tt+Gr(z.defaultBlock,se+1,G)),xe+=Tt+ee+cr("endfor"),xe}function Us(z,se,G){const ee=G.repeat(se),le=Bt(z.assignee),xe=z.value?Bt(z.value):"",Re=ee+cr("set",`${le}${z.value?" = "+xe:""}`);return z.body.length===0?Re:Re+Tt+Gr(z.body,se+1,G)+Tt+ee+cr("endset")}function vt(z,se,G){const ee=G.repeat(se),le=z.args.map(Bt).join(", ");return ee+cr("macro",`${z.name.value}(${le})`)+Tt+Gr(z.body,se+1,G)+Tt+ee+cr("endmacro")}function jn(z,se,G){const ee=G.repeat(se),le=z.callerArgs&&z.callerArgs.length>0?`(${z.callerArgs.map(Bt).join(", ")})`:"",xe=Bt(z.call);let Re=ee+cr(`call${le}`,xe)+Tt;return Re+=Gr(z.body,se+1,G)+Tt,Re+=ee+cr("endcall"),Re}function Un(z,se,G){const ee=G.repeat(se),le=z.filter.type==="Identifier"?z.filter.value:Bt(z.filter);let xe=ee+cr("filter",le)+Tt;return xe+=Gr(z.body,se+1,G)+Tt,xe+=ee+cr("endfilter"),xe}function Bt(z,se=-1){switch(z.type){case"SpreadExpression":return`*${Bt(z.argument)}`;case"Identifier":return z.value;case"IntegerLiteral":return`${z.value}`;case"FloatLiteral":return`${z.value}`;case"StringLiteral":return JSON.stringify(z.value);case"BinaryExpression":{const G=z,ee=an(G),le=Bt(G.left,ee),xe=Bt(G.right,ee+1),Re=`${le} ${G.operator.value} ${xe}`;return ee<se?`(${Re})`:Re}case"UnaryExpression":{const G=z;return G.operator.value+(G.operator.value==="not"?" ":"")+Bt(G.argument,1/0)}case"CallExpression":{const G=z,ee=G.args.map(Bt).join(", ");return`${Bt(G.callee)}(${ee})`}case"MemberExpression":{const G=z;let ee=Bt(G.object);["Identifier","MemberExpression","CallExpression","StringLiteral","IntegerLiteral","FloatLiteral","ArrayLiteral","TupleLiteral","ObjectLiteral"].includes(G.object.type)||(ee=`(${ee})`);let le=Bt(G.property);return!G.computed&&G.property.type!=="Identifier"&&(le=`(${le})`),G.computed?`${ee}[${le}]`:`${ee}.${le}`}case"FilterExpression":{const G=z,ee=Bt(G.operand,1/0);return G.filter.type==="CallExpression"?`${ee} | ${Bt(G.filter)}`:`${ee} | ${G.filter.value}`}case"SelectExpression":{const G=z;return`${Bt(G.lhs)} if ${Bt(G.test)}`}case"TestExpression":{const G=z;return`${Bt(G.operand)} is${G.negate?" not":""} ${G.test.value}`}case"ArrayLiteral":case"TupleLiteral":{const G=z.value.map(Bt),ee=z.type==="ArrayLiteral"?"[]":"()";return`${ee[0]}${G.join(", ")}${ee[1]}`}case"ObjectLiteral":return`{${Array.from(z.value.entries()).map(([ee,le])=>`${Bt(ee)}: ${Bt(le)}`).join(", ")}}`;case"SliceExpression":{const G=z,ee=G.start?Bt(G.start):"",le=G.stop?Bt(G.stop):"",xe=G.step?`:${Bt(G.step)}`:"";return`${ee}:${le}${xe}`}case"KeywordArgumentExpression":{const G=z;return`${G.key.value}=${Bt(G.value)}`}case"Ternary":{const G=z,ee=`${Bt(G.trueExpr)} if ${Bt(G.condition,0)} else ${Bt(G.falseExpr)}`;return se>-1?`(${ee})`:ee}default:throw new Error(`Unknown expression type: ${z.type}`)}}var Ot=class{constructor(z){ie(this,"parsed");const se=d(z,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=J(se)}render(z){const se=new ze;if(rt(se),z)for(const[le,xe]of Object.entries(z))se.set(le,xe);return new ct(se).run(this.parsed).value}format(z){return Pn(this.parsed,(z==null?void 0:z.indent)||"	")}}},"./src/backends/onnx.js":(e,t,r)=>{var n;r.r(t),r.d(t,{Tensor:()=>o.Tensor,createInferenceSession:()=>C,deviceToExecutionProviders:()=>f,isONNXProxy:()=>P,isONNXTensor:()=>y});var i=r("./src/env.js"),s=r("?2ce3"),a=r("onnxruntime-web"),o=r("onnxruntime-common");const l=Object.freeze({auto:null,gpu:null,cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:{name:"webnn",deviceType:"cpu"},"webnn-npu":{name:"webnn",deviceType:"npu"},"webnn-gpu":{name:"webnn",deviceType:"gpu"},"webnn-cpu":{name:"webnn",deviceType:"cpu"}}),u=[];let d,c;const p=Symbol.for("onnxruntime");if(p in globalThis)c=globalThis[p];else if(i.apis.IS_NODE_ENV){switch(c=s??(n||(n=r.t(s,2))),process.platform){case"win32":u.push("dml");break;case"linux":process.arch==="x64"&&u.push("cuda");break}u.push("cpu"),d=["cpu"]}else c=a,i.apis.IS_WEBNN_AVAILABLE&&u.push("webnn-npu","webnn-gpu","webnn-cpu","webnn"),i.apis.IS_WEBGPU_AVAILABLE&&u.push("webgpu"),u.push("wasm"),d=["wasm"];const m=c.InferenceSession;function f(b=null){if(!b)return d;switch(b){case"auto":return u;case"gpu":return u.filter(x=>["webgpu","cuda","dml","webnn-gpu"].includes(x))}if(u.includes(b))return[l[b]??b];throw new Error(`Unsupported device: "${b}". Should be one of: ${u.join(", ")}.`)}let w=null;async function C(b,x,T){w&&await w;const E=m.create(b,x);w??(w=E);const S=await E;return S.config=T,S}function y(b){return b instanceof c.Tensor}const g=c==null?void 0:c.env;g!=null&&g.wasm&&(!(typeof ServiceWorkerGlobalScope<"u"&&self instanceof ServiceWorkerGlobalScope)&&!g.wasm.wasmPaths&&(g.wasm.wasmPaths=`https://cdn.jsdelivr.net/npm/@huggingface/transformers@${i.env.version}/dist/`),g.wasm.proxy=!1),g!=null&&g.webgpu&&(g.webgpu.powerPreference="high-performance");function P(){var b;return(b=g==null?void 0:g.wasm)==null?void 0:b.proxy}i.env.backends.onnx=g},"./src/base/feature_extraction_utils.js":(e,t,r)=>{r.r(t),r.d(t,{FeatureExtractor:()=>a,validate_audio_inputs:()=>o});var n=r("./src/utils/constants.js"),i=r("./src/utils/generic.js"),s=r("./src/utils/hub.js");class a extends i.Callable{constructor(u){super(),this.config=u}static async from_pretrained(u,d={}){const c=await(0,s.getModelJSON)(u,n.FEATURE_EXTRACTOR_NAME,!0,d);return new this(c)}}function o(l,u){var d;if(!(l instanceof Float32Array||l instanceof Float64Array))throw new Error(`${u} expects input to be a Float32Array or a Float64Array, but got ${((d=l==null?void 0:l.constructor)==null?void 0:d.name)??typeof l} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}},"./src/base/image_processors_utils.js":(e,t,r)=>{r.r(t),r.d(t,{ImageProcessor:()=>b,center_to_corners_format:()=>c,post_process_instance_segmentation:()=>P,post_process_object_detection:()=>p,post_process_panoptic_segmentation:()=>g,post_process_semantic_segmentation:()=>m});var n=r("./src/utils/generic.js"),i=r("./src/utils/tensor.js"),s=r("./src/utils/maths.js");r("./src/utils/image.js");var a=r("./src/utils/core.js"),o=r("./src/utils/hub.js"),l=r("./src/utils/constants.js");function u(x,T,E=0,S=null){const O=x/T;let B=(0,s.bankers_round)(O)*T;return S!==null&&B>S&&(B=Math.floor(O)*T),B<E&&(B=Math.ceil(O)*T),B}function d([x,T],E){return[Math.max(Math.floor(x/E),1)*E,Math.max(Math.floor(T/E),1)*E]}function c([x,T,E,S]){return[x-E/2,T-S/2,x+E/2,T+S/2]}function p(x,T=.5,E=null,S=!1){const O=x.logits,B=x.pred_boxes,[V,W,N]=O.dims;if(E!==null&&E.length!==V)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let te=[];for(let q=0;q<V;++q){let K=E!==null?E[q]:null,Y={boxes:[],classes:[],scores:[]},Z=O[q],de=B[q];for(let pe=0;pe<W;++pe){let L=Z[pe],F=[],U;if(S){U=L.sigmoid().data;for(let re=0;re<U.length;++re)U[re]>T&&F.push(re)}else{let re=(0,s.max)(L.data)[1];if(re===N-1||(U=(0,s.softmax)(L.data),U[re]<T))continue;F.push(re)}for(const re of F){let me=de[pe].data;me=c(me),K!==null&&(me=me.map((J,we)=>J*K[(we+1)%2])),Y.boxes.push(me),Y.classes.push(re),Y.scores.push(U[re])}}te.push(Y)}return te}function m(x,T=null){const E=x.logits,S=E.dims[0];if(T!==null&&T.length!==S)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const O=[];for(let B=0;B<S;++B){const V=T!==null?T[B]:null;let W=E[B];V!==null&&(W=(0,i.interpolate)(W,V,"bilinear",!1));const[N,te]=V??W.dims.slice(-2),q=new i.Tensor("int32",new Int32Array(N*te),[N,te]),K=W[0].data,Y=q.data;for(let pe=1;pe<W.dims[0];++pe){const L=W[pe].data;for(let F=0;F<L.length;++F)L[F]>K[F]&&(K[F]=L[F],Y[F]=pe)}const Z=new Array(W.dims[0]);for(let pe=0;pe<Y.length;++pe){const L=Y[pe];Z[L]=L}const de=Z.filter(pe=>pe!==void 0);O.push({segmentation:q,labels:de})}return O}function f(x,T,E,S){const O=[],B=[],V=[];for(let W=0;W<x.dims[0];++W){const N=x[W],te=T[W],q=(0,s.max)(N.data)[1];if(q===S)continue;const Y=(0,s.softmax)(N.data)[q];Y>E&&(O.push(te),B.push(Y),V.push(q))}return[O,B,V]}function w(x,T,E,S=.5,O=.8){const B=[];let V=0,W=0;const N=T[E].data;for(let q=0;q<x.length;++q)x[q]===E&&(B.push(q),++V),N[q]>=S&&++W;let te=V>0&&W>0;return te&&(te=V/W>O),[te,B]}function C(x,T,E,S,O,B=null,V=null){const[W,N]=V??x[0].dims,te=new i.Tensor("int32",new Int32Array(W*N),[W,N]),q=[];if(V!==null)for(let pe=0;pe<x.length;++pe)x[pe]=(0,i.interpolate)(x[pe],V,"bilinear",!1);const K=new Int32Array(x[0].data.length),Y=new Float32Array(x[0].data.length);for(let pe=0;pe<x.length;++pe){let L=T[pe];const F=x[pe].data;for(let U=0;U<F.length;++U)F[U]*=L,F[U]>Y[U]&&(K[U]=pe,Y[U]=F[U])}let Z=0;const de=te.data;for(let pe=0;pe<E.length;++pe){const L=E[pe],[F,U]=w(K,x,pe,S,O);if(F){++Z;for(const re of U)de[re]=Z;q.push({id:Z,label_id:L,score:T[pe]})}}return[te,q]}function y(x,T,E=28,S=56*56,O=14*14*4*1280){if(x<E||T<E)throw new Error(`height:${x} or width:${T} must be larger than factor:${E}`);if(Math.max(x,T)/Math.min(x,T)>200)throw new Error(`absolute aspect ratio must be smaller than 200, got ${Math.max(x,T)/Math.min(x,T)}`);let B=Math.round(x/E)*E,V=Math.round(T/E)*E;if(B*V>O){const W=Math.sqrt(x*T/O);B=Math.floor(x/W/E)*E,V=Math.floor(T/W/E)*E}else if(B*V<S){const W=Math.sqrt(S/(x*T));B=Math.ceil(x*W/E)*E,V=Math.ceil(T*W/E)*E}return[B,V]}function g(x,T=.5,E=.5,S=.8,O=null,B=null){O===null&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),O=new Set);const V=x.class_queries_logits??x.logits,N=(x.masks_queries_logits??x.pred_masks).sigmoid();let[te,q,K]=V.dims;if(K-=1,B!==null&&B.length!==te)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let Y=[];for(let Z=0;Z<te;++Z){let de=B!==null?B[Z]:null,pe=V[Z],L=N[Z],[F,U,re]=f(pe,L,T,K);if(re.length===0){let[we,je]=de??L.dims.slice(-2),Ge=new i.Tensor("int32",new Int32Array(we*je).fill(-1),[we,je]);Y.push({segmentation:Ge,segments_info:[]});continue}let[me,J]=C(F,U,re,E,S,O,de);Y.push({segmentation:me,segments_info:J})}return Y}function P(x,T=.5,E=null){throw new Error("`post_process_instance_segmentation` is not yet implemented.")}class b extends n.Callable{constructor(T){super(),this.image_mean=T.image_mean??T.mean,this.image_std=T.image_std??T.std,this.resample=T.resample??2,this.do_rescale=T.do_rescale??!0,this.rescale_factor=T.rescale_factor??1/255,this.do_normalize=T.do_normalize,this.do_thumbnail=T.do_thumbnail,this.size=T.size??T.image_size,this.do_resize=T.do_resize??this.size!==void 0,this.size_divisibility=T.size_divisibility??T.size_divisor,this.do_center_crop=T.do_center_crop,this.crop_size=T.crop_size,this.do_convert_rgb=T.do_convert_rgb??!0,this.do_crop_margin=T.do_crop_margin,this.pad_size=T.pad_size,this.do_pad=T.do_pad,this.min_pixels=T.min_pixels,this.max_pixels=T.max_pixels,this.do_pad&&!this.pad_size&&this.size&&this.size.width!==void 0&&this.size.height!==void 0&&(this.pad_size=this.size),this.do_flip_channel_order=T.do_flip_channel_order??!1,this.config=T}async thumbnail(T,E,S=2){const O=T.height,B=T.width,V=E.height,W=E.width;let N=Math.min(O,V),te=Math.min(B,W);return N===O&&te===B?T:(O>B?te=Math.floor(B*N/O):B>O&&(N=Math.floor(O*te/B)),await T.resize(te,N,{resample:S}))}async crop_margin(T,E=200){const S=T.clone().grayscale(),O=(0,s.min)(S.data)[0],V=(0,s.max)(S.data)[0]-O;if(V===0)return T;const W=E/255;let N=S.width,te=S.height,q=0,K=0;const Y=S.data;for(let Z=0;Z<S.height;++Z){const de=Z*S.width;for(let pe=0;pe<S.width;++pe)(Y[de+pe]-O)/V<W&&(N=Math.min(N,pe),te=Math.min(te,Z),q=Math.max(q,pe),K=Math.max(K,Z))}return T=await T.crop([N,te,q,K]),T}pad_image(T,E,S,{mode:O="constant",center:B=!1,constant_values:V=0}={}){const[W,N,te]=E;let q,K;if(typeof S=="number"?(q=S,K=S):S==="square"?q=K=Math.max(W,N):(q=S.width,K=S.height),q!==N||K!==W){const Y=new Float32Array(q*K*te);if(Array.isArray(V))for(let pe=0;pe<Y.length;++pe)Y[pe]=V[pe%te];else V!==0&&Y.fill(V);const[Z,de]=B?[Math.floor((q-N)/2),Math.floor((K-W)/2)]:[0,0];for(let pe=0;pe<W;++pe){const L=(pe+de)*q,F=pe*N;for(let U=0;U<N;++U){const re=(L+U+Z)*te,me=(F+U)*te;for(let J=0;J<te;++J)Y[re+J]=T[me+J]}}if(O==="symmetric"){if(B)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const pe=W-1,L=N-1;for(let F=0;F<K;++F){const U=F*q,re=(0,a.calculateReflectOffset)(F,pe)*N;for(let me=0;me<q;++me){if(F<W&&me<N)continue;const J=(U+me)*te,we=(re+(0,a.calculateReflectOffset)(me,L))*te;for(let je=0;je<te;++je)Y[J+je]=T[we+je]}}}T=Y,E=[K,q,te]}return[T,E]}rescale(T){for(let E=0;E<T.length;++E)T[E]=this.rescale_factor*T[E]}get_resize_output_image_size(T,E){const[S,O]=T.size;let B,V;if(this.do_thumbnail){const{height:W,width:N}=E;B=Math.min(W,N)}else Number.isInteger(E)?(B=E,V=this.config.max_size??B):E!==void 0&&(B=E.shortest_edge,V=E.longest_edge);if(B!==void 0||V!==void 0){const W=B===void 0?1:Math.max(B/S,B/O),N=S*W,te=O*W,q=V===void 0?1:Math.min(V/N,V/te);let K=Math.floor(Number((N*q).toFixed(2))),Y=Math.floor(Number((te*q).toFixed(2)));return this.size_divisibility!==void 0&&([K,Y]=d([K,Y],this.size_divisibility)),[K,Y]}else if(E!==void 0&&E.width!==void 0&&E.height!==void 0){let W=E.width,N=E.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let te=N/O,q=W/S;Math.abs(1-q)<Math.abs(1-te)?te=q:q=te,N=u(te*O,this.config.ensure_multiple_of),W=u(q*S,this.config.ensure_multiple_of)}return[W,N]}else{if(this.size_divisibility!==void 0)return d([S,O],this.size_divisibility);if(this.min_pixels!==void 0&&this.max_pixels!==void 0){const W=this.config.patch_size*this.config.merge_size;return y(O,S,W,this.min_pixels,this.max_pixels)}else throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(E)}`)}}async resize(T){const[E,S]=this.get_resize_output_image_size(T,this.size);return await T.resize(E,S,{resample:this.resample})}async preprocess(T,{do_normalize:E=null,do_pad:S=null,do_convert_rgb:O=null,do_convert_grayscale:B=null,do_flip_channel_order:V=null}={}){this.do_crop_margin&&(T=await this.crop_margin(T));const[W,N]=T.size;if(O??this.do_convert_rgb?T=T.rgb():B&&(T=T.grayscale()),this.do_resize&&(T=await this.resize(T)),this.do_thumbnail&&(T=await this.thumbnail(T,this.size,this.resample)),this.do_center_crop){let Z,de;Number.isInteger(this.crop_size)?(Z=this.crop_size,de=this.crop_size):(Z=this.crop_size.width,de=this.crop_size.height),T=await T.center_crop(Z,de)}const te=[T.height,T.width];let q=Float32Array.from(T.data),K=[T.height,T.width,T.channels];if(this.do_rescale&&this.rescale(q),E??this.do_normalize){let Z=this.image_mean;Array.isArray(this.image_mean)||(Z=new Array(T.channels).fill(Z));let de=this.image_std;if(Array.isArray(this.image_std)||(de=new Array(T.channels).fill(Z)),Z.length!==T.channels||de.length!==T.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${Z.length}) and \`image_std\` (${de.length}) must match the number of channels in the image (${T.channels}).`);for(let pe=0;pe<q.length;pe+=T.channels)for(let L=0;L<T.channels;++L)q[pe+L]=(q[pe+L]-Z[L])/de[L]}if(S??this.do_pad){if(this.pad_size)[q,K]=this.pad_image(q,[T.height,T.width,T.channels],this.pad_size);else if(this.size_divisibility){const[Z,de]=d([K[1],K[0]],this.size_divisibility);[q,K]=this.pad_image(q,K,{width:Z,height:de})}}if(V??this.do_flip_channel_order){if(K[2]!==3)throw new Error("Flipping channel order is only supported for RGB images.");for(let Z=0;Z<q.length;Z+=3){const de=q[Z];q[Z]=q[Z+2],q[Z+2]=de}}const Y=new i.Tensor("float32",q,K).permute(2,0,1);return{original_size:[N,W],reshaped_input_size:te,pixel_values:Y}}async _call(T,...E){Array.isArray(T)||(T=[T]);const S=await Promise.all(T.map(B=>this.preprocess(B)));return{pixel_values:(0,i.stack)(S.map(B=>B.pixel_values),0),original_sizes:S.map(B=>B.original_size),reshaped_input_sizes:S.map(B=>B.reshaped_input_size)}}static async from_pretrained(T,E={}){const S=await(0,o.getModelJSON)(T,l.IMAGE_PROCESSOR_NAME,!0,E);return new this(S)}}},"./src/base/processing_utils.js":(e,t,r)=>{r.r(t),r.d(t,{Processor:()=>a});var n=r("./src/utils/constants.js"),i=r("./src/utils/generic.js"),s=r("./src/utils/hub.js");class a extends i.Callable{constructor(l,u,d){super(),this.config=l,this.components=u,this.chat_template=d}get image_processor(){return this.components.image_processor}get tokenizer(){return this.components.tokenizer}get feature_extractor(){return this.components.feature_extractor}apply_chat_template(l,u={}){if(!this.tokenizer)throw new Error("Unable to apply chat template without a tokenizer.");return this.tokenizer.apply_chat_template(l,{tokenize:!1,chat_template:this.chat_template??void 0,...u})}batch_decode(...l){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.batch_decode(...l)}decode(...l){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.decode(...l)}async _call(l,...u){for(const d of[this.image_processor,this.feature_extractor,this.tokenizer])if(d)return d(l,...u);throw new Error("No image processor, feature extractor, or tokenizer found.")}static async from_pretrained(l,u={}){const[d,c,p]=await Promise.all([this.uses_processor_config?(0,s.getModelJSON)(l,n.PROCESSOR_NAME,!0,u):{},Promise.all(this.classes.filter(m=>m in this).map(async m=>{const f=await this[m].from_pretrained(l,u);return[m.replace(/_class$/,""),f]})).then(Object.fromEntries),this.uses_chat_template_file?(0,s.getModelText)(l,n.CHAT_TEMPLATE_NAME,!0,u):null]);return new this(d,c,p)}}ie(a,"classes",["image_processor_class","tokenizer_class","feature_extractor_class"]),ie(a,"uses_processor_config",!1),ie(a,"uses_chat_template_file",!1)},"./src/configs.js":(e,t,r)=>{r.r(t),r.d(t,{AutoConfig:()=>d,PretrainedConfig:()=>u,getCacheShapes:()=>o});var n=r("./src/utils/core.js"),i=r("./src/utils/hub.js");async function s(c,p){return await(0,i.getModelJSON)(c,"config.json",!0,p)}function a(c){const p={};let m={};switch(c.model_type){case"llava":case"paligemma":case"gemma3":case"florence2":case"llava_onevision":case"idefics3":case"ultravox":case"voxtral":case"smolvlm":case"gemma3n":m=a(c.text_config);break;case"moondream1":m=a(c.phi_config);break;case"musicgen":m=a(c.decoder);break;case"multi_modality":m=a(c.language_config);break;case"gpt2":case"gptj":case"jais":case"codegen":case"gpt_bigcode":p.num_heads="n_head",p.num_layers="n_layer",p.hidden_size="n_embd";break;case"gpt_neox":case"stablelm":case"opt":case"falcon":case"modernbert-decoder":p.num_heads="num_attention_heads",p.num_layers="num_hidden_layers",p.hidden_size="hidden_size";break;case"llama":case"arcee":case"lfm2":case"smollm3":case"olmo":case"olmo2":case"mobilellm":case"granite":case"cohere":case"mistral":case"starcoder2":case"qwen2":case"qwen2_vl":case"phi":case"phi3":case"phi3_v":case"llava_qwen2":p.num_heads="num_key_value_heads",p.num_layers="num_hidden_layers",p.hidden_size="hidden_size",p.num_attention_heads="num_attention_heads",p.dim_kv="head_dim";break;case"qwen3":case"gemma":case"gemma2":case"gemma3_text":case"gemma3n_text":case"glm":case"helium":case"ernie4_5":p.num_heads="num_key_value_heads",p.num_layers="num_hidden_layers",p.dim_kv="head_dim";break;case"openelm":p.num_heads="num_kv_heads",p.num_layers="num_transformer_layers",p.dim_kv="head_dim";break;case"gpt_neo":case"donut-swin":p.num_heads="num_heads",p.num_layers="num_layers",p.hidden_size="hidden_size";break;case"bloom":p.num_heads="n_head",p.num_layers="n_layer",p.hidden_size="hidden_size";break;case"mpt":p.num_heads="n_heads",p.num_layers="n_layers",p.hidden_size="d_model";break;case"exaone":p.num_heads="num_key_value_heads",p.num_layers="num_layers",p.dim_kv="head_dim",p.num_attention_heads="num_attention_heads";break;case"t5":case"mt5":case"longt5":p.num_decoder_layers="num_decoder_layers",p.num_decoder_heads="num_heads",p.decoder_dim_kv="d_kv",p.num_encoder_layers="num_layers",p.num_encoder_heads="num_heads",p.encoder_dim_kv="d_kv";break;case"bart":case"mbart":case"marian":case"whisper":case"lite-whisper":case"m2m_100":case"blenderbot":case"blenderbot-small":case"florence2_language":p.num_decoder_layers="decoder_layers",p.num_decoder_heads="decoder_attention_heads",p.decoder_hidden_size="d_model",p.num_encoder_layers="encoder_layers",p.num_encoder_heads="encoder_attention_heads",p.encoder_hidden_size="d_model";break;case"speecht5":p.num_decoder_layers="decoder_layers",p.num_decoder_heads="decoder_attention_heads",p.decoder_hidden_size="hidden_size",p.num_encoder_layers="encoder_layers",p.num_encoder_heads="encoder_attention_heads",p.encoder_hidden_size="hidden_size";break;case"trocr":p.num_encoder_layers=p.num_decoder_layers="decoder_layers",p.num_encoder_heads=p.num_decoder_heads="decoder_attention_heads",p.encoder_hidden_size=p.decoder_hidden_size="d_model";break;case"musicgen_decoder":p.num_encoder_layers=p.num_decoder_layers="num_hidden_layers",p.num_encoder_heads=p.num_decoder_heads="num_attention_heads",p.encoder_hidden_size=p.decoder_hidden_size="hidden_size";break;case"moonshine":p.num_decoder_layers="decoder_num_hidden_layers",p.num_decoder_heads="decoder_num_key_value_heads",p.num_encoder_layers="encoder_num_hidden_layers",p.num_encoder_heads="encoder_num_key_value_heads",p.encoder_hidden_size=p.decoder_hidden_size="hidden_size";break;case"vision-encoder-decoder":const w=a(c.decoder),C="num_decoder_layers"in w,y=(0,n.pick)(c,["model_type","is_encoder_decoder"]);return C?(y.num_decoder_layers=w.num_decoder_layers,y.num_decoder_heads=w.num_decoder_heads,y.decoder_hidden_size=w.decoder_hidden_size,y.num_encoder_layers=w.num_encoder_layers,y.num_encoder_heads=w.num_encoder_heads,y.encoder_hidden_size=w.encoder_hidden_size):(y.num_layers=w.num_layers,y.num_heads=w.num_heads,y.hidden_size=w.hidden_size),y}const f={...m,...(0,n.pick)(c,["model_type","multi_query","is_encoder_decoder"])};for(const w in p)f[w]=c[p[w]];return f}function o(c,p){if(c.model_type==="lfm2"){const m=(p==null?void 0:p.prefix)??"past_key_values",f=m==="present"?"present":"past",w={},{layer_types:C,num_attention_heads:y,num_key_value_heads:g,hidden_size:P,conv_L_cache:b}=c,x=P/y,T=(p==null?void 0:p.batch_size)??1;for(let E=0;E<C.length;++E)if(C[E]==="full_attention")for(const S of["key","value"])w[`${m}.${E}.${S}`]=[T,g,0,x];else if(C[E]==="conv")w[`${f}_conv.${E}`]=[T,P,b];else throw new Error(`Unsupported layer type: ${C[E]}`);return w}return l(c,p)}function l(c,{prefix:p="past_key_values",batch_size:m=1}={}){const f={},w=c.normalized_config;if(w.is_encoder_decoder&&"num_encoder_heads"in w&&"num_decoder_heads"in w){const C=w.encoder_dim_kv??w.encoder_hidden_size/w.num_encoder_heads,y=w.decoder_dim_kv??w.decoder_hidden_size/w.num_decoder_heads,g=[m,w.num_encoder_heads,0,C],P=[m,w.num_decoder_heads,0,y];for(let b=0;b<w.num_decoder_layers;++b)f[`${p}.${b}.encoder.key`]=g,f[`${p}.${b}.encoder.value`]=g,f[`${p}.${b}.decoder.key`]=P,f[`${p}.${b}.decoder.value`]=P}else{const C=w.num_heads,y=w.num_layers,g=w.dim_kv??w.hidden_size/(w.num_attention_heads??C);if(w.model_type==="falcon"){const P=[m*C,0,g];for(let b=0;b<y;++b)f[`${p}.${b}.key`]=P,f[`${p}.${b}.value`]=P}else if(w.multi_query){const P=[m*C,0,2*g];for(let b=0;b<y;++b)f[`${p}.${b}.key_value`]=P}else if(w.model_type==="bloom"){const P=[m*C,g,0],b=[m*C,0,g];for(let x=0;x<y;++x)f[`${p}.${x}.key`]=P,f[`${p}.${x}.value`]=b}else if(w.model_type==="openelm")for(let P=0;P<y;++P){const b=[m,C[P],0,g];f[`${p}.${P}.key`]=b,f[`${p}.${P}.value`]=b}else{const P=[m,C,0,g];for(let b=0;b<y;++b)f[`${p}.${b}.key`]=P,f[`${p}.${b}.value`]=P}}return f}class u{constructor(p){ie(this,"model_type",null);ie(this,"is_encoder_decoder",!1);ie(this,"max_position_embeddings");ie(this,"transformers.js_config");Object.assign(this,p),this.normalized_config=a(this)}static async from_pretrained(p,{progress_callback:m=null,config:f=null,cache_dir:w=null,local_files_only:C=!1,revision:y="main"}={}){f&&!(f instanceof u)&&(f=new u(f));const g=f??await s(p,{progress_callback:m,config:f,cache_dir:w,local_files_only:C,revision:y});return new this(g)}}class d{static async from_pretrained(...p){return u.from_pretrained(...p)}}},"./src/env.js":(e,t,r)=>{var O,B;r.r(t),r.d(t,{apis:()=>y,env:()=>E});var n=r("?db59"),i=r("?383f"),s=r("?fa4b");const a="3.7.2",o=typeof window<"u"&&typeof window.document<"u",l=typeof self<"u"&&["DedicatedWorkerGlobalScope","ServiceWorkerGlobalScope","SharedWorkerGlobalScope"].includes((O=self.constructor)==null?void 0:O.name),u=typeof self<"u"&&"caches"in self,d=typeof navigator<"u"&&"gpu"in navigator,c=typeof navigator<"u"&&"ml"in navigator,p=typeof process<"u",m=p&&((B=process==null?void 0:process.release)==null?void 0:B.name)==="node",f=!S(n),w=!S(i),C=typeof globalThis.Deno<"u",y=Object.freeze({IS_BROWSER_ENV:o,IS_WEBWORKER_ENV:l,IS_WEB_CACHE_AVAILABLE:u,IS_WEBGPU_AVAILABLE:d,IS_WEBNN_AVAILABLE:c,IS_PROCESS_AVAILABLE:p,IS_NODE_ENV:m,IS_FS_AVAILABLE:f,IS_PATH_AVAILABLE:w}),g=f&&w;let P="./";if(g){const V=Object({url:self.location.href}).url;V?P=i.dirname(i.dirname(s.fileURLToPath(V))):typeof __dirname<"u"&&(P=i.dirname(__dirname))}const b=g?i.join(P,"/.cache/"):null,x="/models/",T=g?i.join(P,x):x,E={version:a,backends:{onnx:{}},allowRemoteModels:!0,remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!(o||l),localModelPath:T,useFS:f,useBrowserCache:u&&!C,useFSCache:f,cacheDir:b,useCustomCache:!1,customCache:null};function S(V){return Object.keys(V).length===0}},"./src/generation/configuration_utils.js":(e,t,r)=>{r.r(t),r.d(t,{GenerationConfig:()=>i});var n=r("./src/utils/core.js");class i{constructor(a){ie(this,"max_length",20);ie(this,"max_new_tokens",null);ie(this,"min_length",0);ie(this,"min_new_tokens",null);ie(this,"early_stopping",!1);ie(this,"max_time",null);ie(this,"do_sample",!1);ie(this,"num_beams",1);ie(this,"num_beam_groups",1);ie(this,"penalty_alpha",null);ie(this,"use_cache",!0);ie(this,"temperature",1);ie(this,"top_k",50);ie(this,"top_p",1);ie(this,"typical_p",1);ie(this,"epsilon_cutoff",0);ie(this,"eta_cutoff",0);ie(this,"diversity_penalty",0);ie(this,"repetition_penalty",1);ie(this,"encoder_repetition_penalty",1);ie(this,"length_penalty",1);ie(this,"no_repeat_ngram_size",0);ie(this,"bad_words_ids",null);ie(this,"force_words_ids",null);ie(this,"renormalize_logits",!1);ie(this,"constraints",null);ie(this,"forced_bos_token_id",null);ie(this,"forced_eos_token_id",null);ie(this,"remove_invalid_values",!1);ie(this,"exponential_decay_length_penalty",null);ie(this,"suppress_tokens",null);ie(this,"streamer",null);ie(this,"begin_suppress_tokens",null);ie(this,"forced_decoder_ids",null);ie(this,"guidance_scale",null);ie(this,"num_return_sequences",1);ie(this,"output_attentions",!1);ie(this,"output_hidden_states",!1);ie(this,"output_scores",!1);ie(this,"return_dict_in_generate",!1);ie(this,"pad_token_id",null);ie(this,"bos_token_id",null);ie(this,"eos_token_id",null);ie(this,"encoder_no_repeat_ngram_size",0);ie(this,"decoder_start_token_id",null);ie(this,"generation_kwargs",{});Object.assign(this,(0,n.pick)(a,Object.getOwnPropertyNames(this)))}}},"./src/generation/logits_process.js":(e,t,r)=>{r.r(t),r.d(t,{ClassifierFreeGuidanceLogitsProcessor:()=>y,ForcedBOSTokenLogitsProcessor:()=>l,ForcedEOSTokenLogitsProcessor:()=>u,LogitsProcessor:()=>s,LogitsProcessorList:()=>o,LogitsWarper:()=>a,MinLengthLogitsProcessor:()=>f,MinNewTokensLengthLogitsProcessor:()=>w,NoBadWordsLogitsProcessor:()=>C,NoRepeatNGramLogitsProcessor:()=>p,RepetitionPenaltyLogitsProcessor:()=>m,SuppressTokensAtBeginLogitsProcessor:()=>d,TemperatureLogitsWarper:()=>g,TopKLogitsWarper:()=>b,TopPLogitsWarper:()=>P,WhisperTimeStampLogitsProcessor:()=>c});var n=r("./src/utils/generic.js");r("./src/utils/tensor.js");var i=r("./src/utils/maths.js");class s extends n.Callable{_call(T,E){throw Error("`_call` should be implemented in a subclass")}}class a extends n.Callable{_call(T,E){throw Error("`_call` should be implemented in a subclass")}}class o extends n.Callable{constructor(){super(),this.processors=[]}push(T){this.processors.push(T)}extend(T){this.processors.push(...T)}_call(T,E){let S=E;for(const O of this.processors)S=O(T,S);return S}[Symbol.iterator](){return this.processors.values()}}class l extends s{constructor(T){super(),this.bos_token_id=T}_call(T,E){for(let S=0;S<T.length;++S)if(T[S].length===1){const O=E[S].data;O.fill(-1/0),O[this.bos_token_id]=0}return E}}class u extends s{constructor(T,E){super(),this.max_length=T,this.eos_token_id=Array.isArray(E)?E:[E]}_call(T,E){for(let S=0;S<T.length;++S)if(T[S].length===this.max_length-1){const O=E[S].data;O.fill(-1/0);for(const B of this.eos_token_id)O[B]=0}return E}}class d extends s{constructor(T,E){super(),this.begin_suppress_tokens=T,this.begin_index=E}_call(T,E){for(let S=0;S<T.length;++S)if(T[S].length===this.begin_index){const O=E[S].data;for(const B of this.begin_suppress_tokens)O[B]=-1/0}return E}}class c extends s{constructor(T,E){super(),this.eos_token_id=Array.isArray(T.eos_token_id)?T.eos_token_id[0]:T.eos_token_id,this.no_timestamps_token_id=T.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=E.length,E.at(-1)===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=T.max_initial_timestamp_index}_call(T,E){for(let S=0;S<T.length;++S){const O=E[S].data;if(O[this.no_timestamps_token_id]=-1/0,T[S].length===this.begin_index-1){O.fill(-1/0),O[this.timestamp_begin]=0;continue}const B=T[S].slice(this.begin_index),V=B.length>=1&&B[B.length-1]>=this.timestamp_begin,W=B.length<2||B[B.length-2]>=this.timestamp_begin;if(V&&(W?O.subarray(this.timestamp_begin).fill(-1/0):O.subarray(0,this.eos_token_id).fill(-1/0)),T[S].length===this.begin_index&&this.max_initial_timestamp_index!==null){const K=this.timestamp_begin+this.max_initial_timestamp_index;O.subarray(K+1).fill(-1/0)}const N=(0,i.log_softmax)(O),te=Math.log(N.subarray(this.timestamp_begin).map(Math.exp).reduce((K,Y)=>K+Y)),q=(0,i.max)(N.subarray(0,this.timestamp_begin))[0];te>q&&O.subarray(0,this.timestamp_begin).fill(-1/0)}return E}}class p extends s{constructor(T){super(),this.no_repeat_ngram_size=T}getNgrams(T){const E=T.length,S=[];for(let B=0;B<E+1-this.no_repeat_ngram_size;++B){const V=[];for(let W=0;W<this.no_repeat_ngram_size;++W)V.push(T[B+W]);S.push(V.map(Number))}const O=new Map;for(const B of S){const V=B.slice(0,B.length-1),W=JSON.stringify(V),N=O.get(W)??[];N.push(B[B.length-1]),O.set(W,N)}return O}getGeneratedNgrams(T,E){const S=E.slice(E.length+1-this.no_repeat_ngram_size,E.length);return T.get(JSON.stringify(S.map(Number)))??[]}calcBannedNgramTokens(T){const E=[];if(T.length+1<this.no_repeat_ngram_size)return E;{const S=this.getNgrams(T);return this.getGeneratedNgrams(S,T)}}_call(T,E){for(let S=0;S<T.length;++S){const O=E[S].data,B=this.calcBannedNgramTokens(T[S]);for(const V of B)O[V]=-1/0}return E}}class m extends s{constructor(T){super(),this.penalty=T}_call(T,E){for(let S=0;S<T.length;++S){const O=E[S].data;for(const B of new Set(T[S])){const V=Number(B);O[V]<0?O[V]*=this.penalty:O[V]/=this.penalty}}return E}}class f extends s{constructor(T,E){super(),this.min_length=T,this.eos_token_id=Array.isArray(E)?E:[E]}_call(T,E){for(let S=0;S<T.length;++S)if(T[S].length<this.min_length){const O=E[S].data;for(const B of this.eos_token_id)O[B]=-1/0}return E}}class w extends s{constructor(T,E,S){super(),this.prompt_length_to_skip=T,this.min_new_tokens=E,this.eos_token_id=Array.isArray(S)?S:[S]}_call(T,E){for(let S=0;S<T.length;++S)if(T[S].length-this.prompt_length_to_skip<this.min_new_tokens){const B=E[S].data;for(const V of this.eos_token_id)B[V]=-1/0}return E}}class C extends s{constructor(T,E){super(),this.bad_words_ids=T,this.eos_token_id=Array.isArray(E)?E:[E]}_call(T,E){for(let S=0;S<T.length;++S){const O=E[S].data,B=T[S];for(const V of this.bad_words_ids){if(B.length<V.length-1)continue;let W=!0;for(let N=1;N<=V.length-1;++N)if(V.at(-N-1)!=B.at(-N)){W=!1;break}W&&(O[V.at(-1)]=-1/0)}}return E}}class y extends s{constructor(T){if(super(),T<=1)throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${T}.`);this.guidance_scale=T}_call(T,E){if(E.dims[0]!==2*T.length)throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${E.dims[0]} for the logits and ${T.length} for the input ids.`);const S=T.length,O=E.slice([0,S],null),B=E.slice([S,E.dims[0]],null);for(let V=0;V<B.data.length;++V)B.data[V]+=(O.data[V]-B.data[V])*this.guidance_scale;return B}}class g extends a{constructor(T){super(),this.temperature=T}_call(T,E){const S=E.data;for(let O=0;O<S.length;++O)S[O]/=this.temperature;return E}}class P extends a{constructor(T,{filter_value:E=-1/0,min_tokens_to_keep:S=1}={}){if(super(),T<0||T>1)throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${T}`);if(!Number.isInteger(S)||S<1)throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${S}`);this.top_p=T,this.filter_value=E,this.min_tokens_to_keep=S}}class b extends a{constructor(T,{filter_value:E=-1/0,min_tokens_to_keep:S=1}={}){if(super(),!Number.isInteger(T)||T<0)throw new Error(`\`top_k\` must be a positive integer, but is ${T}`);this.top_k=Math.max(T,S),this.filter_value=E}}},"./src/generation/logits_sampler.js":(e,t,r)=>{r.r(t),r.d(t,{LogitsSampler:()=>a});var n=r("./src/utils/generic.js"),i=r("./src/utils/tensor.js"),s=r("./src/utils/maths.js");r("./src/generation/configuration_utils.js");class a extends n.Callable{constructor(c){super(),this.generation_config=c}async _call(c){return this.sample(c)}async sample(c){throw Error("sample should be implemented in subclasses.")}getLogits(c,p){let m=c.dims.at(-1),f=c.data;if(p===-1)f=f.slice(-m);else{let w=p*m;f=f.slice(w,w+m)}return f}randomSelect(c){let p=0;for(let f=0;f<c.length;++f)p+=c[f];let m=Math.random()*p;for(let f=0;f<c.length;++f)if(m-=c[f],m<=0)return f;return 0}static getSampler(c){if(c.do_sample)return new l(c);if(c.num_beams>1)return new u(c);if(c.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${c.num_return_sequences}.`);return new o(c)}}class o extends a{async sample(c){const p=(0,s.max)(c.data)[1];return[[BigInt(p),0]]}}class l extends a{async sample(c){let p=c.dims.at(-1);this.generation_config.top_k>0&&(p=Math.min(this.generation_config.top_k,p));const[m,f]=await(0,i.topk)(c,p),w=(0,s.softmax)(m.data);return Array.from({length:this.generation_config.num_beams},()=>{const C=this.randomSelect(w);return[f.data[C],Math.log(w[C])]})}}class u extends a{async sample(c){let p=c.dims.at(-1);this.generation_config.top_k>0&&(p=Math.min(this.generation_config.top_k,p));const[m,f]=await(0,i.topk)(c,p),w=(0,s.softmax)(m.data);return Array.from({length:this.generation_config.num_beams},(C,y)=>[f.data[y],Math.log(w[y])])}}},"./src/generation/stopping_criteria.js":(e,t,r)=>{r.r(t),r.d(t,{EosTokenCriteria:()=>o,InterruptableStoppingCriteria:()=>l,MaxLengthCriteria:()=>a,StoppingCriteria:()=>i,StoppingCriteriaList:()=>s});var n=r("./src/utils/generic.js");class i extends n.Callable{_call(d,c){throw Error("StoppingCriteria needs to be subclassed")}}class s extends n.Callable{constructor(){super(),this.criteria=[]}push(d){this.criteria.push(d)}extend(d){d instanceof s?d=d.criteria:d instanceof i&&(d=[d]),this.criteria.push(...d)}_call(d,c){const p=new Array(d.length).fill(!1);for(const m of this.criteria){const f=m(d,c);for(let w=0;w<p.length;++w)p[w]||(p[w]=f[w])}return p}[Symbol.iterator](){return this.criteria.values()}}class a extends i{constructor(d,c=null){super(),this.max_length=d,this.max_position_embeddings=c}_call(d){return d.map(c=>c.length>=this.max_length)}}class o extends i{constructor(d){super(),Array.isArray(d)||(d=[d]),this.eos_token_id=d}_call(d,c){return d.map(p=>{const m=p.at(-1);return this.eos_token_id.some(f=>m==f)})}}class l extends i{constructor(){super(),this.interrupted=!1}interrupt(){this.interrupted=!0}reset(){this.interrupted=!1}_call(d,c){return new Array(d.length).fill(this.interrupted)}}},"./src/generation/streamers.js":(e,t,r)=>{r.r(t),r.d(t,{BaseStreamer:()=>a,TextStreamer:()=>l,WhisperTextStreamer:()=>u});var n=r("./src/utils/core.js"),i=r("./src/tokenizers.js"),s=r("./src/env.js");class a{put(c){throw Error("Not implemented")}end(){throw Error("Not implemented")}}const o=s.apis.IS_PROCESS_AVAILABLE?d=>process.stdout.write(d):d=>console.log(d);class l extends a{constructor(c,{skip_prompt:p=!1,callback_function:m=null,token_callback_function:f=null,skip_special_tokens:w=!0,decode_kwargs:C={},...y}={}){super(),this.tokenizer=c,this.skip_prompt=p,this.callback_function=m??o,this.token_callback_function=f,this.decode_kwargs={skip_special_tokens:w,...C,...y},this.token_cache=[],this.print_len=0,this.next_tokens_are_prompt=!0}put(c){var C;if(c.length>1)throw Error("TextStreamer only supports batch size of 1");const p=this.next_tokens_are_prompt;if(p&&(this.next_tokens_are_prompt=!1,this.skip_prompt))return;const m=c[0];(C=this.token_callback_function)==null||C.call(this,m),this.token_cache=(0,n.mergeArrays)(this.token_cache,m);const f=this.tokenizer.decode(this.token_cache,this.decode_kwargs);let w;p||f.endsWith(`
`)?(w=f.slice(this.print_len),this.token_cache=[],this.print_len=0):f.length>0&&(0,i.is_chinese_char)(f.charCodeAt(f.length-1))?(w=f.slice(this.print_len),this.print_len+=w.length):(w=f.slice(this.print_len,f.lastIndexOf(" ")+1),this.print_len+=w.length),this.on_finalized_text(w,!1)}end(){let c;this.token_cache.length>0?(c=this.tokenizer.decode(this.token_cache,this.decode_kwargs).slice(this.print_len),this.token_cache=[],this.print_len=0):c="",this.next_tokens_are_prompt=!0,this.on_finalized_text(c,!0)}on_finalized_text(c,p){var m,f;c.length>0&&((m=this.callback_function)==null||m.call(this,c)),p&&this.callback_function===o&&s.apis.IS_PROCESS_AVAILABLE&&((f=this.callback_function)==null||f.call(this,`
`))}}class u extends l{constructor(c,{skip_prompt:p=!1,callback_function:m=null,token_callback_function:f=null,on_chunk_start:w=null,on_chunk_end:C=null,on_finalize:y=null,time_precision:g=.02,skip_special_tokens:P=!0,decode_kwargs:b={}}={}){super(c,{skip_prompt:p,skip_special_tokens:P,callback_function:m,token_callback_function:f,decode_kwargs:b}),this.timestamp_begin=c.timestamp_begin,this.on_chunk_start=w,this.on_chunk_end=C,this.on_finalize=y,this.time_precision=g,this.waiting_for_timestamp=!1}put(c){var m,f,w;if(c.length>1)throw Error("WhisperTextStreamer only supports batch size of 1");const p=c[0];if(p.length===1){const C=Number(p[0])-this.timestamp_begin;if(C>=0){const y=C*this.time_precision;this.waiting_for_timestamp?(m=this.on_chunk_end)==null||m.call(this,y):(f=this.on_chunk_start)==null||f.call(this,y),this.waiting_for_timestamp=!this.waiting_for_timestamp,(w=this.token_callback_function)==null||w.call(this,p);return}}return super.put(c)}end(){var c;super.end(),(c=this.on_finalize)==null||c.call(this)}}},"./src/models.js":(e,t,r)=>{r.r(t),r.d(t,{ASTForAudioClassification:()=>Aa,ASTModel:()=>yo,ASTPreTrainedModel:()=>Li,AlbertForMaskedLM:()=>St,AlbertForQuestionAnswering:()=>ot,AlbertForSequenceClassification:()=>Ze,AlbertModel:()=>et,AlbertPreTrainedModel:()=>He,ArceeForCausalLM:()=>Ne,ArceeModel:()=>Te,ArceePreTrainedModel:()=>_e,AutoModel:()=>nm,AutoModelForAudioClassification:()=>hA,AutoModelForAudioFrameClassification:()=>mA,AutoModelForAudioTextToText:()=>MA,AutoModelForCTC:()=>pA,AutoModelForCausalLM:()=>tA,AutoModelForDepthEstimation:()=>yA,AutoModelForDocumentQuestionAnswering:()=>_A,AutoModelForImageClassification:()=>iA,AutoModelForImageFeatureExtraction:()=>xA,AutoModelForImageMatting:()=>gA,AutoModelForImageSegmentation:()=>aA,AutoModelForImageTextToText:()=>$A,AutoModelForImageToImage:()=>wA,AutoModelForMaskGeneration:()=>cA,AutoModelForMaskedLM:()=>rA,AutoModelForNormalEstimation:()=>bA,AutoModelForObjectDetection:()=>uA,AutoModelForPoseEstimation:()=>vA,AutoModelForQuestionAnswering:()=>nA,AutoModelForSemanticSegmentation:()=>oA,AutoModelForSeq2SeqLM:()=>JI,AutoModelForSequenceClassification:()=>QI,AutoModelForSpeechSeq2Seq:()=>YI,AutoModelForTextToSpectrogram:()=>ZI,AutoModelForTextToWaveform:()=>eA,AutoModelForTokenClassification:()=>XI,AutoModelForUniversalSegmentation:()=>lA,AutoModelForVision2Seq:()=>sA,AutoModelForXVector:()=>fA,AutoModelForZeroShotObjectDetection:()=>dA,BartForConditionalGeneration:()=>Br,BartForSequenceClassification:()=>wn,BartModel:()=>wr,BartPretrainedModel:()=>Zr,BaseModelOutput:()=>Oe,BeitForImageClassification:()=>TC,BeitModel:()=>MC,BeitPreTrainedModel:()=>wf,BertForMaskedLM:()=>Ie,BertForQuestionAnswering:()=>We,BertForSequenceClassification:()=>$e,BertForTokenClassification:()=>Le,BertModel:()=>Me,BertPreTrainedModel:()=>Se,BlenderbotForConditionalGeneration:()=>yr,BlenderbotModel:()=>Lr,BlenderbotPreTrainedModel:()=>kr,BlenderbotSmallForConditionalGeneration:()=>pi,BlenderbotSmallModel:()=>Ps,BlenderbotSmallPreTrainedModel:()=>yn,BloomForCausalLM:()=>HP,BloomModel:()=>qP,BloomPreTrainedModel:()=>af,CLIPModel:()=>gi,CLIPPreTrainedModel:()=>Sn,CLIPSegForImageSegmentation:()=>ks,CLIPSegModel:()=>bn,CLIPSegPreTrainedModel:()=>un,CLIPTextModel:()=>Da,CLIPTextModelWithProjection:()=>ji,CLIPVisionModel:()=>za,CLIPVisionModelWithProjection:()=>Ui,CamembertForMaskedLM:()=>xt,CamembertForQuestionAnswering:()=>Kt,CamembertForSequenceClassification:()=>At,CamembertForTokenClassification:()=>ut,CamembertModel:()=>Et,CamembertPreTrainedModel:()=>lt,CausalLMOutput:()=>Ra,CausalLMOutputWithPast:()=>oF,ChineseCLIPModel:()=>mt,ChineseCLIPPreTrainedModel:()=>Ks,ClapAudioModelWithProjection:()=>Ik,ClapModel:()=>Sk,ClapPreTrainedModel:()=>Cu,ClapTextModelWithProjection:()=>kk,CodeGenForCausalLM:()=>k,CodeGenModel:()=>M,CodeGenPreTrainedModel:()=>_,CohereForCausalLM:()=>PP,CohereModel:()=>EP,CoherePreTrainedModel:()=>Xh,ConvBertForMaskedLM:()=>Un,ConvBertForQuestionAnswering:()=>z,ConvBertForSequenceClassification:()=>Bt,ConvBertForTokenClassification:()=>Ot,ConvBertModel:()=>jn,ConvBertPreTrainedModel:()=>vt,ConvNextForImageClassification:()=>yS,ConvNextModel:()=>wS,ConvNextPreTrainedModel:()=>Of,ConvNextV2ForImageClassification:()=>vS,ConvNextV2Model:()=>bS,ConvNextV2PreTrainedModel:()=>Df,DFineForObjectDetection:()=>LC,DFineModel:()=>BC,DFinePreTrainedModel:()=>Mf,DINOv3ConvNextModel:()=>SS,DINOv3ConvNextPreTrainedModel:()=>CS,DINOv3ViTModel:()=>PS,DINOv3ViTPreTrainedModel:()=>ES,DPTForDepthEstimation:()=>eS,DPTModel:()=>ZC,DPTPreTrainedModel:()=>kf,DacDecoderModel:()=>yI,DacDecoderOutput:()=>_I,DacEncoderModel:()=>wI,DacEncoderOutput:()=>mI,DacModel:()=>gI,DacPreTrainedModel:()=>zu,DebertaForMaskedLM:()=>fn,DebertaForQuestionAnswering:()=>gr,DebertaForSequenceClassification:()=>nr,DebertaForTokenClassification:()=>Hr,DebertaModel:()=>on,DebertaPreTrainedModel:()=>er,DebertaV2ForMaskedLM:()=>br,DebertaV2ForQuestionAnswering:()=>Or,DebertaV2ForSequenceClassification:()=>Wn,DebertaV2ForTokenClassification:()=>ns,DebertaV2Model:()=>Mn,DebertaV2PreTrainedModel:()=>Yr,DecisionTransformerModel:()=>Yk,DecisionTransformerPreTrainedModel:()=>Jk,DeiTForImageClassification:()=>WC,DeiTModel:()=>UC,DeiTPreTrainedModel:()=>Ef,DepthAnythingForDepthEstimation:()=>rS,DepthAnythingPreTrainedModel:()=>tS,DepthProForDepthEstimation:()=>oS,DepthProPreTrainedModel:()=>aS,DetrForObjectDetection:()=>PC,DetrForSegmentation:()=>yf,DetrModel:()=>EC,DetrObjectDetectionOutput:()=>bf,DetrPreTrainedModel:()=>xu,DetrSegmentationOutput:()=>CC,Dinov2ForImageClassification:()=>$S,Dinov2Model:()=>xS,Dinov2PreTrainedModel:()=>zf,Dinov2WithRegistersForImageClassification:()=>TS,Dinov2WithRegistersModel:()=>MS,Dinov2WithRegistersPreTrainedModel:()=>Ff,DistilBertForMaskedLM:()=>sr,DistilBertForQuestionAnswering:()=>Xt,DistilBertForSequenceClassification:()=>$r,DistilBertForTokenClassification:()=>Cn,DistilBertModel:()=>_n,DistilBertPreTrainedModel:()=>mn,DonutSwinModel:()=>gS,DonutSwinPreTrainedModel:()=>_S,EfficientNetForImageClassification:()=>Lk,EfficientNetModel:()=>Bk,EfficientNetPreTrainedModel:()=>Hf,ElectraForMaskedLM:()=>ee,ElectraForQuestionAnswering:()=>Re,ElectraForSequenceClassification:()=>le,ElectraForTokenClassification:()=>xe,ElectraModel:()=>G,ElectraPreTrainedModel:()=>se,Ernie4_5_ForCausalLM:()=>Mk,Ernie4_5_Model:()=>$k,Ernie4_5_PretrainedModel:()=>Uf,EsmForMaskedLM:()=>gn,EsmForSequenceClassification:()=>Ve,EsmForTokenClassification:()=>qe,EsmModel:()=>Ms,EsmPreTrainedModel:()=>ln,ExaoneForCausalLM:()=>gP,ExaoneModel:()=>_P,ExaonePreTrainedModel:()=>Gh,FalconForCausalLM:()=>Ck,FalconModel:()=>Pk,FalconPreTrainedModel:()=>Vf,FastViTForImageClassification:()=>hC,FastViTModel:()=>pC,FastViTPreTrainedModel:()=>hf,Florence2ForConditionalGeneration:()=>Mo,Florence2PreTrainedModel:()=>$o,GLPNForDepthEstimation:()=>mS,GLPNModel:()=>fS,GLPNPreTrainedModel:()=>Af,GPT2LMHeadModel:()=>qi,GPT2Model:()=>Gi,GPT2PreTrainedModel:()=>Xs,GPTBigCodeForCausalLM:()=>h,GPTBigCodeModel:()=>v,GPTBigCodePreTrainedModel:()=>$i,GPTJForCausalLM:()=>Xi,GPTJModel:()=>Qi,GPTJPreTrainedModel:()=>xi,GPTNeoForCausalLM:()=>Is,GPTNeoModel:()=>Ys,GPTNeoPreTrainedModel:()=>bi,GPTNeoXForCausalLM:()=>Ki,GPTNeoXModel:()=>vi,GPTNeoXPreTrainedModel:()=>As,Gemma2ForCausalLM:()=>IP,Gemma2Model:()=>kP,Gemma2PreTrainedModel:()=>Yh,Gemma3ForCausalLM:()=>OP,Gemma3Model:()=>AP,Gemma3PreTrainedModel:()=>Zh,Gemma3nForConditionalGeneration:()=>Hs,Gemma3nPreTrainedModel:()=>Co,GemmaForCausalLM:()=>SP,GemmaModel:()=>CP,GemmaPreTrainedModel:()=>Jh,GlmForCausalLM:()=>mP,GlmModel:()=>fP,GlmPreTrainedModel:()=>Vh,GraniteForCausalLM:()=>TP,GraniteModel:()=>MP,GranitePreTrainedModel:()=>Qh,GroundingDinoForObjectDetection:()=>IS,GroundingDinoPreTrainedModel:()=>kS,GroupViTModel:()=>cC,GroupViTPreTrainedModel:()=>dC,HeliumForCausalLM:()=>hP,HeliumModel:()=>pP,HeliumPreTrainedModel:()=>Wh,HieraForImageClassification:()=>GC,HieraModel:()=>VC,HieraPreTrainedModel:()=>Pf,HubertForCTC:()=>ok,HubertForSequenceClassification:()=>lk,HubertModel:()=>ak,HubertPreTrainedModel:()=>Hz,IJepaForImageClassification:()=>tC,IJepaModel:()=>eC,IJepaPreTrainedModel:()=>df,Idefics3ForConditionalGeneration:()=>Hn,Idefics3PreTrainedModel:()=>qn,ImageMattingOutput:()=>EA,JAISLMHeadModel:()=>Hi,JAISModel:()=>yi,JAISPreTrainedModel:()=>Js,JinaCLIPModel:()=>La,JinaCLIPPreTrainedModel:()=>wt,JinaCLIPTextModel:()=>Vi,JinaCLIPVisionModel:()=>Qs,Lfm2ForCausalLM:()=>zt,Lfm2Model:()=>ft,Lfm2PreTrainedModel:()=>nt,LiteWhisperForConditionalGeneration:()=>Oa,LlamaForCausalLM:()=>ue,LlamaModel:()=>Q,LlamaPreTrainedModel:()=>D,LlavaForConditionalGeneration:()=>mi,LlavaOnevisionForConditionalGeneration:()=>vo,LlavaPreTrainedModel:()=>qs,LlavaQwen2ForCausalLM:()=>Po,LongT5ForConditionalGeneration:()=>Dr,LongT5Model:()=>Wr,LongT5PreTrainedModel:()=>ir,M2M100ForConditionalGeneration:()=>jS,M2M100Model:()=>NS,M2M100PreTrainedModel:()=>Rf,MBartForCausalLM:()=>Tr,MBartForConditionalGeneration:()=>qr,MBartForSequenceClassification:()=>Dn,MBartModel:()=>Gn,MBartPreTrainedModel:()=>Qr,MPNetForMaskedLM:()=>di,MPNetForQuestionAnswering:()=>R,MPNetForSequenceClassification:()=>ci,MPNetForTokenClassification:()=>ge,MPNetModel:()=>ui,MPNetPreTrainedModel:()=>Vn,MT5ForConditionalGeneration:()=>Kr,MT5Model:()=>pr,MT5PreTrainedModel:()=>dr,MarianMTModel:()=>RS,MarianModel:()=>LS,MarianPreTrainedModel:()=>Lf,MaskFormerForInstanceSegmentation:()=>hS,MaskFormerModel:()=>pS,MaskFormerPreTrainedModel:()=>If,MaskedLMOutput:()=>dn,Metric3DForDepthEstimation:()=>uS,Metric3DPreTrainedModel:()=>lS,Metric3Dv2ForDepthEstimation:()=>cS,Metric3Dv2PreTrainedModel:()=>dS,MgpstrForSceneTextRecognition:()=>nI,MgpstrModelOutput:()=>tI,MgpstrPreTrainedModel:()=>rI,MimiDecoderModel:()=>fI,MimiDecoderOutput:()=>cI,MimiEncoderModel:()=>hI,MimiEncoderOutput:()=>dI,MimiModel:()=>pI,MimiPreTrainedModel:()=>Du,MistralForCausalLM:()=>xk,MistralModel:()=>vk,MistralPreTrainedModel:()=>jf,MobileBertForMaskedLM:()=>Ts,MobileBertForQuestionAnswering:()=>Es,MobileBertForSequenceClassification:()=>On,MobileBertModel:()=>mr,MobileBertPreTrainedModel:()=>at,MobileLLMForCausalLM:()=>yP,MobileLLMModel:()=>wP,MobileLLMPreTrainedModel:()=>qh,MobileNetV1ForImageClassification:()=>Nk,MobileNetV1ForSemanticSegmentation:()=>jk,MobileNetV1Model:()=>Rk,MobileNetV1PreTrainedModel:()=>ku,MobileNetV2ForImageClassification:()=>Wk,MobileNetV2ForSemanticSegmentation:()=>Vk,MobileNetV2Model:()=>Uk,MobileNetV2PreTrainedModel:()=>Iu,MobileNetV3ForImageClassification:()=>qk,MobileNetV3ForSemanticSegmentation:()=>Hk,MobileNetV3Model:()=>Gk,MobileNetV3PreTrainedModel:()=>Au,MobileNetV4ForImageClassification:()=>Qk,MobileNetV4ForSemanticSegmentation:()=>Xk,MobileNetV4Model:()=>Kk,MobileNetV4PreTrainedModel:()=>Ou,MobileViTForImageClassification:()=>gC,MobileViTModel:()=>_C,MobileViTPreTrainedModel:()=>ff,MobileViTV2ForImageClassification:()=>yC,MobileViTV2Model:()=>wC,MobileViTV2PreTrainedModel:()=>mf,ModelOutput:()=>be,ModernBertDecoderForCausalLM:()=>Sr,ModernBertDecoderModel:()=>Ur,ModernBertDecoderPreTrainedModel:()=>Tt,ModernBertForMaskedLM:()=>ct,ModernBertForSequenceClassification:()=>Wt,ModernBertForTokenClassification:()=>It,ModernBertModel:()=>rt,ModernBertPreTrainedModel:()=>ze,Moondream1ForConditionalGeneration:()=>xo,MoonshineForConditionalGeneration:()=>bo,MoonshineModel:()=>_l,MoonshinePreTrainedModel:()=>Ri,MptForCausalLM:()=>QP,MptModel:()=>KP,MptPreTrainedModel:()=>of,MultiModalityCausalLM:()=>eI,MultiModalityPreTrainedModel:()=>Zk,MusicgenForCausalLM:()=>Jz,MusicgenForConditionalGeneration:()=>Qf,MusicgenModel:()=>Xz,MusicgenPreTrainedModel:()=>Kf,NeoBertForMaskedLM:()=>it,NeoBertForQuestionAnswering:()=>Ye,NeoBertForSequenceClassification:()=>Je,NeoBertForTokenClassification:()=>dt,NeoBertModel:()=>Ee,NeoBertPreTrainedModel:()=>tt,NomicBertModel:()=>Pn,NomicBertPreTrainedModel:()=>an,OPTForCausalLM:()=>JP,OPTModel:()=>XP,OPTPreTrainedModel:()=>lf,Olmo2ForCausalLM:()=>$P,Olmo2Model:()=>xP,Olmo2PreTrainedModel:()=>Kh,OlmoForCausalLM:()=>vP,OlmoModel:()=>bP,OlmoPreTrainedModel:()=>Hh,OpenELMForCausalLM:()=>zP,OpenELMModel:()=>DP,OpenELMPreTrainedModel:()=>ef,OwlViTForObjectDetection:()=>vC,OwlViTModel:()=>bC,OwlViTPreTrainedModel:()=>_f,Owlv2ForObjectDetection:()=>$C,Owlv2Model:()=>xC,Owlv2PreTrainedModel:()=>gf,PaliGemmaForConditionalGeneration:()=>Eo,PaliGemmaPreTrainedModel:()=>To,PatchTSMixerForPrediction:()=>oI,PatchTSMixerModel:()=>aI,PatchTSMixerPreTrainedModel:()=>Jf,PatchTSTForPrediction:()=>iI,PatchTSTModel:()=>sI,PatchTSTPreTrainedModel:()=>Xf,Phi3ForCausalLM:()=>GP,Phi3Model:()=>VP,Phi3PreTrainedModel:()=>sf,Phi3VForCausalLM:()=>_i,Phi3VPreTrainedModel:()=>So,PhiForCausalLM:()=>WP,PhiModel:()=>UP,PhiPreTrainedModel:()=>nf,PreTrainedModel:()=>H,PretrainedMixin:()=>ar,PvtForImageClassification:()=>iC,PvtModel:()=>sC,PvtPreTrainedModel:()=>cf,PyAnnoteForAudioFrameClassification:()=>HS,PyAnnoteModel:()=>qS,PyAnnotePreTrainedModel:()=>Nf,QuestionAnsweringModelOutput:()=>vn,Qwen2ForCausalLM:()=>BP,Qwen2Model:()=>FP,Qwen2PreTrainedModel:()=>tf,Qwen2VLForConditionalGeneration:()=>jP,Qwen2VLPreTrainedModel:()=>NP,Qwen3ForCausalLM:()=>RP,Qwen3Model:()=>LP,Qwen3PreTrainedModel:()=>rf,RFDetrForObjectDetection:()=>zC,RFDetrModel:()=>DC,RFDetrObjectDetectionOutput:()=>FC,RFDetrPreTrainedModel:()=>$f,RTDetrForObjectDetection:()=>kC,RTDetrModel:()=>SC,RTDetrObjectDetectionOutput:()=>gl,RTDetrPreTrainedModel:()=>vf,RTDetrV2ForObjectDetection:()=>AC,RTDetrV2Model:()=>IC,RTDetrV2ObjectDetectionOutput:()=>OC,RTDetrV2PreTrainedModel:()=>xf,ResNetForImageClassification:()=>HC,ResNetModel:()=>qC,ResNetPreTrainedModel:()=>Cf,RoFormerForMaskedLM:()=>Rs,RoFormerForQuestionAnswering:()=>Us,RoFormerForSequenceClassification:()=>Ns,RoFormerForTokenClassification:()=>js,RoFormerModel:()=>Gr,RoFormerPreTrainedModel:()=>cr,RobertaForMaskedLM:()=>Sa,RobertaForQuestionAnswering:()=>co,RobertaForSequenceClassification:()=>ka,RobertaForTokenClassification:()=>uo,RobertaModel:()=>lo,RobertaPreTrainedModel:()=>Ws,SamImageSegmentationOutput:()=>BS,SamModel:()=>FS,SamPreTrainedModel:()=>zS,SapiensForDepthEstimation:()=>sS,SapiensForNormalEstimation:()=>iS,SapiensForSemanticSegmentation:()=>nS,SapiensPreTrainedModel:()=>Mu,SegformerForImageClassification:()=>Ok,SegformerForSemanticSegmentation:()=>Dk,SegformerModel:()=>Qz,SegformerPreTrainedModel:()=>Su,Seq2SeqLMOutput:()=>aF,SequenceClassifierOutput:()=>Lt,SiglipModel:()=>Fa,SiglipPreTrainedModel:()=>wi,SiglipTextModel:()=>Ba,SiglipVisionModel:()=>Wi,SmolLM3ForCausalLM:()=>vu,SmolLM3Model:()=>Os,SmolLM3PreTrainedModel:()=>Er,SmolVLMForConditionalGeneration:()=>Ni,SnacDecoderModel:()=>xI,SnacEncoderModel:()=>vI,SnacModel:()=>bI,SnacPreTrainedModel:()=>Fu,SpeechT5ForSpeechToText:()=>_k,SpeechT5ForTextToSpeech:()=>gk,SpeechT5HifiGan:()=>wk,SpeechT5Model:()=>Kz,SpeechT5PreTrainedModel:()=>Pu,SqueezeBertForMaskedLM:()=>he,SqueezeBertForQuestionAnswering:()=>ke,SqueezeBertForSequenceClassification:()=>fe,SqueezeBertModel:()=>ae,SqueezeBertPreTrainedModel:()=>X,StableLmForCausalLM:()=>Fk,StableLmModel:()=>zk,StableLmPreTrainedModel:()=>qf,Starcoder2ForCausalLM:()=>Ek,Starcoder2Model:()=>Tk,Starcoder2PreTrainedModel:()=>Wf,StyleTextToSpeech2Model:()=>mk,StyleTextToSpeech2PreTrainedModel:()=>fk,Swin2SRForImageSuperResolution:()=>YC,Swin2SRModel:()=>JC,Swin2SRPreTrainedModel:()=>Sf,SwinForImageClassification:()=>QC,SwinForSemanticSegmentation:()=>XC,SwinModel:()=>KC,SwinPreTrainedModel:()=>$u,T5ForConditionalGeneration:()=>Mr,T5Model:()=>qt,T5PreTrainedModel:()=>Jt,TableTransformerForObjectDetection:()=>NC,TableTransformerModel:()=>RC,TableTransformerObjectDetectionOutput:()=>jC,TableTransformerPreTrainedModel:()=>Tf,TokenClassifierOutput:()=>en,TrOCRForCausalLM:()=>bk,TrOCRPreTrainedModel:()=>yk,UltravoxModel:()=>Yf,UltravoxPreTrainedModel:()=>lI,UniSpeechForCTC:()=>JS,UniSpeechForSequenceClassification:()=>YS,UniSpeechModel:()=>XS,UniSpeechPreTrainedModel:()=>Tu,UniSpeechSatForAudioFrameClassification:()=>rk,UniSpeechSatForCTC:()=>ek,UniSpeechSatForSequenceClassification:()=>tk,UniSpeechSatModel:()=>ZS,UniSpeechSatPreTrainedModel:()=>wl,ViTForImageClassification:()=>ZP,ViTMAEModel:()=>oC,ViTMAEPreTrainedModel:()=>aC,ViTMSNForImageClassification:()=>uC,ViTMSNModel:()=>lC,ViTMSNPreTrainedModel:()=>pf,ViTModel:()=>YP,ViTPreTrainedModel:()=>uf,VisionEncoderDecoderModel:()=>fi,VitMatteForImageMatting:()=>mC,VitMattePreTrainedModel:()=>fC,VitPoseForPoseEstimation:()=>nC,VitPosePreTrainedModel:()=>rC,VitsModel:()=>Gf,VitsModelOutput:()=>PA,VitsPreTrainedModel:()=>Ak,VoxtralForConditionalGeneration:()=>uI,Wav2Vec2BertForCTC:()=>sk,Wav2Vec2BertForSequenceClassification:()=>ik,Wav2Vec2BertModel:()=>nk,Wav2Vec2BertPreTrainedModel:()=>Eu,Wav2Vec2ForAudioFrameClassification:()=>GS,Wav2Vec2ForCTC:()=>WS,Wav2Vec2ForSequenceClassification:()=>VS,Wav2Vec2Model:()=>US,Wav2Vec2PreTrainedModel:()=>Ji,WavLMForAudioFrameClassification:()=>hk,WavLMForCTC:()=>dk,WavLMForSequenceClassification:()=>ck,WavLMForXVector:()=>pk,WavLMModel:()=>uk,WavLMPreTrainedModel:()=>ko,WeSpeakerResNetModel:()=>QS,WeSpeakerResNetPreTrainedModel:()=>KS,WhisperForConditionalGeneration:()=>Ss,WhisperModel:()=>Cs,WhisperPreTrainedModel:()=>hi,XLMForQuestionAnswering:()=>_o,XLMForSequenceClassification:()=>fo,XLMForTokenClassification:()=>mo,XLMModel:()=>po,XLMPreTrainedModel:()=>Vs,XLMRobertaForMaskedLM:()=>wo,XLMRobertaForQuestionAnswering:()=>Bi,XLMRobertaForSequenceClassification:()=>Ia,XLMRobertaForTokenClassification:()=>Fi,XLMRobertaModel:()=>go,XLMRobertaPreTrainedModel:()=>Gs,XLMWithLMHeadModel:()=>ho,XVectorOutput:()=>TA,YolosForObjectDetection:()=>OS,YolosModel:()=>AS,YolosObjectDetectionOutput:()=>DS,YolosPreTrainedModel:()=>Bf});var n=r("./src/configs.js"),i=r("./src/backends/onnx.js"),s=r("./src/utils/dtypes.js"),a=r("./src/utils/generic.js"),o=r("./src/utils/core.js"),l=r("./src/utils/hub.js"),u=r("./src/utils/constants.js"),d=r("./src/generation/logits_process.js"),c=r("./src/generation/configuration_utils.js"),p=r("./src/utils/tensor.js"),m=r("./src/utils/image.js"),f=r("./src/utils/maths.js"),w=r("./src/generation/stopping_criteria.js"),C=r("./src/generation/logits_sampler.js"),y=r("./src/env.js"),g=r("./src/models/whisper/generation_whisper.js"),P=r("./src/models/whisper/common_whisper.js");const b={EncoderOnly:0,EncoderDecoder:1,Seq2Seq:2,Vision2Seq:3,DecoderOnly:4,MaskGeneration:5,ImageTextToText:6,Musicgen:7,MultiModality:8,Phi3V:9,AudioTextToText:10,AutoEncoder:11,ImageAudioTextToText:12},x=new Map,T=new Map,E=new Map;async function S(I,A,j){var cn;let ce=((cn=j.config)==null?void 0:cn["transformers.js_config"])??{},ve=j.device??ce.device;ve&&typeof ve!="string"&&(ve.hasOwnProperty(A)?ve=ve[A]:(console.warn(`device not specified for "${A}". Using the default device.`),ve=null));const ye=ve??(y.apis.IS_NODE_ENV?"cpu":"wasm"),De=(0,i.deviceToExecutionProviders)(ye),Ue=ce.device_config??{};Ue.hasOwnProperty(ye)&&(ce={...ce,...Ue[ye]});let Xe=j.dtype??ce.dtype;if(typeof Xe!="string"&&(Xe&&Xe.hasOwnProperty(A)?Xe=Xe[A]:(Xe=s.DEFAULT_DEVICE_DTYPE_MAPPING[ye]??s.DATA_TYPES.fp32,console.warn(`dtype not specified for "${A}". Using the default dtype (${Xe}) for this device (${ye}).`))),Xe===s.DATA_TYPES.auto){let Gt=ce.dtype;typeof Gt!="string"&&(Gt=Gt==null?void 0:Gt[A]),Gt&&Gt!==s.DATA_TYPES.auto&&s.DATA_TYPES.hasOwnProperty(Gt)?Xe=Gt:Xe=s.DEFAULT_DEVICE_DTYPE_MAPPING[ye]??s.DATA_TYPES.fp32}const st=Xe;if(s.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(st)){if(st===s.DATA_TYPES.fp16&&ye==="webgpu"&&!await(0,s.isWebGpuFp16Supported)())throw new Error(`The device (${ye}) does not support fp16.`)}else throw new Error(`Invalid dtype: ${st}. Should be one of: ${Object.keys(s.DATA_TYPES).join(", ")}`);const Mt=ce.kv_cache_dtype,Dt=Mt?typeof Mt=="string"?Mt:Mt[st]??"float32":void 0;if(Dt&&!["float32","float16"].includes(Dt))throw new Error(`Invalid kv_cache_dtype: ${Dt}. Should be one of: float32, float16`);const Ft={dtype:st,kv_cache_dtype:Dt,device:ye},Qt=s.DEFAULT_DTYPE_SUFFIX_MAPPING[st],Pt=`${A}${Qt}.onnx`,Vt=`${j.subfolder??""}/${Pt}`,$t={...j.session_options};$t.executionProviders??($t.executionProviders=De);const Ht=ce.free_dimension_overrides;Ht?$t.freeDimensionOverrides??($t.freeDimensionOverrides=Ht):ye.startsWith("webnn")&&!$t.freeDimensionOverrides&&console.warn(`WebNN does not currently support dynamic shapes and requires 'free_dimension_overrides' to be set in config.json, preferably as a field within config["transformers.js_config"]["device_config"]["${ye}"]. When 'free_dimension_overrides' is not set, you may experience significant performance degradation.`);const _r=y.apis.IS_NODE_ENV&&y.env.useFSCache,Ir=(0,l.getModelFile)(I,Vt,!0,j,_r),Vr=j.use_external_data_format??ce.use_external_data_format;let Rr=[];if(Vr){let Gt;typeof Vr=="object"?Vr.hasOwnProperty(Pt)?Gt=Vr[Pt]:Vr.hasOwnProperty(A)?Gt=Vr[A]:Gt=!1:Gt=Vr;const tn=+Gt;if(tn>l.MAX_EXTERNAL_DATA_CHUNKS)throw new Error(`The number of external data chunks (${tn}) exceeds the maximum allowed value (${l.MAX_EXTERNAL_DATA_CHUNKS}).`);for(let Kn=0;Kn<tn;++Kn){const Na=`${Pt}_data${Kn===0?"":"_"+Kn}`,kn=`${j.subfolder??""}/${Na}`;Rr.push(new Promise(async(ss,Bu)=>{const ja=await(0,l.getModelFile)(I,kn,!0,j,_r);ss(ja instanceof Uint8Array?{path:Na,data:ja}:Na)}))}}else $t.externalData!==void 0&&(Rr=$t.externalData.map(async Gt=>{if(typeof Gt.data=="string"){const tn=await(0,l.getModelFile)(I,Gt.data,!0,j);return{...Gt,data:tn}}return Gt}));if(Rr.length>0){const Gt=await Promise.all(Rr);y.apis.IS_NODE_ENV||($t.externalData=Gt)}if(ye==="webgpu"){const Gt=(0,n.getCacheShapes)(j.config,{prefix:"present"});if(Object.keys(Gt).length>0&&!(0,i.isONNXProxy)()){const tn={};for(const Kn in Gt)tn[Kn]="gpu-buffer";$t.preferredOutputLocation=tn}}return{buffer_or_path:await Ir,session_options:$t,session_config:Ft}}async function O(I,A,j){return Object.fromEntries(await Promise.all(Object.keys(A).map(async ce=>{const{buffer_or_path:ve,session_options:ye,session_config:De}=await S(I,A[ce],j),Ue=await(0,i.createInferenceSession)(ve,ye,De);return[ce,Ue]})))}async function B(I,A,j){return Object.fromEntries(await Promise.all(Object.keys(A).map(async ce=>{const ve=await(0,l.getModelJSON)(I,A[ce],!1,j);return[ce,ve]})))}function V(I,A){const j=Object.create(null),ce=[];for(const De of I.inputNames){const Ue=A[De];if(!(Ue instanceof p.Tensor)){ce.push(De);continue}j[De]=(0,i.isONNXProxy)()?Ue.clone():Ue}if(ce.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${ce.join(", ")}.`);const ve=Object.keys(A).length,ye=I.inputNames.length;if(ve>ye){let De=Object.keys(A).filter(Ue=>!I.inputNames.includes(Ue));console.warn(`WARNING: Too many inputs were provided (${ve} > ${ye}). The following inputs will be ignored: "${De.join(", ")}".`)}return j}let W=Promise.resolve();async function N(I,A){const j=V(I,A);try{const ce=Object.fromEntries(Object.entries(j).map(([De,Ue])=>[De,Ue.ort_tensor])),ve=()=>I.run(ce),ye=await(y.apis.IS_BROWSER_ENV||y.apis.IS_WEBWORKER_ENV?W=W.then(ve):ve());return te(ye)}catch(ce){const ve=Object.fromEntries(Object.entries(j).map(([ye,De])=>{const Ue={type:De.type,dims:De.dims,location:De.location};return Ue.location!=="gpu-buffer"&&(Ue.data=De.data),[ye,Ue]}));throw console.error(`An error occurred during model execution: "${ce}".`),console.error("Inputs given to model:",ve),ce}}function te(I){for(let A in I)(0,i.isONNXTensor)(I[A])?I[A]=new p.Tensor(I[A]):typeof I[A]=="object"&&te(I[A]);return I}function q(I){if(I instanceof p.Tensor)return I;if(I.length===0)throw Error("items must be non-empty");if(Array.isArray(I[0])){if(I.some(A=>A.length!==I[0].length))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new p.Tensor("int64",BigInt64Array.from(I.flat().map(A=>BigInt(A))),[I.length,I[0].length])}else return new p.Tensor("int64",BigInt64Array.from(I.map(A=>BigInt(A))),[1,I.length])}function K(I){return new p.Tensor("bool",[I],[1])}async function Y(I,A){let{encoder_outputs:j,input_ids:ce,decoder_input_ids:ve,...ye}=A;if(!j){const Ue=(0,o.pick)(A,I.sessions.model.inputNames);j=(await Z(I,Ue)).last_hidden_state}return ye.input_ids=ve,ye.encoder_hidden_states=j,I.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask")&&(ye.encoder_attention_mask=A.attention_mask),await pe(I,ye,!0)}async function Z(I,A){const j=I.sessions.model,ce=(0,o.pick)(A,j.inputNames);if(j.inputNames.includes("inputs_embeds")&&!ce.inputs_embeds){if(!A.input_ids)throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");ce.inputs_embeds=await I.encode_text({input_ids:A.input_ids})}if(j.inputNames.includes("token_type_ids")&&!ce.token_type_ids){if(!ce.input_ids)throw new Error("Both `input_ids` and `token_type_ids` are missing in the model inputs.");ce.token_type_ids=(0,p.zeros_like)(ce.input_ids)}if(j.inputNames.includes("pixel_mask")&&!ce.pixel_mask){if(!ce.pixel_values)throw new Error("Both `pixel_values` and `pixel_mask` are missing in the model inputs.");const ve=ce.pixel_values.dims;ce.pixel_mask=(0,p.ones)([ve[0],ve[2],ve[3]])}return await N(j,ce)}async function de(I,A){const j=await I.encode(A);return await I.decode(j)}async function pe(I,A,j=!1){const ce=I.sessions[j?"decoder_model_merged":"model"],{past_key_values:ve,...ye}=A;if(ce.inputNames.includes("use_cache_branch")&&(ye.use_cache_branch=K(!!ve)),ce.inputNames.includes("position_ids")&&ye.attention_mask&&!ye.position_ids){const Ue=["paligemma","gemma3_text","gemma3"].includes(I.config.model_type)?1:0;ye.position_ids=je(ye,ve,Ue)}I.addPastKeyValues(ye,ve);const De=(0,o.pick)(ye,ce.inputNames);return await N(ce,De)}function L({modality_token_id:I,inputs_embeds:A,modality_features:j,input_ids:ce,attention_mask:ve}){const ye=ce.tolist().map(st=>st.reduce((Mt,Dt,Ft)=>(Dt==I&&Mt.push(Ft),Mt),[])),De=ye.reduce((st,Mt)=>st+Mt.length,0),Ue=j.dims[0];if(De!==Ue)throw new Error(`Number of tokens and features do not match: tokens: ${De}, features ${Ue}`);let Xe=0;for(let st=0;st<ye.length;++st){const Mt=ye[st],Dt=A[st];for(let Ft=0;Ft<Mt.length;++Ft)Dt[Mt[Ft]].data.set(j[Xe++].data)}return{inputs_embeds:A,attention_mask:ve}}function F({image_token_id:I,inputs_embeds:A,image_features:j,input_ids:ce,attention_mask:ve}){return L({modality_token_id:I,inputs_embeds:A,modality_features:j,input_ids:ce,attention_mask:ve})}function U({audio_token_id:I,inputs_embeds:A,audio_features:j,input_ids:ce,attention_mask:ve}){return L({modality_token_id:I,inputs_embeds:A,modality_features:j,input_ids:ce,attention_mask:ve})}async function re(I,{encode_function:A,merge_function:j,modality_input_name:ce,modality_output_name:ve,input_ids:ye=null,attention_mask:De=null,position_ids:Ue=null,inputs_embeds:Xe=null,past_key_values:st=null,generation_config:Mt=null,logits_processor:Dt=null,...Ft}){const Qt=Ft[ce];if(!Xe){if(Xe=await I.encode_text({input_ids:ye,...Ft}),Qt&&ye.dims[1]!==1){const Vt=await A({[ce]:Qt,...Ft});({inputs_embeds:Xe,attention_mask:De}=j({[ve]:Vt,inputs_embeds:Xe,input_ids:ye,attention_mask:De}))}else if(st&&Qt&&ye.dims[1]===1){const Vt=ye.dims[1],$t=Object.values(st)[0].dims.at(-2);De=(0,p.cat)([(0,p.ones)([ye.dims[0],$t]),De.slice(null,[De.dims[1]-Vt,De.dims[1]])],1)}}if(!Ue&&I.config.model_type==="qwen2_vl"){const{image_grid_thw:Vt,video_grid_thw:$t}=Ft;[Ue]=I.get_rope_index(ye,Vt,$t,De)}return await pe(I,{inputs_embeds:Xe,past_key_values:st,attention_mask:De,position_ids:Ue,generation_config:Mt,logits_processor:Dt},!0)}async function me(I,A){return await re(I,{...A,modality_input_name:"audio_values",modality_output_name:"audio_features",encode_function:I.encode_audio.bind(I),merge_function:I._merge_input_ids_with_audio_features.bind(I)})}async function J(I,A){return await re(I,{...A,modality_input_name:"pixel_values",modality_output_name:"image_features",encode_function:I.encode_image.bind(I),merge_function:I._merge_input_ids_with_image_features.bind(I)})}function we(I,A=0){const[j,ce]=I.dims,ve=I.data,ye=new BigInt64Array(ve.length);for(let De=0;De<j;++De){const Ue=De*ce;let Xe=BigInt(A);for(let st=0;st<ce;++st){const Mt=Ue+st;ve[Mt]===0n?ye[Mt]=BigInt(1):(ye[Mt]=Xe,Xe+=ve[Mt])}}return{data:ye,dims:I.dims}}function je(I,A=null,j=0){const{input_ids:ce,inputs_embeds:ve,attention_mask:ye}=I,{data:De,dims:Ue}=we(ye,j);let Xe=new p.Tensor("int64",De,Ue);if(A){const st=-(ce??ve).dims.at(1);Xe=Xe.slice(null,[st,null])}return Xe}function Ge(I,A,j,ce){const ve=j.past_key_values?Object.values(j.past_key_values)[0].dims.at(-2):0;if(!j.attention_mask){let ye;for(const De of["input_ids","inputs_embeds","position_ids"])if(j[De]){ye=j[De].dims;break}if(!ye)throw new Error("attention_mask is not provided, and unable to infer its shape from model inputs.");j.attention_mask=(0,p.ones)([ye[0],ve+ye[1]])}if(j.past_key_values){const{input_ids:ye,attention_mask:De}=j;De&&De.dims[1]>ye.dims[1]||ve<ye.dims[1]&&(j.input_ids=ye.slice(null,[ve,null]))}return j}function Ae(I,A,j,ce){return j.past_key_values&&(A=A.map(ve=>[ve.at(-1)])),{...j,decoder_input_ids:q(A)}}function ne(I,...A){return I.config.is_encoder_decoder?Ae(I,...A):Ge(I,...A)}function oe(I,A,j,ce){const ve=!!j.past_key_values;return ce.guidance_scale!==null&&ce.guidance_scale>1&&(ve?j.input_ids=(0,p.cat)([j.input_ids,j.input_ids],0):(j.input_ids=(0,p.cat)([j.input_ids,(0,p.full_like)(j.input_ids,BigInt(ce.pad_token_id))],0),j.attention_mask=(0,p.cat)([j.attention_mask,(0,p.full_like)(j.attention_mask,0n)],0))),(ve||!j.pixel_values)&&(j.pixel_values=(0,p.full)([0,0,3,384,384],1)),ve&&(j.images_seq_mask=new p.Tensor("bool",new Array(1).fill(!0).fill(!1,0,1),[1,1]),j.images_emb_mask=new p.Tensor("bool",new Array(0).fill(!1),[1,1,0])),j}class H extends a.Callable{constructor(j,ce,ve){super();ie(this,"main_input_name","input_ids");ie(this,"forward_params",["input_ids","attention_mask"]);this.config=j,this.sessions=ce,this.configs=ve;const ye=E.get(this.constructor),De=x.get(ye);switch(this.can_generate=!1,this._forward=null,this._prepare_inputs_for_generation=null,De){case b.DecoderOnly:this.can_generate=!0,this._forward=pe,this._prepare_inputs_for_generation=Ge;break;case b.Seq2Seq:case b.Vision2Seq:case b.Musicgen:this.can_generate=!0,this._forward=Y,this._prepare_inputs_for_generation=Ae;break;case b.EncoderDecoder:this._forward=Y;break;case b.ImageTextToText:this.can_generate=!0,this._forward=J,this._prepare_inputs_for_generation=ne;break;case b.AudioTextToText:this.can_generate=!0,this._forward=me,this._prepare_inputs_for_generation=ne;break;case b.Phi3V:case b.ImageAudioTextToText:this.can_generate=!0,this._prepare_inputs_for_generation=ne;break;case b.MultiModality:this.can_generate=!0,this._prepare_inputs_for_generation=oe;break;case b.AutoEncoder:this._forward=de;break;default:this._forward=Z;break}this.can_generate&&this.forward_params.push("past_key_values"),this.custom_config=this.config["transformers.js_config"]??{}}async dispose(){var ce;const j=[];for(const ve of Object.values(this.sessions))(ce=ve==null?void 0:ve.handler)!=null&&ce.dispose&&j.push(ve.handler.dispose());return await Promise.all(j)}static async from_pretrained(j,{progress_callback:ce=null,config:ve=null,cache_dir:ye=null,local_files_only:De=!1,revision:Ue="main",model_file_name:Xe=null,subfolder:st="onnx",device:Mt=null,dtype:Dt=null,use_external_data_format:Ft=null,session_options:Qt={}}={}){let Pt={progress_callback:ce,config:ve,cache_dir:ye,local_files_only:De,revision:Ue,model_file_name:Xe,subfolder:st,device:Mt,dtype:Dt,use_external_data_format:Ft,session_options:Qt};const Vt=E.get(this),$t=x.get(Vt);ve=Pt.config=await n.AutoConfig.from_pretrained(j,Pt);let Ht;if($t===b.DecoderOnly)Ht=await Promise.all([O(j,{model:Pt.model_file_name??"model"},Pt),B(j,{generation_config:"generation_config.json"},Pt)]);else if($t===b.Seq2Seq||$t===b.Vision2Seq)Ht=await Promise.all([O(j,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},Pt),B(j,{generation_config:"generation_config.json"},Pt)]);else if($t===b.MaskGeneration)Ht=await Promise.all([O(j,{model:"vision_encoder",prompt_encoder_mask_decoder:"prompt_encoder_mask_decoder"},Pt)]);else if($t===b.EncoderDecoder)Ht=await Promise.all([O(j,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},Pt)]);else if($t===b.ImageTextToText){const _r={embed_tokens:"embed_tokens",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};ve.is_encoder_decoder&&(_r.model="encoder_model"),Ht=await Promise.all([O(j,_r,Pt),B(j,{generation_config:"generation_config.json"},Pt)])}else if($t===b.AudioTextToText){const _r={embed_tokens:"embed_tokens",audio_encoder:"audio_encoder",decoder_model_merged:"decoder_model_merged"};Ht=await Promise.all([O(j,_r,Pt),B(j,{generation_config:"generation_config.json"},Pt)])}else if($t===b.ImageAudioTextToText){const _r={embed_tokens:"embed_tokens",audio_encoder:"audio_encoder",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};Ht=await Promise.all([O(j,_r,Pt),B(j,{generation_config:"generation_config.json"},Pt)])}else if($t===b.Musicgen)Ht=await Promise.all([O(j,{model:"text_encoder",decoder_model_merged:"decoder_model_merged",encodec_decode:"encodec_decode"},Pt),B(j,{generation_config:"generation_config.json"},Pt)]);else if($t===b.MultiModality)Ht=await Promise.all([O(j,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"language_model",lm_head:"lm_head",gen_head:"gen_head",gen_img_embeds:"gen_img_embeds",image_decode:"image_decode"},Pt),B(j,{generation_config:"generation_config.json"},Pt)]);else if($t===b.Phi3V)Ht=await Promise.all([O(j,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"model",vision_encoder:"vision_encoder"},Pt),B(j,{generation_config:"generation_config.json"},Pt)]);else if($t===b.AutoEncoder)Ht=await Promise.all([O(j,{encoder_model:"encoder_model",decoder_model:"decoder_model"},Pt)]);else{if($t!==b.EncoderOnly){const _r=Vt??(ve==null?void 0:ve.model_type);_r!=="custom"&&console.warn(`Model type for '${_r}' not found, assuming encoder-only architecture. Please report this at ${u.GITHUB_ISSUE_URL}.`)}Ht=await Promise.all([O(j,{model:Pt.model_file_name??"model"},Pt)])}return new this(ve,...Ht)}async _call(j){return await this.forward(j)}async forward(j){return await this._forward(this,j)}get generation_config(){var j;return((j=this.configs)==null?void 0:j.generation_config)??null}_get_logits_warper(j){const ce=new d.LogitsProcessorList;return j.temperature!==null&&j.temperature!==1&&ce.push(new d.TemperatureLogitsWarper(j.temperature)),j.top_k!==null&&j.top_k!==0&&ce.push(new d.TopKLogitsWarper(j.top_k)),j.top_p!==null&&j.top_p<1&&ce.push(new d.TopPLogitsWarper(j.top_p)),ce}_get_logits_processor(j,ce,ve=null){const ye=new d.LogitsProcessorList;if(j.repetition_penalty!==null&&j.repetition_penalty!==1&&ye.push(new d.RepetitionPenaltyLogitsProcessor(j.repetition_penalty)),j.no_repeat_ngram_size!==null&&j.no_repeat_ngram_size>0&&ye.push(new d.NoRepeatNGramLogitsProcessor(j.no_repeat_ngram_size)),j.bad_words_ids!==null&&ye.push(new d.NoBadWordsLogitsProcessor(j.bad_words_ids,j.eos_token_id)),j.min_length!==null&&j.eos_token_id!==null&&j.min_length>0&&ye.push(new d.MinLengthLogitsProcessor(j.min_length,j.eos_token_id)),j.min_new_tokens!==null&&j.eos_token_id!==null&&j.min_new_tokens>0&&ye.push(new d.MinNewTokensLengthLogitsProcessor(ce,j.min_new_tokens,j.eos_token_id)),j.forced_bos_token_id!==null&&ye.push(new d.ForcedBOSTokenLogitsProcessor(j.forced_bos_token_id)),j.forced_eos_token_id!==null&&ye.push(new d.ForcedEOSTokenLogitsProcessor(j.max_length,j.forced_eos_token_id)),j.begin_suppress_tokens!==null){const De=ce>1||j.forced_bos_token_id===null?ce:ce+1;ye.push(new d.SuppressTokensAtBeginLogitsProcessor(j.begin_suppress_tokens,De))}return j.guidance_scale!==null&&j.guidance_scale>1&&ye.push(new d.ClassifierFreeGuidanceLogitsProcessor(j.guidance_scale)),ve!==null&&ye.extend(ve),ye}_prepare_generation_config(j,ce,ve=c.GenerationConfig){const ye={...this.config};for(const Ue of["decoder","generator","text_config"])Ue in ye&&Object.assign(ye,ye[Ue]);const De=new ve(ye);return Object.assign(De,this.generation_config??{}),j&&Object.assign(De,j),ce&&Object.assign(De,(0,o.pick)(ce,Object.getOwnPropertyNames(De))),De}_get_stopping_criteria(j,ce=null){const ve=new w.StoppingCriteriaList;return j.max_length!==null&&ve.push(new w.MaxLengthCriteria(j.max_length,this.config.max_position_embeddings??null)),j.eos_token_id!==null&&ve.push(new w.EosTokenCriteria(j.eos_token_id)),ce&&ve.extend(ce),ve}_validate_model_class(){if(!this.can_generate){const j=[tm,rm,em,Zf],ce=E.get(this.constructor),ve=new Set,ye=this.config.model_type;for(const Ue of j){const Xe=Ue.get(ye);Xe&&ve.add(Xe[0])}let De=`The current model class (${ce}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;throw ve.size>0&&(De+=` Please use the following class instead: ${[...ve].join(", ")}`),Error(De)}}prepare_inputs_for_generation(...j){return this._prepare_inputs_for_generation(this,...j)}_update_model_kwargs_for_generation({generated_input_ids:j,outputs:ce,model_inputs:ve,is_encoder_decoder:ye}){return ve.past_key_values=this.getPastKeyValues(ce,ve.past_key_values),ve.input_ids=new p.Tensor("int64",j.flat(),[j.length,1]),ye||(ve.attention_mask=(0,p.cat)([ve.attention_mask,(0,p.ones)([ve.attention_mask.dims[0],1])],1)),ve.position_ids=null,ve}_prepare_model_inputs({inputs:j,bos_token_id:ce,model_kwargs:ve}){const ye=(0,o.pick)(ve,this.forward_params),De=this.main_input_name;if(De in ye){if(j)throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...")}else ye[De]=j;return{inputs_tensor:ye[De],model_inputs:ye,model_input_name:De}}async _prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:j,model_inputs:ce,model_input_name:ve,generation_config:ye}){if(this.sessions.model.inputNames.includes("inputs_embeds")&&!ce.inputs_embeds&&"_prepare_inputs_embeds"in this){const{input_ids:Ue,pixel_values:Xe,attention_mask:st,...Mt}=ce,Dt=await this._prepare_inputs_embeds(ce);ce={...Mt,...(0,o.pick)(Dt,["inputs_embeds","attention_mask"])}}let{last_hidden_state:De}=await Z(this,ce);if(ye.guidance_scale!==null&&ye.guidance_scale>1)De=(0,p.cat)([De,(0,p.full_like)(De,0)],0),"attention_mask"in ce&&(ce.attention_mask=(0,p.cat)([ce.attention_mask,(0,p.zeros_like)(ce.attention_mask)],0));else if(ce.decoder_input_ids){const Ue=q(ce.decoder_input_ids).dims[0];if(Ue!==De.dims[0]){if(De.dims[0]!==1)throw new Error(`The encoder outputs have a different batch size (${De.dims[0]}) than the decoder inputs (${Ue}).`);De=(0,p.cat)(Array.from({length:Ue},()=>De),0)}}return ce.encoder_outputs=De,ce}_prepare_decoder_input_ids_for_generation({batch_size:j,model_input_name:ce,model_kwargs:ve,decoder_start_token_id:ye,bos_token_id:De,generation_config:Ue}){let{decoder_input_ids:Xe,...st}=ve;if(!(Xe instanceof p.Tensor)){if(Xe)Array.isArray(Xe[0])||(Xe=Array.from({length:j},()=>Xe));else if(ye??(ye=De),this.config.model_type==="musicgen")Xe=Array.from({length:j*this.config.decoder.num_codebooks},()=>[ye]);else if(Array.isArray(ye)){if(ye.length!==j)throw new Error(`\`decoder_start_token_id\` expcted to have length ${j} but got ${ye.length}`);Xe=ye}else Xe=Array.from({length:j},()=>[ye]);Xe=q(Xe)}return ve.decoder_attention_mask=(0,p.ones_like)(Xe),{input_ids:Xe,model_inputs:st}}async generate({inputs:j=null,generation_config:ce=null,logits_processor:ve=null,stopping_criteria:ye=null,streamer:De=null,...Ue}){this._validate_model_class(),ce=this._prepare_generation_config(ce,Ue);let{inputs_tensor:Xe,model_inputs:st,model_input_name:Mt}=this._prepare_model_inputs({inputs:j,model_kwargs:Ue});const Dt=this.config.is_encoder_decoder;Dt&&("encoder_outputs"in st||(st=await this._prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:Xe,model_inputs:st,model_input_name:Mt,generation_config:ce})));let Ft;Dt?{input_ids:Ft,model_inputs:st}=this._prepare_decoder_input_ids_for_generation({batch_size:st[Mt].dims.at(0),model_input_name:Mt,model_kwargs:st,decoder_start_token_id:ce.decoder_start_token_id,bos_token_id:ce.bos_token_id,generation_config:ce}):Ft=st[Mt];let Qt=Ft.dims.at(-1);ce.max_new_tokens!==null&&(ce.max_length=Qt+ce.max_new_tokens);const Pt=this._get_logits_processor(ce,Qt,ve),Vt=this._get_stopping_criteria(ce,ye),$t=st[Mt].dims.at(0),Ht=C.LogitsSampler.getSampler(ce),_r=new Array($t).fill(0),Ir=Ft.tolist();De&&De.put(Ir);let Vr,Rr={};for(;;){if(st=this.prepare_inputs_for_generation(Ir,st,ce),Vr=await this.forward(st),ce.output_attentions&&ce.return_dict_in_generate){const kn=this.getAttentions(Vr);for(const ss in kn)ss in Rr||(Rr[ss]=[]),Rr[ss].push(kn[ss])}const Gt=Vr.logits.slice(null,-1,null),tn=Pt(Ir,Gt),Kn=[];for(let kn=0;kn<tn.dims.at(0);++kn){const ss=tn[kn],Bu=await Ht(ss);for(const[ja,Lu]of Bu){const Ru=BigInt(ja);_r[kn]+=Lu,Ir[kn].push(Ru),Kn.push([Ru]);break}}if(De&&De.put(Kn),Vt(Ir).every(kn=>kn))break;st=this._update_model_kwargs_for_generation({generated_input_ids:Kn,outputs:Vr,model_inputs:st,is_encoder_decoder:Dt})}De&&De.end();const Xr=this.getPastKeyValues(Vr,st.past_key_values,!0),cn=new p.Tensor("int64",Ir.flat(),[Ir.length,Ir[0].length]);if(ce.return_dict_in_generate)return{sequences:cn,past_key_values:Xr,...Rr};for(const Gt of Object.values(Vr))Gt.location==="gpu-buffer"&&Gt.dispose();return cn}getPastKeyValues(j,ce,ve=!1){const ye=Object.create(null);for(const De in j)if(De.startsWith("present")){const Ue=De.replace("present_conv","past_conv").replace("present","past_key_values"),Xe=De.includes("encoder");if(Xe&&ce?ye[Ue]=ce[Ue]:ye[Ue]=j[De],ce&&(!Xe||ve)){const st=ce[Ue];st.location==="gpu-buffer"&&st.dispose()}}return ye}getAttentions(j){const ce={};for(const ve of["cross_attentions","encoder_attentions","decoder_attentions"])for(const ye in j)ye.startsWith(ve)&&(ve in ce||(ce[ve]=[]),ce[ve].push(j[ye]));return ce}addPastKeyValues(j,ce){var ve,ye,De;if(ce)Object.assign(j,ce);else{const Ue=this.sessions.decoder_model_merged??this.sessions.model,Xe=((ye=(ve=j[this.main_input_name]??j.attention_mask)==null?void 0:ve.dims)==null?void 0:ye[0])??1,st=((De=Ue==null?void 0:Ue.config)==null?void 0:De.kv_cache_dtype)??"float32",Mt=st==="float16"?p.DataTypeMap.float16:p.DataTypeMap.float32,Dt=(0,n.getCacheShapes)(this.config,{batch_size:Xe});for(const Ft in Dt){const Qt=Dt[Ft].reduce((Pt,Vt)=>Pt*Vt,1);j[Ft]=new p.Tensor(st,new Mt(Qt),Dt[Ft])}}}async encode_image({pixel_values:j}){return(await N(this.sessions.vision_encoder,{pixel_values:j})).image_features}async encode_text({input_ids:j}){return(await N(this.sessions.embed_tokens,{input_ids:j})).inputs_embeds}async encode_audio({audio_values:j}){return(await N(this.sessions.audio_encoder,{audio_values:j})).audio_features}}class be{}class Oe extends be{constructor({last_hidden_state:A,hidden_states:j=null,attentions:ce=null}){super(),this.last_hidden_state=A,this.hidden_states=j,this.attentions=ce}}class Se extends H{}class Me extends Se{}class Ie extends Se{async _call(A){return new dn(await super._call(A))}}class $e extends Se{async _call(A){return new Lt(await super._call(A))}}class Le extends Se{async _call(A){return new en(await super._call(A))}}class We extends Se{async _call(A){return new vn(await super._call(A))}}class tt extends H{}class Ee extends tt{}class it extends tt{async _call(A){return new dn(await super._call(A))}}class Je extends tt{async _call(A){return new Lt(await super._call(A))}}class dt extends tt{async _call(A){return new en(await super._call(A))}}class Ye extends tt{async _call(A){return new vn(await super._call(A))}}class ze extends H{}class rt extends ze{}class ct extends ze{async _call(A){return new dn(await super._call(A))}}class Wt extends ze{async _call(A){return new Lt(await super._call(A))}}class It extends ze{async _call(A){return new en(await super._call(A))}}class Tt extends H{}class Ur extends Tt{}class Sr extends Tt{}class an extends H{}class Pn extends an{}class cr extends H{}class Gr extends cr{}class Rs extends cr{async _call(A){return new dn(await super._call(A))}}class Ns extends cr{async _call(A){return new Lt(await super._call(A))}}class js extends cr{async _call(A){return new en(await super._call(A))}}class Us extends cr{async _call(A){return new vn(await super._call(A))}}class vt extends H{}class jn extends vt{}class Un extends vt{async _call(A){return new dn(await super._call(A))}}class Bt extends vt{async _call(A){return new Lt(await super._call(A))}}class Ot extends vt{async _call(A){return new en(await super._call(A))}}class z extends vt{async _call(A){return new vn(await super._call(A))}}class se extends H{}class G extends se{}class ee extends se{async _call(A){return new dn(await super._call(A))}}class le extends se{async _call(A){return new Lt(await super._call(A))}}class xe extends se{async _call(A){return new en(await super._call(A))}}class Re extends se{async _call(A){return new vn(await super._call(A))}}class lt extends H{}class Et extends lt{}class xt extends lt{async _call(A){return new dn(await super._call(A))}}class At extends lt{async _call(A){return new Lt(await super._call(A))}}class ut extends lt{async _call(A){return new en(await super._call(A))}}class Kt extends lt{async _call(A){return new vn(await super._call(A))}}class er extends H{}class on extends er{}class fn extends er{async _call(A){return new dn(await super._call(A))}}class nr extends er{async _call(A){return new Lt(await super._call(A))}}class Hr extends er{async _call(A){return new en(await super._call(A))}}class gr extends er{async _call(A){return new vn(await super._call(A))}}class Yr extends H{}class Mn extends Yr{}class br extends Yr{async _call(A){return new dn(await super._call(A))}}class Wn extends Yr{async _call(A){return new Lt(await super._call(A))}}class ns extends Yr{async _call(A){return new en(await super._call(A))}}class Or extends Yr{async _call(A){return new vn(await super._call(A))}}class mn extends H{}class _n extends mn{}class $r extends mn{async _call(A){return new Lt(await super._call(A))}}class Cn extends mn{async _call(A){return new en(await super._call(A))}}class Xt extends mn{async _call(A){return new vn(await super._call(A))}}class sr extends mn{async _call(A){return new dn(await super._call(A))}}class ln extends H{}class Ms extends ln{}class gn extends ln{async _call(A){return new dn(await super._call(A))}}class Ve extends ln{async _call(A){return new Lt(await super._call(A))}}class qe extends ln{async _call(A){return new en(await super._call(A))}}class at extends H{}class mr extends at{}class Ts extends at{async _call(A){return new dn(await super._call(A))}}class On extends at{async _call(A){return new Lt(await super._call(A))}}class Es extends at{async _call(A){return new vn(await super._call(A))}}class Vn extends H{}class ui extends Vn{}class di extends Vn{async _call(A){return new dn(await super._call(A))}}class ci extends Vn{async _call(A){return new Lt(await super._call(A))}}class ge extends Vn{async _call(A){return new en(await super._call(A))}}class R extends Vn{async _call(A){return new vn(await super._call(A))}}class X extends H{}class ae extends X{}class he extends X{async _call(A){return new dn(await super._call(A))}}class fe extends X{async _call(A){return new Lt(await super._call(A))}}class ke extends X{async _call(A){return new vn(await super._call(A))}}class He extends H{}class et extends He{}class Ze extends He{async _call(A){return new Lt(await super._call(A))}}class ot extends He{async _call(A){return new vn(await super._call(A))}}class St extends He{async _call(A){return new dn(await super._call(A))}}class Jt extends H{constructor(){super(...arguments);ie(this,"forward_params",["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"])}}class qt extends Jt{}class Mr extends Jt{}class ir extends H{}class Wr extends ir{}class Dr extends ir{}class dr extends H{}class pr extends dr{}class Kr extends dr{}class Zr extends H{}class wr extends Zr{}class Br extends Zr{}class wn extends Zr{async _call(A){return new Lt(await super._call(A))}}class Qr extends H{}class Gn extends Qr{}class qr extends Qr{}class Dn extends Qr{async _call(A){return new Lt(await super._call(A))}}class Tr extends Qr{}class kr extends H{}class Lr extends kr{}class yr extends kr{}class yn extends H{}class Ps extends yn{}class pi extends yn{}class Ws extends H{}class lo extends Ws{}class Sa extends Ws{async _call(A){return new dn(await super._call(A))}}class ka extends Ws{async _call(A){return new Lt(await super._call(A))}}class uo extends Ws{async _call(A){return new en(await super._call(A))}}class co extends Ws{async _call(A){return new vn(await super._call(A))}}class Vs extends H{}class po extends Vs{}class ho extends Vs{async _call(A){return new dn(await super._call(A))}}class fo extends Vs{async _call(A){return new Lt(await super._call(A))}}class mo extends Vs{async _call(A){return new en(await super._call(A))}}class _o extends Vs{async _call(A){return new vn(await super._call(A))}}class Gs extends H{}class go extends Gs{}class wo extends Gs{async _call(A){return new dn(await super._call(A))}}class Ia extends Gs{async _call(A){return new Lt(await super._call(A))}}class Fi extends Gs{async _call(A){return new en(await super._call(A))}}class Bi extends Gs{async _call(A){return new vn(await super._call(A))}}class Li extends H{}class yo extends Li{}class Aa extends Li{}class hi extends H{constructor(){super(...arguments);ie(this,"requires_attention_mask",!1);ie(this,"main_input_name","input_features");ie(this,"forward_params",["input_features","attention_mask","decoder_input_ids","decoder_attention_mask","past_key_values"])}}class Cs extends hi{}class Ss extends hi{_prepare_generation_config(A,j){return super._prepare_generation_config(A,j,g.WhisperGenerationConfig)}_retrieve_init_tokens(A){const j=[A.decoder_start_token_id];let ce=A.language;const ve=A.task;if(A.is_multilingual){ce||(console.warn("No language specified - defaulting to English (en)."),ce="en");const De=`<|${(0,P.whisper_language_to_code)(ce)}|>`;j.push(A.lang_to_id[De]),j.push(A.task_to_id[ve??"transcribe"])}else if(ce||ve)throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");return!A.return_timestamps&&A.no_timestamps_token_id&&j.at(-1)!==A.no_timestamps_token_id?j.push(A.no_timestamps_token_id):A.return_timestamps&&j.at(-1)===A.no_timestamps_token_id&&(console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."),j.pop()),j.filter(ye=>ye!=null)}async generate({inputs:A=null,generation_config:j=null,logits_processor:ce=null,stopping_criteria:ve=null,...ye}){j=this._prepare_generation_config(j,ye);const De=ye.decoder_input_ids??this._retrieve_init_tokens(j);if(j.return_timestamps&&(ce??(ce=new d.LogitsProcessorList),ce.push(new d.WhisperTimeStampLogitsProcessor(j,De))),j.begin_suppress_tokens&&(ce??(ce=new d.LogitsProcessorList),ce.push(new d.SuppressTokensAtBeginLogitsProcessor(j.begin_suppress_tokens,De.length))),j.return_token_timestamps){if(!j.alignment_heads)throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");j.task==="translate"&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),j.output_attentions=!0,j.return_dict_in_generate=!0}const Ue=await super.generate({inputs:A,generation_config:j,logits_processor:ce,decoder_input_ids:De,...ye});return j.return_token_timestamps&&(Ue.token_timestamps=this._extract_token_timestamps(Ue,j.alignment_heads,j.num_frames)),Ue}_extract_token_timestamps(A,j,ce=null,ve=.02){if(!A.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");ce==null&&console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");let ye=this.config.median_filter_width;ye===void 0&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),ye=7);const De=A.cross_attentions,Ue=Array.from({length:this.config.decoder_layers},(Vt,$t)=>(0,p.cat)(De.map(Ht=>Ht[$t]),2)),Xe=(0,p.stack)(j.map(([Vt,$t])=>{if(Vt>=Ue.length)throw new Error(`Layer index ${Vt} is out of bounds for cross attentions (length ${Ue.length}).`);return ce?Ue[Vt].slice(null,$t,null,[0,ce]):Ue[Vt].slice(null,$t)})).transpose(1,0,2,3),[st,Mt]=(0,p.std_mean)(Xe,-2,0,!0),Dt=Xe.clone();for(let Vt=0;Vt<Dt.dims[0];++Vt){const $t=Dt[Vt];for(let Ht=0;Ht<$t.dims[0];++Ht){const _r=$t[Ht],Ir=st[Vt][Ht][0].data,Vr=Mt[Vt][Ht][0].data;for(let Rr=0;Rr<_r.dims[0];++Rr){let Xr=_r[Rr].data;for(let cn=0;cn<Xr.length;++cn)Xr[cn]=(Xr[cn]-Vr[cn])/Ir[cn];Xr.set((0,f.medianFilter)(Xr,ye))}}}const Ft=[(0,p.mean)(Dt,1)],Qt=A.sequences.dims,Pt=new p.Tensor("float32",new Float32Array(Qt[0]*Qt[1]),Qt);for(let Vt=0;Vt<Qt[0];++Vt){const $t=Ft[Vt].neg().squeeze_(0),[Ht,_r]=(0,f.dynamic_time_warping)($t.tolist()),Ir=Array.from({length:Ht.length-1},(Xr,cn)=>Ht[cn+1]-Ht[cn]),Vr=(0,o.mergeArrays)([1],Ir).map(Xr=>!!Xr),Rr=[];for(let Xr=0;Xr<Vr.length;++Xr)Vr[Xr]&&Rr.push(_r[Xr]*ve);Pt[Vt].data.set(Rr,1)}return Pt}}class Oa extends Ss{}class Ri extends H{constructor(){super(...arguments);ie(this,"requires_attention_mask",!1);ie(this,"main_input_name","input_values");ie(this,"forward_params",["input_values","decoder_input_ids","past_key_values"])}}class _l extends Ri{}class bo extends Ri{}class fi extends H{constructor(){super(...arguments);ie(this,"main_input_name","pixel_values");ie(this,"forward_params",["pixel_values","decoder_input_ids","encoder_hidden_states","past_key_values"])}}class qs extends H{constructor(){super(...arguments);ie(this,"forward_params",["input_ids","attention_mask","pixel_values","position_ids","past_key_values"])}}class mi extends qs{_merge_input_ids_with_image_features(A){const j=A.image_features.dims.at(-1),ce=A.image_features.view(-1,j);return F({image_token_id:this.config.image_token_index,...A,image_features:ce})}}class vo extends mi{}class xo extends mi{}class $o extends H{constructor(){super(...arguments);ie(this,"forward_params",["input_ids","inputs_embeds","attention_mask","pixel_values","encoder_outputs","decoder_input_ids","decoder_inputs_embeds","decoder_attention_mask","past_key_values"]);ie(this,"main_input_name","inputs_embeds")}}class Mo extends $o{_merge_input_ids_with_image_features({inputs_embeds:A,image_features:j,input_ids:ce,attention_mask:ve}){return{inputs_embeds:(0,p.cat)([j,A],1),attention_mask:(0,p.cat)([(0,p.ones)(j.dims.slice(0,2)),ve],1)}}async _prepare_inputs_embeds({input_ids:A,pixel_values:j,inputs_embeds:ce,attention_mask:ve}){if(!A&&!j)throw new Error("Either `input_ids` or `pixel_values` should be provided.");let ye,De;return A&&(ye=await this.encode_text({input_ids:A})),j&&(De=await this.encode_image({pixel_values:j})),ye&&De?{inputs_embeds:ce,attention_mask:ve}=this._merge_input_ids_with_image_features({inputs_embeds:ye,image_features:De,input_ids:A,attention_mask:ve}):ce=ye||De,{inputs_embeds:ce,attention_mask:ve}}async forward({input_ids:A,pixel_values:j,attention_mask:ce,decoder_input_ids:ve,decoder_attention_mask:ye,encoder_outputs:De,past_key_values:Ue,inputs_embeds:Xe,decoder_inputs_embeds:st}){if(Xe||({inputs_embeds:Xe,attention_mask:ce}=await this._prepare_inputs_embeds({input_ids:A,pixel_values:j,inputs_embeds:Xe,attention_mask:ce})),!De){let{last_hidden_state:Ft}=await Z(this,{inputs_embeds:Xe,attention_mask:ce});De=Ft}if(!st){if(!ve)throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");st=await this.encode_text({input_ids:ve})}return await pe(this,{inputs_embeds:st,attention_mask:ye,encoder_attention_mask:ce,encoder_hidden_states:De,past_key_values:Ue},!0)}}class To extends H{constructor(){super(...arguments);ie(this,"forward_params",["input_ids","attention_mask","pixel_values","position_ids","past_key_values"])}}class Eo extends To{_merge_input_ids_with_image_features(A){const j=A.image_features.dims.at(-1),ce=A.image_features.view(-1,j);return F({image_token_id:this.config.image_token_index,...A,image_features:ce})}}class Po extends qs{_merge_input_ids_with_image_features(A){const j=A.image_features.dims.at(-1),ce=A.image_features.view(-1,j);return F({image_token_id:this.config.image_token_index,...A,image_features:ce})}}class Co extends H{constructor(){super(...arguments);ie(this,"forward_params",["input_ids","attention_mask","inputs_embeds","per_layer_inputs","position_ids","pixel_values","input_features","input_features_mask","past_key_values"])}}class Hs extends Co{async forward({input_ids:A=null,attention_mask:j=null,pixel_values:ce=null,input_features:ve=null,input_features_mask:ye=null,position_ids:De=null,inputs_embeds:Ue=null,per_layer_inputs:Xe=null,past_key_values:st=null,generation_config:Mt=null,logits_processor:Dt=null,...Ft}){if((!Ue||!Xe)&&({inputs_embeds:Ue,per_layer_inputs:Xe}=await N(this.sessions.embed_tokens,{input_ids:A}),A.dims[1]!==1)){if(ce){const{image_features:Pt}=await N(this.sessions.vision_encoder,{pixel_values:ce});({inputs_embeds:Ue,attention_mask:j}=this._merge_input_ids_with_image_features({image_features:Pt,inputs_embeds:Ue,input_ids:A,attention_mask:j}))}if(ve){const{audio_features:Pt}=await N(this.sessions.audio_encoder,{input_features:ve,input_features_mask:ye});({inputs_embeds:Ue,attention_mask:j}=this._merge_input_ids_with_audio_features({audio_features:Pt,inputs_embeds:Ue,input_ids:A,attention_mask:j}))}}return await pe(this,{inputs_embeds:Ue,per_layer_inputs:Xe,past_key_values:st,attention_mask:j,position_ids:De,generation_config:Mt,logits_processor:Dt},!0)}_merge_input_ids_with_image_features(A){const j=A.image_features.dims.at(-1),ce=A.image_features.view(-1,j);return F({image_token_id:this.config.image_token_id,...A,image_features:ce})}_merge_input_ids_with_audio_features(A){const j=A.audio_features.dims.at(-1),ce=A.audio_features.view(-1,j);return U({audio_token_id:this.config.audio_token_id,...A,audio_features:ce})}}class qn extends H{constructor(){super(...arguments);ie(this,"forward_params",["input_ids","attention_mask","pixel_values","pixel_attention_mask","position_ids","past_key_values"])}}class Hn extends qn{async encode_image({pixel_values:A,pixel_attention_mask:j}){return(await N(this.sessions.vision_encoder,{pixel_values:A,pixel_attention_mask:j})).image_features}_merge_input_ids_with_image_features(A){const j=A.image_features.dims.at(-1),ce=A.image_features.view(-1,j);return F({image_token_id:this.config.image_token_id,...A,image_features:ce})}}class Ni extends Hn{}class So extends H{constructor(){super(...arguments);ie(this,"forward_params",["input_ids","inputs_embeds","attention_mask","position_ids","pixel_values","image_sizes","past_key_values"])}}class _i extends So{async forward({input_ids:A=null,attention_mask:j=null,pixel_values:ce=null,image_sizes:ve=null,position_ids:ye=null,inputs_embeds:De=null,past_key_values:Ue=null,generation_config:Xe=null,logits_processor:st=null,...Mt}){if(!De){let Ft;if(ce&&A.dims[1]!==1){if(!ve)throw new Error("`image_sizes` must be provided when `pixel_values` is provided.");({image_features:Ft}=await N(this.sessions.vision_encoder,{pixel_values:ce,image_sizes:ve}))}else{const Qt=this.config.normalized_config.hidden_size;Ft=new p.Tensor("float32",[],[0,Qt])}({inputs_embeds:De}=await N(this.sessions.prepare_inputs_embeds,{input_ids:A,image_features:Ft}))}return await pe(this,{inputs_embeds:De,past_key_values:Ue,attention_mask:j,position_ids:ye,generation_config:Xe,logits_processor:st},!1)}}class Sn extends H{}class gi extends Sn{}class Da extends Sn{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"text_model"})}}class ji extends Sn{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"text_model"})}}class za extends Sn{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"vision_model"})}}class Ui extends Sn{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"vision_model"})}}class wi extends H{}class Fa extends wi{}class Ba extends wi{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"text_model"})}}class Wi extends Sn{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"vision_model"})}}class Ks extends H{}class mt extends Ks{}class wt extends H{}class La extends wt{async forward(A){const j=!A.input_ids,ce=!A.pixel_values;if(j&&ce)throw new Error("Either `input_ids` or `pixel_values` should be provided.");if(j&&(A.input_ids=(0,p.ones)([A.pixel_values.dims[0],1])),ce){const{image_size:st}=this.config.vision_config;A.pixel_values=(0,p.full)([0,3,st,st],0)}const{text_embeddings:ve,image_embeddings:ye,l2norm_text_embeddings:De,l2norm_image_embeddings:Ue}=await super.forward(A),Xe={};return j||(Xe.text_embeddings=ve,Xe.l2norm_text_embeddings=De),ce||(Xe.image_embeddings=ye,Xe.l2norm_image_embeddings=Ue),Xe}}class Vi extends wt{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"text_model"})}}class Qs extends wt{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"vision_model"})}}class un extends H{}class bn extends un{}class ks extends un{}class Xs extends H{}class Gi extends Xs{}class qi extends Xs{}class Js extends H{}class yi extends Js{}class Hi extends Js{}class bi extends H{}class Ys extends bi{}class Is extends bi{}class As extends H{}class vi extends As{}class Ki extends As{}class xi extends H{}class Qi extends xi{}class Xi extends xi{}class $i extends H{}class v extends $i{}class h extends $i{}class _ extends H{}class M extends _{}class k extends _{}class D extends H{}class Q extends D{}class ue extends D{}class _e extends H{}class Te extends _e{}class Ne extends _e{}class nt extends H{}class ft extends nt{}class zt extends nt{}class Er extends H{}class Os extends Er{}class vu extends Er{}class Wh extends H{}class pP extends Wh{}class hP extends Wh{}class Vh extends H{}class fP extends Vh{}class mP extends Vh{}class Gh extends H{}class _P extends Gh{}class gP extends Gh{}class qh extends H{}class wP extends qh{}class yP extends qh{}class Hh extends H{}class bP extends Hh{}class vP extends Hh{}class Kh extends H{}class xP extends Kh{}class $P extends Kh{}class Qh extends H{}class MP extends Qh{}class TP extends Qh{}class Xh extends H{}class EP extends Xh{}class PP extends Xh{}class Jh extends H{}class CP extends Jh{}class SP extends Jh{}class Yh extends H{}class kP extends Yh{}class IP extends Yh{}class Zh extends H{}class AP extends Zh{}class OP extends Zh{}class ef extends H{}class DP extends ef{}class zP extends ef{}class tf extends H{}class FP extends tf{}class BP extends tf{}class rf extends H{}class LP extends rf{}class RP extends rf{}class NP extends H{constructor(){super(...arguments);ie(this,"forward_params",["input_ids","attention_mask","position_ids","past_key_values","pixel_values","image_grid_thw"])}}class jP extends NP{get_rope_index(A,j,ce,ve){const{vision_config:ye,image_token_id:De,video_token_id:Ue,vision_start_token_id:Xe}=this.config,st=ye.spatial_merge_size??2,Mt=[];if(j||ce){let Dt=A.tolist();ve||(ve=(0,p.ones_like)(A));const Ft=ve.tolist(),Qt=Array.from({length:3},_r=>Array.from({length:A.dims[0]},Ir=>Array.from({length:A.dims[1]},Vr=>1))),Pt=j?j.tolist():[],Vt=ce?ce.tolist():[];let $t=0,Ht=0;for(let _r=0;_r<Dt.length;++_r){const Ir=Dt[_r].filter((Ar,rn)=>Ft[_r][rn]==1),Rr=Ir.reduce((Ar,rn,Yi)=>(rn==Xe&&Ar.push(Yi),Ar),[]).map(Ar=>Ir[Ar+1]),Xr=Rr.filter(Ar=>Ar==De).length,cn=Rr.filter(Ar=>Ar==Ue).length;let Gt=[],tn=0,Kn=Xr,Na=cn;for(let Ar=0;Ar<Rr.length;++Ar){const rn=Ir.findIndex((Wa,Ds)=>Ds>tn&&Wa==De),Yi=Ir.findIndex((Wa,Ds)=>Ds>tn&&Wa==Ue),Ua=Kn>0&&rn!==-1?rn:Ir.length+1,Ao=Na>0&&Yi!==-1?Yi:Ir.length+1;let Nu,sm,im,am;Ua<Ao?([sm,im,am]=Pt[$t],++$t,--Kn,Nu=Ua):([sm,im,am]=Vt[Ht],++Ht,--Na,Nu=Ao);const[lF,om,ju]=[Number(sm),Math.floor(Number(im)/st),Math.floor(Number(am)/st)],lm=Nu-tn,CA=Gt.length>0?(0,f.max)(Gt.at(-1))[0]+1:0;Gt.push(Array.from({length:3*lm},(Wa,Ds)=>CA+Ds%lm));const um=lm+CA,Uu=lF*om*ju,uF=Array.from({length:Uu},(Wa,Ds)=>um+Math.floor(Ds/(om*ju))),dF=Array.from({length:Uu},(Wa,Ds)=>um+Math.floor(Ds/ju)%om),cF=Array.from({length:Uu},(Wa,Ds)=>um+Ds%ju);Gt.push([uF,dF,cF].flat()),tn=Nu+Uu}if(tn<Ir.length){const Ar=Gt.length>0?(0,f.max)(Gt.at(-1))[0]+1:0,rn=Ir.length-tn;Gt.push(Array.from({length:3*rn},(Yi,Ua)=>Ar+Ua%rn))}const kn=Gt.reduce((Ar,rn)=>Ar+rn.length,0),ss=new Array(kn);let Bu=0;for(let Ar=0;Ar<3;++Ar)for(let rn=0;rn<Gt.length;++rn){const Yi=Gt[rn],Ua=Yi.length/3;for(let Ao=Ar*Ua;Ao<(Ar+1)*Ua;++Ao)ss[Bu++]=Yi[Ao]}let ja=0;const Lu=Ft[_r];for(let Ar=0;Ar<Lu.length;++Ar)if(Lu[Ar]==1){for(let rn=0;rn<3;++rn)Qt[rn][_r][Ar]=ss[rn*kn/3+ja];++ja}const Ru=(0,f.max)(ss)[0];Mt.push(Ru+1-Dt[_r].length)}return[new p.Tensor("int64",Qt.flat(1/0),[3,A.dims[0],A.dims[1]]),new p.Tensor("int64",Mt,[Mt.length,1])]}else if(ve){const{data:Dt,dims:Ft}=we(ve),Qt=BigInt64Array.from({length:3*Dt.length},(Vt,$t)=>Dt[$t%Dt.length]),Pt=Array.from({length:Ft[0]},(Vt,$t)=>(0,f.max)(Dt.subarray(Ft[1]*$t,Ft[1]*($t+1)))[0]+1n+BigInt(Ft[1]));return[new p.Tensor("int64",Qt,[3,...Ft]),new p.Tensor("int64",Pt,[Pt.length,1])]}else{const[Dt,Ft]=A.dims,Qt=BigInt64Array.from({length:3*Dt*Ft},(Pt,Vt)=>BigInt(Math.floor(Vt%Ft/Dt)));return[new p.Tensor("int64",Qt,[3,...A.dims]),(0,p.zeros)([Dt,1])]}}async encode_image({pixel_values:A,image_grid_thw:j}){return(await N(this.sessions.vision_encoder,{pixel_values:A,grid_thw:j})).image_features}_merge_input_ids_with_image_features(A){return F({image_token_id:this.config.image_token_id,...A})}prepare_inputs_for_generation(A,j,ce){if(j.attention_mask&&!j.position_ids)if(!j.past_key_values)[j.position_ids,j.rope_deltas]=this.get_rope_index(j.input_ids,j.image_grid_thw,j.video_grid_thw,j.attention_mask);else{j.pixel_values=null;const ve=BigInt(Object.values(j.past_key_values)[0].dims.at(-2)),ye=j.rope_deltas.map(De=>ve+De);j.position_ids=(0,p.stack)([ye,ye,ye],0)}return j}}class nf extends H{}class UP extends nf{}class WP extends nf{}class sf extends H{}class VP extends sf{}class GP extends sf{}class af extends H{}class qP extends af{}class HP extends af{}class of extends H{}class KP extends of{}class QP extends of{}class lf extends H{}class XP extends lf{}class JP extends lf{}class uf extends H{}class YP extends uf{}class ZP extends uf{async _call(A){return new Lt(await super._call(A))}}class df extends H{}class eC extends df{}class tC extends df{async _call(A){return new Lt(await super._call(A))}}class rC extends H{}class nC extends rC{}class cf extends H{}class sC extends cf{}class iC extends cf{async _call(A){return new Lt(await super._call(A))}}class aC extends H{}class oC extends aC{}class pf extends H{}class lC extends pf{}class uC extends pf{async _call(A){return new Lt(await super._call(A))}}class dC extends H{}class cC extends dC{}class hf extends H{}class pC extends hf{}class hC extends hf{async _call(A){return new Lt(await super._call(A))}}class fC extends H{}class mC extends fC{async _call(A){return new EA(await super._call(A))}}class ff extends H{}class _C extends ff{}class gC extends ff{async _call(A){return new Lt(await super._call(A))}}class mf extends H{}class wC extends mf{}class yC extends mf{async _call(A){return new Lt(await super._call(A))}}class _f extends H{}class bC extends _f{}class vC extends _f{}class gf extends H{}class xC extends gf{}class $C extends gf{}class wf extends H{}class MC extends wf{}class TC extends wf{async _call(A){return new Lt(await super._call(A))}}class xu extends H{}class EC extends xu{}class PC extends xu{async _call(A){return new bf(await super._call(A))}}class yf extends xu{async _call(A){return new CC(await super._call(A))}}class bf extends be{constructor({logits:A,pred_boxes:j}){super(),this.logits=A,this.pred_boxes=j}}class CC extends be{constructor({logits:A,pred_boxes:j,pred_masks:ce}){super(),this.logits=A,this.pred_boxes=j,this.pred_masks=ce}}class vf extends H{}class SC extends vf{}class kC extends vf{async _call(A){return new gl(await super._call(A))}}class gl extends be{constructor({logits:A,pred_boxes:j}){super(),this.logits=A,this.pred_boxes=j}}class xf extends H{}class IC extends xf{}class AC extends xf{async _call(A){return new OC(await super._call(A))}}class OC extends gl{}class $f extends H{}class DC extends $f{}class zC extends $f{async _call(A){return new FC(await super._call(A))}}class FC extends gl{}class Mf extends H{}class BC extends Mf{}class LC extends Mf{async _call(A){return new gl(await super._call(A))}}class Tf extends H{}class RC extends Tf{}class NC extends Tf{async _call(A){return new jC(await super._call(A))}}class jC extends bf{}class Ef extends H{}class UC extends Ef{}class WC extends Ef{async _call(A){return new Lt(await super._call(A))}}class Pf extends H{}class VC extends Pf{}class GC extends Pf{async _call(A){return new Lt(await super._call(A))}}class Cf extends H{}class qC extends Cf{}class HC extends Cf{async _call(A){return new Lt(await super._call(A))}}class $u extends H{}class KC extends $u{}class QC extends $u{async _call(A){return new Lt(await super._call(A))}}class XC extends $u{}class Sf extends H{}class JC extends Sf{}class YC extends Sf{}class kf extends H{}class ZC extends kf{}class eS extends kf{}class tS extends H{}class rS extends tS{}class Mu extends H{}class nS extends Mu{}class sS extends Mu{}class iS extends Mu{}class aS extends H{}class oS extends aS{}class lS extends H{}class uS extends lS{}class dS extends H{}class cS extends dS{}class If extends H{}class pS extends If{}class hS extends If{}class Af extends H{}class fS extends Af{}class mS extends Af{}class _S extends H{}class gS extends _S{}class Of extends H{}class wS extends Of{}class yS extends Of{async _call(A){return new Lt(await super._call(A))}}class Df extends H{}class bS extends Df{}class vS extends Df{async _call(A){return new Lt(await super._call(A))}}class zf extends H{}class xS extends zf{}class $S extends zf{async _call(A){return new Lt(await super._call(A))}}class Ff extends H{}class MS extends Ff{}class TS extends Ff{async _call(A){return new Lt(await super._call(A))}}class ES extends H{}class PS extends ES{}class CS extends H{}class SS extends CS{}class kS extends H{}class IS extends kS{}class Bf extends H{}class AS extends Bf{}class OS extends Bf{async _call(A){return new DS(await super._call(A))}}class DS extends be{constructor({logits:A,pred_boxes:j}){super(),this.logits=A,this.pred_boxes=j}}class zS extends H{}class FS extends zS{async get_image_embeddings({pixel_values:A}){return await Z(this,{pixel_values:A})}async forward(A){if((!A.image_embeddings||!A.image_positional_embeddings)&&(A={...A,...await this.get_image_embeddings(A)}),!A.input_labels&&A.input_points){const ce=A.input_points.dims.slice(0,-1),ve=ce.reduce((ye,De)=>ye*De,1);A.input_labels=new p.Tensor("int64",new BigInt64Array(ve).fill(1n),ce)}const j={image_embeddings:A.image_embeddings,image_positional_embeddings:A.image_positional_embeddings};return A.input_points&&(j.input_points=A.input_points),A.input_labels&&(j.input_labels=A.input_labels),A.input_boxes&&(j.input_boxes=A.input_boxes),await N(this.sessions.prompt_encoder_mask_decoder,j)}async _call(A){return new BS(await super._call(A))}}class BS extends be{constructor({iou_scores:A,pred_masks:j}){super(),this.iou_scores=A,this.pred_masks=j}}class Lf extends H{}class LS extends Lf{}class RS extends Lf{}class Rf extends H{}class NS extends Rf{}class jS extends Rf{}class Ji extends H{}class US extends Ji{}class WS extends Ji{async _call(A){return new Ra(await super._call(A))}}class VS extends Ji{async _call(A){return new Lt(await super._call(A))}}class GS extends Ji{async _call(A){return new en(await super._call(A))}}class Nf extends H{}class qS extends Nf{}class HS extends Nf{async _call(A){return new en(await super._call(A))}}class KS extends H{}class QS extends KS{}class Tu extends H{}class XS extends Tu{}class JS extends Tu{async _call(A){return new Ra(await super._call(A))}}class YS extends Tu{async _call(A){return new Lt(await super._call(A))}}class wl extends H{}class ZS extends wl{}class ek extends wl{async _call(A){return new Ra(await super._call(A))}}class tk extends wl{async _call(A){return new Lt(await super._call(A))}}class rk extends wl{async _call(A){return new en(await super._call(A))}}class Eu extends H{}class nk extends Eu{}class sk extends Eu{async _call(A){return new Ra(await super._call(A))}}class ik extends Eu{async _call(A){return new Lt(await super._call(A))}}class Hz extends H{}class ak extends Ji{}class ok extends Ji{async _call(A){return new Ra(await super._call(A))}}class lk extends Ji{async _call(A){return new Lt(await super._call(A))}}class ko extends H{}class uk extends ko{}class dk extends ko{async _call(A){return new Ra(await super._call(A))}}class ck extends ko{async _call(A){return new Lt(await super._call(A))}}class pk extends ko{async _call(A){return new TA(await super._call(A))}}class hk extends ko{async _call(A){return new en(await super._call(A))}}class fk extends H{}class mk extends fk{}class Pu extends H{}class Kz extends Pu{}class _k extends Pu{}class gk extends Pu{async generate_speech(A,j,{threshold:ce=.5,minlenratio:ve=0,maxlenratio:ye=20,vocoder:De=null}={}){const Ue={input_ids:A},{encoder_outputs:Xe,encoder_attention_mask:st}=await Z(this,Ue),Mt=Xe.dims[1]/this.config.reduction_factor,Dt=Math.floor(Mt*ye),Ft=Math.floor(Mt*ve),Qt=this.config.num_mel_bins;let Pt=[],Vt=null,$t=null,Ht=0;for(;;){++Ht;const Vr=K(!!$t);let Rr;$t?Rr=$t.output_sequence_out:Rr=new p.Tensor("float32",new Float32Array(Qt),[1,1,Qt]);let Xr={use_cache_branch:Vr,output_sequence:Rr,encoder_attention_mask:st,speaker_embeddings:j,encoder_hidden_states:Xe};this.addPastKeyValues(Xr,Vt),$t=await N(this.sessions.decoder_model_merged,Xr),Vt=this.getPastKeyValues($t,Vt);const{prob:cn,spectrum:Gt}=$t;if(Pt.push(Gt),Ht>=Ft&&(Array.from(cn.data).filter(tn=>tn>=ce).length>0||Ht>=Dt))break}const _r=(0,p.cat)(Pt),{waveform:Ir}=await N(De.sessions.model,{spectrogram:_r});return{spectrogram:_r,waveform:Ir}}}class wk extends H{constructor(){super(...arguments);ie(this,"main_input_name","spectrogram")}}class yk extends H{}class bk extends yk{}class jf extends H{}class vk extends jf{}class xk extends jf{}class Uf extends H{}class $k extends Uf{}class Mk extends Uf{}class Wf extends H{}class Tk extends Wf{}class Ek extends Wf{}class Vf extends H{}class Pk extends Vf{}class Ck extends Vf{}class Cu extends H{}class Sk extends Cu{}class kk extends Cu{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"text_model"})}}class Ik extends Cu{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"audio_model"})}}class Ak extends H{}class Gf extends Ak{async _call(A){return new PA(await super._call(A))}}class Su extends H{}class Qz extends Su{}class Ok extends Su{}class Dk extends Su{}class qf extends H{}class zk extends qf{}class Fk extends qf{}class Hf extends H{}class Bk extends Hf{}class Lk extends Hf{async _call(A){return new Lt(await super._call(A))}}class Kf extends H{}class Xz extends Kf{}class Jz extends Kf{}class Qf extends H{constructor(){super(...arguments);ie(this,"forward_params",["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"])}_apply_and_filter_by_delay_pattern_mask(j){const[ce,ve]=j.dims,ye=this.config.decoder.num_codebooks,De=ve-ye;let Ue=0;for(let Mt=0;Mt<j.size;++Mt){if(j.data[Mt]===this.config.decoder.pad_token_id)continue;const Dt=Mt%ve,Ft=Math.floor(Mt/ve)%ye,Qt=Dt-Ft;Qt>0&&Qt<=De&&(j.data[Ue++]=j.data[Mt])}const Xe=Math.floor(ce/ye),st=Ue/(Xe*ye);return new p.Tensor(j.type,j.data.slice(0,Ue),[Xe,ye,st])}prepare_inputs_for_generation(j,ce,ve){let ye=structuredClone(j);for(let Ue=0;Ue<ye.length;++Ue)for(let Xe=0;Xe<ye[Ue].length;++Xe)Ue%this.config.decoder.num_codebooks>=Xe&&(ye[Ue][Xe]=BigInt(this.config.decoder.pad_token_id));return ve.guidance_scale!==null&&ve.guidance_scale>1&&(ye=ye.concat(ye)),super.prepare_inputs_for_generation(ye,ce,ve)}async generate(j){const ce=await super.generate(j),ve=this._apply_and_filter_by_delay_pattern_mask(ce).unsqueeze_(0),{audio_values:ye}=await N(this.sessions.encodec_decode,{audio_codes:ve});return ye}}class ku extends H{}class Rk extends ku{}class Nk extends ku{async _call(A){return new Lt(await super._call(A))}}class jk extends ku{}class Iu extends H{}class Uk extends Iu{}class Wk extends Iu{async _call(A){return new Lt(await super._call(A))}}class Vk extends Iu{}class Au extends H{}class Gk extends Au{}class qk extends Au{async _call(A){return new Lt(await super._call(A))}}class Hk extends Au{}class Ou extends H{}class Kk extends Ou{}class Qk extends Ou{async _call(A){return new Lt(await super._call(A))}}class Xk extends Ou{}class Jk extends H{}class Yk extends Jk{}class Zk extends H{}class eI extends Zk{constructor(...j){super(...j);ie(this,"forward_params",["input_ids","pixel_values","images_seq_mask","images_emb_mask","attention_mask","position_ids","past_key_values"]);this._generation_mode="text"}async forward(j){const ce=this._generation_mode??"text";let ve;if(ce==="text"||!j.past_key_values){const st=this.sessions.prepare_inputs_embeds,Mt=(0,o.pick)(j,st.inputNames);ve=await N(st,Mt)}else{const st=this.sessions.gen_img_embeds,Mt=(0,o.pick)({image_ids:j.input_ids},st.inputNames);ve=await N(st,Mt)}const ye={...j,...ve},De=await pe(this,ye),Ue=this.sessions[ce==="text"?"lm_head":"gen_head"];if(!Ue)throw new Error(`Unable to find "${Ue}" generation head`);const Xe=await N(Ue,(0,o.pick)(De,Ue.inputNames));return{...ve,...De,...Xe}}async generate(j){return this._generation_mode="text",super.generate(j)}async generate_images(j){this._generation_mode="image";const ce=(j.inputs??j[this.main_input_name]).dims[1],ye=(await super.generate(j)).slice(null,[ce,null]),De=this.sessions.image_decode,{decoded_image:Ue}=await N(De,{generated_tokens:ye}),Xe=Ue.add_(1).mul_(255/2).clamp_(0,255).to("uint8"),st=[];for(const Mt of Xe){const Dt=m.RawImage.fromTensor(Mt);st.push(Dt)}return st}}class tI extends be{constructor({char_logits:A,bpe_logits:j,wp_logits:ce}){super(),this.char_logits=A,this.bpe_logits=j,this.wp_logits=ce}get logits(){return[this.char_logits,this.bpe_logits,this.wp_logits]}}class rI extends H{}class nI extends rI{async _call(A){return new tI(await super._call(A))}}class Xf extends H{}class sI extends Xf{}class iI extends Xf{}class Jf extends H{}class aI extends Jf{}class oI extends Jf{}class lI extends H{constructor(){super(...arguments);ie(this,"forward_params",["input_ids","attention_mask","position_ids","audio_values","past_key_values"])}}class Yf extends lI{_merge_input_ids_with_audio_features(A){const j=A.audio_features.dims.at(-1),ce=A.audio_features.view(-1,j);return U({audio_token_id:this.config.ignore_index??this.config.audio_token_id,...A,audio_features:ce})}}class uI extends Yf{}class Du extends H{constructor(){super(...arguments);ie(this,"main_input_name","input_values");ie(this,"forward_params",["input_values"])}}class dI extends be{constructor({audio_codes:A}){super(),this.audio_codes=A}}class cI extends be{constructor({audio_values:A}){super(),this.audio_values=A}}class pI extends Du{async encode(A){return new dI(await N(this.sessions.encoder_model,A))}async decode(A){return new cI(await N(this.sessions.decoder_model,A))}}class hI extends Du{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"encoder_model"})}}class fI extends Du{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"decoder_model"})}}class zu extends H{constructor(){super(...arguments);ie(this,"main_input_name","input_values");ie(this,"forward_params",["input_values"])}}class mI extends be{constructor({audio_codes:A}){super(),this.audio_codes=A}}class _I extends be{constructor({audio_values:A}){super(),this.audio_values=A}}class gI extends zu{async encode(A){return new mI(await N(this.sessions.encoder_model,A))}async decode(A){return new _I(await N(this.sessions.decoder_model,A))}}class wI extends zu{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"encoder_model"})}}class yI extends zu{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"decoder_model"})}}class Fu extends H{constructor(){super(...arguments);ie(this,"main_input_name","input_values");ie(this,"forward_params",["input_values"])}}class bI extends Fu{async encode(A){return await N(this.sessions.encoder_model,A)}async decode(A){return await N(this.sessions.decoder_model,A)}}class vI extends Fu{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"encoder_model"})}}class xI extends Fu{static async from_pretrained(A,j={}){return super.from_pretrained(A,{...j,model_file_name:j.model_file_name??"decoder_model"})}}class ar{static async from_pretrained(A,{progress_callback:j=null,config:ce=null,cache_dir:ve=null,local_files_only:ye=!1,revision:De="main",model_file_name:Ue=null,subfolder:Xe="onnx",device:st=null,dtype:Mt=null,use_external_data_format:Dt=null,session_options:Ft={}}={}){const Qt={progress_callback:j,config:ce,cache_dir:ve,local_files_only:ye,revision:De,model_file_name:Ue,subfolder:Xe,device:st,dtype:Mt,use_external_data_format:Dt,session_options:Ft};if(Qt.config=await n.AutoConfig.from_pretrained(A,Qt),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);const Pt=Qt.config.model_type;for(const Vt of this.MODEL_CLASS_MAPPINGS){let $t=Vt.get(Pt);if(!$t){for(const Ht of Vt.values())if(Ht[0]===Pt){$t=Ht;break}if(!$t)continue}return await $t[1].from_pretrained(A,Qt)}if(this.BASE_IF_FAIL)return KI.has(Pt)||console.warn(`Unknown model class "${Pt}", attempting to construct from base class.`),await H.from_pretrained(A,Qt);throw Error(`Unsupported model type: ${Pt}`)}}ie(ar,"MODEL_CLASS_MAPPINGS",null),ie(ar,"BASE_IF_FAIL",!1);const Yz=new Map([["bert",["BertModel",Me]],["neobert",["NeoBertModel",Ee]],["modernbert",["ModernBertModel",rt]],["nomic_bert",["NomicBertModel",Pn]],["roformer",["RoFormerModel",Gr]],["electra",["ElectraModel",G]],["esm",["EsmModel",Ms]],["convbert",["ConvBertModel",jn]],["camembert",["CamembertModel",Et]],["deberta",["DebertaModel",on]],["deberta-v2",["DebertaV2Model",Mn]],["mpnet",["MPNetModel",ui]],["albert",["AlbertModel",et]],["distilbert",["DistilBertModel",_n]],["roberta",["RobertaModel",lo]],["xlm",["XLMModel",po]],["xlm-roberta",["XLMRobertaModel",go]],["clap",["ClapModel",Sk]],["clip",["CLIPModel",gi]],["clipseg",["CLIPSegModel",bn]],["chinese_clip",["ChineseCLIPModel",mt]],["siglip",["SiglipModel",Fa]],["jina_clip",["JinaCLIPModel",La]],["mobilebert",["MobileBertModel",mr]],["squeezebert",["SqueezeBertModel",ae]],["wav2vec2",["Wav2Vec2Model",US]],["wav2vec2-bert",["Wav2Vec2BertModel",nk]],["unispeech",["UniSpeechModel",XS]],["unispeech-sat",["UniSpeechSatModel",ZS]],["hubert",["HubertModel",ak]],["wavlm",["WavLMModel",uk]],["audio-spectrogram-transformer",["ASTModel",yo]],["vits",["VitsModel",Gf]],["pyannote",["PyAnnoteModel",qS]],["wespeaker-resnet",["WeSpeakerResNetModel",QS]],["detr",["DetrModel",EC]],["rt_detr",["RTDetrModel",SC]],["rt_detr_v2",["RTDetrV2Model",IC]],["rf_detr",["RFDetrModel",DC]],["d_fine",["DFineModel",BC]],["table-transformer",["TableTransformerModel",RC]],["vit",["ViTModel",YP]],["ijepa",["IJepaModel",eC]],["pvt",["PvtModel",sC]],["vit_msn",["ViTMSNModel",lC]],["vit_mae",["ViTMAEModel",oC]],["groupvit",["GroupViTModel",cC]],["fastvit",["FastViTModel",pC]],["mobilevit",["MobileViTModel",_C]],["mobilevitv2",["MobileViTV2Model",wC]],["owlvit",["OwlViTModel",bC]],["owlv2",["Owlv2Model",xC]],["beit",["BeitModel",MC]],["deit",["DeiTModel",UC]],["hiera",["HieraModel",VC]],["convnext",["ConvNextModel",wS]],["convnextv2",["ConvNextV2Model",bS]],["dinov2",["Dinov2Model",xS]],["dinov2_with_registers",["Dinov2WithRegistersModel",MS]],["dinov3_vit",["DINOv3ViTModel",PS]],["dinov3_convnext",["DINOv3ConvNextModel",SS]],["resnet",["ResNetModel",qC]],["swin",["SwinModel",KC]],["swin2sr",["Swin2SRModel",JC]],["donut-swin",["DonutSwinModel",gS]],["yolos",["YolosModel",AS]],["dpt",["DPTModel",ZC]],["glpn",["GLPNModel",fS]],["hifigan",["SpeechT5HifiGan",wk]],["efficientnet",["EfficientNetModel",Bk]],["decision_transformer",["DecisionTransformerModel",Yk]],["patchtst",["PatchTSTForPrediction",sI]],["patchtsmixer",["PatchTSMixerForPrediction",aI]],["mobilenet_v1",["MobileNetV1Model",Rk]],["mobilenet_v2",["MobileNetV2Model",Uk]],["mobilenet_v3",["MobileNetV3Model",Gk]],["mobilenet_v4",["MobileNetV4Model",Kk]],["maskformer",["MaskFormerModel",pS]],["mgp-str",["MgpstrForSceneTextRecognition",nI]],["style_text_to_speech_2",["StyleTextToSpeech2Model",mk]]]),Zz=new Map([["t5",["T5Model",qt]],["longt5",["LongT5Model",Wr]],["mt5",["MT5Model",pr]],["bart",["BartModel",wr]],["mbart",["MBartModel",Gn]],["marian",["MarianModel",LS]],["whisper",["WhisperModel",Cs]],["m2m_100",["M2M100Model",NS]],["blenderbot",["BlenderbotModel",Lr]],["blenderbot-small",["BlenderbotSmallModel",Ps]]]),eF=new Map([["mimi",["MimiModel",pI]],["dac",["DacModel",gI]],["snac",["SnacModel",bI]]]),tF=new Map([["bloom",["BloomModel",qP]],["jais",["JAISModel",yi]],["gpt2",["GPT2Model",Gi]],["gptj",["GPTJModel",Qi]],["gpt_bigcode",["GPTBigCodeModel",v]],["gpt_neo",["GPTNeoModel",Ys]],["gpt_neox",["GPTNeoXModel",vi]],["codegen",["CodeGenModel",M]],["llama",["LlamaModel",Q]],["arcee",["ArceeModel",Te]],["lfm2",["Lfm2Model",ft]],["smollm3",["SmolLM3Model",Os]],["exaone",["ExaoneModel",_P]],["olmo",["OlmoModel",bP]],["olmo2",["Olmo2Model",xP]],["mobilellm",["MobileLLMModel",wP]],["granite",["GraniteModel",MP]],["cohere",["CohereModel",EP]],["gemma",["GemmaModel",CP]],["gemma2",["Gemma2Model",kP]],["gemma3_text",["Gemma3Model",AP]],["helium",["HeliumModel",pP]],["glm",["GlmModel",fP]],["openelm",["OpenELMModel",DP]],["qwen2",["Qwen2Model",FP]],["qwen3",["Qwen3Model",LP]],["phi",["PhiModel",UP]],["phi3",["Phi3Model",VP]],["mpt",["MptModel",KP]],["opt",["OPTModel",XP]],["mistral",["MistralModel",vk]],["ernie4_5",["Ernie4_5_Model",$k]],["starcoder2",["Starcoder2Model",Tk]],["falcon",["FalconModel",Pk]],["stablelm",["StableLmModel",zk]],["modernbert-decoder",["ModernBertDecoderModel",Ur]]]),Zf=new Map([["speecht5",["SpeechT5ForSpeechToText",_k]],["whisper",["WhisperForConditionalGeneration",Ss]],["lite-whisper",["LiteWhisperForConditionalGeneration",Oa]],["moonshine",["MoonshineForConditionalGeneration",bo]]]),$I=new Map([["speecht5",["SpeechT5ForTextToSpeech",gk]]]),MI=new Map([["vits",["VitsModel",Gf]],["musicgen",["MusicgenForConditionalGeneration",Qf]]]),TI=new Map([["bert",["BertForSequenceClassification",$e]],["neobert",["NeoBertForSequenceClassification",Je]],["modernbert",["ModernBertForSequenceClassification",Wt]],["roformer",["RoFormerForSequenceClassification",Ns]],["electra",["ElectraForSequenceClassification",le]],["esm",["EsmForSequenceClassification",Ve]],["convbert",["ConvBertForSequenceClassification",Bt]],["camembert",["CamembertForSequenceClassification",At]],["deberta",["DebertaForSequenceClassification",nr]],["deberta-v2",["DebertaV2ForSequenceClassification",Wn]],["mpnet",["MPNetForSequenceClassification",ci]],["albert",["AlbertForSequenceClassification",Ze]],["distilbert",["DistilBertForSequenceClassification",$r]],["roberta",["RobertaForSequenceClassification",ka]],["xlm",["XLMForSequenceClassification",fo]],["xlm-roberta",["XLMRobertaForSequenceClassification",Ia]],["bart",["BartForSequenceClassification",wn]],["mbart",["MBartForSequenceClassification",Dn]],["mobilebert",["MobileBertForSequenceClassification",On]],["squeezebert",["SqueezeBertForSequenceClassification",fe]]]),EI=new Map([["bert",["BertForTokenClassification",Le]],["neobert",["NeoBertForTokenClassification",dt]],["modernbert",["ModernBertForTokenClassification",It]],["roformer",["RoFormerForTokenClassification",js]],["electra",["ElectraForTokenClassification",xe]],["esm",["EsmForTokenClassification",qe]],["convbert",["ConvBertForTokenClassification",Ot]],["camembert",["CamembertForTokenClassification",ut]],["deberta",["DebertaForTokenClassification",Hr]],["deberta-v2",["DebertaV2ForTokenClassification",ns]],["mpnet",["MPNetForTokenClassification",ge]],["distilbert",["DistilBertForTokenClassification",Cn]],["roberta",["RobertaForTokenClassification",uo]],["xlm",["XLMForTokenClassification",mo]],["xlm-roberta",["XLMRobertaForTokenClassification",Fi]]]),em=new Map([["t5",["T5ForConditionalGeneration",Mr]],["longt5",["LongT5ForConditionalGeneration",Dr]],["mt5",["MT5ForConditionalGeneration",Kr]],["bart",["BartForConditionalGeneration",Br]],["mbart",["MBartForConditionalGeneration",qr]],["marian",["MarianMTModel",RS]],["m2m_100",["M2M100ForConditionalGeneration",jS]],["blenderbot",["BlenderbotForConditionalGeneration",yr]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",pi]]]),tm=new Map([["bloom",["BloomForCausalLM",HP]],["gpt2",["GPT2LMHeadModel",qi]],["jais",["JAISLMHeadModel",Hi]],["gptj",["GPTJForCausalLM",Xi]],["gpt_bigcode",["GPTBigCodeForCausalLM",h]],["gpt_neo",["GPTNeoForCausalLM",Is]],["gpt_neox",["GPTNeoXForCausalLM",Ki]],["codegen",["CodeGenForCausalLM",k]],["llama",["LlamaForCausalLM",ue]],["arcee",["ArceeForCausalLM",Ne]],["lfm2",["Lfm2ForCausalLM",zt]],["smollm3",["SmolLM3ForCausalLM",vu]],["exaone",["ExaoneForCausalLM",gP]],["olmo",["OlmoForCausalLM",vP]],["olmo2",["Olmo2ForCausalLM",$P]],["mobilellm",["MobileLLMForCausalLM",yP]],["granite",["GraniteForCausalLM",TP]],["cohere",["CohereForCausalLM",PP]],["gemma",["GemmaForCausalLM",SP]],["gemma2",["Gemma2ForCausalLM",IP]],["gemma3_text",["Gemma3ForCausalLM",OP]],["helium",["HeliumForCausalLM",hP]],["glm",["GlmForCausalLM",mP]],["openelm",["OpenELMForCausalLM",zP]],["qwen2",["Qwen2ForCausalLM",BP]],["qwen3",["Qwen3ForCausalLM",RP]],["phi",["PhiForCausalLM",WP]],["phi3",["Phi3ForCausalLM",GP]],["mpt",["MptForCausalLM",QP]],["opt",["OPTForCausalLM",JP]],["mbart",["MBartForCausalLM",Tr]],["mistral",["MistralForCausalLM",xk]],["ernie4_5",["Ernie4_5_ForCausalLM",Mk]],["starcoder2",["Starcoder2ForCausalLM",Ek]],["falcon",["FalconForCausalLM",Ck]],["trocr",["TrOCRForCausalLM",bk]],["stablelm",["StableLmForCausalLM",Fk]],["modernbert-decoder",["ModernBertDecoderForCausalLM",Sr]],["phi3_v",["Phi3VForCausalLM",_i]]]),rF=new Map([["multi_modality",["MultiModalityCausalLM",eI]]]),PI=new Map([["bert",["BertForMaskedLM",Ie]],["neobert",["NeoBertForMaskedLM",it]],["modernbert",["ModernBertForMaskedLM",ct]],["roformer",["RoFormerForMaskedLM",Rs]],["electra",["ElectraForMaskedLM",ee]],["esm",["EsmForMaskedLM",gn]],["convbert",["ConvBertForMaskedLM",Un]],["camembert",["CamembertForMaskedLM",xt]],["deberta",["DebertaForMaskedLM",fn]],["deberta-v2",["DebertaV2ForMaskedLM",br]],["mpnet",["MPNetForMaskedLM",di]],["albert",["AlbertForMaskedLM",St]],["distilbert",["DistilBertForMaskedLM",sr]],["roberta",["RobertaForMaskedLM",Sa]],["xlm",["XLMWithLMHeadModel",ho]],["xlm-roberta",["XLMRobertaForMaskedLM",wo]],["mobilebert",["MobileBertForMaskedLM",Ts]],["squeezebert",["SqueezeBertForMaskedLM",he]]]),CI=new Map([["bert",["BertForQuestionAnswering",We]],["neobert",["NeoBertForQuestionAnswering",Ye]],["roformer",["RoFormerForQuestionAnswering",Us]],["electra",["ElectraForQuestionAnswering",Re]],["convbert",["ConvBertForQuestionAnswering",z]],["camembert",["CamembertForQuestionAnswering",Kt]],["deberta",["DebertaForQuestionAnswering",gr]],["deberta-v2",["DebertaV2ForQuestionAnswering",Or]],["mpnet",["MPNetForQuestionAnswering",R]],["albert",["AlbertForQuestionAnswering",ot]],["distilbert",["DistilBertForQuestionAnswering",Xt]],["roberta",["RobertaForQuestionAnswering",co]],["xlm",["XLMForQuestionAnswering",_o]],["xlm-roberta",["XLMRobertaForQuestionAnswering",Bi]],["mobilebert",["MobileBertForQuestionAnswering",Es]],["squeezebert",["SqueezeBertForQuestionAnswering",ke]]]),rm=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",fi]],["idefics3",["Idefics3ForConditionalGeneration",Hn]],["smolvlm",["SmolVLMForConditionalGeneration",Ni]]]),SI=new Map([["llava",["LlavaForConditionalGeneration",mi]],["llava_onevision",["LlavaOnevisionForConditionalGeneration",vo]],["moondream1",["Moondream1ForConditionalGeneration",xo]],["florence2",["Florence2ForConditionalGeneration",Mo]],["qwen2-vl",["Qwen2VLForConditionalGeneration",jP]],["idefics3",["Idefics3ForConditionalGeneration",Hn]],["smolvlm",["SmolVLMForConditionalGeneration",Ni]],["paligemma",["PaliGemmaForConditionalGeneration",Eo]],["llava_qwen2",["LlavaQwen2ForCausalLM",Po]],["gemma3n",["Gemma3nForConditionalGeneration",Hs]]]),kI=new Map([["ultravox",["UltravoxModel",Yf]],["voxtral",["VoxtralForConditionalGeneration",uI]]]),nF=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",fi]]]),II=new Map([["vit",["ViTForImageClassification",ZP]],["ijepa",["IJepaForImageClassification",tC]],["pvt",["PvtForImageClassification",iC]],["vit_msn",["ViTMSNForImageClassification",uC]],["fastvit",["FastViTForImageClassification",hC]],["mobilevit",["MobileViTForImageClassification",gC]],["mobilevitv2",["MobileViTV2ForImageClassification",yC]],["beit",["BeitForImageClassification",TC]],["deit",["DeiTForImageClassification",WC]],["hiera",["HieraForImageClassification",GC]],["convnext",["ConvNextForImageClassification",yS]],["convnextv2",["ConvNextV2ForImageClassification",vS]],["dinov2",["Dinov2ForImageClassification",$S]],["dinov2_with_registers",["Dinov2WithRegistersForImageClassification",TS]],["resnet",["ResNetForImageClassification",HC]],["swin",["SwinForImageClassification",QC]],["segformer",["SegformerForImageClassification",Ok]],["efficientnet",["EfficientNetForImageClassification",Lk]],["mobilenet_v1",["MobileNetV1ForImageClassification",Nk]],["mobilenet_v2",["MobileNetV2ForImageClassification",Wk]],["mobilenet_v3",["MobileNetV3ForImageClassification",qk]],["mobilenet_v4",["MobileNetV4ForImageClassification",Qk]]]),AI=new Map([["detr",["DetrForObjectDetection",PC]],["rt_detr",["RTDetrForObjectDetection",kC]],["rt_detr_v2",["RTDetrV2ForObjectDetection",AC]],["rf_detr",["RFDetrForObjectDetection",zC]],["d_fine",["DFineForObjectDetection",LC]],["table-transformer",["TableTransformerForObjectDetection",NC]],["yolos",["YolosForObjectDetection",OS]]]),OI=new Map([["owlvit",["OwlViTForObjectDetection",vC]],["owlv2",["Owlv2ForObjectDetection",$C]],["grounding-dino",["GroundingDinoForObjectDetection",IS]]]),Io=new Map([["detr",["DetrForSegmentation",yf]],["clipseg",["CLIPSegForImageSegmentation",ks]]]),DI=new Map([["segformer",["SegformerForSemanticSegmentation",Dk]],["sapiens",["SapiensForSemanticSegmentation",nS]],["swin",["SwinForSemanticSegmentation",XC]],["mobilenet_v1",["MobileNetV1ForSemanticSegmentation",jk]],["mobilenet_v2",["MobileNetV2ForSemanticSegmentation",Vk]],["mobilenet_v3",["MobileNetV3ForSemanticSegmentation",Hk]],["mobilenet_v4",["MobileNetV4ForSemanticSegmentation",Xk]]]),zI=new Map([["detr",["DetrForSegmentation",yf]],["maskformer",["MaskFormerForInstanceSegmentation",hS]]]),FI=new Map([["sam",["SamModel",FS]]]),BI=new Map([["wav2vec2",["Wav2Vec2ForCTC",WS]],["wav2vec2-bert",["Wav2Vec2BertForCTC",sk]],["unispeech",["UniSpeechForCTC",JS]],["unispeech-sat",["UniSpeechSatForCTC",ek]],["wavlm",["WavLMForCTC",dk]],["hubert",["HubertForCTC",ok]]]),LI=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",VS]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",ik]],["unispeech",["UniSpeechForSequenceClassification",YS]],["unispeech-sat",["UniSpeechSatForSequenceClassification",tk]],["wavlm",["WavLMForSequenceClassification",ck]],["hubert",["HubertForSequenceClassification",lk]],["audio-spectrogram-transformer",["ASTForAudioClassification",Aa]]]),RI=new Map([["wavlm",["WavLMForXVector",pk]]]),NI=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",rk]],["wavlm",["WavLMForAudioFrameClassification",hk]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",GS]],["pyannote",["PyAnnoteForAudioFrameClassification",HS]]]),jI=new Map([["vitmatte",["VitMatteForImageMatting",mC]]]),sF=new Map([["patchtst",["PatchTSTForPrediction",iI]],["patchtsmixer",["PatchTSMixerForPrediction",oI]]]),UI=new Map([["swin2sr",["Swin2SRForImageSuperResolution",YC]]]),WI=new Map([["dpt",["DPTForDepthEstimation",eS]],["depth_anything",["DepthAnythingForDepthEstimation",rS]],["glpn",["GLPNForDepthEstimation",mS]],["sapiens",["SapiensForDepthEstimation",sS]],["depth_pro",["DepthProForDepthEstimation",oS]],["metric3d",["Metric3DForDepthEstimation",uS]],["metric3dv2",["Metric3Dv2ForDepthEstimation",cS]]]),VI=new Map([["sapiens",["SapiensForNormalEstimation",iS]]]),GI=new Map([["vitpose",["VitPoseForPoseEstimation",nC]]]),qI=new Map([["clip",["CLIPVisionModelWithProjection",Ui]],["siglip",["SiglipVisionModel",Wi]],["jina_clip",["JinaCLIPVisionModel",Qs]]]),HI=[[Yz,b.EncoderOnly],[Zz,b.EncoderDecoder],[tF,b.DecoderOnly],[eF,b.AutoEncoder],[TI,b.EncoderOnly],[EI,b.EncoderOnly],[em,b.Seq2Seq],[Zf,b.Seq2Seq],[tm,b.DecoderOnly],[rF,b.MultiModality],[PI,b.EncoderOnly],[CI,b.EncoderOnly],[rm,b.Vision2Seq],[SI,b.ImageTextToText],[kI,b.AudioTextToText],[II,b.EncoderOnly],[Io,b.EncoderOnly],[zI,b.EncoderOnly],[DI,b.EncoderOnly],[jI,b.EncoderOnly],[sF,b.EncoderOnly],[UI,b.EncoderOnly],[WI,b.EncoderOnly],[VI,b.EncoderOnly],[GI,b.EncoderOnly],[AI,b.EncoderOnly],[OI,b.EncoderOnly],[FI,b.MaskGeneration],[BI,b.EncoderOnly],[LI,b.EncoderOnly],[$I,b.Seq2Seq],[MI,b.EncoderOnly],[RI,b.EncoderOnly],[NI,b.EncoderOnly],[qI,b.EncoderOnly]];for(const[I,A]of HI)for(const[j,ce]of I.values())x.set(j,A),E.set(ce,j),T.set(j,ce);const iF=[["MusicgenForConditionalGeneration",Qf,b.Musicgen],["Phi3VForCausalLM",_i,b.Phi3V],["CLIPTextModelWithProjection",ji,b.EncoderOnly],["SiglipTextModel",Ba,b.EncoderOnly],["JinaCLIPTextModel",Vi,b.EncoderOnly],["ClapTextModelWithProjection",kk,b.EncoderOnly],["ClapAudioModelWithProjection",Ik,b.EncoderOnly],["DacEncoderModel",wI,b.EncoderOnly],["DacDecoderModel",yI,b.EncoderOnly],["MimiEncoderModel",hI,b.EncoderOnly],["MimiDecoderModel",fI,b.EncoderOnly],["SnacEncoderModel",vI,b.EncoderOnly],["SnacDecoderModel",xI,b.EncoderOnly],["Gemma3nForConditionalGeneration",Hs,b.ImageAudioTextToText]];for(const[I,A,j]of iF)x.set(I,j),E.set(A,I),T.set(I,A);const KI=new Map([["modnet",Io],["birefnet",Io],["isnet",Io],["ben",Io]]);for(const[I,A]of KI.entries())A.set(I,["PreTrainedModel",H]),x.set(I,b.EncoderOnly),E.set(H,I),T.set(I,H);class nm extends ar{}ie(nm,"MODEL_CLASS_MAPPINGS",HI.map(A=>A[0])),ie(nm,"BASE_IF_FAIL",!0);class QI extends ar{}ie(QI,"MODEL_CLASS_MAPPINGS",[TI]);class XI extends ar{}ie(XI,"MODEL_CLASS_MAPPINGS",[EI]);class JI extends ar{}ie(JI,"MODEL_CLASS_MAPPINGS",[em]);class YI extends ar{}ie(YI,"MODEL_CLASS_MAPPINGS",[Zf]);class ZI extends ar{}ie(ZI,"MODEL_CLASS_MAPPINGS",[$I]);class eA extends ar{}ie(eA,"MODEL_CLASS_MAPPINGS",[MI]);class tA extends ar{}ie(tA,"MODEL_CLASS_MAPPINGS",[tm]);class rA extends ar{}ie(rA,"MODEL_CLASS_MAPPINGS",[PI]);class nA extends ar{}ie(nA,"MODEL_CLASS_MAPPINGS",[CI]);class sA extends ar{}ie(sA,"MODEL_CLASS_MAPPINGS",[rm]);class iA extends ar{}ie(iA,"MODEL_CLASS_MAPPINGS",[II]);class aA extends ar{}ie(aA,"MODEL_CLASS_MAPPINGS",[Io]);class oA extends ar{}ie(oA,"MODEL_CLASS_MAPPINGS",[DI]);class lA extends ar{}ie(lA,"MODEL_CLASS_MAPPINGS",[zI]);class uA extends ar{}ie(uA,"MODEL_CLASS_MAPPINGS",[AI]);class dA extends ar{}ie(dA,"MODEL_CLASS_MAPPINGS",[OI]);class cA extends ar{}ie(cA,"MODEL_CLASS_MAPPINGS",[FI]);class pA extends ar{}ie(pA,"MODEL_CLASS_MAPPINGS",[BI]);class hA extends ar{}ie(hA,"MODEL_CLASS_MAPPINGS",[LI]);class fA extends ar{}ie(fA,"MODEL_CLASS_MAPPINGS",[RI]);class mA extends ar{}ie(mA,"MODEL_CLASS_MAPPINGS",[NI]);class _A extends ar{}ie(_A,"MODEL_CLASS_MAPPINGS",[nF]);class gA extends ar{}ie(gA,"MODEL_CLASS_MAPPINGS",[jI]);class wA extends ar{}ie(wA,"MODEL_CLASS_MAPPINGS",[UI]);class yA extends ar{}ie(yA,"MODEL_CLASS_MAPPINGS",[WI]);class bA extends ar{}ie(bA,"MODEL_CLASS_MAPPINGS",[VI]);class vA extends ar{}ie(vA,"MODEL_CLASS_MAPPINGS",[GI]);class xA extends ar{}ie(xA,"MODEL_CLASS_MAPPINGS",[qI]);class $A extends ar{}ie($A,"MODEL_CLASS_MAPPINGS",[SI]);class MA extends ar{}ie(MA,"MODEL_CLASS_MAPPINGS",[kI]);class aF extends be{constructor({logits:A,past_key_values:j,encoder_outputs:ce,decoder_attentions:ve=null,cross_attentions:ye=null}){super(),this.logits=A,this.past_key_values=j,this.encoder_outputs=ce,this.decoder_attentions=ve,this.cross_attentions=ye}}class Lt extends be{constructor({logits:A,...j}){super(),this.logits=A;const ce=Object.values(j);ce.length>0&&(this.attentions=ce)}}class TA extends be{constructor({logits:A,embeddings:j}){super(),this.logits=A,this.embeddings=j}}class en extends be{constructor({logits:A}){super(),this.logits=A}}class dn extends be{constructor({logits:A}){super(),this.logits=A}}class vn extends be{constructor({start_logits:A,end_logits:j}){super(),this.start_logits=A,this.end_logits=j}}class Ra extends be{constructor({logits:A}){super(),this.logits=A}}class oF extends be{constructor({logits:A,past_key_values:j}){super(),this.logits=A,this.past_key_values=j}}class EA extends be{constructor({alphas:A}){super(),this.alphas=A}}class PA extends be{constructor({waveform:A,spectrogram:j}){super(),this.waveform=A,this.spectrogram=j}}},"./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js":(e,t,r)=>{r.r(t),r.d(t,{ASTFeatureExtractor:()=>s});var n=r("./src/base/feature_extraction_utils.js");r("./src/utils/tensor.js");var i=r("./src/utils/audio.js");class s extends n.FeatureExtractor{constructor(o){super(o);const l=this.config.sampling_rate,u=(0,i.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(l/2),l,null,"kaldi",!0);this.mel_filters=u,this.window=(0,i.window_function)(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}async _extract_fbank_features(o,l){return(0,i.spectrogram)(o,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:l,transpose:!0})}async _call(o){(0,n.validate_audio_inputs)(o,"ASTFeatureExtractor");const l=await this._extract_fbank_features(o,this.config.max_length);if(this.config.do_normalize){const u=this.std*2,d=l.data;for(let c=0;c<d.length;++c)d[c]=(d[c]-this.mean)/u}return{input_values:l.unsqueeze_(0)}}}},"./src/models/auto/feature_extraction_auto.js":(e,t,r)=>{r.r(t),r.d(t,{AutoFeatureExtractor:()=>a});var n=r("./src/utils/constants.js"),i=r("./src/utils/hub.js");r("./src/base/feature_extraction_utils.js");var s=r("./src/models/feature_extractors.js");class a{static async from_pretrained(l,u={}){const d=await(0,i.getModelJSON)(l,n.FEATURE_EXTRACTOR_NAME,!0,u),c=d.feature_extractor_type,p=s[c];if(!p)throw new Error(`Unknown feature_extractor_type: '${c}'. Please report this at ${n.GITHUB_ISSUE_URL}.`);return new p(d)}}},"./src/models/auto/image_processing_auto.js":(e,t,r)=>{r.r(t),r.d(t,{AutoImageProcessor:()=>o});var n=r("./src/utils/constants.js"),i=r("./src/utils/hub.js"),s=r("./src/base/image_processors_utils.js"),a=r("./src/models/image_processors.js");class o{static async from_pretrained(u,d={}){const c=await(0,i.getModelJSON)(u,n.IMAGE_PROCESSOR_NAME,!0,d),p=c.image_processor_type??c.feature_extractor_type;let m=a[p==null?void 0:p.replace(/Fast$/,"")];return m||(p!==void 0&&console.warn(`Image processor type '${p}' not found, assuming base ImageProcessor. Please report this at ${n.GITHUB_ISSUE_URL}.`),m=s.ImageProcessor),new m(c)}}},"./src/models/auto/processing_auto.js":(e,t,r)=>{r.r(t),r.d(t,{AutoProcessor:()=>u});var n=r("./src/utils/constants.js"),i=r("./src/utils/hub.js"),s=r("./src/base/processing_utils.js"),a=r("./src/models/processors.js"),o=r("./src/models/image_processors.js"),l=r("./src/models/feature_extractors.js");class u{static async from_pretrained(c,p={}){const m=await(0,i.getModelJSON)(c,n.IMAGE_PROCESSOR_NAME,!0,p),{image_processor_type:f,feature_extractor_type:w,processor_class:C}=m;if(C&&a[C])return a[C].from_pretrained(c,p);if(!f&&!w)throw new Error("No `image_processor_type` or `feature_extractor_type` found in the config.");const y={};if(f){const P=o[f.replace(/Fast$/,"")];if(!P)throw new Error(`Unknown image_processor_type: '${f}'.`);y.image_processor=new P(m)}if(w){const P=o[w];if(P)y.image_processor=new P(m);else{const b=l[w];if(!b)throw new Error(`Unknown feature_extractor_type: '${w}'.`);y.feature_extractor=new b(m)}}const g={};return new s.Processor(g,y,null)}}},"./src/models/beit/image_processing_beit.js":(e,t,r)=>{r.r(t),r.d(t,{BeitFeatureExtractor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}},"./src/models/bit/image_processing_bit.js":(e,t,r)=>{r.r(t),r.d(t,{BitImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}},"./src/models/chinese_clip/image_processing_chinese_clip.js":(e,t,r)=>{r.r(t),r.d(t,{ChineseCLIPFeatureExtractor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}},"./src/models/clap/feature_extraction_clap.js":(e,t,r)=>{r.r(t),r.d(t,{ClapFeatureExtractor:()=>s});var n=r("./src/base/feature_extraction_utils.js");r("./src/utils/tensor.js");var i=r("./src/utils/audio.js");class s extends n.FeatureExtractor{constructor(o){super(o),this.mel_filters=(0,i.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=(0,i.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=(0,i.window_function)(this.config.fft_window_size,"hann")}async _get_input_mel(o,l,u,d){let c;const p=o.length-l;if(p>0)if(u==="rand_trunc"){const m=Math.floor(Math.random()*(p+1));o=o.subarray(m,m+l),c=await this._extract_fbank_features(o,this.mel_filters_slaney,this.config.nb_max_samples)}else throw new Error(`Truncation strategy "${u}" not implemented`);else{if(p<0){let m=new Float64Array(l);if(m.set(o),d==="repeat")for(let f=o.length;f<l;f+=o.length)m.set(o.subarray(0,Math.min(o.length,l-f)),f);else if(d==="repeatpad")for(let f=o.length;f<-p;f+=o.length)m.set(o,f);o=m}if(u==="fusion")throw new Error(`Truncation strategy "${u}" not implemented`);c=await this._extract_fbank_features(o,this.mel_filters_slaney,this.config.nb_max_samples)}return c.unsqueeze_(0)}async _extract_fbank_features(o,l,u=null){return(0,i.spectrogram)(o,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:l,log_mel:"dB",max_num_frames:u,do_pad:!1,transpose:!0})}async _call(o,{max_length:l=null}={}){return(0,n.validate_audio_inputs)(o,"ClapFeatureExtractor"),{input_features:(await this._get_input_mel(o,l??this.config.nb_max_samples,this.config.truncation,this.config.padding)).unsqueeze_(0)}}}},"./src/models/clip/image_processing_clip.js":(e,t,r)=>{r.r(t),r.d(t,{CLIPFeatureExtractor:()=>s,CLIPImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}class s extends i{}},"./src/models/convnext/image_processing_convnext.js":(e,t,r)=>{r.r(t),r.d(t,{ConvNextFeatureExtractor:()=>s,ConvNextImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{constructor(o){super(o),this.crop_pct=this.config.crop_pct??224/256}async resize(o){var u;const l=(u=this.size)==null?void 0:u.shortest_edge;if(l===void 0)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(l<384){const d=Math.floor(l/this.crop_pct),[c,p]=this.get_resize_output_image_size(o,{shortest_edge:d});o=await o.resize(c,p,{resample:this.resample}),o=await o.center_crop(l,l)}else o=await o.resize(l,l,{resample:this.resample});return o}}class s extends i{}},"./src/models/dac/feature_extraction_dac.js":(e,t,r)=>{r.r(t),r.d(t,{DacFeatureExtractor:()=>i});var n=r("./src/models/encodec/feature_extraction_encodec.js");class i extends n.EncodecFeatureExtractor{}},"./src/models/deit/image_processing_deit.js":(e,t,r)=>{r.r(t),r.d(t,{DeiTFeatureExtractor:()=>s,DeiTImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}class s extends i{}},"./src/models/detr/image_processing_detr.js":(e,t,r)=>{r.r(t),r.d(t,{DetrFeatureExtractor:()=>a,DetrImageProcessor:()=>s});var n=r("./src/base/image_processors_utils.js"),i=r("./src/utils/tensor.js");class s extends n.ImageProcessor{async _call(l){const u=await super._call(l),d=[u.pixel_values.dims[0],64,64],c=(0,i.full)(d,1n);return{...u,pixel_mask:c}}post_process_object_detection(...l){return(0,n.post_process_object_detection)(...l)}post_process_panoptic_segmentation(...l){return(0,n.post_process_panoptic_segmentation)(...l)}post_process_instance_segmentation(...l){return(0,n.post_process_instance_segmentation)(...l)}}class a extends s{}},"./src/models/dinov3_vit/image_processing_dinov3_vit.js":(e,t,r)=>{r.r(t),r.d(t,{DINOv3ViTImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}},"./src/models/donut/image_processing_donut.js":(e,t,r)=>{r.r(t),r.d(t,{DonutFeatureExtractor:()=>s,DonutImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{pad_image(o,l,u,d={}){const[c,p,m]=l;let f=this.image_mean;Array.isArray(this.image_mean)||(f=new Array(m).fill(f));let w=this.image_std;Array.isArray(w)||(w=new Array(m).fill(f));const C=f.map((y,g)=>-y/w[g]);return super.pad_image(o,l,u,{center:!0,constant_values:C,...d})}}class s extends i{}},"./src/models/dpt/image_processing_dpt.js":(e,t,r)=>{r.r(t),r.d(t,{DPTFeatureExtractor:()=>s,DPTImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}class s extends i{}},"./src/models/efficientnet/image_processing_efficientnet.js":(e,t,r)=>{r.r(t),r.d(t,{EfficientNetImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{constructor(a){super(a),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map(o=>o*o))}}},"./src/models/encodec/feature_extraction_encodec.js":(e,t,r)=>{r.r(t),r.d(t,{EncodecFeatureExtractor:()=>s});var n=r("./src/base/feature_extraction_utils.js"),i=r("./src/utils/tensor.js");class s extends n.FeatureExtractor{async _call(o){(0,n.validate_audio_inputs)(o,"EncodecFeatureExtractor"),o instanceof Float64Array&&(o=new Float32Array(o));const l=this.config.feature_size;if(o.length%l!==0)throw new Error(`The length of the audio data must be a multiple of the number of channels (${l}).`);const u=[1,l,o.length/l];return{input_values:new i.Tensor("float32",o,u)}}}},"./src/models/feature_extractors.js":(e,t,r)=>{r.r(t),r.d(t,{ASTFeatureExtractor:()=>n.ASTFeatureExtractor,ClapFeatureExtractor:()=>s.ClapFeatureExtractor,DacFeatureExtractor:()=>a.DacFeatureExtractor,EncodecFeatureExtractor:()=>i.EncodecFeatureExtractor,Gemma3nAudioFeatureExtractor:()=>o.Gemma3nAudioFeatureExtractor,ImageFeatureExtractor:()=>C.ImageProcessor,MoonshineFeatureExtractor:()=>l.MoonshineFeatureExtractor,PyAnnoteFeatureExtractor:()=>u.PyAnnoteFeatureExtractor,SeamlessM4TFeatureExtractor:()=>d.SeamlessM4TFeatureExtractor,SnacFeatureExtractor:()=>c.SnacFeatureExtractor,SpeechT5FeatureExtractor:()=>p.SpeechT5FeatureExtractor,Wav2Vec2FeatureExtractor:()=>m.Wav2Vec2FeatureExtractor,WeSpeakerFeatureExtractor:()=>f.WeSpeakerFeatureExtractor,WhisperFeatureExtractor:()=>w.WhisperFeatureExtractor});var n=r("./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js"),i=r("./src/models/encodec/feature_extraction_encodec.js"),s=r("./src/models/clap/feature_extraction_clap.js"),a=r("./src/models/dac/feature_extraction_dac.js"),o=r("./src/models/gemma3n/feature_extraction_gemma3n.js"),l=r("./src/models/moonshine/feature_extraction_moonshine.js"),u=r("./src/models/pyannote/feature_extraction_pyannote.js"),d=r("./src/models/seamless_m4t/feature_extraction_seamless_m4t.js"),c=r("./src/models/snac/feature_extraction_snac.js"),p=r("./src/models/speecht5/feature_extraction_speecht5.js"),m=r("./src/models/wav2vec2/feature_extraction_wav2vec2.js"),f=r("./src/models/wespeaker/feature_extraction_wespeaker.js"),w=r("./src/models/whisper/feature_extraction_whisper.js"),C=r("./src/base/image_processors_utils.js")},"./src/models/florence2/processing_florence2.js":(e,t,r)=>{r.r(t),r.d(t,{Florence2Processor:()=>a});var n=r("./src/base/processing_utils.js"),i=r("./src/models/auto/image_processing_auto.js"),s=r("./src/tokenizers.js");class a extends n.Processor{constructor(l,u,d){super(l,u,d);const{tasks_answer_post_processing_type:c,task_prompts_without_inputs:p,task_prompts_with_input:m}=this.image_processor.config;this.tasks_answer_post_processing_type=new Map(Object.entries(c??{})),this.task_prompts_without_inputs=new Map(Object.entries(p??{})),this.task_prompts_with_input=new Map(Object.entries(m??{})),this.regexes={quad_boxes:/(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,bboxes:/([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm},this.size_per_bin=1e3}construct_prompts(l){typeof l=="string"&&(l=[l]);const u=[];for(const d of l)if(this.task_prompts_without_inputs.has(d))u.push(this.task_prompts_without_inputs.get(d));else{for(const[c,p]of this.task_prompts_with_input)if(d.includes(c)){u.push(p.replaceAll("{input}",d).replaceAll(c,""));break}u.length!==l.length&&u.push(d)}return u}post_process_generation(l,u,d){const c=this.tasks_answer_post_processing_type.get(u)??"pure_text";l=l.replaceAll("<s>","").replaceAll("</s>","");let p;switch(c){case"pure_text":p=l;break;case"description_with_bboxes":case"bboxes":case"phrase_grounding":case"ocr":const m=c==="ocr"?"quad_boxes":"bboxes",f=l.matchAll(this.regexes[m]),w=[],C=[];for(const[y,g,...P]of f)w.push(g?g.trim():w.at(-1)??""),C.push(P.map((b,x)=>(Number(b)+.5)/this.size_per_bin*d[x%2]));p={labels:w,[m]:C};break;default:throw new Error(`Task "${u}" (of type "${c}") not yet implemented.`)}return{[u]:p}}async _call(l,u=null,d={}){if(!l&&!u)throw new Error("Either text or images must be provided");const c=await this.image_processor(l,d),p=u?this.tokenizer(this.construct_prompts(u),d):{};return{...c,...p}}}ie(a,"tokenizer_class",s.AutoTokenizer),ie(a,"image_processor_class",i.AutoImageProcessor)},"./src/models/gemma3n/feature_extraction_gemma3n.js":(e,t,r)=>{r.r(t),r.d(t,{Gemma3nAudioFeatureExtractor:()=>a});var n=r("./src/base/feature_extraction_utils.js"),i=r("./src/utils/tensor.js"),s=r("./src/utils/audio.js");class a extends n.FeatureExtractor{constructor(l){super(l);const{fft_length:u,feature_size:d,min_frequency:c,max_frequency:p,sampling_rate:m,frame_length:f}=this.config,w=(0,s.mel_filter_bank)(Math.floor(1+u/2),d,c,p,m,null,"htk",!1);this.mel_filters=w,this.window=(0,s.window_function)(f,"hann")}async _extract_fbank_features(l,u){return(0,s.spectrogram)(l,this.window,this.config.frame_length,this.config.hop_length,{fft_length:this.config.fft_length,center:!1,onesided:!0,preemphasis:this.config.preemphasis,preemphasis_htk_flavor:this.config.preemphasis_htk_flavor,mel_filters:this.mel_filters,log_mel:"log",mel_floor:this.config.mel_floor,remove_dc_offset:!1,transpose:!0})}async _call(l,{max_length:u=48e4,truncation:d=!0,padding:c=!0,pad_to_multiple_of:p=128}={}){if((0,n.validate_audio_inputs)(l,"Gemma3nAudioFeatureExtractor"),d&&l.length>u&&(l=l.slice(0,u)),c&&l.length%p!==0){const w=p-l.length%p,C=new Float64Array(l.length+w);C.set(l),this.config.padding_value!==0&&C.fill(this.config.padding_value,l.length),l=C}const m=await this._extract_fbank_features(l,this.config.max_length),f=(0,i.full)([1,m.dims[0]],!0);return{input_features:m.unsqueeze_(0),input_features_mask:f}}}},"./src/models/gemma3n/processing_gemma3n.js":(e,t,r)=>{r.r(t),r.d(t,{Gemma3nProcessor:()=>o});var n=r("./src/base/processing_utils.js"),i=r("./src/models/auto/image_processing_auto.js"),s=r("./src/models/auto/feature_extraction_auto.js"),a=r("./src/tokenizers.js");r("./src/utils/image.js"),r("./src/utils/audio.js");class o extends n.Processor{constructor(u,d,c){super(u,d,c),this.audio_seq_length=this.config.audio_seq_length,this.image_seq_length=this.config.image_seq_length;const{audio_token_id:p,boa_token:m,audio_token:f,eoa_token:w,image_token_id:C,boi_token:y,image_token:g,eoi_token:P}=this.tokenizer.config;this.audio_token_id=p,this.boa_token=m,this.audio_token=f;const b=f.repeat(this.audio_seq_length);this.full_audio_sequence=`

${m}${b}${w}

`,this.image_token_id=C,this.boi_token=y,this.image_token=g;const x=g.repeat(this.image_seq_length);this.full_image_sequence=`

${y}${x}${P}

`}async _call(u,d=null,c=null,p={}){typeof u=="string"&&(u=[u]);let m;c&&(m=await this.feature_extractor(c,p),u=u.map(C=>C.replaceAll(this.audio_token,this.full_audio_sequence)));let f;return d&&(f=await this.image_processor(d,p),u=u.map(C=>C.replaceAll(this.image_token,this.full_image_sequence))),{...this.tokenizer(u,p),...f,...m}}}ie(o,"image_processor_class",i.AutoImageProcessor),ie(o,"feature_extractor_class",s.AutoFeatureExtractor),ie(o,"tokenizer_class",a.AutoTokenizer),ie(o,"uses_processor_config",!0),ie(o,"uses_chat_template_file",!0)},"./src/models/glpn/image_processing_glpn.js":(e,t,r)=>{r.r(t),r.d(t,{GLPNFeatureExtractor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}},"./src/models/grounding_dino/image_processing_grounding_dino.js":(e,t,r)=>{r.r(t),r.d(t,{GroundingDinoImageProcessor:()=>s});var n=r("./src/base/image_processors_utils.js"),i=r("./src/utils/tensor.js");class s extends n.ImageProcessor{async _call(o){const l=await super._call(o),u=l.pixel_values.dims,d=(0,i.ones)([u[0],u[2],u[3]]);return{...l,pixel_mask:d}}}},"./src/models/grounding_dino/processing_grounding_dino.js":(e,t,r)=>{r.r(t),r.d(t,{GroundingDinoProcessor:()=>l});var n=r("./src/base/processing_utils.js"),i=r("./src/models/auto/image_processing_auto.js"),s=r("./src/tokenizers.js"),a=r("./src/base/image_processors_utils.js");function o(u,d){const p=u.dims.at(-1)-1,m=u.tolist();m.fill(!1,0,1),m.fill(!1,p);const f=d.tolist();return m.map((w,C)=>w?C:null).filter(w=>w!==null).map(w=>f[w])}class l extends n.Processor{async _call(d,c,p={}){const m=d?await this.image_processor(d,p):{};return{...c?this.tokenizer(c,p):{},...m}}post_process_grounded_object_detection(d,c,{box_threshold:p=.25,text_threshold:m=.25,target_sizes:f=null}={}){const{logits:w,pred_boxes:C}=d,y=w.dims[0];if(f!==null&&f.length!==y)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const g=w.dims.at(1),P=w.sigmoid(),b=P.max(-1).tolist(),x=C.tolist().map(E=>E.map(S=>(0,a.center_to_corners_format)(S))),T=[];for(let E=0;E<y;++E){const S=f!==null?f[E]:null;S!==null&&(x[E]=x[E].map(N=>N.map((te,q)=>te*S[(q+1)%2])));const O=b[E],B=[],V=[],W=[];for(let N=0;N<g;++N){const te=O[N];if(te<=p)continue;const q=x[E][N],K=P[E][N];B.push(te),W.push(q);const Y=o(K.gt(m),c[E]);V.push(Y)}T.push({scores:B,boxes:W,labels:this.batch_decode(V)})}return T}}ie(l,"tokenizer_class",s.AutoTokenizer),ie(l,"image_processor_class",i.AutoImageProcessor)},"./src/models/idefics3/image_processing_idefics3.js":(e,t,r)=>{r.r(t),r.d(t,{Idefics3ImageProcessor:()=>s});var n=r("./src/base/image_processors_utils.js"),i=r("./src/utils/tensor.js");class s extends n.ImageProcessor{constructor(o){super(o),this.do_image_splitting=o.do_image_splitting??!0,this.max_image_size=o.max_image_size}get_resize_for_vision_encoder(o,l){let[u,d]=o.dims.slice(-2);const c=d/u;return d>=u?(d=Math.ceil(d/l)*l,u=Math.floor(d/c),u=Math.ceil(u/l)*l):(u=Math.ceil(u/l)*l,d=Math.floor(u*c),d=Math.ceil(d/l)*l),{height:u,width:d}}async _call(o,{do_image_splitting:l=null,return_row_col_info:u=!1}={}){let d;if(!Array.isArray(o))d=[[o]];else{if(o.length===0||!o[0])throw new Error("No images provided.");Array.isArray(o[0])?d=o:d=[o]}let c=[],p=[],m=[];const f=[],w=[];for(const E of d){let S=await Promise.all(E.map(V=>this.preprocess(V)));f.push(...S.map(V=>V.original_size)),w.push(...S.map(V=>V.reshaped_input_size)),S.forEach(V=>V.pixel_values.unsqueeze_(0));const{longest_edge:O}=this.max_image_size;let B;if(l??this.do_image_splitting){let V=new Array(S.length),W=new Array(S.length);B=await Promise.all(S.map(async(N,te)=>{const q=this.get_resize_for_vision_encoder(N.pixel_values,O),K=await(0,i.interpolate_4d)(N.pixel_values,{size:[q.height,q.width]}),{frames:Y,num_splits_h:Z,num_splits_w:de}=await this.split_image(K,this.max_image_size);return V[te]=Z,W[te]=de,(0,i.cat)(Y,0)})),p.push(V),m.push(W)}else{const V=[O,O];B=await Promise.all(S.map(W=>(0,i.interpolate_4d)(W.pixel_values,{size:V}))),p.push(new Array(S.length).fill(0)),m.push(new Array(S.length).fill(0))}c.push((0,i.cat)(B,0))}const C=c.length,[y,g,P,b]=c[0].dims;let x,T;if(C===1)x=c[0].unsqueeze_(0),T=(0,i.full)([C,y,P,b],!0);else{const E=Math.max(...c.map(B=>B.dims.at(0)));T=(0,i.full)([C,E,P,b],!0);const S=T.data,O=E*P*b;for(let B=0;B<C;++B){const V=c[B].dims[0];if(V<E){c[B]=(0,i.cat)([c[B],(0,i.full)([E-V,g,P,b],0)],0);const W=B*O+V*P*b,N=(B+1)*O;S.fill(!1,W,N)}}x=(0,i.stack)(c,0)}return{pixel_values:x,pixel_attention_mask:T,original_sizes:f,reshaped_input_sizes:w,...u?{rows:p,cols:m}:{}}}async split_image(o,{longest_edge:l}){const u=l,d=l,c=[],[p,m]=o.dims.slice(-2);let f=0,w=0;if(p>u||m>d){f=Math.ceil(p/u),w=Math.ceil(m/d);const C=Math.ceil(p/f),y=Math.ceil(m/w);for(let b=0;b<f;++b)for(let x=0;x<w;++x){let T,E,S,O;b===f-1?(E=p-C,O=p):(E=b*C,O=(b+1)*C),x===w-1?(T=m-y,S=m):(T=x*y,S=(x+1)*y);const B=[E,T],V=[O,S],W=await(0,i.slice)(o,B,V,[2,3]);c.push(W)}const g=u,P=d;(p!==g||m!==P)&&(o=await(0,i.interpolate_4d)(o,{size:[g,P]}))}return c.push(o),{frames:c,num_splits_h:f,num_splits_w:w}}}},"./src/models/idefics3/processing_idefics3.js":(e,t,r)=>{r.r(t),r.d(t,{Idefics3Processor:()=>d});var n=r("./src/base/processing_utils.js"),i=r("./src/models/auto/image_processing_auto.js"),s=r("./src/tokenizers.js");r("./src/utils/image.js");var a=r("./src/utils/core.js");function o(c,p,m,f,w,C){let y="";for(let g=0;g<p;++g){for(let P=0;P<m;++P)y+=f+`<row_${g+1}_col_${P+1}>`+w.repeat(c);y+=`
`}return y+=`
${f}${C}`+w.repeat(c)+`${f}`,y}function l(c,p,m,f){return`${p}${f}`+m.repeat(c)+`${p}`}function u(c,p,m,f,w,C){return c===0&&p===0?l(m,f,w,C):o(m,c,p,f,w,C)}class d extends n.Processor{constructor(){super(...arguments);ie(this,"fake_image_token","<fake_token_around_image>");ie(this,"image_token","<image>");ie(this,"global_img_token","<global-img>")}async _call(m,f=null,w={}){w.return_row_col_info??(w.return_row_col_info=!0);let C;f&&(C=await this.image_processor(f,w)),Array.isArray(m)||(m=[m]);const y=C.rows??[new Array(m.length).fill(0)],g=C.cols??[new Array(m.length).fill(0)],P=this.config.image_seq_len,b=[],x=[];for(let E=0;E<m.length;++E){const S=m[E],O=y[E],B=g[E];b.push((0,a.count)(S,this.image_token));const V=O.map((te,q)=>u(te,B[q],P,this.fake_image_token,this.image_token,this.global_img_token)),W=S.split(this.image_token);if(W.length===0)throw new Error("The image token should be present in the text.");let N=W[0];for(let te=0;te<V.length;++te)N+=V[te]+W[te+1];x.push(N)}return{...this.tokenizer(x),...C}}}ie(d,"image_processor_class",i.AutoImageProcessor),ie(d,"tokenizer_class",s.AutoTokenizer),ie(d,"uses_processor_config",!0)},"./src/models/image_processors.js":(e,t,r)=>{r.r(t),r.d(t,{BeitFeatureExtractor:()=>n.BeitFeatureExtractor,BitImageProcessor:()=>i.BitImageProcessor,CLIPFeatureExtractor:()=>a.CLIPFeatureExtractor,CLIPImageProcessor:()=>a.CLIPImageProcessor,ChineseCLIPFeatureExtractor:()=>s.ChineseCLIPFeatureExtractor,ConvNextFeatureExtractor:()=>o.ConvNextFeatureExtractor,ConvNextImageProcessor:()=>o.ConvNextImageProcessor,DINOv3ViTImageProcessor:()=>d.DINOv3ViTImageProcessor,DPTFeatureExtractor:()=>p.DPTFeatureExtractor,DPTImageProcessor:()=>p.DPTImageProcessor,DeiTFeatureExtractor:()=>l.DeiTFeatureExtractor,DeiTImageProcessor:()=>l.DeiTImageProcessor,DetrFeatureExtractor:()=>u.DetrFeatureExtractor,DetrImageProcessor:()=>u.DetrImageProcessor,DonutFeatureExtractor:()=>c.DonutFeatureExtractor,DonutImageProcessor:()=>c.DonutImageProcessor,EfficientNetImageProcessor:()=>m.EfficientNetImageProcessor,GLPNFeatureExtractor:()=>f.GLPNFeatureExtractor,GroundingDinoImageProcessor:()=>w.GroundingDinoImageProcessor,Idefics3ImageProcessor:()=>C.Idefics3ImageProcessor,JinaCLIPImageProcessor:()=>g.JinaCLIPImageProcessor,LlavaOnevisionImageProcessor:()=>P.LlavaOnevisionImageProcessor,Mask2FormerImageProcessor:()=>b.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>x.MaskFormerFeatureExtractor,MaskFormerImageProcessor:()=>x.MaskFormerImageProcessor,MobileNetV1FeatureExtractor:()=>T.MobileNetV1FeatureExtractor,MobileNetV1ImageProcessor:()=>T.MobileNetV1ImageProcessor,MobileNetV2FeatureExtractor:()=>E.MobileNetV2FeatureExtractor,MobileNetV2ImageProcessor:()=>E.MobileNetV2ImageProcessor,MobileNetV3FeatureExtractor:()=>S.MobileNetV3FeatureExtractor,MobileNetV3ImageProcessor:()=>S.MobileNetV3ImageProcessor,MobileNetV4FeatureExtractor:()=>O.MobileNetV4FeatureExtractor,MobileNetV4ImageProcessor:()=>O.MobileNetV4ImageProcessor,MobileViTFeatureExtractor:()=>B.MobileViTFeatureExtractor,MobileViTImageProcessor:()=>B.MobileViTImageProcessor,NougatImageProcessor:()=>V.NougatImageProcessor,OwlViTFeatureExtractor:()=>N.OwlViTFeatureExtractor,OwlViTImageProcessor:()=>N.OwlViTImageProcessor,Owlv2ImageProcessor:()=>W.Owlv2ImageProcessor,Phi3VImageProcessor:()=>te.Phi3VImageProcessor,PvtImageProcessor:()=>q.PvtImageProcessor,Qwen2VLImageProcessor:()=>K.Qwen2VLImageProcessor,RTDetrImageProcessor:()=>Y.RTDetrImageProcessor,SamImageProcessor:()=>Z.SamImageProcessor,SegformerFeatureExtractor:()=>de.SegformerFeatureExtractor,SegformerImageProcessor:()=>de.SegformerImageProcessor,SiglipImageProcessor:()=>pe.SiglipImageProcessor,SmolVLMImageProcessor:()=>L.SmolVLMImageProcessor,Swin2SRImageProcessor:()=>F.Swin2SRImageProcessor,VLMImageProcessor:()=>y.VLMImageProcessor,ViTFeatureExtractor:()=>U.ViTFeatureExtractor,ViTImageProcessor:()=>U.ViTImageProcessor,VitMatteImageProcessor:()=>re.VitMatteImageProcessor,VitPoseImageProcessor:()=>me.VitPoseImageProcessor,YolosFeatureExtractor:()=>J.YolosFeatureExtractor,YolosImageProcessor:()=>J.YolosImageProcessor});var n=r("./src/models/beit/image_processing_beit.js"),i=r("./src/models/bit/image_processing_bit.js"),s=r("./src/models/chinese_clip/image_processing_chinese_clip.js"),a=r("./src/models/clip/image_processing_clip.js"),o=r("./src/models/convnext/image_processing_convnext.js"),l=r("./src/models/deit/image_processing_deit.js"),u=r("./src/models/detr/image_processing_detr.js"),d=r("./src/models/dinov3_vit/image_processing_dinov3_vit.js"),c=r("./src/models/donut/image_processing_donut.js"),p=r("./src/models/dpt/image_processing_dpt.js"),m=r("./src/models/efficientnet/image_processing_efficientnet.js"),f=r("./src/models/glpn/image_processing_glpn.js"),w=r("./src/models/grounding_dino/image_processing_grounding_dino.js"),C=r("./src/models/idefics3/image_processing_idefics3.js"),y=r("./src/models/janus/image_processing_janus.js"),g=r("./src/models/jina_clip/image_processing_jina_clip.js"),P=r("./src/models/llava_onevision/image_processing_llava_onevision.js"),b=r("./src/models/mask2former/image_processing_mask2former.js"),x=r("./src/models/maskformer/image_processing_maskformer.js"),T=r("./src/models/mobilenet_v1/image_processing_mobilenet_v1.js"),E=r("./src/models/mobilenet_v2/image_processing_mobilenet_v2.js"),S=r("./src/models/mobilenet_v3/image_processing_mobilenet_v3.js"),O=r("./src/models/mobilenet_v4/image_processing_mobilenet_v4.js"),B=r("./src/models/mobilevit/image_processing_mobilevit.js"),V=r("./src/models/nougat/image_processing_nougat.js"),W=r("./src/models/owlv2/image_processing_owlv2.js"),N=r("./src/models/owlvit/image_processing_owlvit.js"),te=r("./src/models/phi3_v/image_processing_phi3_v.js"),q=r("./src/models/pvt/image_processing_pvt.js"),K=r("./src/models/qwen2_vl/image_processing_qwen2_vl.js"),Y=r("./src/models/rt_detr/image_processing_rt_detr.js"),Z=r("./src/models/sam/image_processing_sam.js"),de=r("./src/models/segformer/image_processing_segformer.js"),pe=r("./src/models/siglip/image_processing_siglip.js"),L=r("./src/models/smolvlm/image_processing_smolvlm.js"),F=r("./src/models/swin2sr/image_processing_swin2sr.js"),U=r("./src/models/vit/image_processing_vit.js"),re=r("./src/models/vitmatte/image_processing_vitmatte.js"),me=r("./src/models/vitpose/image_processing_vitpose.js"),J=r("./src/models/yolos/image_processing_yolos.js")},"./src/models/janus/image_processing_janus.js":(e,t,r)=>{r.r(t),r.d(t,{VLMImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{constructor(a){super({do_pad:!0,pad_size:{width:a.image_size,height:a.image_size},...a}),this.constant_values=this.config.background_color.map(o=>o*this.rescale_factor)}pad_image(a,o,l,u){return super.pad_image(a,o,l,{constant_values:this.constant_values,center:!0,...u})}}},"./src/models/janus/processing_janus.js":(e,t,r)=>{r.r(t),r.d(t,{VLChatProcessor:()=>u});var n=r("./src/base/processing_utils.js"),i=r("./src/models/auto/image_processing_auto.js"),s=r("./src/tokenizers.js"),a=r("./src/utils/core.js"),o=r("./src/utils/tensor.js"),l=r("./src/utils/image.js");class u extends n.Processor{constructor(c,p,m){super(c,p,m),this.image_tag=this.config.image_tag,this.image_start_tag=this.config.image_start_tag,this.image_end_tag=this.config.image_end_tag,this.num_image_tokens=this.config.num_image_tokens}async _call(c,{images:p=null,chat_template:m="default"}={}){p?Array.isArray(p)||(p=[p]):p=await Promise.all(c.filter(B=>B.images).flatMap(B=>B.images).map(B=>l.RawImage.read(B)));const f=this.tokenizer,w=f.apply_chat_template(c,{tokenize:!1,add_generation_prompt:!0,chat_template:m}),C=B=>f.encode(B,{add_special_tokens:!1}),y=w.split(this.image_tag),g=y.length-1;if(p.length!==g)throw new Error(`Number of images provided (${p.length}) does not match number of "${this.image_tag}" image tags (${g})`);const[P,b,x]=f.model.convert_tokens_to_ids([this.image_tag,this.image_start_tag,this.image_end_tag]);let T=C(y[0]),E=new Array(T.length).fill(!1);for(let B=1;B<y.length;++B){const V=new Array(this.num_image_tokens).fill(P),W=C(y[B]);T=(0,a.mergeArrays)(T,[b],V,[x],W);const N=new Array(this.num_image_tokens).fill(!0);E=(0,a.mergeArrays)(E,[!1],N,[!1],new Array(W.length).fill(!1))}const S=[1,T.length],O={input_ids:new o.Tensor("int64",T,S),attention_mask:new o.Tensor("int64",new Array(T.length).fill(1),S),images_seq_mask:new o.Tensor("bool",E,S),images_emb_mask:new o.Tensor("bool",new Array(g*this.num_image_tokens).fill(!0),[1,g,this.num_image_tokens])};if(p&&p.length>0){const B=await this.image_processor(p);return B.pixel_values.unsqueeze_(0),{...O,...B}}return O}}ie(u,"image_processor_class",i.AutoImageProcessor),ie(u,"tokenizer_class",s.AutoTokenizer),ie(u,"uses_processor_config",!0)},"./src/models/jina_clip/image_processing_jina_clip.js":(e,t,r)=>{r.r(t),r.d(t,{JinaCLIPImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{constructor(a){const{resize_mode:o,fill_color:l,interpolation:u,size:d,...c}=a,p=o==="squash"?{width:d,height:d}:o==="shortest"?{shortest_edge:d}:{longest_edge:d},m=u==="bicubic"?3:2;super({...c,size:p,resample:m,do_center_crop:!0,crop_size:d,do_normalize:!0})}}},"./src/models/jina_clip/processing_jina_clip.js":(e,t,r)=>{r.r(t),r.d(t,{JinaCLIPProcessor:()=>a});var n=r("./src/base/processing_utils.js"),i=r("./src/models/auto/image_processing_auto.js"),s=r("./src/tokenizers.js");class a extends n.Processor{async _call(l=null,u=null,d={}){if(!l&&!u)throw new Error("Either text or images must be provided");const c=l?this.tokenizer(l,d):{},p=u?await this.image_processor(u,d):{};return{...c,...p}}}ie(a,"tokenizer_class",s.AutoTokenizer),ie(a,"image_processor_class",i.AutoImageProcessor)},"./src/models/llava/processing_llava.js":(e,t,r)=>{r.r(t),r.d(t,{LlavaProcessor:()=>a});var n=r("./src/base/processing_utils.js"),i=r("./src/models/auto/image_processing_auto.js"),s=r("./src/tokenizers.js");class a extends n.Processor{async _call(l,u=null,d={}){const c=await this.image_processor(l,d);if(u){const[m,f]=c.pixel_values.dims.slice(-2),{image_token:w,patch_size:C,num_additional_image_tokens:y}=this.config,g=Math.floor(m/C)*Math.floor(f/C)+y;u=structuredClone(u),Array.isArray(u)||(u=[u]);for(let P=0;P<u.length;++P)u[P]=u[P].replace(w,w.repeat(g))}const p=u?this.tokenizer(u,d):{};return{...c,...p}}}ie(a,"tokenizer_class",s.AutoTokenizer),ie(a,"image_processor_class",i.AutoImageProcessor),ie(a,"uses_processor_config",!0)},"./src/models/llava_onevision/image_processing_llava_onevision.js":(e,t,r)=>{r.r(t),r.d(t,{LlavaOnevisionImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}},"./src/models/mask2former/image_processing_mask2former.js":(e,t,r)=>{r.r(t),r.d(t,{Mask2FormerImageProcessor:()=>i});var n=r("./src/models/maskformer/image_processing_maskformer.js");class i extends n.MaskFormerImageProcessor{}},"./src/models/maskformer/image_processing_maskformer.js":(e,t,r)=>{r.r(t),r.d(t,{MaskFormerFeatureExtractor:()=>s,MaskFormerImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{post_process_panoptic_segmentation(...o){return(0,n.post_process_panoptic_segmentation)(...o)}post_process_instance_segmentation(...o){return(0,n.post_process_instance_segmentation)(...o)}}class s extends i{}},"./src/models/mgp_str/processing_mgp_str.js":(e,t,r)=>{r.r(t),r.d(t,{MgpstrProcessor:()=>l});var n=r("./src/base/processing_utils.js"),i=r("./src/models/auto/image_processing_auto.js"),s=r("./src/tokenizers.js"),a=r("./src/utils/maths.js");const o={char:["char_decode",1],bpe:["bpe_decode",2],wp:["wp_decode",102]};class l extends n.Processor{get char_tokenizer(){return this.components.char_tokenizer}get bpe_tokenizer(){return this.components.bpe_tokenizer}get wp_tokenizer(){return this.components.wp_tokenizer}_decode_helper(d,c){if(!o.hasOwnProperty(c))throw new Error(`Format ${c} is not supported.`);const[p,m]=o[c],f=this[p].bind(this),[w,C]=d.dims,y=[],g=[],P=d.tolist();for(let x=0;x<w;++x){const T=P[x],E=[],S=[];for(let B=1;B<C;++B){const[V,W]=(0,a.max)((0,a.softmax)(T[B]));if(S.push(V),W==m)break;E.push(W)}const O=S.length>0?S.reduce((B,V)=>B*V,1):0;g.push(E),y.push(O)}return[f(g),y]}char_decode(d){return this.char_tokenizer.batch_decode(d).map(c=>c.replaceAll(" ",""))}bpe_decode(d){return this.bpe_tokenizer.batch_decode(d)}wp_decode(d){return this.wp_tokenizer.batch_decode(d).map(c=>c.replaceAll(" ",""))}batch_decode([d,c,p]){const[m,f]=this._decode_helper(d,"char"),[w,C]=this._decode_helper(c,"bpe"),[y,g]=this._decode_helper(p,"wp"),P=[],b=[];for(let x=0;x<m.length;++x){const[T,E]=(0,a.max)([f[x],C[x],g[x]]);P.push([m[x],w[x],y[x]][E]),b.push(T)}return{generated_text:P,scores:b,char_preds:m,bpe_preds:w,wp_preds:y}}static async from_pretrained(...d){const c=await super.from_pretrained(...d),p=await s.AutoTokenizer.from_pretrained("Xenova/gpt2"),m=await s.AutoTokenizer.from_pretrained("Xenova/bert-base-uncased");return c.components={image_processor:c.image_processor,char_tokenizer:c.tokenizer,bpe_tokenizer:p,wp_tokenizer:m},c}async _call(d,c=null){const p=await this.image_processor(d);return c&&(p.labels=this.tokenizer(c).input_ids),p}}ie(l,"tokenizer_class",s.AutoTokenizer),ie(l,"image_processor_class",i.AutoImageProcessor)},"./src/models/mobilenet_v1/image_processing_mobilenet_v1.js":(e,t,r)=>{r.r(t),r.d(t,{MobileNetV1FeatureExtractor:()=>s,MobileNetV1ImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}class s extends i{}},"./src/models/mobilenet_v2/image_processing_mobilenet_v2.js":(e,t,r)=>{r.r(t),r.d(t,{MobileNetV2FeatureExtractor:()=>s,MobileNetV2ImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}class s extends i{}},"./src/models/mobilenet_v3/image_processing_mobilenet_v3.js":(e,t,r)=>{r.r(t),r.d(t,{MobileNetV3FeatureExtractor:()=>s,MobileNetV3ImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}class s extends i{}},"./src/models/mobilenet_v4/image_processing_mobilenet_v4.js":(e,t,r)=>{r.r(t),r.d(t,{MobileNetV4FeatureExtractor:()=>s,MobileNetV4ImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}class s extends i{}},"./src/models/mobilevit/image_processing_mobilevit.js":(e,t,r)=>{r.r(t),r.d(t,{MobileViTFeatureExtractor:()=>s,MobileViTImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}class s extends i{}},"./src/models/moonshine/feature_extraction_moonshine.js":(e,t,r)=>{r.r(t),r.d(t,{MoonshineFeatureExtractor:()=>s});var n=r("./src/base/feature_extraction_utils.js"),i=r("./src/utils/tensor.js");class s extends n.FeatureExtractor{async _call(o){(0,n.validate_audio_inputs)(o,"MoonshineFeatureExtractor"),o instanceof Float64Array&&(o=new Float32Array(o));const l=[1,o.length];return{input_values:new i.Tensor("float32",o,l)}}}},"./src/models/moonshine/processing_moonshine.js":(e,t,r)=>{r.r(t),r.d(t,{MoonshineProcessor:()=>a});var n=r("./src/models/auto/feature_extraction_auto.js"),i=r("./src/tokenizers.js"),s=r("./src/base/processing_utils.js");class a extends s.Processor{async _call(l){return await this.feature_extractor(l)}}ie(a,"tokenizer_class",i.AutoTokenizer),ie(a,"feature_extractor_class",n.AutoFeatureExtractor)},"./src/models/nougat/image_processing_nougat.js":(e,t,r)=>{r.r(t),r.d(t,{NougatImageProcessor:()=>i});var n=r("./src/models/donut/image_processing_donut.js");class i extends n.DonutImageProcessor{}},"./src/models/owlv2/image_processing_owlv2.js":(e,t,r)=>{r.r(t),r.d(t,{Owlv2ImageProcessor:()=>i});var n=r("./src/models/owlvit/image_processing_owlvit.js");class i extends n.OwlViTImageProcessor{}},"./src/models/owlvit/image_processing_owlvit.js":(e,t,r)=>{r.r(t),r.d(t,{OwlViTFeatureExtractor:()=>s,OwlViTImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{post_process_object_detection(...o){return(0,n.post_process_object_detection)(...o)}}class s extends i{}},"./src/models/owlvit/processing_owlvit.js":(e,t,r)=>{r.r(t),r.d(t,{OwlViTProcessor:()=>a});var n=r("./src/base/processing_utils.js"),i=r("./src/models/auto/image_processing_auto.js"),s=r("./src/tokenizers.js");class a extends n.Processor{}ie(a,"tokenizer_class",s.AutoTokenizer),ie(a,"image_processor_class",i.AutoImageProcessor)},"./src/models/paligemma/processing_paligemma.js":(e,t,r)=>{r.r(t),r.d(t,{PaliGemmaProcessor:()=>l});var n=r("./src/base/processing_utils.js"),i=r("./src/models/auto/image_processing_auto.js"),s=r("./src/tokenizers.js");const a="<image>";function o(u,d,c,p,m){return`${p.repeat(c*m)}${d}${u}
`}class l extends n.Processor{async _call(d,c=null,p={}){c||(console.warn("You are using PaliGemma without a text prefix. It will perform as a picture-captioning model."),c=""),Array.isArray(d)||(d=[d]),Array.isArray(c)||(c=[c]);const m=this.tokenizer.bos_token,f=this.image_processor.config.image_seq_length;let w;c.some(g=>g.includes(a))?w=c.map(g=>{const P=g.replaceAll(a,a.repeat(f)),b=P.lastIndexOf(a),x=b===-1?0:b+a.length;return P.slice(0,x)+m+P.slice(x)+`
`}):(console.warn("You are passing both `text` and `images` to `PaliGemmaProcessor`. The processor expects special image tokens in the text, as many tokens as there are images per each text. It is recommended to add `<image>` tokens in the very beginning of your text. For this call, we will infer how many images each text has and add special tokens."),w=c.map(g=>o(g,m,f,a,d.length)));const C=this.tokenizer(w,p);return{...await this.image_processor(d,p),...C}}}ie(l,"tokenizer_class",s.AutoTokenizer),ie(l,"image_processor_class",i.AutoImageProcessor),ie(l,"uses_processor_config",!1)},"./src/models/phi3_v/image_processing_phi3_v.js":(e,t,r)=>{r.r(t),r.d(t,{Phi3VImageProcessor:()=>d});var n=r("./src/base/image_processors_utils.js"),i=r("./src/utils/tensor.js");const s=336,a=[2,3],{ceil:o,floor:l,sqrt:u}=Math;class d extends n.ImageProcessor{constructor(p){super({...p,do_normalize:!0,do_pad:!0,pad_size:"custom",do_convert_rgb:!0,do_resize:!0}),this._num_crops=p.num_crops}calc_num_image_tokens_from_image_size(p,m){const{num_img_tokens:f}=this.config;return l((l(m/s)*l(p/s)+1)*f+1+(l(m/s)+1)*u(f))}get_resize_output_image_size(p,m){const f=this._num_crops,[w,C]=p.size;let y=w/C,g=1;for(;g*Math.ceil(g/y)<=f;)g+=1;g-=1;const P=Math.floor(g*336),b=Math.floor(P/y);return[P,b]}pad_image(p,m,f,w={}){const[C,y]=m,g=s*o(C/s),P=s*o(y/s),b=[1,1,1].map((x,T)=>(x-this.image_mean[T])/this.image_std[T]);return super.pad_image(p,m,{width:P,height:g},{center:!0,constant_values:b,...w})}async _call(p,{num_crops:m=null}={}){if(this._num_crops=m??(m=this.config.num_crops),m<4||u(m)%1!==0)throw new Error("num_crops must be a square number >= 4");Array.isArray(p)||(p=[p]);const f=p.length,w=await Promise.all(p.map(E=>this.preprocess(E))),C=w.map(E=>E.original_size),y=w.map(E=>E.reshaped_input_size),g=[];for(const{pixel_values:E}of w){E.unsqueeze_(0);const[S,O]=E.dims.slice(-2),B=await(0,i.interpolate_4d)(E,{size:[s,s],mode:"bicubic"});if(m>0){const V=[],W=u(m),N=l(O/W),te=l(S/W);for(let K=0;K<W;++K)for(let Y=0;Y<W;++Y){let Z,de,pe,L;K===W-1?(de=S-te,L=S):(de=K*te,L=(K+1)*te),Y===W-1?(Z=O-N,pe=O):(Z=Y*N,pe=(Y+1)*N);const F=[de,Z],U=[L,pe],re=await(0,i.slice)(E,F,U,a);V.push(re)}const q=await(0,i.interpolate_4d)((0,i.cat)(V,0),{size:[s,s],mode:"bicubic"});g.push((0,i.cat)([B,q],0))}else g.push(B)}const P=(0,i.stack)(g,0),b=y.map(E=>E.map(S=>s*o(S/s))),x=new i.Tensor("int64",b.flat(),[f,2]),T=b.map(([E,S])=>this.calc_num_image_tokens_from_image_size(S,E));return{pixel_values:P,original_sizes:C,reshaped_input_sizes:y,image_sizes:x,num_img_tokens:T}}}},"./src/models/phi3_v/processing_phi3_v.js":(e,t,r)=>{r.r(t),r.d(t,{Phi3VProcessor:()=>l});var n=r("./src/base/processing_utils.js"),i=r("./src/models/auto/image_processing_auto.js"),s=r("./src/tokenizers.js");r("./src/utils/image.js");const a="<|image|>",o=/<\|image_\d+\|>/g;class l extends n.Processor{async _call(d,c=null,{padding:p=!0,truncation:m=!0,num_crops:f=null}={}){Array.isArray(d)||(d=[d]);let w,C;if(c){C=await this.image_processor(c,{num_crops:f});const{num_img_tokens:y}=C,g=d.map((b,x)=>b.split(o).join(a.repeat(y[x])));w=this.tokenizer(g,{padding:p,truncation:m});const P=this.tokenizer.model.convert_tokens_to_ids([a])[0];w.input_ids.map_(b=>b==P?-b:b)}else w=this.tokenizer(d);return{...w,...C}}}ie(l,"image_processor_class",i.AutoImageProcessor),ie(l,"tokenizer_class",s.AutoTokenizer)},"./src/models/processors.js":(e,t,r)=>{r.r(t),r.d(t,{Florence2Processor:()=>n.Florence2Processor,Gemma3nProcessor:()=>i.Gemma3nProcessor,GroundingDinoProcessor:()=>s.GroundingDinoProcessor,Idefics3Processor:()=>a.Idefics3Processor,JinaCLIPProcessor:()=>l.JinaCLIPProcessor,LlavaProcessor:()=>u.LlavaProcessor,MgpstrProcessor:()=>d.MgpstrProcessor,MoonshineProcessor:()=>c.MoonshineProcessor,OwlViTProcessor:()=>p.OwlViTProcessor,PaliGemmaProcessor:()=>f.PaliGemmaProcessor,Phi3VProcessor:()=>m.Phi3VProcessor,PyAnnoteProcessor:()=>w.PyAnnoteProcessor,Qwen2VLProcessor:()=>C.Qwen2VLProcessor,SamProcessor:()=>y.SamProcessor,SmolVLMProcessor:()=>g.SmolVLMProcessor,SpeechT5Processor:()=>P.SpeechT5Processor,UltravoxProcessor:()=>b.UltravoxProcessor,VLChatProcessor:()=>o.VLChatProcessor,VoxtralProcessor:()=>x.VoxtralProcessor,Wav2Vec2Processor:()=>T.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>E.Wav2Vec2ProcessorWithLM,WhisperProcessor:()=>S.WhisperProcessor});var n=r("./src/models/florence2/processing_florence2.js"),i=r("./src/models/gemma3n/processing_gemma3n.js"),s=r("./src/models/grounding_dino/processing_grounding_dino.js"),a=r("./src/models/idefics3/processing_idefics3.js"),o=r("./src/models/janus/processing_janus.js"),l=r("./src/models/jina_clip/processing_jina_clip.js"),u=r("./src/models/llava/processing_llava.js"),d=r("./src/models/mgp_str/processing_mgp_str.js"),c=r("./src/models/moonshine/processing_moonshine.js"),p=r("./src/models/owlvit/processing_owlvit.js"),m=r("./src/models/phi3_v/processing_phi3_v.js"),f=r("./src/models/paligemma/processing_paligemma.js"),w=r("./src/models/pyannote/processing_pyannote.js"),C=r("./src/models/qwen2_vl/processing_qwen2_vl.js"),y=r("./src/models/sam/processing_sam.js"),g=r("./src/models/smolvlm/processing_smolvlm.js"),P=r("./src/models/speecht5/processing_speecht5.js"),b=r("./src/models/ultravox/processing_ultravox.js"),x=r("./src/models/voxtral/processing_voxtral.js"),T=r("./src/models/wav2vec2/processing_wav2vec2.js"),E=r("./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js"),S=r("./src/models/whisper/processing_whisper.js")},"./src/models/pvt/image_processing_pvt.js":(e,t,r)=>{r.r(t),r.d(t,{PvtImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}},"./src/models/pyannote/feature_extraction_pyannote.js":(e,t,r)=>{r.r(t),r.d(t,{PyAnnoteFeatureExtractor:()=>a});var n=r("./src/base/feature_extraction_utils.js"),i=r("./src/utils/tensor.js"),s=r("./src/utils/maths.js");class a extends n.FeatureExtractor{async _call(l){(0,n.validate_audio_inputs)(l,"PyAnnoteFeatureExtractor"),l instanceof Float64Array&&(l=new Float32Array(l));const u=[1,1,l.length];return{input_values:new i.Tensor("float32",l,u)}}samples_to_frames(l){return(l-this.config.offset)/this.config.step}post_process_speaker_diarization(l,u){const d=u/this.samples_to_frames(u)/this.config.sampling_rate,c=[];for(const p of l.tolist()){const m=[];let f=-1;for(let w=0;w<p.length;++w){const C=(0,s.softmax)(p[w]),[y,g]=(0,s.max)(C),[P,b]=[w,w+1];g!==f?(f=g,m.push({id:g,start:P,end:b,score:y})):(m.at(-1).end=b,m.at(-1).score+=y)}c.push(m.map(({id:w,start:C,end:y,score:g})=>({id:w,start:C*d,end:y*d,confidence:g/(y-C)})))}return c}}},"./src/models/pyannote/processing_pyannote.js":(e,t,r)=>{r.r(t),r.d(t,{PyAnnoteProcessor:()=>s});var n=r("./src/base/processing_utils.js"),i=r("./src/models/pyannote/feature_extraction_pyannote.js");class s extends n.Processor{async _call(o){return await this.feature_extractor(o)}post_process_speaker_diarization(...o){return this.feature_extractor.post_process_speaker_diarization(...o)}get sampling_rate(){return this.feature_extractor.config.sampling_rate}}ie(s,"feature_extractor_class",i.PyAnnoteFeatureExtractor)},"./src/models/qwen2_vl/image_processing_qwen2_vl.js":(e,t,r)=>{r.r(t),r.d(t,{Qwen2VLImageProcessor:()=>s});var n=r("./src/base/image_processors_utils.js"),i=r("./src/utils/tensor.js");class s extends n.ImageProcessor{async _call(o,...l){const{pixel_values:u,original_sizes:d,reshaped_input_sizes:c}=await super._call(o,...l);let p=u;const{temporal_patch_size:m,merge_size:f,patch_size:w}=this.config;p.dims[0]===1&&(p=(0,i.cat)(Array.from({length:m},()=>p),0));const C=p.dims[0]/m,y=p.dims[1],g=Math.floor(p.dims[2]/w),P=Math.floor(p.dims[3]/w),b=p.view(C,m,y,Math.floor(g/f),f,w,Math.floor(P/f),f,w).permute(0,3,6,4,7,2,1,5,8).view(C*g*P,y*m*w*w),x=new i.Tensor("int64",[C,g,P],[1,3]);return{pixel_values:b,image_grid_thw:x,original_sizes:d,reshaped_input_sizes:c}}}},"./src/models/qwen2_vl/processing_qwen2_vl.js":(e,t,r)=>{r.r(t),r.d(t,{Qwen2VLProcessor:()=>a});var n=r("./src/base/processing_utils.js"),i=r("./src/models/auto/image_processing_auto.js"),s=r("./src/tokenizers.js");r("./src/utils/image.js");class a extends n.Processor{async _call(l,u=null,...d){Array.isArray(l)||(l=[l]);let c,p;if(u&&(c=await this.image_processor(u),p=c.image_grid_thw),p){let f=this.image_processor.config.merge_size**2,w=0;const C=p.tolist();l=l.map(y=>{for(;y.includes("<|image_pad|>");){const g=Number(C[w++].reduce((P,b)=>P*b,1n));y=y.replace("<|image_pad|>","<|placeholder|>".repeat(Math.floor(g/f)))}return y.replaceAll("<|placeholder|>","<|image_pad|>")})}return{...this.tokenizer(l),...c}}}ie(a,"image_processor_class",i.AutoImageProcessor),ie(a,"tokenizer_class",s.AutoTokenizer)},"./src/models/rt_detr/image_processing_rt_detr.js":(e,t,r)=>{r.r(t),r.d(t,{RTDetrImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{post_process_object_detection(...a){return(0,n.post_process_object_detection)(...a)}}},"./src/models/sam/image_processing_sam.js":(e,t,r)=>{r.r(t),r.d(t,{SamImageProcessor:()=>a});var n=r("./src/base/image_processors_utils.js"),i=r("./src/utils/core.js"),s=r("./src/utils/tensor.js");class a extends n.ImageProcessor{reshape_input_points(l,u,d,c=!1){l=structuredClone(l);let p=(0,i.calculateDimensions)(l);if(p.length===3)c||(p=[1,...p]),l=[l];else if(p.length!==4)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let m=0;m<l.length;++m){let f=u[m],w=d[m],C=[w[0]/f[0],w[1]/f[1]];for(let y=0;y<l[m].length;++y)for(let g=0;g<l[m][y].length;++g)for(let P=0;P<l[m][y][g].length;++P)l[m][y][g][P]*=C[P%2]}return new s.Tensor("float32",Float32Array.from(l.flat(1/0)),p)}add_input_labels(l,u){let d=(0,i.calculateDimensions)(l);if(d.length===2)d=[1,...d],l=[l];else if(d.length!==3)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(d.some((c,p)=>c!==u.dims[p]))throw Error(`The first ${d.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new s.Tensor("int64",l.flat(1/0).map(BigInt),d)}async _call(l,{input_points:u=null,input_labels:d=null,input_boxes:c=null}={}){const p=await super._call(l);if(u&&(p.input_points=this.reshape_input_points(u,p.original_sizes,p.reshaped_input_sizes)),d){if(!p.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");p.input_labels=this.add_input_labels(d,p.input_points)}return c&&(p.input_boxes=this.reshape_input_points(c,p.original_sizes,p.reshaped_input_sizes,!0)),p}async post_process_masks(l,u,d,{mask_threshold:c=0,binarize:p=!0,pad_size:m=null}={}){const f=[];m=m??this.pad_size;const w=[m.height,m.width];for(let C=0;C<u.length;++C){const y=u[C],g=d[C];let P=await(0,s.interpolate_4d)(l[C],{mode:"bilinear",size:w});if(P=P.slice(null,null,[0,g[0]],[0,g[1]]),P=await(0,s.interpolate_4d)(P,{mode:"bilinear",size:y}),p){const b=P.data,x=new Uint8Array(b.length);for(let T=0;T<b.length;++T)b[T]>c&&(x[T]=1);P=new s.Tensor("bool",x,P.dims)}f.push(P)}return f}generate_crop_boxes(l,u,{crop_n_layers:d=0,overlap_ratio:c=512/1500,points_per_crop:p=32,crop_n_points_downscale_factor:m=1}={}){}}},"./src/models/sam/processing_sam.js":(e,t,r)=>{r.r(t),r.d(t,{SamProcessor:()=>s});var n=r("./src/base/processing_utils.js"),i=r("./src/models/auto/image_processing_auto.js");class s extends n.Processor{async _call(...o){return await this.image_processor(...o)}post_process_masks(...o){return this.image_processor.post_process_masks(...o)}reshape_input_points(...o){return this.image_processor.reshape_input_points(...o)}}ie(s,"image_processor_class",i.AutoImageProcessor)},"./src/models/seamless_m4t/feature_extraction_seamless_m4t.js":(e,t,r)=>{r.r(t),r.d(t,{SeamlessM4TFeatureExtractor:()=>a});var n=r("./src/base/feature_extraction_utils.js"),i=r("./src/utils/tensor.js"),s=r("./src/utils/audio.js");class a extends n.FeatureExtractor{constructor(l){super(l);const u=this.config.sampling_rate,d=(0,s.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(u/2),u,null,"kaldi",!0);this.mel_filters=d,this.window=(0,s.window_function)(400,"povey",{periodic:!1})}async _extract_fbank_features(l,u){return l=l.map(d=>d*32768),(0,s.spectrogram)(l,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:u,transpose:!0})}async _call(l,{padding:u=!0,pad_to_multiple_of:d=2,do_normalize_per_mel_bins:c=!0,return_attention_mask:p=!0}={}){(0,n.validate_audio_inputs)(l,"SeamlessM4TFeatureExtractor");let m=await this._extract_fbank_features(l,this.config.max_length);if(c){const[x,T]=m.dims,E=m.data;for(let S=0;S<T;++S){let O=0;for(let N=0;N<x;++N)O+=E[N*T+S];const B=O/x;let V=0;for(let N=0;N<x;++N)V+=(E[N*T+S]-B)**2;V/=x-1;const W=Math.sqrt(V+1e-7);for(let N=0;N<x;++N){const te=N*T+S;E[te]=(E[te]-B)/W}}}let f;if(u){const[x,T]=m.dims,E=m.data,S=x%d;if(S>0){const O=new Float32Array(T*(x+S));O.set(E),O.fill(this.config.padding_value,E.length);const B=x+S;m=new i.Tensor(m.type,O,[B,T]),p&&(f=new i.Tensor("int64",new BigInt64Array(B),[1,B]),f.data.fill(1n,0,x))}}const[w,C]=m.dims,y=this.config.stride;if(w%y!==0)throw new Error(`The number of frames (${w}) must be a multiple of the stride (${y}).`);const P=m.view(1,Math.floor(w/y),C*y),b={input_features:P};if(p){const x=P.dims[1],T=new BigInt64Array(x);if(f){const E=f.data;for(let S=1,O=0;S<w;S+=y,++O)T[O]=E[S]}else T.fill(1n);b.attention_mask=new i.Tensor("int64",T,[1,x])}return b}}},"./src/models/segformer/image_processing_segformer.js":(e,t,r)=>{r.r(t),r.d(t,{SegformerFeatureExtractor:()=>s,SegformerImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{post_process_semantic_segmentation(...o){return(0,n.post_process_semantic_segmentation)(...o)}}class s extends i{}},"./src/models/siglip/image_processing_siglip.js":(e,t,r)=>{r.r(t),r.d(t,{SiglipImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}},"./src/models/smolvlm/image_processing_smolvlm.js":(e,t,r)=>{r.r(t),r.d(t,{SmolVLMImageProcessor:()=>n.Idefics3ImageProcessor});var n=r("./src/models/idefics3/image_processing_idefics3.js")},"./src/models/smolvlm/processing_smolvlm.js":(e,t,r)=>{r.r(t),r.d(t,{SmolVLMProcessor:()=>n.Idefics3Processor});var n=r("./src/models/idefics3/processing_idefics3.js")},"./src/models/snac/feature_extraction_snac.js":(e,t,r)=>{r.r(t),r.d(t,{SnacFeatureExtractor:()=>i});var n=r("./src/models/dac/feature_extraction_dac.js");class i extends n.DacFeatureExtractor{}},"./src/models/speecht5/feature_extraction_speecht5.js":(e,t,r)=>{r.r(t),r.d(t,{SpeechT5FeatureExtractor:()=>i});var n=r("./src/base/feature_extraction_utils.js");class i extends n.FeatureExtractor{}},"./src/models/speecht5/processing_speecht5.js":(e,t,r)=>{r.r(t),r.d(t,{SpeechT5Processor:()=>a});var n=r("./src/base/processing_utils.js"),i=r("./src/tokenizers.js"),s=r("./src/models/auto/feature_extraction_auto.js");class a extends n.Processor{async _call(l){return await this.feature_extractor(l)}}ie(a,"tokenizer_class",i.AutoTokenizer),ie(a,"feature_extractor_class",s.AutoFeatureExtractor)},"./src/models/swin2sr/image_processing_swin2sr.js":(e,t,r)=>{r.r(t),r.d(t,{Swin2SRImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{pad_image(a,o,l,u={}){const[d,c,p]=o;return super.pad_image(a,o,{width:c+(l-c%l)%l,height:d+(l-d%l)%l},{mode:"symmetric",center:!1,constant_values:-1,...u})}}},"./src/models/ultravox/processing_ultravox.js":(e,t,r)=>{r.r(t),r.d(t,{UltravoxProcessor:()=>a});var n=r("./src/models/auto/feature_extraction_auto.js"),i=r("./src/tokenizers.js"),s=r("./src/base/processing_utils.js");class a extends s.Processor{async _call(l,u=null,d={}){if(Array.isArray(l))throw new Error("Batched inputs are not supported yet.");let c={};if(u){const m=u.length,{input_features:f}=await this.feature_extractor(u,{...d,max_length:m}),w=Math.round(m/this.config.encoder_ds_factor+1e-4),C=1+Math.ceil(w/this.config.stack_factor);c.audio_token_len=[C],c.audio_values=f;const y=this.config.audio_placeholder;if(!l.includes(y))throw new Error(`The input text does not contain the image token ${y}.`);l=l.replaceAll(y,y.repeat(C))}return{...this.tokenizer(l,{add_special_tokens:!1,...d}),...c}}}ie(a,"tokenizer_class",i.AutoTokenizer),ie(a,"feature_extractor_class",n.AutoFeatureExtractor),ie(a,"uses_processor_config",!0)},"./src/models/vit/image_processing_vit.js":(e,t,r)=>{r.r(t),r.d(t,{ViTFeatureExtractor:()=>s,ViTImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{}class s extends i{}},"./src/models/vitmatte/image_processing_vitmatte.js":(e,t,r)=>{r.r(t),r.d(t,{VitMatteImageProcessor:()=>s});var n=r("./src/base/image_processors_utils.js"),i=r("./src/utils/tensor.js");class s extends n.ImageProcessor{async _call(o,l){Array.isArray(o)||(o=[o]),Array.isArray(l)||(l=[l]);const u=await Promise.all(o.map(p=>this.preprocess(p))),d=await Promise.all(l.map(p=>this.preprocess(p,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0})));return{pixel_values:(0,i.stack)(u.map((p,m)=>(0,i.cat)([p.pixel_values,d[m].pixel_values],0)),0),original_sizes:u.map(p=>p.original_size),reshaped_input_sizes:u.map(p=>p.reshaped_input_size)}}}},"./src/models/vitpose/image_processing_vitpose.js":(e,t,r)=>{r.r(t),r.d(t,{VitPoseImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{post_process_pose_estimation(a,o,{threshold:l=null}={}){const u=a.tolist(),[d,c,p,m]=a.dims,f=[];for(let w=0;w<d;++w){const C=u[w],y=o[w],g=[];for(let P=0;P<y.length;++P){const b=y[P],x=[],T=[],E=[],S=b.at(-2)/m,O=b.at(-1)/p;for(let B=0;B<C.length;++B){let[V,W]=[0,0],N=0,te=-1/0;const q=C[B];for(let Y=0;Y<q.length;++Y){const Z=q[Y];for(let de=0;de<Z.length;++de){const pe=Z[de];N+=pe,te=Math.max(te,pe),V+=(de+.5)*pe,W+=Y*pe}}if(l!=null&&te<l)continue;const K=[S*V/N,O*W/N];x.push(K),E.push(B),T.push(te)}g.push({bbox:b,scores:T,labels:E,keypoints:x})}f.push(g)}return f}}},"./src/models/voxtral/processing_voxtral.js":(e,t,r)=>{r.r(t),r.d(t,{VoxtralProcessor:()=>c});var n=r("./src/models/auto/feature_extraction_auto.js"),i=r("./src/tokenizers.js"),s=r("./src/base/processing_utils.js"),a=r("./src/utils/tensor.js");const o="[AUDIO]",l="[BEGIN_AUDIO]",u=375;function d(p,m){const f=[];for(let w=0;w<p.length;w+=m)f.push(p.subarray(w,Math.min(w+m,p.length)));return f}class c extends s.Processor{async _call(m,f=null,w={}){if(Array.isArray(m))throw new Error("Batched inputs are not supported yet.");const C={};if(f){if(!m.includes(o))throw new Error(`The input text does not contain the audio token ${o}.`);Array.isArray(f)||(f=[f]);const g=m.split(o),P=g.length-1;if(P!==f.length)throw new Error(`The number of audio inputs (${f.length}) does not match the number of audio tokens in the text (${P}).`);const b=this.feature_extractor.config.n_samples,x=f.map(B=>d(B,b)),T=x.map(B=>B.length),E=x.flat(),S=(await Promise.all(E.map(B=>this.feature_extractor(B,w)))).map(B=>B.input_features);C.audio_values=S.length>1?(0,a.cat)(S,0):S[0];let O=g[0];for(let B=0;B<T.length;++B){O+=l;for(let V=0;V<T[B];++V)O+=o.repeat(u);O+=g[B+1]}m=O}return{...this.tokenizer(m,{add_special_tokens:!1,...w}),...C}}}ie(c,"tokenizer_class",i.AutoTokenizer),ie(c,"feature_extractor_class",n.AutoFeatureExtractor),ie(c,"uses_processor_config",!1)},"./src/models/wav2vec2/feature_extraction_wav2vec2.js":(e,t,r)=>{r.r(t),r.d(t,{Wav2Vec2FeatureExtractor:()=>s});var n=r("./src/base/feature_extraction_utils.js"),i=r("./src/utils/tensor.js");class s extends n.FeatureExtractor{_zero_mean_unit_var_norm(o){const u=o.reduce((c,p)=>c+p,0)/o.length,d=o.reduce((c,p)=>c+(p-u)**2,0)/o.length;return o.map(c=>(c-u)/Math.sqrt(d+1e-7))}async _call(o){(0,n.validate_audio_inputs)(o,"Wav2Vec2FeatureExtractor"),o instanceof Float64Array&&(o=new Float32Array(o));let l=o;this.config.do_normalize&&(l=this._zero_mean_unit_var_norm(l));const u=[1,l.length];return{input_values:new i.Tensor("float32",l,u),attention_mask:new i.Tensor("int64",new BigInt64Array(l.length).fill(1n),u)}}}},"./src/models/wav2vec2/processing_wav2vec2.js":(e,t,r)=>{r.r(t),r.d(t,{Wav2Vec2Processor:()=>a});var n=r("./src/tokenizers.js"),i=r("./src/models/auto/feature_extraction_auto.js"),s=r("./src/base/processing_utils.js");class a extends s.Processor{async _call(l){return await this.feature_extractor(l)}}ie(a,"tokenizer_class",n.AutoTokenizer),ie(a,"feature_extractor_class",i.AutoFeatureExtractor)},"./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js":(e,t,r)=>{r.r(t),r.d(t,{Wav2Vec2ProcessorWithLM:()=>a});var n=r("./src/tokenizers.js"),i=r("./src/models/auto/feature_extraction_auto.js"),s=r("./src/base/processing_utils.js");class a extends s.Processor{async _call(l){return await this.feature_extractor(l)}}ie(a,"tokenizer_class",n.AutoTokenizer),ie(a,"feature_extractor_class",i.AutoFeatureExtractor)},"./src/models/wespeaker/feature_extraction_wespeaker.js":(e,t,r)=>{r.r(t),r.d(t,{WeSpeakerFeatureExtractor:()=>s});var n=r("./src/base/feature_extraction_utils.js");r("./src/utils/tensor.js");var i=r("./src/utils/audio.js");class s extends n.FeatureExtractor{constructor(o){super(o);const l=this.config.sampling_rate,u=(0,i.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(l/2),l,null,"kaldi",!0);this.mel_filters=u,this.window=(0,i.window_function)(400,"hamming",{periodic:!1}),this.min_num_frames=this.config.min_num_frames}async _extract_fbank_features(o){return o=o.map(l=>l*32768),(0,i.spectrogram)(o,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,transpose:!0,min_num_frames:this.min_num_frames})}async _call(o){(0,n.validate_audio_inputs)(o,"WeSpeakerFeatureExtractor");const l=(await this._extract_fbank_features(o)).unsqueeze_(0);if(this.config.fbank_centering_span===null){const u=l.mean(1).data,d=l.data,[c,p,m]=l.dims;for(let f=0;f<c;++f){const w=f*p*m,C=f*m;for(let y=0;y<p;++y){const g=w+y*m;for(let P=0;P<m;++P)d[g+P]-=u[C+P]}}}return{input_features:l}}}},"./src/models/whisper/common_whisper.js":(e,t,r)=>{r.r(t),r.d(t,{WHISPER_LANGUAGE_MAPPING:()=>i,WHISPER_TO_LANGUAGE_CODE_MAPPING:()=>s,whisper_language_to_code:()=>a});const n=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],i=new Map(n),s=new Map([...n.map(([o,l])=>[l,o]),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);function a(o){o=o.toLowerCase();let l=s.get(o);if(l===void 0){const u=o.match(/^<\|([a-z]{2})\|>$/);if(u&&(o=u[1]),i.has(o))l=o;else{const c=o.length===2?i.keys():i.values();throw new Error(`Language "${o}" is not supported. Must be one of: ${JSON.stringify(Array.from(c))}`)}}return l}},"./src/models/whisper/feature_extraction_whisper.js":(e,t,r)=>{r.r(t),r.d(t,{WhisperFeatureExtractor:()=>a});var n=r("./src/base/feature_extraction_utils.js");r("./src/utils/tensor.js");var i=r("./src/utils/audio.js"),s=r("./src/utils/maths.js");class a extends n.FeatureExtractor{constructor(l){var u;super(l),(u=this.config).mel_filters??(u.mel_filters=(0,i.mel_filter_bank)(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney")),this.window=(0,i.window_function)(this.config.n_fft,"hann")}async _extract_fbank_features(l){const u=await(0,i.spectrogram)(l,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:Math.min(Math.floor(l.length/this.config.hop_length),this.config.nb_max_frames)}),d=u.data,c=(0,s.max)(d)[0];for(let p=0;p<d.length;++p)d[p]=(Math.max(d[p],c-8)+4)/4;return u}async _call(l,{max_length:u=null}={}){(0,n.validate_audio_inputs)(l,"WhisperFeatureExtractor");let d;const c=u??this.config.n_samples;return l.length>c?(l.length>this.config.n_samples&&console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),d=l.slice(0,c)):(d=new Float32Array(c),d.set(l)),{input_features:(await this._extract_fbank_features(d)).unsqueeze_(0)}}}},"./src/models/whisper/generation_whisper.js":(e,t,r)=>{r.r(t),r.d(t,{WhisperGenerationConfig:()=>i});var n=r("./src/generation/configuration_utils.js");class i extends n.GenerationConfig{constructor(){super(...arguments);ie(this,"return_timestamps",null);ie(this,"return_token_timestamps",null);ie(this,"num_frames",null);ie(this,"alignment_heads",null);ie(this,"task",null);ie(this,"language",null);ie(this,"no_timestamps_token_id",null);ie(this,"prompt_ids",null);ie(this,"is_multilingual",null);ie(this,"lang_to_id",null);ie(this,"task_to_id",null);ie(this,"max_initial_timestamp_index",1)}}},"./src/models/whisper/processing_whisper.js":(e,t,r)=>{r.r(t),r.d(t,{WhisperProcessor:()=>a});var n=r("./src/models/auto/feature_extraction_auto.js"),i=r("./src/tokenizers.js"),s=r("./src/base/processing_utils.js");class a extends s.Processor{async _call(l){return await this.feature_extractor(l)}}ie(a,"tokenizer_class",i.AutoTokenizer),ie(a,"feature_extractor_class",n.AutoFeatureExtractor)},"./src/models/yolos/image_processing_yolos.js":(e,t,r)=>{r.r(t),r.d(t,{YolosFeatureExtractor:()=>s,YolosImageProcessor:()=>i});var n=r("./src/base/image_processors_utils.js");class i extends n.ImageProcessor{post_process_object_detection(...o){return(0,n.post_process_object_detection)(...o)}}class s extends i{}},"./src/ops/registry.js":(e,t,r)=>{r.r(t),r.d(t,{TensorOpRegistry:()=>l});var n=r("./src/backends/onnx.js"),i=r("./src/utils/tensor.js"),s=r("./src/env.js");const a=s.apis.IS_BROWSER_ENV||s.apis.IS_WEBWORKER_ENV,o=async(u,d,c)=>{const p=await(0,n.createInferenceSession)(new Uint8Array(u),d);let m=Promise.resolve();return async f=>{const w=(0,n.isONNXProxy)(),C=Object.fromEntries(Object.entries(f).map(([g,P])=>[g,(w?P.clone():P).ort_tensor])),y=await(m=a?m.then(()=>p.run(C)):p.run(C));return Array.isArray(c)?c.map(g=>new i.Tensor(y[g])):new i.Tensor(y[c])}};class l{static get nearest_interpolate_4d(){return this._nearest_interpolate_4d||(this._nearest_interpolate_4d=o([8,10,18,0,58,129,1,10,41,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,18,10,4,109,111,100,101,34,7,110,101,97,114,101,115,116,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,21],this.session_options,"y")),this._nearest_interpolate_4d}static get bilinear_interpolate_4d(){return this._bilinear_interpolate_4d||(this._bilinear_interpolate_4d=o([8,9,18,0,58,128,1,10,40,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,17,10,4,109,111,100,101,34,6,108,105,110,101,97,114,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bilinear_interpolate_4d}static get bicubic_interpolate_4d(){return this._bicubic_interpolate_4d||(this._bicubic_interpolate_4d=o([8,9,18,0,58,127,10,39,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,16,10,4,109,111,100,101,34,5,99,117,98,105,99,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bicubic_interpolate_4d}static get matmul(){return this._matmul||(this._matmul=o([8,9,18,0,58,55,10,17,10,1,97,10,1,98,18,1,99,34,6,77,97,116,77,117,108,18,1,114,90,9,10,1,97,18,4,10,2,8,1,90,9,10,1,98,18,4,10,2,8,1,98,9,10,1,99,18,4,10,2,8,1,66,2,16,20],this.session_options,"c")),this._matmul}static get stft(){return this._stft||(this._stft=o([8,7,18,0,58,148,1,10,38,10,1,115,10,1,106,10,1,119,10,1,108,18,1,111,34,4,83,84,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,115,90,26,10,1,115,18,21,10,19,8,1,18,15,10,3,18,1,98,10,3,18,1,115,10,3,18,1,99,90,11,10,1,106,18,6,10,4,8,7,18,0,90,16,10,1,119,18,11,10,9,8,1,18,5,10,3,18,1,119,90,11,10,1,108,18,6,10,4,8,7,18,0,98,31,10,1,111,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,102,10,3,18,1,100,10,3,18,1,99,66,2,16,17],this.session_options,"o")),this._stft}static get rfft(){return this._rfft||(this._rfft=o([8,9,18,0,58,97,10,33,10,1,120,10,0,10,1,97,18,1,121,34,3,68,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,100,90,21,10,1,120,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,90,11,10,1,97,18,6,10,4,8,7,18,0,98,21,10,1,121,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,66,2,16,20],this.session_options,"y")),this._rfft}static get top_k(){return this._top_k||(this._top_k=o([8,10,18,0,58,73,10,18,10,1,120,10,1,107,18,1,118,18,1,105,34,4,84,111,112,75,18,1,116,90,9,10,1,120,18,4,10,2,8,1,90,15,10,1,107,18,10,10,8,8,7,18,4,10,2,8,1,98,9,10,1,118,18,4,10,2,8,1,98,9,10,1,105,18,4,10,2,8,7,66,2,16,21],this.session_options,["v","i"])),this._top_k}static get slice(){return this._slice||(this._slice=o([8,7,18,0,58,96,10,25,10,1,120,10,1,115,10,1,101,10,1,97,10,1,116,18,1,121,34,5,83,108,105,99,101,18,1,114,90,9,10,1,120,18,4,10,2,8,1,90,9,10,1,115,18,4,10,2,8,7,90,9,10,1,101,18,4,10,2,8,7,90,9,10,1,97,18,4,10,2,8,7,90,9,10,1,116,18,4,10,2,8,7,98,9,10,1,121,18,4,10,2,8,1,66,2,16,13],this.session_options,"y")),this._slice}}ie(l,"session_options",{})},"./src/pipelines.js":(e,t,r)=>{r.r(t),r.d(t,{AudioClassificationPipeline:()=>W,AutomaticSpeechRecognitionPipeline:()=>te,BackgroundRemovalPipeline:()=>Z,DepthEstimationPipeline:()=>me,DocumentQuestionAnsweringPipeline:()=>F,FeatureExtractionPipeline:()=>B,FillMaskPipeline:()=>P,ImageClassificationPipeline:()=>K,ImageFeatureExtractionPipeline:()=>V,ImageSegmentationPipeline:()=>Y,ImageToImagePipeline:()=>re,ImageToTextPipeline:()=>q,ObjectDetectionPipeline:()=>pe,Pipeline:()=>w,QuestionAnsweringPipeline:()=>g,SummarizationPipeline:()=>x,Text2TextGenerationPipeline:()=>b,TextClassificationPipeline:()=>C,TextGenerationPipeline:()=>S,TextToAudioPipeline:()=>U,TokenClassificationPipeline:()=>y,TranslationPipeline:()=>T,ZeroShotAudioClassificationPipeline:()=>N,ZeroShotClassificationPipeline:()=>O,ZeroShotImageClassificationPipeline:()=>de,ZeroShotObjectDetectionPipeline:()=>L,pipeline:()=>je});var n=r("./src/tokenizers.js"),i=r("./src/models.js"),s=r("./src/models/auto/processing_auto.js");r("./src/base/processing_utils.js");var a=r("./src/utils/generic.js"),o=r("./src/utils/core.js"),l=r("./src/utils/maths.js"),u=r("./src/utils/audio.js"),d=r("./src/utils/tensor.js"),c=r("./src/utils/image.js");async function p(Ae){return Array.isArray(Ae)||(Ae=[Ae]),await Promise.all(Ae.map(ne=>c.RawImage.read(ne)))}async function m(Ae,ne){return Array.isArray(Ae)||(Ae=[Ae]),await Promise.all(Ae.map(oe=>typeof oe=="string"||oe instanceof URL?(0,u.read_audio)(oe,ne):oe instanceof Float64Array?new Float32Array(oe):oe))}function f(Ae,ne){ne&&(Ae=Ae.map(Se=>Se|0));const[oe,H,be,Oe]=Ae;return{xmin:oe,ymin:H,xmax:be,ymax:Oe}}class w extends a.Callable{constructor({task:ne,model:oe,tokenizer:H=null,processor:be=null}){super(),this.task=ne,this.model=oe,this.tokenizer=H,this.processor=be}async dispose(){await this.model.dispose()}}class C extends w{constructor(ne){super(ne)}async _call(ne,{top_k:oe=1}={}){const H=this.tokenizer(ne,{padding:!0,truncation:!0}),be=await this.model(H),Oe=this.model.config.problem_type==="multi_label_classification"?Ie=>Ie.sigmoid():Ie=>new d.Tensor("float32",(0,l.softmax)(Ie.data),Ie.dims),Se=this.model.config.id2label,Me=[];for(const Ie of be.logits){const $e=Oe(Ie),Le=await(0,d.topk)($e,oe),We=Le[0].tolist(),Ee=Le[1].tolist().map((it,Je)=>({label:Se?Se[it]:`LABEL_${it}`,score:We[Je]}));oe===1?Me.push(...Ee):Me.push(Ee)}return Array.isArray(ne)||oe===1?Me:Me[0]}}class y extends w{constructor(ne){super(ne)}async _call(ne,{ignore_labels:oe=["O"]}={}){const H=Array.isArray(ne),be=this.tokenizer(H?ne:[ne],{padding:!0,truncation:!0}),Se=(await this.model(be)).logits,Me=this.model.config.id2label,Ie=[];for(let $e=0;$e<Se.dims[0];++$e){const Le=be.input_ids[$e],We=Se[$e],tt=[];for(let Ee=0;Ee<We.dims[0];++Ee){const it=We[Ee],Je=(0,l.max)(it.data)[1],dt=Me?Me[Je]:`LABEL_${Je}`;if(oe.includes(dt))continue;const Ye=this.tokenizer.decode([Le[Ee].item()],{skip_special_tokens:!0});if(Ye==="")continue;const ze=(0,l.softmax)(it.data);tt.push({entity:dt,score:ze[Je],index:Ee,word:Ye})}Ie.push(tt)}return H?Ie:Ie[0]}}class g extends w{constructor(ne){super(ne)}async _call(ne,oe,{top_k:H=1}={}){const be=this.tokenizer(ne,{text_pair:oe,padding:!0,truncation:!0}),{start_logits:Oe,end_logits:Se}=await this.model(be),Me=be.input_ids.tolist(),Ie=be.attention_mask.tolist(),$e=this.tokenizer.all_special_ids,Le=[];for(let We=0;We<Oe.dims[0];++We){const tt=Me[We],Ee=tt.findIndex(rt=>rt==this.tokenizer.sep_token_id);Ie[We].map((rt,ct)=>rt==1&&(ct===0||ct>Ee&&$e.findIndex(Wt=>Wt==tt[ct])===-1));const it=Oe[We].tolist(),Je=Se[We].tolist();for(let rt=1;rt<it.length;++rt)(Ie[We]==0||rt<=Ee||$e.findIndex(ct=>ct==tt[rt])!==-1)&&(it[rt]=-1/0,Je[rt]=-1/0);const dt=(0,l.softmax)(it).map((rt,ct)=>[rt,ct]),Ye=(0,l.softmax)(Je).map((rt,ct)=>[rt,ct]);dt[0][0]=0,Ye[0][0]=0;const ze=(0,o.product)(dt,Ye).filter(rt=>rt[0][1]<=rt[1][1]).map(rt=>[rt[0][1],rt[1][1],rt[0][0]*rt[1][0]]).sort((rt,ct)=>ct[2]-rt[2]);for(let rt=0;rt<Math.min(ze.length,H);++rt){const[ct,Wt,It]=ze[rt],Tt=tt.slice(ct,Wt+1),Ur=this.tokenizer.decode(Tt,{skip_special_tokens:!0});Le.push({answer:Ur,score:It})}}return H===1?Le[0]:Le}}class P extends w{constructor(ne){super(ne)}async _call(ne,{top_k:oe=5}={}){const H=this.tokenizer(ne,{padding:!0,truncation:!0}),{logits:be}=await this.model(H),Oe=[],Se=H.input_ids.tolist();for(let Me=0;Me<Se.length;++Me){const Ie=Se[Me],$e=Ie.findIndex(it=>it==this.tokenizer.mask_token_id);if($e===-1)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const Le=be[Me][$e],We=await(0,d.topk)(new d.Tensor("float32",(0,l.softmax)(Le.data),Le.dims),oe),tt=We[0].tolist(),Ee=We[1].tolist();Oe.push(Ee.map((it,Je)=>{const dt=Ie.slice();return dt[$e]=it,{score:tt[Je],token:Number(it),token_str:this.tokenizer.decode([it]),sequence:this.tokenizer.decode(dt,{skip_special_tokens:!0})}}))}return Array.isArray(ne)?Oe:Oe[0]}}class b extends w{constructor(oe){super(oe);ie(this,"_key","generated_text")}async _call(oe,H={}){Array.isArray(oe)||(oe=[oe]),this.model.config.prefix&&(oe=oe.map($e=>this.model.config.prefix+$e));const be=this.model.config.task_specific_params;be&&be[this.task]&&be[this.task].prefix&&(oe=oe.map($e=>be[this.task].prefix+$e));const Oe=this.tokenizer,Se={padding:!0,truncation:!0};let Me;this instanceof T&&"_build_translation_inputs"in Oe?Me=Oe._build_translation_inputs(oe,Se,H):Me=Oe(oe,Se);const Ie=await this.model.generate({...Me,...H});return Oe.batch_decode(Ie,{skip_special_tokens:!0}).map($e=>({[this._key]:$e}))}}class x extends b{constructor(oe){super(oe);ie(this,"_key","summary_text")}}class T extends b{constructor(oe){super(oe);ie(this,"_key","translation_text")}}function E(Ae){return Array.isArray(Ae)&&Ae.every(ne=>"role"in ne&&"content"in ne)}class S extends w{constructor(ne){super(ne)}async _call(ne,oe={}){let H=!1,be=!1,Oe=oe.add_special_tokens??(this.tokenizer.add_bos_token||this.tokenizer.add_eos_token)??!1,Se;if(typeof ne=="string")Se=ne=[ne];else if(Array.isArray(ne)&&ne.every(Ee=>typeof Ee=="string"))H=!0,Se=ne;else{if(E(ne))ne=[ne];else if(Array.isArray(ne)&&ne.every(E))H=!0;else throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");be=!0,Se=ne.map(Ee=>this.tokenizer.apply_chat_template(Ee,{tokenize:!1,add_generation_prompt:!0})),Oe=!1}const Me=be?!1:oe.return_full_text??!0;this.tokenizer.padding_side="left";const Ie=this.tokenizer(Se,{add_special_tokens:Oe,padding:!0,truncation:!0}),$e=await this.model.generate({...Ie,...oe}),Le=this.tokenizer.batch_decode($e,{skip_special_tokens:!0});let We;!Me&&Ie.input_ids.dims.at(-1)>0&&(We=this.tokenizer.batch_decode(Ie.input_ids,{skip_special_tokens:!0}).map(Ee=>Ee.length));const tt=Array.from({length:ne.length},Ee=>[]);for(let Ee=0;Ee<Le.length;++Ee){const it=Math.floor(Ee/$e.dims[0]*ne.length);We&&(Le[Ee]=Le[Ee].slice(We[it])),tt[it].push({generated_text:be?[...ne[it],{role:"assistant",content:Le[Ee]}]:Le[Ee]})}return!H&&tt.length===1?tt[0]:tt}}class O extends w{constructor(ne){super(ne),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map(([oe,H])=>[oe.toLowerCase(),H])),this.entailment_id=this.label2id.entailment,this.entailment_id===void 0&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,this.contradiction_id===void 0&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(ne,oe,{hypothesis_template:H="This example is {}.",multi_label:be=!1}={}){const Oe=Array.isArray(ne);Oe||(ne=[ne]),Array.isArray(oe)||(oe=[oe]);const Se=oe.map($e=>H.replace("{}",$e)),Me=be||oe.length===1,Ie=[];for(const $e of ne){const Le=[];for(const Ee of Se){const it=this.tokenizer($e,{text_pair:Ee,padding:!0,truncation:!0}),Je=await this.model(it);Me?Le.push([Je.logits.data[this.contradiction_id],Je.logits.data[this.entailment_id]]):Le.push(Je.logits.data[this.entailment_id])}const tt=(Me?Le.map(Ee=>(0,l.softmax)(Ee)[1]):(0,l.softmax)(Le)).map((Ee,it)=>[Ee,it]).sort((Ee,it)=>it[0]-Ee[0]);Ie.push({sequence:$e,labels:tt.map(Ee=>oe[Ee[1]]),scores:tt.map(Ee=>Ee[0])})}return Oe?Ie:Ie[0]}}class B extends w{constructor(ne){super(ne)}async _call(ne,{pooling:oe="none",normalize:H=!1,quantize:be=!1,precision:Oe="binary"}={}){const Se=this.tokenizer(ne,{padding:!0,truncation:!0}),Me=await this.model(Se);let Ie=Me.last_hidden_state??Me.logits??Me.token_embeddings;switch(oe){case"none":break;case"mean":Ie=(0,d.mean_pooling)(Ie,Se.attention_mask);break;case"first_token":case"cls":Ie=Ie.slice(null,0);break;case"last_token":case"eos":Ie=Ie.slice(null,-1);break;default:throw Error(`Pooling method '${oe}' not supported.`)}return H&&(Ie=Ie.normalize(2,-1)),be&&(Ie=(0,d.quantize_embeddings)(Ie,Oe)),Ie}}class V extends w{constructor(ne){super(ne)}async _call(ne,{pool:oe=null}={}){const H=await p(ne),{pixel_values:be}=await this.processor(H),Oe=await this.model({pixel_values:be});let Se;if(oe){if(!("pooler_output"in Oe))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");Se=Oe.pooler_output}else Se=Oe.last_hidden_state??Oe.logits??Oe.image_embeds;return Se}}class W extends w{constructor(ne){super(ne)}async _call(ne,{top_k:oe=5}={}){const H=this.processor.feature_extractor.config.sampling_rate,be=await m(ne,H),Oe=this.model.config.id2label,Se=[];for(const Me of be){const Ie=await this.processor(Me),Le=(await this.model(Ie)).logits[0],We=await(0,d.topk)(new d.Tensor("float32",(0,l.softmax)(Le.data),Le.dims),oe),tt=We[0].tolist(),it=We[1].tolist().map((Je,dt)=>({label:Oe?Oe[Je]:`LABEL_${Je}`,score:tt[dt]}));Se.push(it)}return Array.isArray(ne)?Se:Se[0]}}class N extends w{constructor(ne){super(ne)}async _call(ne,oe,{hypothesis_template:H="This is a sound of {}."}={}){const be=!Array.isArray(ne);be&&(ne=[ne]);const Oe=oe.map(Le=>H.replace("{}",Le)),Se=this.tokenizer(Oe,{padding:!0,truncation:!0}),Me=this.processor.feature_extractor.config.sampling_rate,Ie=await m(ne,Me),$e=[];for(const Le of Ie){const We=await this.processor(Le),tt=await this.model({...Se,...We}),Ee=(0,l.softmax)(tt.logits_per_audio.data);$e.push([...Ee].map((it,Je)=>({score:it,label:oe[Je]})))}return be?$e[0]:$e}}class te extends w{constructor(ne){super(ne)}async _call(ne,oe={}){switch(this.model.config.model_type){case"whisper":case"lite-whisper":return this._call_whisper(ne,oe);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(ne,oe);case"moonshine":return this._call_moonshine(ne,oe);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(ne,oe){oe.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),oe.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const H=!Array.isArray(ne);H&&(ne=[ne]);const be=this.processor.feature_extractor.config.sampling_rate,Oe=await m(ne,be),Se=[];for(const Me of Oe){const Ie=await this.processor(Me),Le=(await this.model(Ie)).logits[0],We=[];for(const Ee of Le)We.push((0,l.max)(Ee.data)[1]);const tt=this.tokenizer.decode(We);Se.push({text:tt})}return H?Se[0]:Se}async _call_whisper(ne,oe){const H=oe.return_timestamps??!1,be=oe.chunk_length_s??0,Oe=oe.force_full_sequences??!1;let Se=oe.stride_length_s??null;const Me={...oe};H==="word"&&(Me.return_token_timestamps=!0,Me.return_timestamps=!1);const Ie=!Array.isArray(ne);Ie&&(ne=[ne]);const $e=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,Le=this.processor.feature_extractor.config.hop_length,We=this.processor.feature_extractor.config.sampling_rate,tt=await m(ne,We),Ee=[];for(const it of tt){let Je=[];if(be>0){if(Se===null)Se=be/6;else if(be<=Se)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const ze=We*be,rt=We*Se,ct=ze-2*rt;let Wt=0;for(;;){const It=Wt+ze,Tt=it.subarray(Wt,It),Ur=await this.processor(Tt),Sr=Wt===0,an=It>=it.length;if(Je.push({stride:[Tt.length,Sr?0:rt,an?0:rt],input_features:Ur.input_features,is_last:an}),an)break;Wt+=ct}}else Je=[{stride:[it.length,0,0],input_features:(await this.processor(it)).input_features,is_last:!0}];for(const ze of Je){Me.num_frames=Math.floor(ze.stride[0]/Le);const rt=await this.model.generate({inputs:ze.input_features,...Me});H==="word"?(ze.tokens=rt.sequences.tolist()[0],ze.token_timestamps=rt.token_timestamps.tolist()[0].map(ct=>(0,l.round)(ct,2))):ze.tokens=rt[0].tolist(),ze.stride=ze.stride.map(ct=>ct/We)}const[dt,Ye]=this.tokenizer._decode_asr(Je,{time_precision:$e,return_timestamps:H,force_full_sequences:Oe});Ee.push({text:dt,...Ye})}return Ie?Ee[0]:Ee}async _call_moonshine(ne,oe){const H=!Array.isArray(ne);H&&(ne=[ne]);const be=this.processor.feature_extractor.config.sampling_rate,Oe=await m(ne,be),Se=[];for(const Me of Oe){const Ie=await this.processor(Me),$e=Math.floor(Me.length/be)*6,Le=await this.model.generate({max_new_tokens:$e,...oe,...Ie}),We=this.processor.batch_decode(Le,{skip_special_tokens:!0})[0];Se.push({text:We})}return H?Se[0]:Se}}class q extends w{constructor(ne){super(ne)}async _call(ne,oe={}){const H=Array.isArray(ne),be=await p(ne),{pixel_values:Oe}=await this.processor(be),Se=[];for(const Me of Oe){Me.dims=[1,...Me.dims];const Ie=await this.model.generate({inputs:Me,...oe}),$e=this.tokenizer.batch_decode(Ie,{skip_special_tokens:!0}).map(Le=>({generated_text:Le.trim()}));Se.push($e)}return H?Se:Se[0]}}class K extends w{constructor(ne){super(ne)}async _call(ne,{top_k:oe=5}={}){const H=await p(ne),{pixel_values:be}=await this.processor(H),Oe=await this.model({pixel_values:be}),Se=this.model.config.id2label,Me=[];for(const Ie of Oe.logits){const $e=await(0,d.topk)(new d.Tensor("float32",(0,l.softmax)(Ie.data),Ie.dims),oe),Le=$e[0].tolist(),tt=$e[1].tolist().map((Ee,it)=>({label:Se?Se[Ee]:`LABEL_${Ee}`,score:Le[it]}));Me.push(tt)}return Array.isArray(ne)?Me:Me[0]}}class Y extends w{constructor(ne){super(ne),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(ne,{threshold:oe=.5,mask_threshold:H=.5,overlap_mask_area_threshold:be=.8,label_ids_to_fuse:Oe=null,target_sizes:Se=null,subtask:Me=null}={}){if(Array.isArray(ne)&&ne.length!==1)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const $e=await p(ne),Le=$e.map(ze=>[ze.height,ze.width]),We=await this.processor($e),{inputNames:tt,outputNames:Ee}=this.model.sessions.model;if(!tt.includes("pixel_values")){if(tt.length!==1)throw Error(`Expected a single input name, but got ${tt.length} inputs: ${tt}.`);const ze=tt[0];if(ze in We)throw Error(`Input name ${ze} already exists in the inputs.`);We[ze]=We.pixel_values}const it=await this.model(We);let Je=null;if(Me!==null)Je=this.subtasks_mapping[Me];else if(this.processor.image_processor){for(const[ze,rt]of Object.entries(this.subtasks_mapping))if(rt in this.processor.image_processor){Je=this.processor.image_processor[rt].bind(this.processor.image_processor),Me=ze;break}}const dt=this.model.config.id2label,Ye=[];if(Me)if(Me==="panoptic"||Me==="instance"){const ze=Je(it,oe,H,be,Oe,Se??Le)[0],rt=ze.segmentation;for(const ct of ze.segments_info){const Wt=new Uint8ClampedArray(rt.data.length);for(let Tt=0;Tt<rt.data.length;++Tt)rt.data[Tt]===ct.id&&(Wt[Tt]=255);const It=new c.RawImage(Wt,rt.dims[1],rt.dims[0],1);Ye.push({score:ct.score,label:dt[ct.label_id],mask:It})}}else if(Me==="semantic"){const{segmentation:ze,labels:rt}=Je(it,Se??Le)[0];for(const ct of rt){const Wt=new Uint8ClampedArray(ze.data.length);for(let Tt=0;Tt<ze.data.length;++Tt)ze.data[Tt]===ct&&(Wt[Tt]=255);const It=new c.RawImage(Wt,ze.dims[1],ze.dims[0],1);Ye.push({score:null,label:dt[ct],mask:It})}}else throw Error(`Subtask ${Me} not supported.`);else{const rt=it[Ee[0]];for(let ct=0;ct<Le.length;++ct){const Wt=Le[ct],It=rt[ct];It.data.some(Ur=>Ur<-1e-5||Ur>1+1e-5)&&It.sigmoid_();const Tt=await c.RawImage.fromTensor(It.mul_(255).to("uint8")).resize(Wt[1],Wt[0]);Ye.push({label:null,score:null,mask:Tt})}}return Ye}}class Z extends Y{constructor(ne){super(ne)}async _call(ne,oe={}){if(Array.isArray(ne)&&ne.length!==1)throw Error("Background removal pipeline currently only supports a batch size of 1.");const be=await p(ne),Oe=await super._call(ne,oe);return be.map((Me,Ie)=>{const $e=Me.clone();return $e.putAlpha(Oe[Ie].mask),$e})}}class de extends w{constructor(ne){super(ne)}async _call(ne,oe,{hypothesis_template:H="This is a photo of {}"}={}){const be=Array.isArray(ne),Oe=await p(ne),Se=oe.map(tt=>H.replace("{}",tt)),Me=this.tokenizer(Se,{padding:this.model.config.model_type==="siglip"?"max_length":!0,truncation:!0}),{pixel_values:Ie}=await this.processor(Oe),$e=await this.model({...Me,pixel_values:Ie}),Le=this.model.config.model_type==="siglip"?tt=>tt.sigmoid().data:tt=>(0,l.softmax)(tt.data),We=[];for(const tt of $e.logits_per_image){const it=[...Le(tt)].map((Je,dt)=>({score:Je,label:oe[dt]}));it.sort((Je,dt)=>dt.score-Je.score),We.push(it)}return be?We:We[0]}}class pe extends w{constructor(ne){super(ne)}async _call(ne,{threshold:oe=.9,percentage:H=!1}={}){const be=Array.isArray(ne);if(be&&ne.length!==1)throw Error("Object detection pipeline currently only supports a batch size of 1.");const Oe=await p(ne),Se=H?null:Oe.map(Ee=>[Ee.height,Ee.width]),{pixel_values:Me,pixel_mask:Ie}=await this.processor(Oe),$e=await this.model({pixel_values:Me,pixel_mask:Ie}),Le=this.processor.image_processor.post_process_object_detection($e,oe,Se),We=this.model.config.id2label,tt=Le.map(Ee=>Ee.boxes.map((it,Je)=>({score:Ee.scores[Je],label:We[Ee.classes[Je]],box:f(it,!H)})));return be?tt:tt[0]}}class L extends w{constructor(ne){super(ne)}async _call(ne,oe,{threshold:H=.1,top_k:be=null,percentage:Oe=!1}={}){const Se=Array.isArray(ne),Me=await p(ne),Ie=this.tokenizer(oe,{padding:!0,truncation:!0}),$e=await this.processor(Me),Le=[];for(let We=0;We<Me.length;++We){const tt=Me[We],Ee=Oe?null:[[tt.height,tt.width]],it=$e.pixel_values[We].unsqueeze_(0),Je=await this.model({...Ie,pixel_values:it});let dt;if("post_process_grounded_object_detection"in this.processor){const Ye=this.processor.post_process_grounded_object_detection(Je,Ie.input_ids,{box_threshold:H,text_threshold:H,target_sizes:Ee})[0];dt=Ye.boxes.map((ze,rt)=>({score:Ye.scores[rt],label:Ye.labels[rt],box:f(ze,!Oe)}))}else{const Ye=this.processor.image_processor.post_process_object_detection(Je,H,Ee,!0)[0];dt=Ye.boxes.map((ze,rt)=>({score:Ye.scores[rt],label:oe[Ye.classes[rt]],box:f(ze,!Oe)}))}dt.sort((Ye,ze)=>ze.score-Ye.score),be!==null&&(dt=dt.slice(0,be)),Le.push(dt)}return Se?Le:Le[0]}}class F extends w{constructor(ne){super(ne)}async _call(ne,oe,H={}){const be=(await p(ne))[0],{pixel_values:Oe}=await this.processor(be),Se=`<s_docvqa><s_question>${oe}</s_question><s_answer>`,Me=this.tokenizer(Se,{add_special_tokens:!1,padding:!0,truncation:!0}).input_ids,Ie=await this.model.generate({inputs:Oe,max_length:this.model.config.decoder.max_position_embeddings,decoder_input_ids:Me,...H}),Le=this.tokenizer.batch_decode(Ie)[0].match(/<s_answer>(.*?)<\/s_answer>/);let We=null;return Le&&Le.length>=2&&(We=Le[1].trim()),[{answer:We}]}}class U extends w{constructor(oe){super(oe);ie(this,"DEFAULT_VOCODER_ID","Xenova/speecht5_hifigan");this.vocoder=oe.vocoder??null}async _call(oe,{speaker_embeddings:H=null}={}){return this.processor?this._call_text_to_spectrogram(oe,{speaker_embeddings:H}):this._call_text_to_waveform(oe)}async _call_text_to_waveform(oe){const H=this.tokenizer(oe,{padding:!0,truncation:!0}),{waveform:be}=await this.model(H),Oe=this.model.config.sampling_rate;return new u.RawAudio(be.data,Oe)}async _call_text_to_spectrogram(oe,{speaker_embeddings:H}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await i.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),(typeof H=="string"||H instanceof URL)&&(H=new Float32Array(await(await fetch(H)).arrayBuffer())),H instanceof Float32Array)H=new d.Tensor("float32",H,[1,H.length]);else if(!(H instanceof d.Tensor))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:be}=this.tokenizer(oe,{padding:!0,truncation:!0}),{waveform:Oe}=await this.model.generate_speech(be,H,{vocoder:this.vocoder}),Se=this.processor.feature_extractor.config.sampling_rate;return new u.RawAudio(Oe.data,Se)}}class re extends w{constructor(ne){super(ne)}async _call(ne){const oe=await p(ne),H=await this.processor(oe),be=await this.model(H),Oe=[];for(const Se of be.reconstruction){const Me=Se.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");Oe.push(c.RawImage.fromTensor(Me))}return Oe.length>1?Oe:Oe[0]}}class me extends w{constructor(ne){super(ne)}async _call(ne){const oe=await p(ne),H=await this.processor(oe),{predicted_depth:be}=await this.model(H),Oe=[];for(let Se=0;Se<oe.length;++Se){const Me=be[Se],[Ie,$e]=Me.dims.slice(-2),[Le,We]=oe[Se].size,tt=(await(0,d.interpolate_4d)(Me.view(1,1,Ie,$e),{size:[We,Le],mode:"bilinear"})).view(We,Le),Ee=tt.min().item(),it=tt.max().item(),Je=tt.sub(Ee).div_(it-Ee).mul_(255).to("uint8").unsqueeze(0),dt=c.RawImage.fromTensor(Je);Oe.push({predicted_depth:tt,depth:dt})}return Oe.length>1?Oe:Oe[0]}}const J=Object.freeze({"text-classification":{tokenizer:n.AutoTokenizer,pipeline:C,model:i.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:n.AutoTokenizer,pipeline:y,model:i.AutoModelForTokenClassification,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:n.AutoTokenizer,pipeline:g,model:i.AutoModelForQuestionAnswering,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:n.AutoTokenizer,pipeline:P,model:i.AutoModelForMaskedLM,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:n.AutoTokenizer,pipeline:x,model:i.AutoModelForSeq2SeqLM,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:n.AutoTokenizer,pipeline:T,model:i.AutoModelForSeq2SeqLM,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:n.AutoTokenizer,pipeline:b,model:i.AutoModelForSeq2SeqLM,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:n.AutoTokenizer,pipeline:S,model:i.AutoModelForCausalLM,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:n.AutoTokenizer,pipeline:O,model:i.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:W,model:i.AutoModelForAudioClassification,processor:s.AutoProcessor,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:n.AutoTokenizer,pipeline:N,model:i.AutoModel,processor:s.AutoProcessor,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:n.AutoTokenizer,pipeline:te,model:[i.AutoModelForSpeechSeq2Seq,i.AutoModelForCTC],processor:s.AutoProcessor,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:n.AutoTokenizer,pipeline:U,model:[i.AutoModelForTextToWaveform,i.AutoModelForTextToSpectrogram],processor:[s.AutoProcessor,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:n.AutoTokenizer,pipeline:q,model:i.AutoModelForVision2Seq,processor:s.AutoProcessor,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:K,model:i.AutoModelForImageClassification,processor:s.AutoProcessor,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:Y,model:[i.AutoModelForImageSegmentation,i.AutoModelForSemanticSegmentation,i.AutoModelForUniversalSegmentation],processor:s.AutoProcessor,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"background-removal":{pipeline:Z,model:[i.AutoModelForImageSegmentation,i.AutoModelForSemanticSegmentation,i.AutoModelForUniversalSegmentation],processor:s.AutoProcessor,default:{model:"Xenova/modnet"},type:"image"},"zero-shot-image-classification":{tokenizer:n.AutoTokenizer,pipeline:de,model:i.AutoModel,processor:s.AutoProcessor,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:pe,model:i.AutoModelForObjectDetection,processor:s.AutoProcessor,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:n.AutoTokenizer,pipeline:L,model:i.AutoModelForZeroShotObjectDetection,processor:s.AutoProcessor,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:n.AutoTokenizer,pipeline:F,model:i.AutoModelForDocumentQuestionAnswering,processor:s.AutoProcessor,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:re,model:i.AutoModelForImageToImage,processor:s.AutoProcessor,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:me,model:i.AutoModelForDepthEstimation,processor:s.AutoProcessor,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:n.AutoTokenizer,pipeline:B,model:i.AutoModel,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:s.AutoProcessor,pipeline:V,model:[i.AutoModelForImageFeatureExtraction,i.AutoModel],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),we=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function je(Ae,ne=null,{progress_callback:oe=null,config:H=null,cache_dir:be=null,local_files_only:Oe=!1,revision:Se="main",device:Me=null,dtype:Ie=null,subfolder:$e="onnx",use_external_data_format:Le=null,model_file_name:We=null,session_options:tt={}}={}){Ae=we[Ae]??Ae;const Ee=J[Ae.split("_",1)[0]];if(!Ee)throw Error(`Unsupported pipeline: ${Ae}. Must be one of [${Object.keys(J)}]`);ne||(ne=Ee.default.model,console.log(`No model specified. Using default model: "${ne}".`));const it={progress_callback:oe,config:H,cache_dir:be,local_files_only:Oe,revision:Se,device:Me,dtype:Ie,subfolder:$e,use_external_data_format:Le,model_file_name:We,session_options:tt},Je=new Map([["tokenizer",Ee.tokenizer],["model",Ee.model],["processor",Ee.processor]]),dt=await Ge(Je,ne,it);dt.task=Ae,(0,o.dispatchCallback)(oe,{status:"ready",task:Ae,model:ne});const Ye=Ee.pipeline;return new Ye(dt)}async function Ge(Ae,ne,oe){const H=Object.create(null),be=[];for(const[Oe,Se]of Ae.entries()){if(!Se)continue;let Me;Array.isArray(Se)?Me=new Promise(async(Ie,$e)=>{var We,tt;let Le;for(const Ee of Se){if(Ee===null){Ie(null);return}try{Ie(await Ee.from_pretrained(ne,oe));return}catch(it){if((We=it.message)!=null&&We.includes("Unsupported model type"))Le=it;else if((tt=it.message)!=null&&tt.includes("Could not locate file"))Le=it;else{$e(it);return}}}$e(Le)}):Me=Se.from_pretrained(ne,oe),H[Oe]=Me,be.push(Me)}await Promise.all(be);for(const[Oe,Se]of Object.entries(H))H[Oe]=await Se;return H}},"./src/tokenizers.js":(e,t,r)=>{r.r(t),r.d(t,{AlbertTokenizer:()=>Un,AutoTokenizer:()=>ci,BartTokenizer:()=>ut,BertTokenizer:()=>jn,BlenderbotSmallTokenizer:()=>mr,BlenderbotTokenizer:()=>at,BloomTokenizer:()=>fn,CLIPTokenizer:()=>Ms,CamembertTokenizer:()=>Re,CodeGenTokenizer:()=>ln,CodeLlamaTokenizer:()=>gr,CohereTokenizer:()=>Vn,ConvBertTokenizer:()=>ee,DebertaTokenizer:()=>z,DebertaV2Tokenizer:()=>se,DistilBertTokenizer:()=>xe,ElectraTokenizer:()=>Et,Ernie4_5_Tokenizer:()=>di,EsmTokenizer:()=>ns,FalconTokenizer:()=>br,GPT2Tokenizer:()=>At,GPTNeoXTokenizer:()=>Wn,GemmaTokenizer:()=>mn,Grok1Tokenizer:()=>_n,HerbertTokenizer:()=>G,LlamaTokenizer:()=>Hr,M2M100Tokenizer:()=>Xt,MBart50Tokenizer:()=>er,MBartTokenizer:()=>Kt,MPNetTokenizer:()=>Mn,MarianTokenizer:()=>Ve,MgpstrTokenizer:()=>ui,MobileBertTokenizer:()=>Bt,NllbTokenizer:()=>Cn,NougatTokenizer:()=>On,PreTrainedTokenizer:()=>vt,Qwen2Tokenizer:()=>Or,RoFormerTokenizer:()=>le,RobertaTokenizer:()=>on,SiglipTokenizer:()=>gn,SpeechT5Tokenizer:()=>Ts,SqueezeBertTokenizer:()=>Ot,T5Tokenizer:()=>xt,TokenizerModel:()=>V,VitsTokenizer:()=>Es,Wav2Vec2CTCTokenizer:()=>qe,WhisperTokenizer:()=>sr,XLMRobertaTokenizer:()=>Yr,XLMTokenizer:()=>lt,is_chinese_char:()=>P});var n=r("./src/utils/generic.js"),i=r("./src/utils/core.js"),s=r("./src/utils/hub.js"),a=r("./src/utils/maths.js"),o=r("./src/utils/tensor.js"),l=r("./src/utils/data-structures.js"),u=r("./node_modules/@huggingface/jinja/dist/index.js"),d=r("./src/models/whisper/common_whisper.js");async function c(ge,R){const X=await Promise.all([(0,s.getModelJSON)(ge,"tokenizer.json",!0,R),(0,s.getModelJSON)(ge,"tokenizer_config.json",!0,R)]);return R.legacy!==null&&(X[1].legacy=R.legacy),X}function p(ge,R){const X=[];let ae=0;for(const he of ge.matchAll(R)){const fe=he[0];ae<he.index&&X.push(ge.slice(ae,he.index)),fe.length>0&&X.push(fe),ae=he.index+fe.length}return ae<ge.length&&X.push(ge.slice(ae)),X}function m(ge,R=!0){if(ge.Regex!==void 0){let X=ge.Regex.replace(/\\([#&~])/g,"$1");for(const[ae,he]of O)X=X.replaceAll(ae,he);return new RegExp(X,"gu")}else if(ge.String!==void 0){const X=(0,i.escapeRegExp)(ge.String);return new RegExp(R?X:`(${X})`,"gu")}else return console.warn("Unknown pattern type:",ge),null}function f(ge){return new Map(Object.entries(ge))}function w(ge){const R=ge.dims;switch(R.length){case 1:return ge.tolist();case 2:if(R[0]!==1)throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return ge.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${R.length}.`)}}function C(ge){return ge.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function y(ge){return ge.replace(new RegExp("\\p{M}","gu"),"")}function g(ge){return y(ge.toLowerCase())}function P(ge){return ge>=19968&&ge<=40959||ge>=13312&&ge<=19903||ge>=131072&&ge<=173791||ge>=173824&&ge<=177983||ge>=177984&&ge<=178207||ge>=178208&&ge<=183983||ge>=63744&&ge<=64255||ge>=194560&&ge<=195103}function b(ge,R,X){const ae=[];let he=0;for(;he<ge.length;){if(ae.push(ge[he]),(R.get(ge[he])??X)!==X){++he;continue}for(;++he<ge.length&&(R.get(ge[he])??X)===X;)R.get(ae.at(-1))!==X&&(ae[ae.length-1]+=ge[he])}return ae}function x(ge){return ge.match(/\S+/g)||[]}const T="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",E=new RegExp(`^[${T}]+$`,"gu"),S=".,!?…。，、।۔،",O=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"],[` ?[^(\\s|[${S}])]+`,` ?[^\\s${S}]+`]]);class B{constructor(R){this.content=R.content,this.id=R.id,this.single_word=R.single_word??!1,this.lstrip=R.lstrip??!1,this.rstrip=R.rstrip??!1,this.special=R.special??!1,this.normalized=R.normalized??null}}class V extends n.Callable{constructor(R){super(),this.config=R,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig(R,...X){switch(R.type){case"WordPiece":return new W(R);case"Unigram":return new N(R,...X);case"BPE":return new K(R);default:if(R.vocab)return Array.isArray(R.vocab)?new N(R,...X):Object.hasOwn(R,"continuing_subword_prefix")&&Object.hasOwn(R,"unk_token")?Object.hasOwn(R,"merges")?new K(R):new W(R):new Y(R,...X);throw new Error(`Unknown TokenizerModel type: ${R.type}`)}}_call(R){return R=this.encode(R),this.fuse_unk&&(R=b(R,this.tokens_to_ids,this.unk_token_id)),R}encode(R){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids(R){return R.map(X=>this.tokens_to_ids.get(X)??this.unk_token_id)}convert_ids_to_tokens(R){return R.map(X=>this.vocab[X]??this.unk_token)}}class W extends V{constructor(R){super(R),this.tokens_to_ids=f(R.vocab),this.unk_token_id=this.tokens_to_ids.get(R.unk_token),this.unk_token=R.unk_token,this.max_input_chars_per_word=R.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[X,ae]of this.tokens_to_ids)this.vocab[ae]=X}encode(R){const X=[];for(const ae of R){const he=[...ae];if(he.length>this.max_input_chars_per_word){X.push(this.unk_token);continue}let fe=!1,ke=0;const He=[];for(;ke<he.length;){let et=he.length,Ze=null;for(;ke<et;){let ot=he.slice(ke,et).join("");if(ke>0&&(ot=this.config.continuing_subword_prefix+ot),this.tokens_to_ids.has(ot)){Ze=ot;break}--et}if(Ze===null){fe=!0;break}He.push(Ze),ke=et}fe?X.push(this.unk_token):X.push(...He)}return X}}class N extends V{constructor(R,X){super(R);const ae=R.vocab.length;this.vocab=new Array(ae),this.scores=new Array(ae);for(let he=0;he<ae;++he)[this.vocab[he],this.scores[he]]=R.vocab[he];this.unk_token_id=R.unk_id,this.unk_token=this.vocab[R.unk_id],this.tokens_to_ids=new Map(this.vocab.map((he,fe)=>[he,fe])),this.bos_token=" ",this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=X.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.unk_token=this.vocab[this.unk_token_id],this.minScore=(0,a.min)(this.scores)[0],this.unk_score=this.minScore-10,this.scores[this.unk_token_id]=this.unk_score,this.trie=new l.CharTrie,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes(R){const X=R.chars,ae=1;let he=0;for(;he<X.length;){let fe=!1;const ke=X.slice(he).join(""),He=this.trie.commonPrefixSearch(ke);for(const et of He){const Ze=this.tokens_to_ids.get(et),ot=this.scores[Ze],St=(0,i.len)(et);R.insert(he,St,ot,Ze),!fe&&St===ae&&(fe=!0)}fe||R.insert(he,ae,this.unk_score,this.unk_token_id),he+=ae}}tokenize(R){const X=new l.TokenLattice(R,this.bos_token_id,this.eos_token_id);return this.populateNodes(X),X.tokens()}encode(R){const X=[];for(const ae of R){const he=this.tokenize(ae);X.push(...he)}return X}}const te=(()=>{const ge=[...Array.from({length:94},(he,fe)=>fe+33),...Array.from({length:12},(he,fe)=>fe+161),...Array.from({length:82},(he,fe)=>fe+174)],R=ge.slice();let X=0;for(let he=0;he<256;++he)ge.includes(he)||(ge.push(he),R.push(256+X),X+=1);const ae=R.map(he=>String.fromCharCode(he));return Object.fromEntries(ge.map((he,fe)=>[he,ae[fe]]))})(),q=(0,i.reverseDictionary)(te);class K extends V{constructor(R){super(R),this.tokens_to_ids=f(R.vocab),this.unk_token_id=this.tokens_to_ids.get(R.unk_token),this.unk_token=R.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[ae,he]of this.tokens_to_ids)this.vocab[he]=ae;const X=Array.isArray(R.merges[0]);this.merges=X?R.merges:R.merges.map(ae=>ae.split(" ",2)),this.bpe_ranks=new Map(this.merges.map((ae,he)=>[JSON.stringify(ae),he])),this.end_of_word_suffix=R.end_of_word_suffix,this.continuing_subword_suffix=R.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.ignore_merges=this.config.ignore_merges??!1,this.max_length_to_cache=256,this.cache_capacity=1e4,this.cache=new l.LRUCache(this.cache_capacity)}clear_cache(){this.cache.clear()}bpe(R){if(R.length===0)return[];const X=this.cache.get(R);if(X!==void 0)return X;const ae=Array.from(R);this.end_of_word_suffix&&(ae[ae.length-1]+=this.end_of_word_suffix);let he=[];if(ae.length>1){const fe=new l.PriorityQueue((et,Ze)=>et.score<Ze.score);let ke={token:ae[0],bias:0,prev:null,next:null},He=ke;for(let et=1;et<ae.length;++et){const Ze={bias:et/ae.length,token:ae[et],prev:He,next:null};He.next=Ze,this._add_node(fe,He),He=Ze}for(;!fe.isEmpty();){const et=fe.pop();if(et.deleted||!et.next||et.next.deleted)continue;if(et.deleted=!0,et.next.deleted=!0,et.prev){const ot={...et.prev};et.prev.deleted=!0,et.prev=ot,ot.prev?ot.prev.next=ot:ke=ot}const Ze={token:et.token+et.next.token,bias:et.bias,prev:et.prev,next:et.next.next};Ze.prev?(Ze.prev.next=Ze,this._add_node(fe,Ze.prev)):ke=Ze,Ze.next&&(Ze.next.prev=Ze,this._add_node(fe,Ze))}for(let et=ke;et!==null;et=et.next)he.push(et.token)}else he=ae;if(this.continuing_subword_suffix)for(let fe=0;fe<he.length-1;++fe)he[fe]+=this.continuing_subword_suffix;return R.length<this.max_length_to_cache&&this.cache.put(R,he),he}_add_node(R,X){const ae=this.bpe_ranks.get(JSON.stringify([X.token,X.next.token]));ae!==void 0&&(X.score=ae+X.bias,R.push(X))}encode(R){const X=[];for(const ae of R){if(this.ignore_merges&&this.tokens_to_ids.has(ae)){X.push(ae);continue}const he=this.bpe(ae);for(const fe of he)if(this.tokens_to_ids.has(fe))X.push(fe);else if(this.byte_fallback){const ke=Array.from(this.text_encoder.encode(fe)).map(He=>`<0x${He.toString(16).toUpperCase().padStart(2,"0")}>`);ke.every(He=>this.tokens_to_ids.has(He))?X.push(...ke):X.push(this.unk_token)}else X.push(this.unk_token)}return X}}class Y extends V{constructor(R,X){super(R),this.tokens_to_ids=f(X.target_lang?R.vocab[X.target_lang]:R.vocab),this.bos_token=X.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=X.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=X.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=X.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[ae,he]of this.tokens_to_ids)this.vocab[he]=ae}encode(R){return R}}class Z extends n.Callable{constructor(R){super(),this.config=R}static fromConfig(R){if(R===null)return null;switch(R.type){case"BertNormalizer":return new Ae(R);case"Precompiled":return new an(R);case"Sequence":return new Ge(R);case"Replace":return new de(R);case"NFC":return new L(R);case"NFD":return new F(R);case"NFKC":return new U(R);case"NFKD":return new re(R);case"Strip":return new me(R);case"StripAccents":return new J(R);case"Lowercase":return new we(R);case"Prepend":return new je(R);default:throw new Error(`Unknown Normalizer type: ${R.type}`)}}normalize(R){throw Error("normalize should be implemented in subclass.")}_call(R){return this.normalize(R)}}class de extends Z{normalize(R){const X=m(this.config.pattern);return X===null?R:R.replaceAll(X,this.config.content)}}class pe extends Z{constructor(){super(...arguments);ie(this,"form")}normalize(X){return X=X.normalize(this.form),X}}class L extends pe{constructor(){super(...arguments);ie(this,"form","NFC")}}class F extends pe{constructor(){super(...arguments);ie(this,"form","NFD")}}class U extends pe{constructor(){super(...arguments);ie(this,"form","NFKC")}}class re extends pe{constructor(){super(...arguments);ie(this,"form","NFKD")}}class me extends Z{normalize(R){return this.config.strip_left&&this.config.strip_right?R=R.trim():(this.config.strip_left&&(R=R.trimStart()),this.config.strip_right&&(R=R.trimEnd())),R}}class J extends Z{normalize(R){return R=y(R),R}}class we extends Z{normalize(R){return R=R.toLowerCase(),R}}class je extends Z{normalize(R){return R=this.config.prepend+R,R}}class Ge extends Z{constructor(R){super(R),this.normalizers=R.normalizers.map(X=>Z.fromConfig(X))}normalize(R){return this.normalizers.reduce((X,ae)=>ae.normalize(X),R)}}class Ae extends Z{_tokenize_chinese_chars(R){const X=[];for(let ae=0;ae<R.length;++ae){const he=R[ae],fe=he.charCodeAt(0);P(fe)?(X.push(" "),X.push(he),X.push(" ")):X.push(he)}return X.join("")}stripAccents(R){return R.normalize("NFD").replace(new RegExp("\\p{Mn}","gu"),"")}_is_control(R){switch(R){case"	":case`
`:case"\r":return!1;default:return new RegExp("^\\p{Cc}|\\p{Cf}|\\p{Co}|\\p{Cs}$","u").test(R)}}_clean_text(R){const X=[];for(const ae of R){const he=ae.charCodeAt(0);he===0||he===65533||this._is_control(ae)||(/^\s$/.test(ae)?X.push(" "):X.push(ae))}return X.join("")}normalize(R){return this.config.clean_text&&(R=this._clean_text(R)),this.config.handle_chinese_chars&&(R=this._tokenize_chinese_chars(R)),this.config.lowercase?(R=R.toLowerCase(),this.config.strip_accents!==!1&&(R=this.stripAccents(R))):this.config.strip_accents&&(R=this.stripAccents(R)),R}}class ne extends n.Callable{static fromConfig(R){if(R===null)return null;switch(R.type){case"BertPreTokenizer":return new oe(R);case"Sequence":return new Pn(R);case"Whitespace":return new cr(R);case"WhitespaceSplit":return new Gr(R);case"Metaspace":return new Ur(R);case"ByteLevel":return new H(R);case"Split":return new be(R);case"Punctuation":return new Oe(R);case"Digits":return new Se(R);case"Replace":return new Rs(R);default:throw new Error(`Unknown PreTokenizer type: ${R.type}`)}}pre_tokenize_text(R,X){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize(R,X){return(Array.isArray(R)?R.map(ae=>this.pre_tokenize_text(ae,X)):this.pre_tokenize_text(R,X)).flat()}_call(R,X){return this.pre_tokenize(R,X)}}class oe extends ne{constructor(R){super(),this.pattern=new RegExp(`[^\\s${T}]+|[${T}]`,"gu")}pre_tokenize_text(R,X){return R.trim().match(this.pattern)||[]}}class H extends ne{constructor(R){super(),this.config=R,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=new RegExp("'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+","gu"),this.byte_encoder=te,this.text_encoder=new TextEncoder}pre_tokenize_text(R,X){return this.add_prefix_space&&!R.startsWith(" ")&&(R=" "+R),(this.use_regex?R.match(this.pattern)||[]:[R]).map(he=>Array.from(this.text_encoder.encode(he),fe=>this.byte_encoder[fe]).join(""))}}class be extends ne{constructor(R){super(),this.config=R,this.pattern=m(this.config.pattern,this.config.invert)}pre_tokenize_text(R,X){var ae;return this.pattern===null?[]:this.config.invert?R.match(this.pattern)||[]:((ae=this.config.behavior)==null?void 0:ae.toLowerCase())==="removed"?R.split(this.pattern).filter(he=>he):p(R,this.pattern)}}class Oe extends ne{constructor(R){super(),this.config=R,this.pattern=new RegExp(`[^${T}]+|[${T}]+`,"gu")}pre_tokenize_text(R,X){return R.match(this.pattern)||[]}}class Se extends ne{constructor(R){super(),this.config=R;const X=`[^\\d]+|\\d${this.config.individual_digits?"":"+"}`;this.pattern=new RegExp(X,"gu")}pre_tokenize_text(R,X){return R.match(this.pattern)||[]}}class Me extends n.Callable{constructor(R){super(),this.config=R}static fromConfig(R){if(R===null)return null;switch(R.type){case"TemplateProcessing":return new Le(R);case"ByteLevel":return new We(R);case"RobertaProcessing":return new $e(R);case"BertProcessing":return new Ie(R);case"Sequence":return new tt(R);default:throw new Error(`Unknown PostProcessor type: ${R.type}`)}}post_process(R,...X){throw Error("post_process should be implemented in subclass.")}_call(R,...X){return this.post_process(R,...X)}}class Ie extends Me{constructor(R){super(R),this.cls=R.cls[0],this.sep=R.sep[0]}post_process(R,X=null,{add_special_tokens:ae=!0}={}){ae&&(R=(0,i.mergeArrays)([this.cls],R,[this.sep]));let he=new Array(R.length).fill(0);if(X!==null){const fe=ae&&this instanceof $e?[this.sep]:[],ke=ae?[this.sep]:[];R=(0,i.mergeArrays)(R,fe,X,ke),he=(0,i.mergeArrays)(he,new Array(X.length+fe.length+ke.length).fill(1))}return{tokens:R,token_type_ids:he}}}class $e extends Ie{}class Le extends Me{constructor(R){super(R),this.single=R.single,this.pair=R.pair}post_process(R,X=null,{add_special_tokens:ae=!0}={}){const he=X===null?this.single:this.pair;let fe=[],ke=[];for(const He of he)"SpecialToken"in He?ae&&(fe.push(He.SpecialToken.id),ke.push(He.SpecialToken.type_id)):"Sequence"in He&&(He.Sequence.id==="A"?(fe=(0,i.mergeArrays)(fe,R),ke=(0,i.mergeArrays)(ke,new Array(R.length).fill(He.Sequence.type_id))):He.Sequence.id==="B"&&(fe=(0,i.mergeArrays)(fe,X),ke=(0,i.mergeArrays)(ke,new Array(X.length).fill(He.Sequence.type_id))));return{tokens:fe,token_type_ids:ke}}}class We extends Me{post_process(R,X=null){return X&&(R=(0,i.mergeArrays)(R,X)),{tokens:R}}}class tt extends Me{constructor(R){super(R),this.processors=R.processors.map(X=>Me.fromConfig(X))}post_process(R,X=null,ae={}){let he;for(const fe of this.processors)if(fe instanceof We)R=fe.post_process(R).tokens,X&&(X=fe.post_process(X).tokens);else{const ke=fe.post_process(R,X,ae);R=ke.tokens,he=ke.token_type_ids}return{tokens:R,token_type_ids:he}}}class Ee extends n.Callable{constructor(R){super(),this.config=R,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=R.trim_offsets}static fromConfig(R){if(R===null)return null;switch(R.type){case"WordPiece":return new ze(R);case"Metaspace":return new Sr(R);case"ByteLevel":return new rt(R);case"Replace":return new it(R);case"ByteFallback":return new Je(R);case"Fuse":return new dt(R);case"Strip":return new Ye(R);case"Sequence":return new Wt(R);case"CTC":return new ct(R);case"BPEDecoder":return new It(R);default:throw new Error(`Unknown Decoder type: ${R.type}`)}}_call(R){return this.decode(R)}decode(R){return this.decode_chain(R).join("")}decode_chain(R){throw Error("`decode_chain` should be implemented in subclass.")}}class it extends Ee{decode_chain(R){const X=m(this.config.pattern);return X===null?R:R.map(ae=>ae.replaceAll(X,this.config.content))}}class Je extends Ee{constructor(R){super(R),this.text_decoder=new TextDecoder}decode_chain(R){const X=[];let ae=[];for(const he of R){let fe=null;if(he.length===6&&he.startsWith("<0x")&&he.endsWith(">")){const ke=parseInt(he.slice(3,5),16);isNaN(ke)||(fe=ke)}if(fe!==null)ae.push(fe);else{if(ae.length>0){const ke=this.text_decoder.decode(Uint8Array.from(ae));X.push(ke),ae=[]}X.push(he)}}if(ae.length>0){const he=this.text_decoder.decode(Uint8Array.from(ae));X.push(he),ae=[]}return X}}class dt extends Ee{decode_chain(R){return[R.join("")]}}class Ye extends Ee{constructor(R){super(R),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain(R){return R.map(X=>{let ae=0;for(let fe=0;fe<this.start&&X[fe]===this.content;++fe){ae=fe+1;continue}let he=X.length;for(let fe=0;fe<this.stop;++fe){const ke=X.length-fe-1;if(X[ke]===this.content){he=ke;continue}else break}return X.slice(ae,he)})}}class ze extends Ee{constructor(R){super(R),this.cleanup=R.cleanup}decode_chain(R){return R.map((X,ae)=>(ae!==0&&(X.startsWith(this.config.prefix)?X=X.replace(this.config.prefix,""):X=" "+X),this.cleanup&&(X=C(X)),X))}}class rt extends Ee{constructor(R){super(R),this.byte_decoder=q,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string(R){const X=R.join(""),ae=new Uint8Array([...X].map(fe=>this.byte_decoder[fe]));return this.text_decoder.decode(ae)}decode_chain(R){const X=[];let ae=[];for(const he of R)this.added_tokens.find(fe=>fe.content===he)!==void 0?(ae.length>0&&(X.push(this.convert_tokens_to_string(ae)),ae=[]),X.push(he)):ae.push(he);return ae.length>0&&X.push(this.convert_tokens_to_string(ae)),X}}class ct extends Ee{constructor(R){super(R),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string(R){if(R.length===0)return"";const X=[R[0]];for(let fe=1;fe<R.length;++fe)R[fe]!==X.at(-1)&&X.push(R[fe]);let he=X.filter(fe=>fe!==this.pad_token).join("");return this.cleanup&&(he=C(he).replaceAll(this.word_delimiter_token," ").trim()),he}decode_chain(R){return[this.convert_tokens_to_string(R)]}}class Wt extends Ee{constructor(R){super(R),this.decoders=R.decoders.map(X=>Ee.fromConfig(X))}decode_chain(R){return this.decoders.reduce((X,ae)=>ae.decode_chain(X),R)}}class It extends Ee{constructor(R){super(R),this.suffix=this.config.suffix}decode_chain(R){return R.map((X,ae)=>X.replaceAll(this.suffix,ae===R.length-1?"":" "))}}class Tt extends Ee{decode_chain(R){let X="";for(let ae=1;ae<R.length;ae+=2)X+=R[ae];return[X]}}class Ur extends ne{constructor(R){super(),this.addPrefixSpace=R.add_prefix_space,this.replacement=R.replacement,this.strRep=R.str_rep||this.replacement,this.prepend_scheme=R.prepend_scheme??"always"}pre_tokenize_text(R,{section_index:X=void 0}={}){let ae=R.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!ae.startsWith(this.replacement)&&(this.prepend_scheme==="always"||this.prepend_scheme==="first"&&X===0)&&(ae=this.strRep+ae),[ae]}}class Sr extends Ee{constructor(R){super(R),this.addPrefixSpace=R.add_prefix_space,this.replacement=R.replacement}decode_chain(R){const X=[];for(let ae=0;ae<R.length;++ae){let he=R[ae].replaceAll(this.replacement," ");this.addPrefixSpace&&ae==0&&he.startsWith(" ")&&(he=he.substring(1)),X.push(he)}return X}}class an extends Z{constructor(R){super(R),this.charsmap=R.precompiled_charsmap}normalize(R){return R=R.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,""),R=R.replace(/[\u0009\u000A\u000C\u000D\u00A0\u1680\u2000-\u200F\u2028\u2029\u202F\u205F\u2581\u3000\uFEFF\uFFFD]/gm," "),R.includes("～")?R=R.split("～").map(ae=>ae.normalize("NFKC")).join("～"):R=R.normalize("NFKC"),R}}class Pn extends ne{constructor(R){super(),this.tokenizers=R.pretokenizers.map(X=>ne.fromConfig(X))}pre_tokenize_text(R,X){return this.tokenizers.reduce((ae,he)=>he.pre_tokenize(ae,X),[R])}}class cr extends ne{constructor(R){super()}pre_tokenize_text(R,X){return R.match(/\w+|[^\w\s]+/g)||[]}}class Gr extends ne{constructor(R){super()}pre_tokenize_text(R,X){return x(R)}}class Rs extends ne{constructor(R){super(),this.config=R,this.pattern=m(this.config.pattern),this.content=this.config.content}pre_tokenize_text(R,X){return this.pattern===null?[R]:[R.replaceAll(this.pattern,this.config.content)]}}const Ns=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function js(ge,R,X,ae){for(const he of Object.keys(ge)){const fe=R-ge[he].length,ke=X(he),He=new Array(fe).fill(ke);ge[he]=ae==="right"?(0,i.mergeArrays)(ge[he],He):(0,i.mergeArrays)(He,ge[he])}}function Us(ge,R){for(const X of Object.keys(ge))ge[X].length=R}class vt extends n.Callable{constructor(X,ae){super();ie(this,"return_token_type_ids",!1);ie(this,"padding_side","right");this.config=ae,this.normalizer=Z.fromConfig(X.normalizer),this.pre_tokenizer=ne.fromConfig(X.pre_tokenizer),this.model=V.fromConfig(X.model,ae),this.post_processor=Me.fromConfig(X.post_processor),this.decoder=Ee.fromConfig(X.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const he of X.added_tokens){const fe=new B(he);this.added_tokens.push(fe),this.model.tokens_to_ids.set(fe.content,fe.id),this.model.vocab[fe.id]=fe.content,fe.special&&(this.special_tokens.push(fe.content),this.all_special_ids.push(fe.id))}if(this.additional_special_tokens=ae.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_splitter=new l.DictionarySplitter(this.added_tokens.map(he=>he.content)),this.added_tokens_map=new Map(this.added_tokens.map(he=>[he.content,he])),this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.bos_token=this.getToken("bos_token"),this.bos_token_id=this.model.tokens_to_ids.get(this.bos_token),this.eos_token=this.getToken("eos_token"),this.eos_token_id=this.model.tokens_to_ids.get(this.eos_token),this.model_max_length=ae.model_max_length,this.remove_space=ae.remove_space,this.clean_up_tokenization_spaces=ae.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=ae.do_lowercase_and_remove_accent??!1,ae.padding_side&&(this.padding_side=ae.padding_side),this.add_bos_token=ae.add_bos_token,this.add_eos_token=ae.add_eos_token,this.legacy=!1,this.chat_template=ae.chat_template??null,Array.isArray(this.chat_template)){const he=Object.create(null);for(const{name:fe,template:ke}of this.chat_template){if(typeof fe!="string"||typeof ke!="string")throw new Error('Chat template must be a list of objects with "name" and "template" properties');he[fe]=ke}this.chat_template=he}this._compiled_template_cache=new Map}getToken(...X){for(const ae of X){const he=this.config[ae];if(he)if(typeof he=="object"){if(he.__type==="AddedToken")return he.content;throw Error(`Unknown token: ${he}`)}else return he}return null}static async from_pretrained(X,{progress_callback:ae=null,config:he=null,cache_dir:fe=null,local_files_only:ke=!1,revision:He="main",legacy:et=null}={}){const Ze=await c(X,{progress_callback:ae,config:he,cache_dir:fe,local_files_only:ke,revision:He,legacy:et});return new this(...Ze)}_call(X,{text_pair:ae=null,add_special_tokens:he=!0,padding:fe=!1,truncation:ke=null,max_length:He=null,return_tensor:et=!0,return_token_type_ids:Ze=null}={}){const ot=Array.isArray(X);let St;if(ot){if(X.length===0)throw Error("text array must be non-empty");if(ae!==null){if(Array.isArray(ae)){if(X.length!==ae.length)throw Error("text and text_pair must have the same length")}else throw Error("text_pair must also be an array");St=X.map((qt,Mr)=>this._encode_plus(qt,{text_pair:ae[Mr],add_special_tokens:he,return_token_type_ids:Ze}))}else St=X.map(qt=>this._encode_plus(qt,{add_special_tokens:he,return_token_type_ids:Ze}))}else{if(X==null)throw Error("text may not be null or undefined");if(Array.isArray(ae))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");St=[this._encode_plus(X,{text_pair:ae,add_special_tokens:he,return_token_type_ids:Ze})]}if(He===null?He=this.model_max_length:ke===null&&(fe===!0?(console.warn("`max_length` is ignored when `padding: true` and there is no truncation strategy. To pad to max length, use `padding: 'max_length'`."),He=this.model_max_length):fe===!1&&(console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation: true` to explicitly truncate examples to max length."),ke=!0)),fe===!0&&(He=Math.min((0,a.max)(St.map(qt=>qt.input_ids.length))[0],He??1/0)),He=Math.min(He,this.model_max_length??1/0),fe||ke)for(let qt=0;qt<St.length;++qt)St[qt].input_ids.length!==He&&(St[qt].input_ids.length>He?ke&&Us(St[qt],He):fe&&js(St[qt],He,Mr=>Mr==="input_ids"?this.pad_token_id:0,this.padding_side));const Jt={};if(et){if(!(fe&&ke)&&St.some(Mr=>{var ir;for(const Wr of Object.keys(Mr))if(Mr[Wr].length!==((ir=St[0][Wr])==null?void 0:ir.length))return!0;return!1}))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const qt=[St.length,St[0].input_ids.length];for(const Mr of Object.keys(St[0]))Jt[Mr]=new o.Tensor("int64",BigInt64Array.from(St.flatMap(ir=>ir[Mr]).map(BigInt)),qt)}else{for(const qt of Object.keys(St[0]))Jt[qt]=St.map(Mr=>Mr[qt]);if(!ot)for(const qt of Object.keys(Jt))Jt[qt]=Jt[qt][0]}return Jt}_encode_text(X){if(X===null)return null;const ae=this.added_tokens_splitter.split(X);for(let fe=0;fe<ae.length;++fe){const ke=this.added_tokens_map.get(ae[fe]);ke&&(ke.lstrip&&fe>0&&(ae[fe-1]=ae[fe-1].trimEnd()),ke.rstrip&&fe<ae.length-1&&(ae[fe+1]=ae[fe+1].trimStart()))}return ae.flatMap((fe,ke)=>{if(fe.length===0)return[];if(this.added_tokens_map.has(fe))return[fe];if(this.remove_space===!0&&(fe=fe.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(fe=g(fe)),this.normalizer!==null&&(fe=this.normalizer(fe)),fe.length===0)return[];const He=this.pre_tokenizer!==null?this.pre_tokenizer(fe,{section_index:ke}):[fe];return this.model(He)})}_encode_plus(X,{text_pair:ae=null,add_special_tokens:he=!0,return_token_type_ids:fe=null}={}){const{tokens:ke,token_type_ids:He}=this._tokenize_helper(X,{pair:ae,add_special_tokens:he}),et=this.model.convert_tokens_to_ids(ke),Ze={input_ids:et,attention_mask:new Array(et.length).fill(1)};return(fe??this.return_token_type_ids)&&He&&(Ze.token_type_ids=He),Ze}_tokenize_helper(X,{pair:ae=null,add_special_tokens:he=!1}={}){const fe=this._encode_text(X),ke=this._encode_text(ae);return this.post_processor?this.post_processor(fe,ke,{add_special_tokens:he}):{tokens:(0,i.mergeArrays)(fe??[],ke??[])}}tokenize(X,{pair:ae=null,add_special_tokens:he=!1}={}){return this._tokenize_helper(X,{pair:ae,add_special_tokens:he}).tokens}encode(X,{text_pair:ae=null,add_special_tokens:he=!0,return_token_type_ids:fe=null}={}){return this._encode_plus(X,{text_pair:ae,add_special_tokens:he,return_token_type_ids:fe}).input_ids}batch_decode(X,ae={}){return X instanceof o.Tensor&&(X=X.tolist()),X.map(he=>this.decode(he,ae))}decode(X,ae={}){if(X instanceof o.Tensor&&(X=w(X)),!Array.isArray(X)||X.length===0||!(0,i.isIntegralNumber)(X[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(X,ae)}decode_single(X,{skip_special_tokens:ae=!1,clean_up_tokenization_spaces:he=null}){let fe=this.model.convert_ids_to_tokens(X);ae&&(fe=fe.filter(He=>!this.special_tokens.includes(He)));let ke=this.decoder?this.decoder(fe):fe.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&(ke=ke.replaceAll(this.decoder.end_of_word_suffix," "),ae&&(ke=ke.trim())),(he??this.clean_up_tokenization_spaces)&&(ke=C(ke)),ke}get_chat_template({chat_template:X=null,tools:ae=null}={}){if(this.chat_template&&typeof this.chat_template=="object"){const he=this.chat_template;if(X!==null&&Object.hasOwn(he,X))X=he[X];else if(X===null)if(ae!==null&&"tool_use"in he)X=he.tool_use;else if("default"in he)X=he.default;else throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(he).sort()}.`)}else if(X===null)if(this.chat_template)X=this.chat_template;else throw Error("Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating");return X}apply_chat_template(X,{tools:ae=null,documents:he=null,chat_template:fe=null,add_generation_prompt:ke=!1,tokenize:He=!0,padding:et=!1,truncation:Ze=!1,max_length:ot=null,return_tensor:St=!0,return_dict:Jt=!1,tokenizer_kwargs:qt={},...Mr}={}){if(fe=this.get_chat_template({chat_template:fe,tools:ae}),typeof fe!="string")throw Error(`chat_template must be a string, but got ${typeof fe}`);let ir=this._compiled_template_cache.get(fe);ir===void 0&&(ir=new u.Template(fe),this._compiled_template_cache.set(fe,ir));const Wr=Object.create(null);for(const dr of Ns){const pr=this.getToken(dr);pr&&(Wr[dr]=pr)}const Dr=ir.render({messages:X,add_generation_prompt:ke,tools:ae,documents:he,...Wr,...Mr});if(He){const dr=this._call(Dr,{add_special_tokens:!1,padding:et,truncation:Ze,max_length:ot,return_tensor:St,...qt});return Jt?dr:dr.input_ids}return Dr}}class jn extends vt{constructor(){super(...arguments);ie(this,"return_token_type_ids",!0)}}class Un extends vt{constructor(){super(...arguments);ie(this,"return_token_type_ids",!0)}}class Bt extends vt{constructor(){super(...arguments);ie(this,"return_token_type_ids",!0)}}class Ot extends vt{constructor(){super(...arguments);ie(this,"return_token_type_ids",!0)}}class z extends vt{constructor(){super(...arguments);ie(this,"return_token_type_ids",!0)}}class se extends vt{constructor(){super(...arguments);ie(this,"return_token_type_ids",!0)}}class G extends vt{constructor(){super(...arguments);ie(this,"return_token_type_ids",!0)}}class ee extends vt{constructor(){super(...arguments);ie(this,"return_token_type_ids",!0)}}class le extends vt{constructor(){super(...arguments);ie(this,"return_token_type_ids",!0)}}class xe extends vt{}class Re extends vt{}class lt extends vt{constructor(X,ae){super(X,ae);ie(this,"return_token_type_ids",!0);console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class Et extends vt{constructor(){super(...arguments);ie(this,"return_token_type_ids",!0)}}class xt extends vt{}class At extends vt{}class ut extends vt{}class Kt extends vt{constructor(R,X){super(R,X),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter(ae=>this.languageRegex.test(ae)),this.lang_to_token=ae=>ae}_build_translation_inputs(R,X,ae){return $r(this,R,X,ae)}}class er extends Kt{}class on extends vt{}class fn extends vt{}const nr="▁";class Hr extends vt{constructor(X,ae){super(X,ae);ie(this,"padding_side","left");this.legacy=ae.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new Ur({replacement:nr,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(X){if(X===null)return null;if(this.legacy||X.length===0)return super._encode_text(X);let ae=super._encode_text(nr+X.replaceAll(nr," "));return ae.length>1&&ae[0]===nr&&this.special_tokens.includes(ae[1])&&(ae=ae.slice(1)),ae}}class gr extends vt{}class Yr extends vt{}class Mn extends vt{}class br extends vt{}class Wn extends vt{}class ns extends vt{}class Or extends vt{}class mn extends vt{}class _n extends vt{}function $r(ge,R,X,ae){if(!("language_codes"in ge)||!Array.isArray(ge.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in ge)||!(ge.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in ge)||typeof ge.lang_to_token!="function")throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const he=ae.src_lang,fe=ae.tgt_lang;if(!ge.language_codes.includes(fe))throw new Error(`Target language code "${fe}" is not valid. Must be one of: {${ge.language_codes.join(", ")}}`);if(he!==void 0){if(!ge.language_codes.includes(he))throw new Error(`Source language code "${he}" is not valid. Must be one of: {${ge.language_codes.join(", ")}}`);for(const ke of ge.post_processor.config.single)if("SpecialToken"in ke&&ge.languageRegex.test(ke.SpecialToken.id)){ke.SpecialToken.id=ge.lang_to_token(he);break}}return ae.forced_bos_token_id=ge.model.convert_tokens_to_ids([ge.lang_to_token(fe)])[0],ge._call(R,X)}class Cn extends vt{constructor(R,X){super(R,X),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter(ae=>this.languageRegex.test(ae)),this.lang_to_token=ae=>ae}_build_translation_inputs(R,X,ae){return $r(this,R,X,ae)}}class Xt extends vt{constructor(R,X){super(R,X),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter(ae=>this.languageRegex.test(ae)).map(ae=>ae.slice(2,-2)),this.lang_to_token=ae=>`__${ae}__`}_build_translation_inputs(R,X,ae){return $r(this,R,X,ae)}}class sr extends vt{get timestamp_begin(){return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1}_decode_asr(R,{return_timestamps:X=!1,return_language:ae=!1,time_precision:he=null,force_full_sequences:fe=!0}={}){if(he===null)throw Error("Must specify time_precision");let ke=null;const He=X==="word";function et(){return{language:ke,timestamp:[null,null],text:""}}const Ze=[];let ot=et(),St=0;const Jt=this.timestamp_begin,Mr=Jt+1500;let ir=[],Wr=[],Dr=!1,dr=null;const pr=new Set(this.all_special_ids);for(const wr of R){const Br=wr.tokens,wn=He?wr.token_timestamps:null;let Qr=null,Gn=Jt;if("stride"in wr){const[Tr,kr,Lr]=wr.stride;if(St-=kr,dr=Tr-Lr,kr&&(Gn=kr/he+Jt),Lr)for(let yr=Br.length-1;yr>=0;--yr){const yn=Number(Br[yr]);if(yn>=Jt){if(Qr!==null&&(yn-Jt)*he<dr)break;Qr=yn}}}let qr=[],Dn=[];for(let Tr=0;Tr<Br.length;++Tr){const kr=Number(Br[Tr]);if(pr.has(kr)){const Lr=this.decode([kr]),yr=d.WHISPER_LANGUAGE_MAPPING.get(Lr.slice(2,-2));if(yr!==void 0){if(ke!==null&&yr!==ke&&!X){ir.push(qr);const yn=this.findLongestCommonSequence(ir)[0],Ps=this.decode(yn);ot.text=Ps,Ze.push(ot),ir=[],qr=[],ot=et()}ke=ot.language=yr}}else if(kr>=Jt&&kr<=Mr){const Lr=(kr-Jt)*he+St,yr=(0,a.round)(Lr,2);if(Qr!==null&&kr>=Qr)Dr=!0;else if(Dr||ir.length>0&&kr<Gn)Dr=!1;else if(ot.timestamp[0]===null)ot.timestamp[0]=yr;else if(yr!==ot.timestamp[0]){ot.timestamp[1]=yr,ir.push(qr),He&&Wr.push(Dn);const[yn,Ps]=this.findLongestCommonSequence(ir,Wr),pi=this.decode(yn);ot.text=pi,He&&(ot.words=this.collateWordTimestamps(yn,Ps,ke)),Ze.push(ot),ir=[],qr=[],Wr=[],Dn=[],ot=et()}}else if(qr.push(kr),He){let Lr=(0,a.round)(wn[Tr]+St,2),yr;if(Tr+1<wn.length){yr=(0,a.round)(wn[Tr+1]+St,2);const yn=this.decode([kr]);E.test(yn)&&(yr=(0,a.round)(Math.min(Lr+he,yr),2))}else yr=null;Dn.push([Lr,yr])}}if("stride"in wr){const[Tr,kr,Lr]=wr.stride;St+=Tr-Lr}qr.length>0?(ir.push(qr),He&&Wr.push(Dn)):ir.every(Tr=>Tr.length===0)&&(ot=et(),ir=[],qr=[],Wr=[],Dn=[])}if(ir.length>0){if(fe&&X)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[wr,Br]=this.findLongestCommonSequence(ir,Wr),wn=this.decode(wr);ot.text=wn,He&&(ot.words=this.collateWordTimestamps(wr,Br,ke)),Ze.push(ot)}let Kr=Object.create(null);const Zr=Ze.map(wr=>wr.text).join("");if(X||ae){for(let wr=0;wr<Ze.length;++wr){const Br=Ze[wr];X||delete Br.timestamp,ae||delete Br.language}if(He){const wr=[];for(const Br of Ze)for(const wn of Br.words)wr.push(wn);Kr={chunks:wr}}else Kr={chunks:Ze}}return[Zr,Kr]}findLongestCommonSequence(R,X=null){let ae=R[0],he=ae.length,fe=[];const ke=Array.isArray(X)&&X.length>0;let He=ke?[]:null,et=ke?X[0]:null;for(let Ze=1;Ze<R.length;++Ze){const ot=R[Ze];let St=0,Jt=[he,he,0,0];const qt=ot.length;for(let Kr=1;Kr<he+qt;++Kr){const Zr=Math.max(0,he-Kr),wr=Math.min(he,he+qt-Kr),Br=ae.slice(Zr,wr),wn=Math.max(0,Kr-he),Qr=Math.min(qt,Kr),Gn=ot.slice(wn,Qr);if(Br.length!==Gn.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");let qr;ke?qr=Br.filter((kr,Lr)=>kr===Gn[Lr]&&et[Zr+Lr]<=X[Ze][wn+Lr]).length:qr=Br.filter((kr,Lr)=>kr===Gn[Lr]).length;const Dn=Kr/1e4,Tr=qr/Kr+Dn;qr>1&&Tr>St&&(St=Tr,Jt=[Zr,wr,wn,Qr])}const[Mr,ir,Wr,Dr]=Jt,dr=Math.floor((ir+Mr)/2),pr=Math.floor((Dr+Wr)/2);fe.push(...ae.slice(0,dr)),ae=ot.slice(pr),he=ae.length,ke&&(He.push(...et.slice(0,dr)),et=X[Ze].slice(pr))}return fe.push(...ae),ke?(He.push(...et),[fe,He]):[fe,[]]}collateWordTimestamps(R,X,ae){const[he,fe,ke]=this.combineTokensIntoWords(R,ae),He=[];for(let et=0;et<he.length;++et){const Ze=ke[et];He.push({text:he[et],timestamp:[X[Ze.at(0)][0],X[Ze.at(-1)][1]]})}return He}combineTokensIntoWords(R,X,ae=`"'“¡¿([{-`,he=`"'.。,，!！?？:：”)]}、`){X=X??"english";let fe,ke,He;return["chinese","japanese","thai","lao","myanmar"].includes(X)?[fe,ke,He]=this.splitTokensOnUnicode(R):[fe,ke,He]=this.splitTokensOnSpaces(R),this.mergePunctuations(fe,ke,He,ae,he)}decode(R,X){let ae;return X!=null&&X.decode_with_timestamps?(R instanceof o.Tensor&&(R=w(R)),ae=this.decodeWithTimestamps(R,X)):ae=super.decode(R,X),ae}decodeWithTimestamps(R,X){const ae=(X==null?void 0:X.time_precision)??.02,he=Array.from(this.all_special_ids).at(-1)+1;let fe=[[]];for(let ke of R)if(ke=Number(ke),ke>=he){const He=((ke-he)*ae).toFixed(2);fe.push(`<|${He}|>`),fe.push([])}else fe[fe.length-1].push(ke);return fe=fe.map(ke=>typeof ke=="string"?ke:super.decode(ke,X)),fe.join("")}splitTokensOnUnicode(R){const X=this.decode(R,{decode_with_timestamps:!0}),ae="�",he=[],fe=[],ke=[];let He=[],et=[],Ze=0;for(let ot=0;ot<R.length;++ot){const St=R[ot];He.push(St),et.push(ot);const Jt=this.decode(He,{decode_with_timestamps:!0});(!Jt.includes(ae)||X[Ze+Jt.indexOf(ae)]===ae)&&(he.push(Jt),fe.push(He),ke.push(et),He=[],et=[],Ze+=Jt.length)}return[he,fe,ke]}splitTokensOnSpaces(R){const[X,ae,he]=this.splitTokensOnUnicode(R),fe=[],ke=[],He=[],et=new RegExp(`^[${T}]$`,"gu");for(let Ze=0;Ze<X.length;++Ze){const ot=X[Ze],St=ae[Ze],Jt=he[Ze],qt=St[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),Mr=ot.startsWith(" "),ir=ot.trim(),Wr=et.test(ir);if(qt||Mr||Wr||fe.length===0)fe.push(ot),ke.push(St),He.push(Jt);else{const Dr=fe.length-1;fe[Dr]+=ot,ke[Dr].push(...St),He[Dr].push(...Jt)}}return[fe,ke,He]}mergePunctuations(R,X,ae,he,fe){const ke=structuredClone(R),He=structuredClone(X),et=structuredClone(ae);let Ze=ke.length-2,ot=ke.length-1;for(;Ze>=0;)ke[Ze].startsWith(" ")&&he.includes(ke[Ze].trim())?(ke[ot]=ke[Ze]+ke[ot],He[ot]=(0,i.mergeArrays)(He[Ze],He[ot]),et[ot]=(0,i.mergeArrays)(et[Ze],et[ot]),ke[Ze]="",He[Ze]=[],et[Ze]=[]):ot=Ze,--Ze;for(Ze=0,ot=1;ot<ke.length;)!ke[Ze].endsWith(" ")&&fe.includes(ke[ot])?(ke[Ze]+=ke[ot],He[Ze]=(0,i.mergeArrays)(He[Ze],He[ot]),et[Ze]=(0,i.mergeArrays)(et[Ze],et[ot]),ke[ot]="",He[ot]=[],et[ot]=[]):Ze=ot,++ot;return[ke.filter(St=>St),He.filter(St=>St.length>0),et.filter(St=>St.length>0)]}}class ln extends vt{}class Ms extends vt{}class gn extends vt{}class Ve extends vt{constructor(R,X){super(R,X),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter(ae=>this.languageRegex.test(ae)),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text(R){if(R===null)return null;const[X,...ae]=R.trim().split(this.languageRegex);if(ae.length===0)return super._encode_text(X);if(ae.length===2){const[he,fe]=ae;return this.supported_language_codes.includes(he)||console.warn(`Unsupported language code "${he}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),(0,i.mergeArrays)([he],super._encode_text(fe))}}}class qe extends vt{}class at extends vt{}class mr extends vt{}class Ts extends vt{}class On extends vt{}class Es extends vt{constructor(R,X){super(R,X),this.decoder=new Tt({})}}class Vn extends vt{}class ui extends vt{}class di extends vt{}class ci{static async from_pretrained(R,{progress_callback:X=null,config:ae=null,cache_dir:he=null,local_files_only:fe=!1,revision:ke="main",legacy:He=null}={}){var Jt;const[et,Ze]=await c(R,{progress_callback:X,config:ae,cache_dir:he,local_files_only:fe,revision:ke,legacy:He}),ot=((Jt=Ze.tokenizer_class)==null?void 0:Jt.replace(/Fast$/,""))??"PreTrainedTokenizer";let St=this.TOKENIZER_CLASS_MAPPING[ot];return St||(console.warn(`Unknown tokenizer class "${ot}", attempting to construct from base class.`),St=vt),new St(et,Ze)}}ie(ci,"TOKENIZER_CLASS_MAPPING",{T5Tokenizer:xt,DistilBertTokenizer:xe,CamembertTokenizer:Re,DebertaTokenizer:z,DebertaV2Tokenizer:se,BertTokenizer:jn,HerbertTokenizer:G,ConvBertTokenizer:ee,RoFormerTokenizer:le,XLMTokenizer:lt,ElectraTokenizer:Et,MobileBertTokenizer:Bt,SqueezeBertTokenizer:Ot,AlbertTokenizer:Un,GPT2Tokenizer:At,BartTokenizer:ut,MBartTokenizer:Kt,MBart50Tokenizer:er,RobertaTokenizer:on,WhisperTokenizer:sr,CodeGenTokenizer:ln,CLIPTokenizer:Ms,SiglipTokenizer:gn,MarianTokenizer:Ve,BloomTokenizer:fn,NllbTokenizer:Cn,M2M100Tokenizer:Xt,LlamaTokenizer:Hr,CodeLlamaTokenizer:gr,XLMRobertaTokenizer:Yr,MPNetTokenizer:Mn,FalconTokenizer:br,GPTNeoXTokenizer:Wn,EsmTokenizer:ns,Wav2Vec2CTCTokenizer:qe,BlenderbotTokenizer:at,BlenderbotSmallTokenizer:mr,SpeechT5Tokenizer:Ts,NougatTokenizer:On,VitsTokenizer:Es,Qwen2Tokenizer:Or,GemmaTokenizer:mn,Grok1Tokenizer:_n,CohereTokenizer:Vn,MgpstrTokenizer:ui,Ernie4_5_Tokenizer:di,PreTrainedTokenizer:vt})},"./src/utils/audio.js":(e,t,r)=>{r.r(t),r.d(t,{RawAudio:()=>W,hamming:()=>p,hanning:()=>c,mel_filter_bank:()=>P,read_audio:()=>u,spectrogram:()=>S,window_function:()=>O});var n=r("./src/utils/hub.js"),i=r("./src/utils/maths.js"),s=r("./src/utils/core.js"),a=r("./src/env.js"),o=r("./src/utils/tensor.js"),l=r("?7992");async function u(N,te){if(typeof AudioContext>"u")throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const q=await(await(0,n.getFile)(N)).arrayBuffer(),K=new AudioContext({sampleRate:te});typeof te>"u"&&console.warn(`No sampling rate provided, using default of ${K.sampleRate}Hz.`);const Y=await K.decodeAudioData(q);let Z;if(Y.numberOfChannels===2){const de=Math.sqrt(2),pe=Y.getChannelData(0),L=Y.getChannelData(1);Z=new Float32Array(pe.length);for(let F=0;F<Y.length;++F)Z[F]=de*(pe[F]+L[F])/2}else Z=Y.getChannelData(0);return Z}function d(N,te){if(N<1)return new Float64Array;if(N===1)return new Float64Array([1]);const q=1-te,K=2*Math.PI/(N-1),Y=new Float64Array(N);for(let Z=0;Z<N;++Z)Y[Z]=te-q*Math.cos(Z*K);return Y}function c(N){return d(N,.5)}function p(N){return d(N,.54)}const m={htk:N=>2595*Math.log10(1+N/700),kaldi:N=>1127*Math.log(1+N/700),slaney:(N,te=1e3,q=15,K=27/Math.log(6.4))=>N>=te?q+Math.log(N/te)*K:3*N/200};function f(N,te="htk"){const q=m[te];if(!q)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof N=="number"?q(N):N.map(K=>q(K))}const w={htk:N=>700*(10**(N/2595)-1),kaldi:N=>700*(Math.exp(N/1127)-1),slaney:(N,te=1e3,q=15,K=Math.log(6.4)/27)=>N>=q?te*Math.exp(K*(N-q)):200*N/3};function C(N,te="htk"){const q=w[te];if(!q)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof N=="number"?q(N):N.map(K=>q(K))}function y(N,te){const q=Float64Array.from({length:te.length-1},(de,pe)=>te[pe+1]-te[pe]),K=Array.from({length:N.length},()=>new Array(te.length));for(let de=0;de<N.length;++de){const pe=K[de];for(let L=0;L<te.length;++L)pe[L]=te[L]-N[de]}const Y=te.length-2,Z=Array.from({length:Y},()=>new Array(N.length));for(let de=0;de<N.length;++de){const pe=K[de];for(let L=0;L<Y;++L){const F=-pe[L]/q[L],U=pe[L+2]/q[L+1];Z[L][de]=Math.max(0,Math.min(F,U))}}return Z}function g(N,te,q){const K=(te-N)/(q-1);return Float64Array.from({length:q},(Y,Z)=>N+K*Z)}function P(N,te,q,K,Y,Z=null,de="htk",pe=!1){if(Z!==null&&Z!=="slaney")throw new Error('norm must be one of null or "slaney"');if(N<2)throw new Error(`Require num_frequency_bins: ${N} >= 2`);if(q>K)throw new Error(`Require min_frequency: ${q} <= max_frequency: ${K}`);const L=f(q,de),F=f(K,de),U=g(L,F,te+2);let re=C(U,de),me;if(pe){const we=Y/((N-1)*2);me=f(Float64Array.from({length:N},(je,Ge)=>Ge*we),de),re=U}else me=g(0,Math.floor(Y/2),N);const J=y(me,re);if(Z!==null&&Z==="slaney")for(let we=0;we<te;++we){const je=J[we],Ge=2/(re[we+2]-re[we]);for(let Ae=0;Ae<N;++Ae)je[Ae]*=Ge}return J}function b(N,te,q){const K=new N.constructor(N.length+te+q),Y=N.length-1;for(let Z=0;Z<N.length;++Z)K[te+Z]=N[Z];for(let Z=1;Z<=te;++Z)K[te-Z]=N[(0,s.calculateReflectOffset)(Z,Y)];for(let Z=1;Z<=q;++Z)K[Y+te+Z]=N[(0,s.calculateReflectOffset)(Y-Z,Y)];return K}function x(N,te,q,K,Y){if(q<=0)throw new Error("reference must be greater than zero");if(K<=0)throw new Error("min_value must be greater than zero");q=Math.max(K,q);const Z=Math.log10(q);for(let de=0;de<N.length;++de)N[de]=te*Math.log10(Math.max(K,N[de])-Z);if(Y!==null){if(Y<=0)throw new Error("db_range must be greater than zero");const de=(0,i.max)(N)[0]-Y;for(let pe=0;pe<N.length;++pe)N[pe]=Math.max(N[pe],de)}return N}function T(N,te=1,q=1e-5,K=null){return x(N,20,te,q,K)}function E(N,te=1,q=1e-10,K=null){return x(N,10,te,q,K)}async function S(N,te,q,K,{fft_length:Y=null,power:Z=1,center:de=!0,pad_mode:pe="reflect",onesided:L=!0,preemphasis:F=null,preemphasis_htk_flavor:U=!0,mel_filters:re=null,mel_floor:me=1e-10,log_mel:J=null,reference:we=1,min_value:je=1e-10,db_range:Ge=null,remove_dc_offset:Ae=null,min_num_frames:ne=null,max_num_frames:oe=null,do_pad:H=!0,transpose:be=!1}={}){const Oe=te.length;if(Y===null&&(Y=q),q>Y)throw Error(`frame_length (${q}) may not be larger than fft_length (${Y})`);if(Oe!==q)throw new Error(`Length of the window (${Oe}) must equal frame_length (${q})`);if(K<=0)throw new Error("hop_length must be greater than zero");if(Z===null&&re!==null)throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");if(!U)throw new Error("`preemphasis_htk_flavor=false` is not currently supported.");if(de){if(pe!=="reflect")throw new Error(`pad_mode="${pe}" not implemented yet.`);const Ye=Math.floor((Y-1)/2)+1;N=b(N,Ye,Ye)}let Se=Math.floor(1+Math.floor((N.length-q)/K));ne!==null&&Se<ne&&(Se=ne);const Me=L?Math.floor(Y/2)+1:Y;let Ie=Se,$e=Se;oe!==null&&(oe>Se?H&&($e=oe):$e=Ie=oe);const Le=new i.FFT(Y),We=new Float64Array(Y),tt=new Float64Array(Le.outputBufferSize),Ee=new Float32Array(Me*$e);for(let Ye=0;Ye<Ie;++Ye){const ze=Ye*K,rt=Math.min(N.length-ze,q);rt!==q&&We.fill(0,0,q);for(let ct=0;ct<rt;++ct)We[ct]=N[ze+ct];if(Ae){let ct=0;for(let It=0;It<rt;++It)ct+=We[It];const Wt=ct/rt;for(let It=0;It<rt;++It)We[It]-=Wt}if(F!==null){for(let ct=rt-1;ct>=1;--ct)We[ct]-=F*We[ct-1];We[0]*=1-F}for(let ct=0;ct<te.length;++ct)We[ct]*=te[ct];Le.realTransform(tt,We);for(let ct=0;ct<Me;++ct){const Wt=ct<<1;Ee[ct*$e+Ye]=tt[Wt]**2+tt[Wt+1]**2}}if(Z!==null&&Z!==2){const Ye=Z/2;for(let ze=0;ze<Ee.length;++ze)Ee[ze]**=Ye}const it=re.length;let Je=await(0,o.matmul)(new o.Tensor("float32",re.flat(),[it,Me]),new o.Tensor("float32",Ee,[Me,$e]));be&&(Je=Je.transpose(1,0));const dt=Je.data;for(let Ye=0;Ye<dt.length;++Ye)dt[Ye]=Math.max(me,dt[Ye]);if(Z!==null&&J!==null){const Ye=Math.min(dt.length,Ie*it);switch(J){case"log":for(let ze=0;ze<Ye;++ze)dt[ze]=Math.log(dt[ze]);break;case"log10":for(let ze=0;ze<Ye;++ze)dt[ze]=Math.log10(dt[ze]);break;case"dB":if(Z===1)T(dt,we,je,Ge);else if(Z===2)E(dt,we,je,Ge);else throw new Error(`Cannot use log_mel option '${J}' with power ${Z}`);break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${J}'`)}}return Je}function O(N,te,{periodic:q=!0,frame_length:K=null,center:Y=!0}={}){const Z=q?N+1:N;let de;switch(te){case"boxcar":de=new Float64Array(Z).fill(1);break;case"hann":case"hann_window":de=c(Z);break;case"hamming":de=p(Z);break;case"povey":de=c(Z).map(pe=>Math.pow(pe,.85));break;default:throw new Error(`Unknown window type ${te}.`)}if(q&&(de=de.subarray(0,N)),K===null)return de;if(N>K)throw new Error(`Length of the window (${N}) may not be larger than frame_length (${K})`);return de}function B(N,te){let q=44;const K=new ArrayBuffer(q+N.length*4),Y=new DataView(K);V(Y,0,"RIFF"),Y.setUint32(4,36+N.length*4,!0),V(Y,8,"WAVE"),V(Y,12,"fmt "),Y.setUint32(16,16,!0),Y.setUint16(20,3,!0),Y.setUint16(22,1,!0),Y.setUint32(24,te,!0),Y.setUint32(28,te*4,!0),Y.setUint16(32,4,!0),Y.setUint16(34,32,!0),V(Y,36,"data"),Y.setUint32(40,N.length*4,!0);for(let Z=0;Z<N.length;++Z,q+=4)Y.setFloat32(q,N[Z],!0);return K}function V(N,te,q){for(let K=0;K<q.length;++K)N.setUint8(te+K,q.charCodeAt(K))}class W{constructor(te,q){this.audio=te,this.sampling_rate=q}toWav(){return B(this.audio,this.sampling_rate)}toBlob(){const te=this.toWav();return new Blob([te],{type:"audio/wav"})}async save(te){let q;if(a.apis.IS_BROWSER_ENV){if(a.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save a file from a Web Worker.");q=s.saveBlob}else if(a.apis.IS_FS_AVAILABLE)q=async(K,Y)=>{let Z=await Y.arrayBuffer();l.writeFileSync(K,Buffer.from(Z))};else throw new Error("Unable to save because filesystem is disabled in this environment.");await q(te,this.toBlob())}}},"./src/utils/constants.js":(e,t,r)=>{r.r(t),r.d(t,{CHAT_TEMPLATE_NAME:()=>l,CONFIG_NAME:()=>i,FEATURE_EXTRACTOR_NAME:()=>s,GENERATION_CONFIG_NAME:()=>u,GITHUB_ISSUE_URL:()=>n,IMAGE_PROCESSOR_NAME:()=>a,PROCESSOR_NAME:()=>o});const n="https://github.com/huggingface/transformers.js/issues/new/choose",i="config.json",s="preprocessor_config.json",a=s,o="processor_config.json",l="chat_template.jinja",u="generation_config.json"},"./src/utils/core.js":(e,t,r)=>{r.r(t),r.d(t,{calculateDimensions:()=>u,calculateReflectOffset:()=>m,count:()=>y,dispatchCallback:()=>n,escapeRegExp:()=>s,isIntegralNumber:()=>o,isNullishDimension:()=>l,isTypedArray:()=>a,len:()=>C,mergeArrays:()=>c,pick:()=>w,pop:()=>d,product:()=>p,reverseDictionary:()=>i,saveBlob:()=>f});function n(g,P){g&&g(P)}function i(g){return Object.fromEntries(Object.entries(g).map(([P,b])=>[b,P]))}function s(g){return g.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function a(g){var P,b,x;return((x=(b=(P=g==null?void 0:g.prototype)==null?void 0:P.__proto__)==null?void 0:b.constructor)==null?void 0:x.name)==="TypedArray"}function o(g){return Number.isInteger(g)||typeof g=="bigint"}function l(g){return g==null||g===-1}function u(g){const P=[];let b=g;for(;Array.isArray(b);)P.push(b.length),b=b[0];return P}function d(g,P,b=void 0){const x=g[P];if(x!==void 0)return delete g[P],x;if(b===void 0)throw Error(`Key ${P} does not exist in object.`);return b}function c(...g){return Array.prototype.concat.apply([],g)}function p(...g){return g.reduce((P,b)=>P.flatMap(x=>b.map(T=>[x,T])))}function m(g,P){return Math.abs((g+P)%(2*P)-P)}function f(g,P){const b=URL.createObjectURL(P),x=document.createElement("a");x.href=b,x.download=g,x.click(),x.remove(),URL.revokeObjectURL(b)}function w(g,P){return Object.assign({},...P.map(b=>{if(g[b]!==void 0)return{[b]:g[b]}}))}function C(g){let P=0;for(const b of g)++P;return P}function y(g,P){let b=0;for(const x of g)x===P&&++b;return b}},"./src/utils/data-structures.js":(e,t,r)=>{r.r(t),r.d(t,{CharTrie:()=>i,DictionarySplitter:()=>l,LRUCache:()=>u,PriorityQueue:()=>n,TokenLattice:()=>a});class n{constructor(c=(m,f)=>m>f,p=1/0){this._heap=[],this._comparator=c,this._maxSize=p}get size(){return this._heap.length}isEmpty(){return this.size===0}peek(){return this._heap[0]}push(...c){return this.extend(c)}extend(c){for(const p of c)if(this.size<this._maxSize)this._heap.push(p),this._siftUp();else{const m=this._smallest();this._comparator(p,this._heap[m])&&(this._heap[m]=p,this._siftUpFrom(m))}return this.size}pop(){const c=this.peek(),p=this.size-1;return p>0&&this._swap(0,p),this._heap.pop(),this._siftDown(),c}replace(c){const p=this.peek();return this._heap[0]=c,this._siftDown(),p}_parent(c){return(c+1>>>1)-1}_left(c){return(c<<1)+1}_right(c){return c+1<<1}_greater(c,p){return this._comparator(this._heap[c],this._heap[p])}_swap(c,p){const m=this._heap[c];this._heap[c]=this._heap[p],this._heap[p]=m}_siftUp(){this._siftUpFrom(this.size-1)}_siftUpFrom(c){for(;c>0&&this._greater(c,this._parent(c));)this._swap(c,this._parent(c)),c=this._parent(c)}_siftDown(){let c=0;for(;this._left(c)<this.size&&this._greater(this._left(c),c)||this._right(c)<this.size&&this._greater(this._right(c),c);){const p=this._right(c)<this.size&&this._greater(this._right(c),this._left(c))?this._right(c):this._left(c);this._swap(c,p),c=p}}_smallest(){return 2**Math.floor(Math.log2(this.size))-1}}class i{constructor(){this.root=s.default()}extend(c){for(const p of c)this.push(p)}push(c){let p=this.root;for(const m of c){let f=p.children.get(m);f===void 0&&(f=s.default(),p.children.set(m,f)),p=f}p.isLeaf=!0}*commonPrefixSearch(c){let p=this.root;if(p===void 0)return;let m="";for(const f of c){if(m+=f,p=p.children.get(f),p===void 0)return;p.isLeaf&&(yield m)}}}class s{constructor(c,p){this.isLeaf=c,this.children=p}static default(){return new s(!1,new Map)}}class a{constructor(c,p,m){this.chars=Array.from(c),this.len=this.chars.length,this.bosTokenId=p,this.eosTokenId=m,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},()=>[]),this.endNodes=Array.from({length:this.len+1},()=>[]);const f=new o(this.bosTokenId,0,0,0,0),w=new o(this.eosTokenId,1,this.len,0,0);this.nodes.push(f.clone()),this.nodes.push(w.clone()),this.beginNodes[this.len].push(w),this.endNodes[0].push(f)}insert(c,p,m,f){const w=this.nodes.length,C=new o(f,w,c,p,m);this.beginNodes[c].push(C),this.endNodes[c+p].push(C),this.nodes.push(C)}viterbi(){const c=this.len;let p=0;for(;p<=c;){if(this.beginNodes[p].length==0)return[];for(let y of this.beginNodes[p]){y.prev=null;let g=0,P=null;for(let b of this.endNodes[p]){const x=b.backtraceScore+y.score;(P===null||x>g)&&(P=b.clone(),g=x)}if(P!==null)y.prev=P,y.backtraceScore=g;else return[]}++p}const m=[],w=this.beginNodes[c][0].prev;if(w===null)return[];let C=w.clone();for(;C.prev!==null;)m.push(C.clone()),C=C.clone().prev.clone();return m.reverse(),m}piece(c){return this.chars.slice(c.pos,c.pos+c.length).join("")}tokens(){return this.viterbi().map(p=>this.piece(p))}tokenIds(){return this.viterbi().map(p=>p.tokenId)}}class o{constructor(c,p,m,f,w){this.tokenId=c,this.nodeId=p,this.pos=m,this.length=f,this.score=w,this.prev=null,this.backtraceScore=0}clone(){const c=new o(this.tokenId,this.nodeId,this.pos,this.length,this.score);return c.prev=this.prev,c.backtraceScore=this.backtraceScore,c}}class l{constructor(c){this.trie=this._buildTrie(c)}_buildTrie(c){var m;const p=Object.create(null);for(const f of c){let w=p;for(let C=0;C<f.length;++C)w=w[m=f[C]]??(w[m]=Object.create(null));w.end=f}return p}split(c){const p=[],m=c.length;let f=0,w=0;for(;w<m;){let C=this.trie,y=null,g=w;for(;g<m&&(C=C[c[g]]);)C.end&&(y=C.end),++g;y?(w>f&&p.push(c.slice(f,w)),p.push(y),w+=y.length,f=w):++w}return f<m&&p.push(c.slice(f)),p}}class u{constructor(c){this.capacity=c,this.cache=new Map}get(c){if(!this.cache.has(c))return;const p=this.cache.get(c);return this.cache.delete(c),this.cache.set(c,p),p}put(c,p){this.cache.has(c)&&this.cache.delete(c),this.cache.set(c,p),this.cache.size>this.capacity&&this.cache.delete(this.cache.keys().next().value)}clear(){this.cache.clear()}}},"./src/utils/devices.js":(e,t,r)=>{r.r(t),r.d(t,{DEVICE_TYPES:()=>n});const n=Object.freeze({auto:"auto",gpu:"gpu",cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:"webnn","webnn-npu":"webnn-npu","webnn-gpu":"webnn-gpu","webnn-cpu":"webnn-cpu"})},"./src/utils/dtypes.js":(e,t,r)=>{r.r(t),r.d(t,{DATA_TYPES:()=>a,DEFAULT_DEVICE_DTYPE_MAPPING:()=>o,DEFAULT_DTYPE_SUFFIX_MAPPING:()=>l,isWebGpuFp16Supported:()=>s});var n=r("./src/env.js"),i=r("./src/utils/devices.js");const s=function(){let u;return async function(){if(u===void 0)if(!n.apis.IS_WEBGPU_AVAILABLE)u=!1;else try{u=(await navigator.gpu.requestAdapter()).features.has("shader-f16")}catch{u=!1}return u}}(),a=Object.freeze({auto:"auto",fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8",q4:"q4",bnb4:"bnb4",q4f16:"q4f16"}),o=Object.freeze({[i.DEVICE_TYPES.wasm]:a.q8}),l=Object.freeze({[a.fp32]:"",[a.fp16]:"_fp16",[a.int8]:"_int8",[a.uint8]:"_uint8",[a.q8]:"_quantized",[a.q4]:"_q4",[a.q4f16]:"_q4f16",[a.bnb4]:"_bnb4"})},"./src/utils/generic.js":(e,t,r)=>{r.r(t),r.d(t,{Callable:()=>n});const n=class{constructor(){let i=function(...s){return i._call(...s)};return Object.setPrototypeOf(i,new.target.prototype)}_call(...i){throw Error("Must implement _call method in subclass")}}},"./src/utils/hub.js":(e,t,r)=>{r.r(t),r.d(t,{MAX_EXTERNAL_DATA_CHUNKS:()=>o,getFile:()=>m,getModelFile:()=>g,getModelJSON:()=>b,getModelText:()=>P});var n=r("?7992"),i=r("?5af5"),s=r("./src/env.js"),a=r("./src/utils/core.js");const o=100,l={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};class u{constructor(S){if(this.filePath=S,this.headers=new Headers,this.exists=n.existsSync(S),this.exists){this.status=200,this.statusText="OK";let O=n.statSync(S);this.headers.set("content-length",O.size.toString()),this.updateContentType();const B=n.createReadStream(S);this.body=new ReadableStream({start(V){B.on("data",W=>V.enqueue(W)),B.on("end",()=>V.close()),B.on("error",W=>V.error(W))},cancel(){B.destroy()}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const S=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",l[S]??"application/octet-stream")}clone(){let S=new u(this.filePath);return S.exists=this.exists,S.status=this.status,S.statusText=this.statusText,S.headers=new Headers(this.headers),S}async arrayBuffer(){return(await n.promises.readFile(this.filePath)).buffer}async blob(){const S=await n.promises.readFile(this.filePath);return new Blob([S],{type:this.headers.get("content-type")})}async text(){return await n.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function d(E,S=null,O=null){let B;try{B=new URL(E)}catch{return!1}return!(S&&!S.includes(B.protocol)||O&&!O.includes(B.hostname))}const c=/^(\b[\w\-.]+\b\/)?\b[\w\-.]{1,96}\b$/;function p(E){return!(!c.test(E)||E.includes("..")||E.includes("--")||E.endsWith(".git")||E.endsWith(".ipynb"))}async function m(E){var S;if(s.env.useFS&&!d(E,["http:","https:","blob:"]))return new u(E instanceof URL?E.protocol==="file:"?E.pathname:E.toString():E);if(typeof process<"u"&&((S=process==null?void 0:process.release)==null?void 0:S.name)==="node"){const O=!!(li!=null&&li.TESTING_REMOTELY),B=s.env.version,V=new Headers;if(V.set("User-Agent",`transformers.js/${B}; is_ci/${O};`),d(E,["http:","https:"],["huggingface.co","hf.co"])){const N=(li==null?void 0:li.HF_TOKEN)??(li==null?void 0:li.HF_ACCESS_TOKEN);N&&V.set("Authorization",`Bearer ${N}`)}return fetch(E,{headers:V})}else return fetch(E)}const f={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};function w(E,S,O){if(!O)return null;const B=f[E]??`Error (${E}) occurred while trying to load file`;throw Error(`${B}: "${S}".`)}class C{constructor(S){this.path=S}async match(S){let O=i.join(this.path,S),B=new u(O);if(B.exists)return B}async put(S,O,B=void 0){let V=i.join(this.path,S);try{const W=O.headers.get("Content-Length"),N=parseInt(W??"0");let te=0;await n.promises.mkdir(i.dirname(V),{recursive:!0});const q=n.createWriteStream(V),K=O.body.getReader();for(;;){const{done:Y,value:Z}=await K.read();if(Y)break;await new Promise((pe,L)=>{q.write(Z,F=>{if(F){L(F);return}pe()})}),te+=Z.length;const de=N?te/N*100:0;B==null||B({progress:de,loaded:te,total:N})}q.close()}catch(W){try{await n.promises.unlink(V)}catch{}throw W}}}async function y(E,...S){for(let O of S)try{let B=await E.match(O);if(B)return B}catch{continue}}async function g(E,S,O=!0,B={},V=!1){if(!s.env.allowLocalModels){if(B.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!s.env.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}(0,a.dispatchCallback)(B.progress_callback,{status:"initiate",name:E,file:S});let W;if(!W&&s.env.useCustomCache){if(!s.env.customCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!s.env.customCache.match||!s.env.customCache.put)throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache");W=s.env.customCache}if(!W&&s.env.useBrowserCache){if(typeof caches>"u")throw Error("Browser cache is not available in this environment.");try{W=await caches.open("transformers-cache")}catch(me){console.warn("An error occurred while opening the browser cache:",me)}}if(!W&&s.env.useFSCache){if(!s.apis.IS_FS_AVAILABLE)throw Error("File System Cache is not available in this environment.");W=new C(B.cache_dir??s.env.cacheDir)}const N=B.revision??"main",te=T(E,S),q=p(E),K=q?T(s.env.localModelPath,te):te,Y=T(s.env.remoteHost,s.env.remotePathTemplate.replaceAll("{model}",E).replaceAll("{revision}",encodeURIComponent(N)),S);let Z;const de=W instanceof C?N==="main"?te:T(E,N,S):Y;let pe=!1,L;W&&(L=await y(W,K,de));const F=L!==void 0;if(L===void 0){if(s.env.allowLocalModels)if(d(te,["http:","https:"])){if(B.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${te}.`);if(!s.env.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${te}.`)}else try{L=await m(K),Z=K}catch(J){console.warn(`Unable to load from local path "${K}": "${J}"`)}if(L===void 0||L.status===404){if(B.local_files_only||!s.env.allowRemoteModels){if(O)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${K}".`);return null}if(!q)throw Error(`Local file missing at "${K}" and download aborted due to invalid model ID "${E}".`);if(L=await m(Y),L.status!==200)return w(L.status,Y,O);Z=de}pe=W&&typeof Response<"u"&&L instanceof Response&&L.status===200}(0,a.dispatchCallback)(B.progress_callback,{status:"download",name:E,file:S});let U;if(!(s.apis.IS_NODE_ENV&&V)){let me;B.progress_callback?F&&typeof navigator<"u"&&/firefox/i.test(navigator.userAgent)?(me=new Uint8Array(await L.arrayBuffer()),(0,a.dispatchCallback)(B.progress_callback,{status:"progress",name:E,file:S,progress:100,loaded:me.length,total:me.length})):me=await x(L,J=>{(0,a.dispatchCallback)(B.progress_callback,{status:"progress",name:E,file:S,...J})}):me=new Uint8Array(await L.arrayBuffer()),U=me}if(pe&&Z&&await W.match(Z)===void 0&&(U?await W.put(Z,new Response(U,{headers:L.headers})).catch(me=>{console.warn(`Unable to add response to browser cache: ${me}.`)}):await W.put(Z,L,B.progress_callback)),(0,a.dispatchCallback)(B.progress_callback,{status:"done",name:E,file:S}),U){if(!s.apis.IS_NODE_ENV&&V)throw new Error("Cannot return path in a browser environment.");return U}if(L instanceof u)return L.filePath;const re=await(W==null?void 0:W.match(Z));if(re instanceof u)return re.filePath;if(re instanceof Response)return new Uint8Array(await re.arrayBuffer());if(typeof re=="string")return re;throw new Error("Unable to get model file path or buffer.")}async function P(E,S,O=!0,B={}){const V=await g(E,S,O,B,!1);return V===null?null:new TextDecoder("utf-8").decode(V)}async function b(E,S,O=!0,B={}){const V=await P(E,S,O,B);return V===null?{}:JSON.parse(V)}async function x(E,S){const O=E.headers.get("Content-Length");O===null&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let B=parseInt(O??"0"),V=new Uint8Array(B),W=0;const N=E.body.getReader();async function te(){const{done:q,value:K}=await N.read();if(q)return;const Y=W+K.length;if(Y>B){B=Y;const de=new Uint8Array(B);de.set(V),V=de}V.set(K,W),W=Y;const Z=W/B*100;return S({progress:Z,loaded:W,total:B}),te()}return await te(),V}function T(...E){return E=E.map((S,O)=>(O&&(S=S.replace(new RegExp("^/"),"")),O!==E.length-1&&(S=S.replace(new RegExp("/$"),"")),S)),E.join("/")}},"./src/utils/image.js":(e,t,r)=>{r.r(t),r.d(t,{RawImage:()=>f,load_image:()=>w});var n=r("./src/utils/core.js"),i=r("./src/utils/hub.js"),s=r("./src/env.js"),a=r("./src/utils/tensor.js"),o=r("?2b25");let l,u,d;const c=s.apis.IS_BROWSER_ENV||s.apis.IS_WEBWORKER_ENV;if(c)l=(C,y)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(C,y)},d=self.createImageBitmap,u=self.ImageData;else if(o)d=async C=>{const g=(await C.metadata()).channels,{data:P,info:b}=await C.rotate().raw().toBuffer({resolveWithObject:!0}),x=new f(new Uint8ClampedArray(P),b.width,b.height,b.channels);return g!==void 0&&g!==b.channels&&x.convert(g),x};else throw new Error("Unable to load image processing library.");const p={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},m=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class f{constructor(y,g,P,b){this.data=y,this.width=g,this.height=P,this.channels=b}get size(){return[this.width,this.height]}static async read(y){if(y instanceof f)return y;if(typeof y=="string"||y instanceof URL)return await this.fromURL(y);if(y instanceof Blob)return await this.fromBlob(y);if(typeof HTMLCanvasElement<"u"&&y instanceof HTMLCanvasElement||typeof OffscreenCanvas<"u"&&y instanceof OffscreenCanvas)return this.fromCanvas(y);throw new Error(`Unsupported input type: ${typeof y}`)}static fromCanvas(y){if(!c)throw new Error("fromCanvas() is only supported in browser environments.");const P=y.getContext("2d").getImageData(0,0,y.width,y.height).data;return new f(P,y.width,y.height,4)}static async fromURL(y){const g=await(0,i.getFile)(y);if(g.status!==200)throw new Error(`Unable to read image from "${y}" (${g.status} ${g.statusText})`);const P=await g.blob();return this.fromBlob(P)}static async fromBlob(y){if(c){const g=await d(y),P=l(g.width,g.height).getContext("2d");return P.drawImage(g,0,0),new this(P.getImageData(0,0,g.width,g.height).data,g.width,g.height,4)}else{const g=o(await y.arrayBuffer());return await d(g)}}static fromTensor(y,g="CHW"){if(y.dims.length!==3)throw new Error(`Tensor should have 3 dimensions, but has ${y.dims.length} dimensions.`);if(g==="CHW")y=y.transpose(1,2,0);else if(g!=="HWC")throw new Error(`Unsupported channel format: ${g}`);if(!(y.data instanceof Uint8ClampedArray||y.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${y.type}`);switch(y.dims[2]){case 1:case 2:case 3:case 4:return new f(y.data,y.dims[1],y.dims[0],y.dims[2]);default:throw new Error(`Unsupported number of channels: ${y.dims[2]}`)}}grayscale(){if(this.channels===1)return this;const y=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let g=0,P=0;g<this.data.length;g+=this.channels){const b=this.data[g],x=this.data[g+1],T=this.data[g+2];y[P++]=Math.round(.2989*b+.587*x+.114*T)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(y,this.width,this.height,1)}rgb(){if(this.channels===3)return this;const y=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let g=0,P=0;g<this.data.length;++g)y[P++]=this.data[g],y[P++]=this.data[g],y[P++]=this.data[g];break;case 4:for(let g=0,P=0;g<this.data.length;g+=4)y[P++]=this.data[g],y[P++]=this.data[g+1],y[P++]=this.data[g+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(y,this.width,this.height,3)}rgba(){if(this.channels===4)return this;const y=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let g=0,P=0;g<this.data.length;++g)y[P++]=this.data[g],y[P++]=this.data[g],y[P++]=this.data[g],y[P++]=255;break;case 3:for(let g=0,P=0;g<this.data.length;g+=3)y[P++]=this.data[g],y[P++]=this.data[g+1],y[P++]=this.data[g+2],y[P++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(y,this.width,this.height,4)}putAlpha(y){if(y.width!==this.width||y.height!==this.height)throw new Error(`Expected mask size to be ${this.width}x${this.height}, but got ${y.width}x${y.height}`);if(y.channels!==1)throw new Error(`Expected mask to have 1 channel, but got ${y.channels}`);const g=this.data,P=y.data,b=this.width*this.height;if(this.channels===3){const x=new Uint8ClampedArray(b*4);for(let T=0,E=0,S=0;T<b;++T)x[S++]=g[E++],x[S++]=g[E++],x[S++]=g[E++],x[S++]=P[T];return this._update(x,this.width,this.height,4)}else if(this.channels===4){for(let x=0;x<b;++x)g[4*x+3]=P[x];return this}throw new Error(`Expected image to have 3 or 4 channels, but got ${this.channels}`)}async resize(y,g,{resample:P=2}={}){if(this.width===y&&this.height===g)return this;let b=p[P]??P;const x=(0,n.isNullishDimension)(y),T=(0,n.isNullishDimension)(g);if(x&&T)return this;if(x?y=g/this.height*this.width:T&&(g=y/this.width*this.height),c){const E=this.channels,S=this.toCanvas(),O=l(y,g).getContext("2d");return O.drawImage(S,0,0,y,g),new f(O.getImageData(0,0,y,g).data,y,g,4).convert(E)}else{let E=this.toSharp();switch(b){case"box":case"hamming":(b==="box"||b==="hamming")&&(console.warn(`Resampling method ${b} is not yet supported. Using bilinear instead.`),b="bilinear");case"nearest":case"bilinear":case"bicubic":E=E.affine([y/this.width,0,0,g/this.height],{interpolator:b});break;case"lanczos":E=E.resize({width:y,height:g,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${b} is not supported.`)}return await d(E)}}async pad([y,g,P,b]){if(y=Math.max(y,0),g=Math.max(g,0),P=Math.max(P,0),b=Math.max(b,0),y===0&&g===0&&P===0&&b===0)return this;if(c){const x=this.channels,T=this.toCanvas(),E=this.width+y+g,S=this.height+P+b,O=l(E,S).getContext("2d");return O.drawImage(T,0,0,this.width,this.height,y,P,this.width,this.height),new f(O.getImageData(0,0,E,S).data,E,S,4).convert(x)}else{const x=this.toSharp().extend({left:y,right:g,top:P,bottom:b});return await d(x)}}async crop([y,g,P,b]){if(y=Math.max(y,0),g=Math.max(g,0),P=Math.min(P,this.width-1),b=Math.min(b,this.height-1),y===0&&g===0&&P===this.width-1&&b===this.height-1)return this;const x=P-y+1,T=b-g+1;if(c){const E=this.channels,S=this.toCanvas(),O=l(x,T).getContext("2d");return O.drawImage(S,y,g,x,T,0,0,x,T),new f(O.getImageData(0,0,x,T).data,x,T,4).convert(E)}else{const E=this.toSharp().extract({left:y,top:g,width:x,height:T});return await d(E)}}async center_crop(y,g){if(this.width===y&&this.height===g)return this;const P=(this.width-y)/2,b=(this.height-g)/2;if(c){const x=this.channels,T=this.toCanvas(),E=l(y,g).getContext("2d");let S=0,O=0,B=0,V=0;return P>=0?S=P:B=-P,b>=0?O=b:V=-b,E.drawImage(T,S,O,y,g,B,V,y,g),new f(E.getImageData(0,0,y,g).data,y,g,4).convert(x)}else{let x=this.toSharp();if(P>=0&&b>=0)x=x.extract({left:Math.floor(P),top:Math.floor(b),width:y,height:g});else if(P<=0&&b<=0){const T=Math.floor(-b),E=Math.floor(-P);x=x.extend({top:T,left:E,right:y-this.width-E,bottom:g-this.height-T})}else{let T=[0,0],E=0;b<0?(T[0]=Math.floor(-b),T[1]=g-this.height-T[0]):E=Math.floor(b);let S=[0,0],O=0;P<0?(S[0]=Math.floor(-P),S[1]=y-this.width-S[0]):O=Math.floor(P),x=x.extend({top:T[0],bottom:T[1],left:S[0],right:S[1]}).extract({left:O,top:E,width:y,height:g})}return await d(x)}}async toBlob(y="image/png",g=1){if(!c)throw new Error("toBlob() is only supported in browser environments.");return await this.toCanvas().convertToBlob({type:y,quality:g})}toTensor(y="CHW"){let g=new a.Tensor("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if(y!=="HWC")if(y==="CHW")g=g.permute(2,0,1);else throw new Error(`Unsupported channel format: ${y}`);return g}toCanvas(){if(!c)throw new Error("toCanvas() is only supported in browser environments.");const y=this.clone().rgba(),g=l(y.width,y.height),P=new u(y.data,y.width,y.height);return g.getContext("2d").putImageData(P,0,0),g}split(){const{data:y,width:g,height:P,channels:b}=this,x=y.constructor,T=y.length/b,E=Array.from({length:b},()=>new x(T));for(let S=0;S<T;++S){const O=b*S;for(let B=0;B<b;++B)E[B][S]=y[O+B]}return E.map(S=>new f(S,g,P,1))}_update(y,g,P,b=null){return this.data=y,this.width=g,this.height=P,b!==null&&(this.channels=b),this}clone(){return new f(this.data.slice(),this.width,this.height,this.channels)}convert(y){if(this.channels===y)return this;switch(y){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(y){if(c){if(s.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save an image from a Web Worker.");const g=y.split(".").pop().toLowerCase(),P=m.get(g)??"image/png",b=await this.toBlob(P);(0,n.saveBlob)(y,b)}else{if(s.apis.IS_FS_AVAILABLE)return await this.toSharp().toFile(y);throw new Error("Unable to save the image because filesystem is disabled in this environment.")}}toSharp(){if(c)throw new Error("toSharp() is only supported in server-side environments.");return o(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}const w=f.read.bind(f)},"./src/utils/maths.js":(e,t,r)=>{r.r(t),r.d(t,{FFT:()=>w,bankers_round:()=>g,cos_sim:()=>l,dot:()=>o,dynamic_time_warping:()=>P,interpolate_data:()=>n,log_softmax:()=>a,magnitude:()=>u,max:()=>c,medianFilter:()=>C,min:()=>d,permute_data:()=>i,round:()=>y,softmax:()=>s});function n(b,[x,T,E],[S,O],B="bilinear",V=!1){const W=O/E,N=S/T,te=new b.constructor(S*O*x),q=T*E,K=S*O;for(let Y=0;Y<S;++Y)for(let Z=0;Z<O;++Z){const de=Y*O+Z,pe=(Z+.5)/W-.5,L=(Y+.5)/N-.5;let F=Math.floor(pe),U=Math.floor(L);const re=Math.min(F+1,E-1),me=Math.min(U+1,T-1);F=Math.max(F,0),U=Math.max(U,0);const J=pe-F,we=L-U,je=(1-J)*(1-we),Ge=J*(1-we),Ae=(1-J)*we,ne=J*we,oe=U*E,H=me*E,be=oe+F,Oe=oe+re,Se=H+F,Me=H+re;for(let Ie=0;Ie<x;++Ie){const $e=Ie*q;te[Ie*K+de]=je*b[$e+be]+Ge*b[$e+Oe]+Ae*b[$e+Se]+ne*b[$e+Me]}}return te}function i(b,x,T){const E=new Array(T.length),S=new Array(T.length);for(let V=T.length-1,W=1;V>=0;--V)S[V]=W,E[V]=x[T[V]],W*=E[V];const O=T.map((V,W)=>S[T.indexOf(W)]),B=new b.constructor(b.length);for(let V=0;V<b.length;++V){let W=0;for(let N=x.length-1,te=V;N>=0;--N)W+=te%x[N]*O[N],te=Math.floor(te/x[N]);B[W]=b[V]}return[B,E]}function s(b){const x=c(b)[0],T=b.map(O=>Math.exp(O-x)),E=T.reduce((O,B)=>O+B,0);return T.map(O=>O/E)}function a(b){const x=c(b)[0];let T=0;for(let O=0;O<b.length;++O)T+=Math.exp(b[O]-x);const E=Math.log(T);return b.map(O=>O-x-E)}function o(b,x){let T=0;for(let E=0;E<b.length;++E)T+=b[E]*x[E];return T}function l(b,x){const T=o(b,x),E=u(b),S=u(x);return T/(E*S)}function u(b){return Math.sqrt(b.reduce((x,T)=>x+T*T,0))}function d(b){if(b.length===0)throw Error("Array must not be empty");let x=b[0],T=0;for(let E=1;E<b.length;++E)b[E]<x&&(x=b[E],T=E);return[x,T]}function c(b){if(b.length===0)throw Error("Array must not be empty");let x=b[0],T=0;for(let E=1;E<b.length;++E)b[E]>x&&(x=b[E],T=E);return[x,T]}function p(b){return b>0&&(b&b-1)===0}class m{constructor(x){if(this.size=x|0,this.size<=1||!p(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=x<<1,this.table=new Float64Array(this.size*2);for(let E=0;E<this.table.length;E+=2){const S=Math.PI*E/this.size;this.table[E]=Math.cos(S),this.table[E+1]=-Math.sin(S)}let T=0;for(let E=1;this.size>E;E<<=1)++T;this._width=T%2===0?T-1:T,this._bitrev=new Int32Array(1<<this._width);for(let E=0;E<this._bitrev.length;++E){this._bitrev[E]=0;for(let S=0;S<this._width;S+=2){const O=this._width-S-2;this._bitrev[E]|=(E>>>S&3)<<O}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray(x,T){const E=T||new Array(x.length>>>1);for(let S=0;S<x.length;S+=2)E[S>>>1]=x[S];return E}toComplexArray(x,T){const E=T||this.createComplexArray();for(let S=0;S<E.length;S+=2)E[S]=x[S>>>1],E[S+1]=0;return E}transform(x,T){if(x===T)throw new Error("Input and output buffers must be different");this._transform4(x,T,1)}realTransform(x,T){if(x===T)throw new Error("Input and output buffers must be different");this._realTransform4(x,T,1)}inverseTransform(x,T){if(x===T)throw new Error("Input and output buffers must be different");this._transform4(x,T,-1);for(let E=0;E<x.length;++E)x[E]/=this.size}_transform4(x,T,E){const S=this._csize;let B=1<<this._width,V=S/B<<1,W,N;const te=this._bitrev;if(V===4)for(W=0,N=0;W<S;W+=V,++N){const K=te[N];this._singleTransform2(T,x,W,K,B)}else for(W=0,N=0;W<S;W+=V,++N){const K=te[N];this._singleTransform4(T,x,W,K,B,E)}const q=this.table;for(B>>=2;B>=2;B>>=2){V=S/B<<1;const K=V>>>2;for(W=0;W<S;W+=V){const Y=W+K-1;for(let Z=W,de=0;Z<Y;Z+=2,de+=B){const pe=Z,L=pe+K,F=L+K,U=F+K,re=x[pe],me=x[pe+1],J=x[L],we=x[L+1],je=x[F],Ge=x[F+1],Ae=x[U],ne=x[U+1],oe=q[de],H=E*q[de+1],be=J*oe-we*H,Oe=J*H+we*oe,Se=q[2*de],Me=E*q[2*de+1],Ie=je*Se-Ge*Me,$e=je*Me+Ge*Se,Le=q[3*de],We=E*q[3*de+1],tt=Ae*Le-ne*We,Ee=Ae*We+ne*Le,it=re+Ie,Je=me+$e,dt=re-Ie,Ye=me-$e,ze=be+tt,rt=Oe+Ee,ct=E*(be-tt),Wt=E*(Oe-Ee);x[pe]=it+ze,x[pe+1]=Je+rt,x[L]=dt+Wt,x[L+1]=Ye-ct,x[F]=it-ze,x[F+1]=Je-rt,x[U]=dt-Wt,x[U+1]=Ye+ct}}}}_singleTransform2(x,T,E,S,O){const B=x[S],V=x[S+1],W=x[S+O],N=x[S+O+1];T[E]=B+W,T[E+1]=V+N,T[E+2]=B-W,T[E+3]=V-N}_singleTransform4(x,T,E,S,O,B){const V=O*2,W=O*3,N=x[S],te=x[S+1],q=x[S+O],K=x[S+O+1],Y=x[S+V],Z=x[S+V+1],de=x[S+W],pe=x[S+W+1],L=N+Y,F=te+Z,U=N-Y,re=te-Z,me=q+de,J=K+pe,we=B*(q-de),je=B*(K-pe);T[E]=L+me,T[E+1]=F+J,T[E+2]=U+je,T[E+3]=re-we,T[E+4]=L-me,T[E+5]=F-J,T[E+6]=U-je,T[E+7]=re+we}_realTransform4(x,T,E){const S=this._csize;let B=1<<this._width,V=S/B<<1,W,N;const te=this._bitrev;if(V===4)for(W=0,N=0;W<S;W+=V,++N){const Y=te[N];this._singleRealTransform2(T,x,W,Y>>>1,B>>>1)}else for(W=0,N=0;W<S;W+=V,++N){const Y=te[N];this._singleRealTransform4(T,x,W,Y>>>1,B>>>1,E)}const q=this.table;for(B>>=2;B>=2;B>>=2){V=S/B<<1;const Y=V>>>1,Z=Y>>>1,de=Z>>>1;for(W=0;W<S;W+=V)for(let pe=0,L=0;pe<=de;pe+=2,L+=B){const F=W+pe,U=F+Z,re=U+Z,me=re+Z,J=x[F],we=x[F+1],je=x[U],Ge=x[U+1],Ae=x[re],ne=x[re+1],oe=x[me],H=x[me+1],be=J,Oe=we,Se=q[L],Me=E*q[L+1],Ie=je*Se-Ge*Me,$e=je*Me+Ge*Se,Le=q[2*L],We=E*q[2*L+1],tt=Ae*Le-ne*We,Ee=Ae*We+ne*Le,it=q[3*L],Je=E*q[3*L+1],dt=oe*it-H*Je,Ye=oe*Je+H*it,ze=be+tt,rt=Oe+Ee,ct=be-tt,Wt=Oe-Ee,It=Ie+dt,Tt=$e+Ye,Ur=E*(Ie-dt),Sr=E*($e-Ye);if(x[F]=ze+It,x[F+1]=rt+Tt,x[U]=ct+Sr,x[U+1]=Wt-Ur,pe===0){x[re]=ze-It,x[re+1]=rt-Tt;continue}if(pe===de)continue;const an=W+Z-pe,Pn=W+Y-pe;x[an]=ct-E*Sr,x[an+1]=-Wt-E*Ur,x[Pn]=ze-E*It,x[Pn+1]=-rt+E*Tt}}const K=S>>>1;for(let Y=2;Y<K;Y+=2)x[S-Y]=x[Y],x[S-Y+1]=-x[Y+1]}_singleRealTransform2(x,T,E,S,O){const B=x[S],V=x[S+O];T[E]=B+V,T[E+1]=0,T[E+2]=B-V,T[E+3]=0}_singleRealTransform4(x,T,E,S,O,B){const V=O*2,W=O*3,N=x[S],te=x[S+O],q=x[S+V],K=x[S+W],Y=N+q,Z=N-q,de=te+K,pe=B*(te-K);T[E]=Y+de,T[E+1]=0,T[E+2]=Z,T[E+3]=-pe,T[E+4]=Y-de,T[E+5]=0,T[E+6]=Z,T[E+7]=pe}}class f{constructor(x){const T=2*(x-1),E=2*(2*x-1),S=2**Math.ceil(Math.log2(E));this.bufferSize=S,this._a=T;const O=new Float64Array(E),B=new Float64Array(S);this._chirpBuffer=new Float64Array(S),this._buffer1=new Float64Array(S),this._buffer2=new Float64Array(S),this._outBuffer1=new Float64Array(S),this._outBuffer2=new Float64Array(S);const V=-2*Math.PI/x,W=Math.cos(V),N=Math.sin(V);for(let te=0;te<E>>1;++te){const q=(te+1-x)**2/2,K=Math.sqrt(W**2+N**2)**q,Y=q*Math.atan2(N,W),Z=2*te;O[Z]=K*Math.cos(Y),O[Z+1]=K*Math.sin(Y),B[Z]=O[Z],B[Z+1]=-O[Z+1]}this._slicedChirpBuffer=O.subarray(T,E),this._f=new m(S>>1),this._f.transform(this._chirpBuffer,B)}_transform(x,T,E){const S=this._buffer1,O=this._buffer2,B=this._outBuffer1,V=this._outBuffer2,W=this._chirpBuffer,N=this._slicedChirpBuffer,te=this._a;if(E)for(let q=0;q<N.length;q+=2){const K=q+1,Y=q>>1,Z=T[Y];S[q]=Z*N[q],S[K]=Z*N[K]}else for(let q=0;q<N.length;q+=2){const K=q+1;S[q]=T[q]*N[q]-T[K]*N[K],S[K]=T[q]*N[K]+T[K]*N[q]}this._f.transform(B,S);for(let q=0;q<W.length;q+=2){const K=q+1;O[q]=B[q]*W[q]-B[K]*W[K],O[K]=B[q]*W[K]+B[K]*W[q]}this._f.inverseTransform(V,O);for(let q=0;q<V.length;q+=2){const K=V[q+te],Y=V[q+te+1],Z=N[q],de=N[q+1];x[q]=K*Z-Y*de,x[q+1]=K*de+Y*Z}}transform(x,T){this._transform(x,T,!1)}realTransform(x,T){this._transform(x,T,!0)}}class w{constructor(x){this.fft_length=x,this.isPowerOfTwo=p(x),this.isPowerOfTwo?(this.fft=new m(x),this.outputBufferSize=2*x):(this.fft=new f(x),this.outputBufferSize=this.fft.bufferSize)}realTransform(x,T){this.fft.realTransform(x,T)}transform(x,T){this.fft.transform(x,T)}}function C(b,x){if(x%2===0||x<=0)throw new Error("Window size must be a positive odd number");const T=new b.constructor(b.length),E=new b.constructor(x),S=Math.floor(x/2);for(let O=0;O<b.length;++O){let B=0;for(let V=-S;V<=S;++V){let W=O+V;W<0?W=Math.abs(W):W>=b.length&&(W=2*(b.length-1)-W),E[B++]=b[W]}E.sort(),T[O]=E[S]}return T}function y(b,x){const T=Math.pow(10,x);return Math.round(b*T)/T}function g(b){const x=Math.round(b);return Math.abs(b)%1===.5?x%2===0?x:x-1:x}function P(b){const x=b.length,T=b[0].length,E=[x+1,T+1],S=Array.from({length:E[0]},()=>Array(E[1]).fill(1/0));S[0][0]=0;const O=Array.from({length:E[0]},()=>Array(E[1]).fill(-1));for(let te=1;te<E[1];++te)for(let q=1;q<E[0];++q){const K=S[q-1][te-1],Y=S[q-1][te],Z=S[q][te-1];let de,pe;K<Y&&K<Z?(de=K,pe=0):Y<K&&Y<Z?(de=Y,pe=1):(de=Z,pe=2),S[q][te]=b[q-1][te-1]+de,O[q][te]=pe}for(let te=0;te<E[1];++te)O[0][te]=2;for(let te=0;te<E[0];++te)O[te][0]=1;let B=x,V=T,W=[],N=[];for(;B>0||V>0;)switch(W.push(B-1),N.push(V-1),O[B][V]){case 0:--B,--V;break;case 1:--B;break;case 2:--V;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${B}, ${V}]. Please file a bug report.`)}return W.reverse(),N.reverse(),[W,N]}},"./src/utils/tensor.js":(e,t,r)=>{r.r(t),r.d(t,{DataTypeMap:()=>a,Tensor:()=>o,cat:()=>T,full:()=>N,full_like:()=>te,interpolate:()=>d,interpolate_4d:()=>c,layer_norm:()=>g,matmul:()=>p,mean:()=>B,mean_pooling:()=>y,ones:()=>q,ones_like:()=>K,permute:()=>u,quantize_embeddings:()=>pe,rand:()=>de,rfft:()=>m,slice:()=>C,stack:()=>E,std_mean:()=>O,topk:()=>f,zeros:()=>Y,zeros_like:()=>Z});var n=r("./src/utils/maths.js"),i=r("./src/backends/onnx.js"),s=r("./src/ops/registry.js");const a=Object.freeze({float32:Float32Array,float16:typeof Float16Array<"u"?Float16Array:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array,uint4:Uint8Array,int4:Int8Array});class o{constructor(...F){ie(this,"ort_tensor");return(0,i.isONNXTensor)(F[0])?this.ort_tensor=F[0]:this.ort_tensor=new i.Tensor(F[0],F[1],F[2]),new Proxy(this,{get:(U,re)=>{if(typeof re=="string"){let me=Number(re);if(Number.isInteger(me))return U._getitem(me)}return U[re]},set:(U,re,me)=>U[re]=me})}get dims(){return this.ort_tensor.dims}set dims(F){this.ort_tensor.dims=F}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}get location(){return this.ort_tensor.location}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[F,...U]=this.dims;if(U.length>0){const re=U.reduce((me,J)=>me*J);for(let me=0;me<F;++me)yield this._subarray(me,re,U)}else yield*this.data}_getitem(F){const[U,...re]=this.dims;if(F=x(F,U),re.length>0){const me=re.reduce((J,we)=>J*we);return this._subarray(F,me,re)}else return new o(this.type,[this.data[F]],re)}indexOf(F){const U=this.data;for(let re=0;re<U.length;++re)if(U[re]==F)return re;return-1}_subarray(F,U,re){const me=F*U,J=(F+1)*U,we="subarray"in this.data?this.data.subarray(me,J):this.data.slice(me,J);return new o(this.type,we,re)}item(){const F=this.data;if(F.length!==1)throw new Error(`a Tensor with ${F.length} elements cannot be converted to Scalar`);return F[0]}tolist(){return l(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const F=this.data;for(let U=0;U<F.length;++U)F[U]=1/(1+Math.exp(-F[U]));return this}map(F){return this.clone().map_(F)}map_(F){const U=this.data;for(let re=0;re<U.length;++re)U[re]=F(U[re],re,U);return this}mul(F){return this.clone().mul_(F)}mul_(F){const U=this.data;for(let re=0;re<U.length;++re)U[re]*=F;return this}div(F){return this.clone().div_(F)}div_(F){const U=this.data;for(let re=0;re<U.length;++re)U[re]/=F;return this}add(F){return this.clone().add_(F)}add_(F){const U=this.data;for(let re=0;re<U.length;++re)U[re]+=F;return this}sub(F){return this.clone().sub_(F)}sub_(F){const U=this.data;for(let re=0;re<U.length;++re)U[re]-=F;return this}clone(){return new o(this.type,this.data.slice(),this.dims.slice())}slice(...F){const U=[],re=[];for(let ne=0;ne<this.dims.length;++ne){let oe=F[ne];if(oe==null)re.push([0,this.dims[ne]]),U.push(this.dims[ne]);else if(typeof oe=="number")oe=x(oe,this.dims[ne],ne),re.push([oe,oe+1]);else if(Array.isArray(oe)&&oe.length===2){let[H,be]=oe;if(H=H===null?0:x(H,this.dims[ne],ne,!1),be=be===null?this.dims[ne]:x(be,this.dims[ne],ne,!1),H>be)throw new Error(`Invalid slice: ${oe}`);const Oe=[Math.max(H,0),Math.min(be,this.dims[ne])];re.push(Oe),U.push(Oe[1]-Oe[0])}else throw new Error(`Invalid slice: ${oe}`)}const me=re.map(([ne,oe])=>oe-ne),J=me.reduce((ne,oe)=>ne*oe),we=this.data,je=new we.constructor(J),Ge=this.stride();let Ae=!0;for(let ne=1;ne<me.length;++ne)if(re[ne][0]!==0||re[ne][1]!==this.dims[ne]){Ae=!1;break}if(Ae){const ne=re[0][0]*Ge[0],oe=re[0][1]*Ge[0];if(ArrayBuffer.isView(we))je.set(we.subarray(ne,oe));else if(Array.isArray(we)){const H=we.slice(ne,oe);for(let be=0;be<H.length;++be)je[be]=H[be]}else throw new Error("Unsupported data type for slicing")}else for(let ne=0;ne<J;++ne){let oe=0;for(let H=me.length-1,be=ne;H>=0;--H){const Oe=me[H];oe+=(be%Oe+re[H][0])*Ge[H],be=Math.floor(be/Oe)}je[ne]=we[oe]}return new o(this.type,je,U)}permute(...F){return u(this,F)}transpose(...F){return this.permute(...F)}sum(F=null,U=!1){return this.norm(1,F,U)}norm(F="fro",U=null,re=!1){if(F==="fro")F=2;else if(typeof F=="string")throw Error(`Unsupported norm: ${F}`);const me=this.data,J=(Ae,ne)=>Ae+ne**F;if(U===null){const Ae=me.reduce(J,0)**(1/F);return new o(this.type,[Ae],[])}const[we,je,Ge]=S(J,this,U,re);if(F!==1)for(let Ae=0;Ae<je.length;++Ae)je[Ae]=je[Ae]**(1/F);return new o(we,je,Ge)}normalize_(F=2,U=1){U=x(U,this.dims.length);const re=this.norm(F,U,!0),me=this.data,J=re.data;for(let we=0;we<me.length;++we){let je=0;for(let Ge=this.dims.length-1,Ae=we,ne=1;Ge>=0;--Ge){const oe=this.dims[Ge];if(Ge!==U){const H=Ae%oe;je+=H*ne,ne*=this.dims[Ge]}Ae=Math.floor(Ae/oe)}me[we]/=J[je]}return this}normalize(F=2,U=1){return this.clone().normalize_(F,U)}stride(){return V(this.dims)}squeeze(F=null){return new o(this.type,this.data,P(this.dims,F))}squeeze_(F=null){return this.dims=P(this.dims,F),this}unsqueeze(F=null){return new o(this.type,this.data,b(this.dims,F))}unsqueeze_(F=null){return this.dims=b(this.dims,F),this}flatten_(F=0,U=-1){U=(U+this.dims.length)%this.dims.length;let re=this.dims.slice(0,F),me=this.dims.slice(F,U+1),J=this.dims.slice(U+1);return this.dims=[...re,me.reduce((we,je)=>we*je,1),...J],this}flatten(F=0,U=-1){return this.clone().flatten_(F,U)}view(...F){let U=-1;for(let me=0;me<F.length;++me)if(F[me]===-1){if(U!==-1)throw new Error("Only one dimension can be inferred");U=me}const re=this.data;if(U!==-1){const me=F.reduce((J,we,je)=>je!==U?J*we:J,1);F[U]=re.length/me}return new o(this.type,re,F)}neg_(){const F=this.data;for(let U=0;U<F.length;++U)F[U]=-F[U];return this}neg(){return this.clone().neg_()}gt(F){const U=new Uint8Array(this.data.length),re=this.data;for(let me=0;me<re.length;++me)U[me]=re[me]>F?1:0;return new o("bool",U,this.dims)}lt(F){const U=new Uint8Array(this.data.length),re=this.data;for(let me=0;me<re.length;++me)U[me]=re[me]<F?1:0;return new o("bool",U,this.dims)}clamp_(F,U){const re=this.data;for(let me=0;me<re.length;++me)re[me]=Math.min(Math.max(re[me],F),U);return this}clamp(F,U){return this.clone().clamp_(F,U)}round_(){const F=this.data;for(let U=0;U<F.length;++U)F[U]=Math.round(F[U]);return this}round(){return this.clone().round_()}mean(F=null,U=!1){return B(this,F,U)}min(F=null,U=!1){if(F===null){const we=(0,n.min)(this.data)[0];return new o(this.type,[we],[])}const[re,me,J]=S((we,je)=>Math.min(we,je),this,F,U,1/0);return new o(re,me,J)}max(F=null,U=!1){if(F===null){const we=(0,n.max)(this.data)[0];return new o(this.type,[we],[])}const[re,me,J]=S((we,je)=>Math.max(we,je),this,F,U,-1/0);return new o(re,me,J)}argmin(F=null,U=!1){if(F!==null)throw new Error("`dim !== null` not yet implemented.");const re=(0,n.min)(this.data)[1];return new o("int64",[BigInt(re)],[])}argmax(F=null,U=!1){if(F!==null)throw new Error("`dim !== null` not yet implemented.");const re=(0,n.max)(this.data)[1];return new o("int64",[BigInt(re)],[])}to(F){if(this.type===F)return this;if(!a.hasOwnProperty(F))throw new Error(`Unsupported type: ${F}`);let U;const re=["int64","uint64"].includes(this.type),me=["int64","uint64"].includes(F);return re&&!me?U=Number:!re&&me&&(U=BigInt),new o(F,a[F].from(this.data,U),this.dims)}}function l(L,F){const U=L.length,re=F.reduce((J,we)=>J*we);if(U!==re)throw Error(`cannot reshape array of size ${U} into shape (${F})`);let me=L;for(let J=F.length-1;J>=0;J--)me=me.reduce((we,je)=>{let Ge=we[we.length-1];return Ge.length<F[J]?Ge.push(je):we.push([je]),we},[[]]);return me[0]}function u(L,F){const[U,re]=(0,n.permute_data)(L.data,L.dims,F);return new o(L.type,U,re)}function d(L,[F,U],re="bilinear",me=!1){const J=L.dims.at(-3)??1,we=L.dims.at(-2),je=L.dims.at(-1);let Ge=(0,n.interpolate_data)(L.data,[J,we,je],[F,U],re,me);return new o(L.type,Ge,[J,F,U])}async function c(L,{size:F=null,mode:U="bilinear"}={}){if(L.dims.length!==4)throw new Error("`interpolate_4d` currently only supports 4D input.");if(!F)throw new Error("`interpolate_4d` requires a `size` argument.");let re;if(F.length===2)re=[...L.dims.slice(0,2),...F];else if(F.length===3)re=[L.dims[0],...F];else if(F.length===4)re=F;else throw new Error("`size` must be of length 2, 3, or 4.");let me;if(U==="nearest")me=await s.TensorOpRegistry.nearest_interpolate_4d;else if(U==="bilinear")me=await s.TensorOpRegistry.bilinear_interpolate_4d;else if(U==="bicubic")me=await s.TensorOpRegistry.bicubic_interpolate_4d;else throw new Error(`Unsupported mode: ${U}`);const J=new o("int64",new BigInt64Array(re.map(BigInt)),[re.length]);return await me({x:L,s:J})}async function p(L,F){return await(await s.TensorOpRegistry.matmul)({a:L,b:F})}async function m(L,F){return await(await s.TensorOpRegistry.rfft)({x:L,a:F})}async function f(L,F){const U=await s.TensorOpRegistry.top_k;return F==null?F=L.dims.at(-1):F=Math.min(F,L.dims.at(-1)),await U({x:L,k:new o("int64",[BigInt(F)],[1])})}const w=L=>new o("int64",L,[L.length]);async function C(L,F,U,re,me){return await(await s.TensorOpRegistry.slice)({x:L,s:w(F),e:w(U),a:w(re),t:w(me??new Array(re.length).fill(1))})}function y(L,F){const U=L.data,re=F.data,me=[L.dims[0],L.dims[2]],J=new U.constructor(me[0]*me[1]),[we,je,Ge]=L.dims;let Ae=0;for(let ne=0;ne<we;++ne){const oe=ne*Ge*je;for(let H=0;H<Ge;++H){let be=0,Oe=0;const Se=ne*je,Me=oe+H;for(let $e=0;$e<je;++$e){const Le=Number(re[Se+$e]);Oe+=Le,be+=U[Me+$e*Ge]*Le}const Ie=be/Oe;J[Ae++]=Ie}}return new o(L.type,J,me)}function g(L,F,{eps:U=1e-5}={}){if(L.dims.length!==2)throw new Error("`layer_norm` currently only supports 2D input.");const[re,me]=L.dims;if(F.length!==1&&F[0]!==me)throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");const[J,we]=O(L,1,0,!0),je=J.data,Ge=we.data,Ae=L.data,ne=new Ae.constructor(Ae.length);for(let oe=0;oe<re;++oe){const H=oe*me;for(let be=0;be<me;++be){const Oe=H+be;ne[Oe]=(Ae[Oe]-Ge[oe])/(je[oe]+U)}}return new o(L.type,ne,L.dims)}function P(L,F){return L=L.slice(),F===null?L=L.filter(U=>U!==1):typeof F=="number"?L[F]===1&&L.splice(F,1):Array.isArray(F)&&(L=L.filter((U,re)=>U!==1||!F.includes(re))),L}function b(L,F){return F=x(F,L.length+1),L=L.slice(),L.splice(F,0,1),L}function x(L,F,U=null,re=!0){if(L<-F||L>=F){if(re)throw new Error(`IndexError: index ${L} is out of bounds for dimension${U===null?"":" "+U} with size ${F}`);return L<-F?0:F}return L<0&&(L=(L%F+F)%F),L}function T(L,F=0){F=x(F,L[0].dims.length);const U=L[0].dims.slice();U[F]=L.reduce((we,je)=>we+je.dims[F],0);const re=U.reduce((we,je)=>we*je,1),me=new L[0].data.constructor(re),J=L[0].type;if(F===0){let we=0;for(const je of L){const Ge=je.data;me.set(Ge,we),we+=Ge.length}}else{let we=0;for(let je=0;je<L.length;++je){const{data:Ge,dims:Ae}=L[je];for(let ne=0;ne<Ge.length;++ne){let oe=0;for(let H=Ae.length-1,be=ne,Oe=1;H>=0;--H){const Se=Ae[H];let Me=be%Se;H===F&&(Me+=we),oe+=Me*Oe,Oe*=U[H],be=Math.floor(be/Se)}me[oe]=Ge[ne]}we+=Ae[F]}}return new o(J,me,U)}function E(L,F=0){return T(L.map(U=>U.unsqueeze(F)),F)}function S(L,F,U=null,re=!1,me=null){const J=F.data,we=F.dims;U=x(U,we.length);const je=we.slice();je[U]=1;const Ge=new J.constructor(J.length/we[U]);me!==null&&Ge.fill(me);for(let Ae=0;Ae<J.length;++Ae){let ne=0;for(let oe=we.length-1,H=Ae,be=1;oe>=0;--oe){const Oe=we[oe];if(oe!==U){const Se=H%Oe;ne+=Se*be,be*=je[oe]}H=Math.floor(H/Oe)}Ge[ne]=L(Ge[ne],J[Ae],Ae,ne)}return re||je.splice(U,1),[F.type,Ge,je]}function O(L,F=null,U=1,re=!1){const me=L.data,J=L.dims;if(F===null){const be=me.reduce((Ie,$e)=>Ie+$e,0)/me.length,Oe=Math.sqrt(me.reduce((Ie,$e)=>Ie+($e-be)**2,0)/(me.length-U)),Se=new o(L.type,[be],[]);return[new o(L.type,[Oe],[]),Se]}F=x(F,J.length);const we=B(L,F,re),je=we.data,[Ge,Ae,ne]=S((H,be,Oe,Se)=>H+(be-je[Se])**2,L,F,re);for(let H=0;H<Ae.length;++H)Ae[H]=Math.sqrt(Ae[H]/(J[F]-U));return[new o(Ge,Ae,ne),we]}function B(L,F=null,U=!1){const re=L.dims,me=L.data;if(F===null){const Ge=me.reduce((Ae,ne)=>Ae+ne,0);return new o(L.type,[Ge/me.length],[])}F=x(F,re.length);const[J,we,je]=S((Ge,Ae)=>Ge+Ae,L,F,U);if(re[F]!==1)for(let Ge=0;Ge<we.length;++Ge)we[Ge]/=re[F];return new o(J,we,je)}function V(L){const F=new Array(L.length);for(let U=L.length-1,re=1;U>=0;--U)F[U]=re,re*=L[U];return F}function W(L,F,U,re){const me=L.reduce((J,we)=>J*we,1);return new o(U,new re(me).fill(F),L)}function N(L,F){let U,re;if(typeof F=="number")U="float32",re=Float32Array;else if(typeof F=="bigint")U="int64",re=BigInt64Array;else if(typeof F=="boolean")U="bool",re=Uint8Array;else throw new Error(`Unsupported data type: ${typeof F}`);return W(L,F,U,re)}function te(L,F){return N(L.dims,F)}function q(L){return W(L,1n,"int64",BigInt64Array)}function K(L){return q(L.dims)}function Y(L){return W(L,0n,"int64",BigInt64Array)}function Z(L){return Y(L.dims)}function de(L){const F=L.reduce((U,re)=>U*re,1);return new o("float32",Float32Array.from({length:F},()=>Math.random()),L)}function pe(L,F){if(L.dims.length!==2)throw new Error("The tensor must have 2 dimensions");if(L.dims.at(-1)%8!==0)throw new Error("The last dimension of the tensor must be a multiple of 8");if(!["binary","ubinary"].includes(F))throw new Error("The precision must be either 'binary' or 'ubinary'");const U=F==="binary",re=U?"int8":"uint8",me=U?Int8Array:Uint8Array,J=L.data,we=new me(J.length/8);for(let je=0;je<J.length;++je){const Ge=J[je]>0?1:0,Ae=Math.floor(je/8),ne=je%8;we[Ae]|=Ge<<7-ne,U&&ne===0&&(we[Ae]-=128)}return new o(re,we,[L.dims[0],L.dims[1]/8])}},"./src/utils/video.js":(e,t,r)=>{r.r(t),r.d(t,{RawVideo:()=>a,RawVideoFrame:()=>s,load_video:()=>o});var n=r("./src/utils/image.js"),i=r("./src/env.js");class s{constructor(u,d){this.image=u,this.timestamp=d}}class a{constructor(u,d){u.length>0&&u[0]instanceof n.RawImage&&(u=u.map((c,p)=>new s(c,(p+1)/(u.length+1)*d))),this.frames=u,this.duration=d}get width(){return this.frames[0].image.width}get height(){return this.frames[0].image.height}get fps(){return this.frames.length/this.duration}}async function o(l,{num_frames:u=null,fps:d=null}={}){if(!i.apis.IS_BROWSER_ENV)throw new Error("`load_video` is currently only supported in browser environments.");if(u==null&&d==null)throw new Error("Either num_frames or fps must be provided.");const c=[],p=document.createElement("video");if(p.crossOrigin="anonymous",p.muted=!0,typeof l=="string")p.src=l;else if(l instanceof Blob)p.src=URL.createObjectURL(l);else if(l instanceof HTMLVideoElement)p.src=l.src;else throw new Error("Invalid URL or video element provided.");if(await new Promise(P=>p.onloadedmetadata=P),p.seekable.start(0)===p.seekable.end(0)){const b=await(await fetch(p.src)).blob();p.src=URL.createObjectURL(b),await new Promise(x=>p.onloadedmetadata=x)}const m=p.duration;let f,w;u!=null?(f=u,w=u===1?0:m/(u-1)):(w=1/d,f=Math.floor(m/w));let C=[];for(let P=0;P<f;++P)C.push(u===1?m/2:P*w);const y=document.createElement("canvas");y.width=p.videoWidth,y.height=p.videoHeight;const g=y.getContext("2d",{willReadFrequently:!0});for(const P of C){p.currentTime=P,await new Promise(E=>{p.onseeked=E}),g.drawImage(p,0,0,y.width,y.height);const b=g.getImageData(0,0,y.width,y.height),x=new n.RawImage(b.data,y.width,y.height,4),T=new s(x,P);c.push(T)}return p.remove(),new a(c,m)}}},lP={};function ur(e){var t=lP[e];if(t!==void 0)return t.exports;var r=lP[e]={exports:{}};return Rz[e](r,r.exports,ur),r.exports}(()=>{var e=Object.getPrototypeOf?r=>Object.getPrototypeOf(r):r=>r.__proto__,t;ur.t=function(r,n){if(n&1&&(r=this(r)),n&8||typeof r=="object"&&r&&(n&4&&r.__esModule||n&16&&typeof r.then=="function"))return r;var i=Object.create(null);ur.r(i);var s={};t=t||[null,e({}),e([]),e(e)];for(var a=n&2&&r;typeof a=="object"&&!~t.indexOf(a);a=e(a))Object.getOwnPropertyNames(a).forEach(o=>s[o]=()=>r[o]);return s.default=()=>r,ur.d(i,s),i}})(),ur.d=(e,t)=>{for(var r in t)ur.o(t,r)&&!ur.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},ur.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),ur.r=e=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var $={};(()=>{/*!*****************************!*\
  !*** ./src/transformers.js ***!
  \*****************************/ur.r($),ur.d($,{ASTFeatureExtractor:()=>c.ASTFeatureExtractor,ASTForAudioClassification:()=>r.ASTForAudioClassification,ASTModel:()=>r.ASTModel,ASTPreTrainedModel:()=>r.ASTPreTrainedModel,AlbertForMaskedLM:()=>r.AlbertForMaskedLM,AlbertForQuestionAnswering:()=>r.AlbertForQuestionAnswering,AlbertForSequenceClassification:()=>r.AlbertForSequenceClassification,AlbertModel:()=>r.AlbertModel,AlbertPreTrainedModel:()=>r.AlbertPreTrainedModel,AlbertTokenizer:()=>n.AlbertTokenizer,ArceeForCausalLM:()=>r.ArceeForCausalLM,ArceeModel:()=>r.ArceeModel,ArceePreTrainedModel:()=>r.ArceePreTrainedModel,AudioClassificationPipeline:()=>t.AudioClassificationPipeline,AutoConfig:()=>i.AutoConfig,AutoFeatureExtractor:()=>p.AutoFeatureExtractor,AutoImageProcessor:()=>w.AutoImageProcessor,AutoModel:()=>r.AutoModel,AutoModelForAudioClassification:()=>r.AutoModelForAudioClassification,AutoModelForAudioFrameClassification:()=>r.AutoModelForAudioFrameClassification,AutoModelForAudioTextToText:()=>r.AutoModelForAudioTextToText,AutoModelForCTC:()=>r.AutoModelForCTC,AutoModelForCausalLM:()=>r.AutoModelForCausalLM,AutoModelForDepthEstimation:()=>r.AutoModelForDepthEstimation,AutoModelForDocumentQuestionAnswering:()=>r.AutoModelForDocumentQuestionAnswering,AutoModelForImageClassification:()=>r.AutoModelForImageClassification,AutoModelForImageFeatureExtraction:()=>r.AutoModelForImageFeatureExtraction,AutoModelForImageMatting:()=>r.AutoModelForImageMatting,AutoModelForImageSegmentation:()=>r.AutoModelForImageSegmentation,AutoModelForImageTextToText:()=>r.AutoModelForImageTextToText,AutoModelForImageToImage:()=>r.AutoModelForImageToImage,AutoModelForMaskGeneration:()=>r.AutoModelForMaskGeneration,AutoModelForMaskedLM:()=>r.AutoModelForMaskedLM,AutoModelForNormalEstimation:()=>r.AutoModelForNormalEstimation,AutoModelForObjectDetection:()=>r.AutoModelForObjectDetection,AutoModelForPoseEstimation:()=>r.AutoModelForPoseEstimation,AutoModelForQuestionAnswering:()=>r.AutoModelForQuestionAnswering,AutoModelForSemanticSegmentation:()=>r.AutoModelForSemanticSegmentation,AutoModelForSeq2SeqLM:()=>r.AutoModelForSeq2SeqLM,AutoModelForSequenceClassification:()=>r.AutoModelForSequenceClassification,AutoModelForSpeechSeq2Seq:()=>r.AutoModelForSpeechSeq2Seq,AutoModelForTextToSpectrogram:()=>r.AutoModelForTextToSpectrogram,AutoModelForTextToWaveform:()=>r.AutoModelForTextToWaveform,AutoModelForTokenClassification:()=>r.AutoModelForTokenClassification,AutoModelForUniversalSegmentation:()=>r.AutoModelForUniversalSegmentation,AutoModelForVision2Seq:()=>r.AutoModelForVision2Seq,AutoModelForXVector:()=>r.AutoModelForXVector,AutoModelForZeroShotObjectDetection:()=>r.AutoModelForZeroShotObjectDetection,AutoProcessor:()=>g.AutoProcessor,AutoTokenizer:()=>n.AutoTokenizer,AutomaticSpeechRecognitionPipeline:()=>t.AutomaticSpeechRecognitionPipeline,BackgroundRemovalPipeline:()=>t.BackgroundRemovalPipeline,BartForConditionalGeneration:()=>r.BartForConditionalGeneration,BartForSequenceClassification:()=>r.BartForSequenceClassification,BartModel:()=>r.BartModel,BartPretrainedModel:()=>r.BartPretrainedModel,BartTokenizer:()=>n.BartTokenizer,BaseModelOutput:()=>r.BaseModelOutput,BaseStreamer:()=>P.BaseStreamer,BeitFeatureExtractor:()=>f.BeitFeatureExtractor,BeitForImageClassification:()=>r.BeitForImageClassification,BeitModel:()=>r.BeitModel,BeitPreTrainedModel:()=>r.BeitPreTrainedModel,BertForMaskedLM:()=>r.BertForMaskedLM,BertForQuestionAnswering:()=>r.BertForQuestionAnswering,BertForSequenceClassification:()=>r.BertForSequenceClassification,BertForTokenClassification:()=>r.BertForTokenClassification,BertModel:()=>r.BertModel,BertPreTrainedModel:()=>r.BertPreTrainedModel,BertTokenizer:()=>n.BertTokenizer,BitImageProcessor:()=>f.BitImageProcessor,BlenderbotForConditionalGeneration:()=>r.BlenderbotForConditionalGeneration,BlenderbotModel:()=>r.BlenderbotModel,BlenderbotPreTrainedModel:()=>r.BlenderbotPreTrainedModel,BlenderbotSmallForConditionalGeneration:()=>r.BlenderbotSmallForConditionalGeneration,BlenderbotSmallModel:()=>r.BlenderbotSmallModel,BlenderbotSmallPreTrainedModel:()=>r.BlenderbotSmallPreTrainedModel,BlenderbotSmallTokenizer:()=>n.BlenderbotSmallTokenizer,BlenderbotTokenizer:()=>n.BlenderbotTokenizer,BloomForCausalLM:()=>r.BloomForCausalLM,BloomModel:()=>r.BloomModel,BloomPreTrainedModel:()=>r.BloomPreTrainedModel,BloomTokenizer:()=>n.BloomTokenizer,CLIPFeatureExtractor:()=>f.CLIPFeatureExtractor,CLIPImageProcessor:()=>f.CLIPImageProcessor,CLIPModel:()=>r.CLIPModel,CLIPPreTrainedModel:()=>r.CLIPPreTrainedModel,CLIPSegForImageSegmentation:()=>r.CLIPSegForImageSegmentation,CLIPSegModel:()=>r.CLIPSegModel,CLIPSegPreTrainedModel:()=>r.CLIPSegPreTrainedModel,CLIPTextModel:()=>r.CLIPTextModel,CLIPTextModelWithProjection:()=>r.CLIPTextModelWithProjection,CLIPTokenizer:()=>n.CLIPTokenizer,CLIPVisionModel:()=>r.CLIPVisionModel,CLIPVisionModelWithProjection:()=>r.CLIPVisionModelWithProjection,CamembertForMaskedLM:()=>r.CamembertForMaskedLM,CamembertForQuestionAnswering:()=>r.CamembertForQuestionAnswering,CamembertForSequenceClassification:()=>r.CamembertForSequenceClassification,CamembertForTokenClassification:()=>r.CamembertForTokenClassification,CamembertModel:()=>r.CamembertModel,CamembertPreTrainedModel:()=>r.CamembertPreTrainedModel,CamembertTokenizer:()=>n.CamembertTokenizer,CausalLMOutput:()=>r.CausalLMOutput,CausalLMOutputWithPast:()=>r.CausalLMOutputWithPast,ChineseCLIPFeatureExtractor:()=>f.ChineseCLIPFeatureExtractor,ChineseCLIPModel:()=>r.ChineseCLIPModel,ChineseCLIPPreTrainedModel:()=>r.ChineseCLIPPreTrainedModel,ClapAudioModelWithProjection:()=>r.ClapAudioModelWithProjection,ClapFeatureExtractor:()=>c.ClapFeatureExtractor,ClapModel:()=>r.ClapModel,ClapPreTrainedModel:()=>r.ClapPreTrainedModel,ClapTextModelWithProjection:()=>r.ClapTextModelWithProjection,ClassifierFreeGuidanceLogitsProcessor:()=>x.ClassifierFreeGuidanceLogitsProcessor,CodeGenForCausalLM:()=>r.CodeGenForCausalLM,CodeGenModel:()=>r.CodeGenModel,CodeGenPreTrainedModel:()=>r.CodeGenPreTrainedModel,CodeGenTokenizer:()=>n.CodeGenTokenizer,CodeLlamaTokenizer:()=>n.CodeLlamaTokenizer,CohereForCausalLM:()=>r.CohereForCausalLM,CohereModel:()=>r.CohereModel,CoherePreTrainedModel:()=>r.CoherePreTrainedModel,CohereTokenizer:()=>n.CohereTokenizer,ConvBertForMaskedLM:()=>r.ConvBertForMaskedLM,ConvBertForQuestionAnswering:()=>r.ConvBertForQuestionAnswering,ConvBertForSequenceClassification:()=>r.ConvBertForSequenceClassification,ConvBertForTokenClassification:()=>r.ConvBertForTokenClassification,ConvBertModel:()=>r.ConvBertModel,ConvBertPreTrainedModel:()=>r.ConvBertPreTrainedModel,ConvBertTokenizer:()=>n.ConvBertTokenizer,ConvNextFeatureExtractor:()=>f.ConvNextFeatureExtractor,ConvNextForImageClassification:()=>r.ConvNextForImageClassification,ConvNextImageProcessor:()=>f.ConvNextImageProcessor,ConvNextModel:()=>r.ConvNextModel,ConvNextPreTrainedModel:()=>r.ConvNextPreTrainedModel,ConvNextV2ForImageClassification:()=>r.ConvNextV2ForImageClassification,ConvNextV2Model:()=>r.ConvNextV2Model,ConvNextV2PreTrainedModel:()=>r.ConvNextV2PreTrainedModel,DFineForObjectDetection:()=>r.DFineForObjectDetection,DFineModel:()=>r.DFineModel,DFinePreTrainedModel:()=>r.DFinePreTrainedModel,DINOv3ConvNextModel:()=>r.DINOv3ConvNextModel,DINOv3ConvNextPreTrainedModel:()=>r.DINOv3ConvNextPreTrainedModel,DINOv3ViTImageProcessor:()=>f.DINOv3ViTImageProcessor,DINOv3ViTModel:()=>r.DINOv3ViTModel,DINOv3ViTPreTrainedModel:()=>r.DINOv3ViTPreTrainedModel,DPTFeatureExtractor:()=>f.DPTFeatureExtractor,DPTForDepthEstimation:()=>r.DPTForDepthEstimation,DPTImageProcessor:()=>f.DPTImageProcessor,DPTModel:()=>r.DPTModel,DPTPreTrainedModel:()=>r.DPTPreTrainedModel,DacDecoderModel:()=>r.DacDecoderModel,DacDecoderOutput:()=>r.DacDecoderOutput,DacEncoderModel:()=>r.DacEncoderModel,DacEncoderOutput:()=>r.DacEncoderOutput,DacFeatureExtractor:()=>c.DacFeatureExtractor,DacModel:()=>r.DacModel,DacPreTrainedModel:()=>r.DacPreTrainedModel,DataTypeMap:()=>l.DataTypeMap,DebertaForMaskedLM:()=>r.DebertaForMaskedLM,DebertaForQuestionAnswering:()=>r.DebertaForQuestionAnswering,DebertaForSequenceClassification:()=>r.DebertaForSequenceClassification,DebertaForTokenClassification:()=>r.DebertaForTokenClassification,DebertaModel:()=>r.DebertaModel,DebertaPreTrainedModel:()=>r.DebertaPreTrainedModel,DebertaTokenizer:()=>n.DebertaTokenizer,DebertaV2ForMaskedLM:()=>r.DebertaV2ForMaskedLM,DebertaV2ForQuestionAnswering:()=>r.DebertaV2ForQuestionAnswering,DebertaV2ForSequenceClassification:()=>r.DebertaV2ForSequenceClassification,DebertaV2ForTokenClassification:()=>r.DebertaV2ForTokenClassification,DebertaV2Model:()=>r.DebertaV2Model,DebertaV2PreTrainedModel:()=>r.DebertaV2PreTrainedModel,DebertaV2Tokenizer:()=>n.DebertaV2Tokenizer,DecisionTransformerModel:()=>r.DecisionTransformerModel,DecisionTransformerPreTrainedModel:()=>r.DecisionTransformerPreTrainedModel,DeiTFeatureExtractor:()=>f.DeiTFeatureExtractor,DeiTForImageClassification:()=>r.DeiTForImageClassification,DeiTImageProcessor:()=>f.DeiTImageProcessor,DeiTModel:()=>r.DeiTModel,DeiTPreTrainedModel:()=>r.DeiTPreTrainedModel,DepthAnythingForDepthEstimation:()=>r.DepthAnythingForDepthEstimation,DepthAnythingPreTrainedModel:()=>r.DepthAnythingPreTrainedModel,DepthEstimationPipeline:()=>t.DepthEstimationPipeline,DepthProForDepthEstimation:()=>r.DepthProForDepthEstimation,DepthProPreTrainedModel:()=>r.DepthProPreTrainedModel,DetrFeatureExtractor:()=>f.DetrFeatureExtractor,DetrForObjectDetection:()=>r.DetrForObjectDetection,DetrForSegmentation:()=>r.DetrForSegmentation,DetrImageProcessor:()=>f.DetrImageProcessor,DetrModel:()=>r.DetrModel,DetrObjectDetectionOutput:()=>r.DetrObjectDetectionOutput,DetrPreTrainedModel:()=>r.DetrPreTrainedModel,DetrSegmentationOutput:()=>r.DetrSegmentationOutput,Dinov2ForImageClassification:()=>r.Dinov2ForImageClassification,Dinov2Model:()=>r.Dinov2Model,Dinov2PreTrainedModel:()=>r.Dinov2PreTrainedModel,Dinov2WithRegistersForImageClassification:()=>r.Dinov2WithRegistersForImageClassification,Dinov2WithRegistersModel:()=>r.Dinov2WithRegistersModel,Dinov2WithRegistersPreTrainedModel:()=>r.Dinov2WithRegistersPreTrainedModel,DistilBertForMaskedLM:()=>r.DistilBertForMaskedLM,DistilBertForQuestionAnswering:()=>r.DistilBertForQuestionAnswering,DistilBertForSequenceClassification:()=>r.DistilBertForSequenceClassification,DistilBertForTokenClassification:()=>r.DistilBertForTokenClassification,DistilBertModel:()=>r.DistilBertModel,DistilBertPreTrainedModel:()=>r.DistilBertPreTrainedModel,DistilBertTokenizer:()=>n.DistilBertTokenizer,DocumentQuestionAnsweringPipeline:()=>t.DocumentQuestionAnsweringPipeline,DonutFeatureExtractor:()=>f.DonutFeatureExtractor,DonutImageProcessor:()=>f.DonutImageProcessor,DonutSwinModel:()=>r.DonutSwinModel,DonutSwinPreTrainedModel:()=>r.DonutSwinPreTrainedModel,EfficientNetForImageClassification:()=>r.EfficientNetForImageClassification,EfficientNetImageProcessor:()=>f.EfficientNetImageProcessor,EfficientNetModel:()=>r.EfficientNetModel,EfficientNetPreTrainedModel:()=>r.EfficientNetPreTrainedModel,ElectraForMaskedLM:()=>r.ElectraForMaskedLM,ElectraForQuestionAnswering:()=>r.ElectraForQuestionAnswering,ElectraForSequenceClassification:()=>r.ElectraForSequenceClassification,ElectraForTokenClassification:()=>r.ElectraForTokenClassification,ElectraModel:()=>r.ElectraModel,ElectraPreTrainedModel:()=>r.ElectraPreTrainedModel,ElectraTokenizer:()=>n.ElectraTokenizer,EncodecFeatureExtractor:()=>c.EncodecFeatureExtractor,EosTokenCriteria:()=>b.EosTokenCriteria,Ernie4_5_ForCausalLM:()=>r.Ernie4_5_ForCausalLM,Ernie4_5_Model:()=>r.Ernie4_5_Model,Ernie4_5_PretrainedModel:()=>r.Ernie4_5_PretrainedModel,Ernie4_5_Tokenizer:()=>n.Ernie4_5_Tokenizer,EsmForMaskedLM:()=>r.EsmForMaskedLM,EsmForSequenceClassification:()=>r.EsmForSequenceClassification,EsmForTokenClassification:()=>r.EsmForTokenClassification,EsmModel:()=>r.EsmModel,EsmPreTrainedModel:()=>r.EsmPreTrainedModel,EsmTokenizer:()=>n.EsmTokenizer,ExaoneForCausalLM:()=>r.ExaoneForCausalLM,ExaoneModel:()=>r.ExaoneModel,ExaonePreTrainedModel:()=>r.ExaonePreTrainedModel,FFT:()=>u.FFT,FalconForCausalLM:()=>r.FalconForCausalLM,FalconModel:()=>r.FalconModel,FalconPreTrainedModel:()=>r.FalconPreTrainedModel,FalconTokenizer:()=>n.FalconTokenizer,FastViTForImageClassification:()=>r.FastViTForImageClassification,FastViTModel:()=>r.FastViTModel,FastViTPreTrainedModel:()=>r.FastViTPreTrainedModel,FeatureExtractionPipeline:()=>t.FeatureExtractionPipeline,FeatureExtractor:()=>d.FeatureExtractor,FillMaskPipeline:()=>t.FillMaskPipeline,Florence2ForConditionalGeneration:()=>r.Florence2ForConditionalGeneration,Florence2PreTrainedModel:()=>r.Florence2PreTrainedModel,Florence2Processor:()=>y.Florence2Processor,ForcedBOSTokenLogitsProcessor:()=>x.ForcedBOSTokenLogitsProcessor,ForcedEOSTokenLogitsProcessor:()=>x.ForcedEOSTokenLogitsProcessor,GLPNFeatureExtractor:()=>f.GLPNFeatureExtractor,GLPNForDepthEstimation:()=>r.GLPNForDepthEstimation,GLPNModel:()=>r.GLPNModel,GLPNPreTrainedModel:()=>r.GLPNPreTrainedModel,GPT2LMHeadModel:()=>r.GPT2LMHeadModel,GPT2Model:()=>r.GPT2Model,GPT2PreTrainedModel:()=>r.GPT2PreTrainedModel,GPT2Tokenizer:()=>n.GPT2Tokenizer,GPTBigCodeForCausalLM:()=>r.GPTBigCodeForCausalLM,GPTBigCodeModel:()=>r.GPTBigCodeModel,GPTBigCodePreTrainedModel:()=>r.GPTBigCodePreTrainedModel,GPTJForCausalLM:()=>r.GPTJForCausalLM,GPTJModel:()=>r.GPTJModel,GPTJPreTrainedModel:()=>r.GPTJPreTrainedModel,GPTNeoForCausalLM:()=>r.GPTNeoForCausalLM,GPTNeoModel:()=>r.GPTNeoModel,GPTNeoPreTrainedModel:()=>r.GPTNeoPreTrainedModel,GPTNeoXForCausalLM:()=>r.GPTNeoXForCausalLM,GPTNeoXModel:()=>r.GPTNeoXModel,GPTNeoXPreTrainedModel:()=>r.GPTNeoXPreTrainedModel,GPTNeoXTokenizer:()=>n.GPTNeoXTokenizer,Gemma2ForCausalLM:()=>r.Gemma2ForCausalLM,Gemma2Model:()=>r.Gemma2Model,Gemma2PreTrainedModel:()=>r.Gemma2PreTrainedModel,Gemma3ForCausalLM:()=>r.Gemma3ForCausalLM,Gemma3Model:()=>r.Gemma3Model,Gemma3PreTrainedModel:()=>r.Gemma3PreTrainedModel,Gemma3nAudioFeatureExtractor:()=>c.Gemma3nAudioFeatureExtractor,Gemma3nForConditionalGeneration:()=>r.Gemma3nForConditionalGeneration,Gemma3nPreTrainedModel:()=>r.Gemma3nPreTrainedModel,Gemma3nProcessor:()=>y.Gemma3nProcessor,GemmaForCausalLM:()=>r.GemmaForCausalLM,GemmaModel:()=>r.GemmaModel,GemmaPreTrainedModel:()=>r.GemmaPreTrainedModel,GemmaTokenizer:()=>n.GemmaTokenizer,GlmForCausalLM:()=>r.GlmForCausalLM,GlmModel:()=>r.GlmModel,GlmPreTrainedModel:()=>r.GlmPreTrainedModel,GraniteForCausalLM:()=>r.GraniteForCausalLM,GraniteModel:()=>r.GraniteModel,GranitePreTrainedModel:()=>r.GranitePreTrainedModel,Grok1Tokenizer:()=>n.Grok1Tokenizer,GroundingDinoForObjectDetection:()=>r.GroundingDinoForObjectDetection,GroundingDinoImageProcessor:()=>f.GroundingDinoImageProcessor,GroundingDinoPreTrainedModel:()=>r.GroundingDinoPreTrainedModel,GroundingDinoProcessor:()=>y.GroundingDinoProcessor,GroupViTModel:()=>r.GroupViTModel,GroupViTPreTrainedModel:()=>r.GroupViTPreTrainedModel,HeliumForCausalLM:()=>r.HeliumForCausalLM,HeliumModel:()=>r.HeliumModel,HeliumPreTrainedModel:()=>r.HeliumPreTrainedModel,HerbertTokenizer:()=>n.HerbertTokenizer,HieraForImageClassification:()=>r.HieraForImageClassification,HieraModel:()=>r.HieraModel,HieraPreTrainedModel:()=>r.HieraPreTrainedModel,HubertForCTC:()=>r.HubertForCTC,HubertForSequenceClassification:()=>r.HubertForSequenceClassification,HubertModel:()=>r.HubertModel,HubertPreTrainedModel:()=>r.HubertPreTrainedModel,IJepaForImageClassification:()=>r.IJepaForImageClassification,IJepaModel:()=>r.IJepaModel,IJepaPreTrainedModel:()=>r.IJepaPreTrainedModel,Idefics3ForConditionalGeneration:()=>r.Idefics3ForConditionalGeneration,Idefics3ImageProcessor:()=>f.Idefics3ImageProcessor,Idefics3PreTrainedModel:()=>r.Idefics3PreTrainedModel,Idefics3Processor:()=>y.Idefics3Processor,ImageClassificationPipeline:()=>t.ImageClassificationPipeline,ImageFeatureExtractionPipeline:()=>t.ImageFeatureExtractionPipeline,ImageFeatureExtractor:()=>c.ImageFeatureExtractor,ImageMattingOutput:()=>r.ImageMattingOutput,ImageProcessor:()=>m.ImageProcessor,ImageSegmentationPipeline:()=>t.ImageSegmentationPipeline,ImageToImagePipeline:()=>t.ImageToImagePipeline,ImageToTextPipeline:()=>t.ImageToTextPipeline,InterruptableStoppingCriteria:()=>b.InterruptableStoppingCriteria,JAISLMHeadModel:()=>r.JAISLMHeadModel,JAISModel:()=>r.JAISModel,JAISPreTrainedModel:()=>r.JAISPreTrainedModel,JinaCLIPImageProcessor:()=>f.JinaCLIPImageProcessor,JinaCLIPModel:()=>r.JinaCLIPModel,JinaCLIPPreTrainedModel:()=>r.JinaCLIPPreTrainedModel,JinaCLIPProcessor:()=>y.JinaCLIPProcessor,JinaCLIPTextModel:()=>r.JinaCLIPTextModel,JinaCLIPVisionModel:()=>r.JinaCLIPVisionModel,Lfm2ForCausalLM:()=>r.Lfm2ForCausalLM,Lfm2Model:()=>r.Lfm2Model,Lfm2PreTrainedModel:()=>r.Lfm2PreTrainedModel,LiteWhisperForConditionalGeneration:()=>r.LiteWhisperForConditionalGeneration,LlamaForCausalLM:()=>r.LlamaForCausalLM,LlamaModel:()=>r.LlamaModel,LlamaPreTrainedModel:()=>r.LlamaPreTrainedModel,LlamaTokenizer:()=>n.LlamaTokenizer,LlavaForConditionalGeneration:()=>r.LlavaForConditionalGeneration,LlavaOnevisionForConditionalGeneration:()=>r.LlavaOnevisionForConditionalGeneration,LlavaOnevisionImageProcessor:()=>f.LlavaOnevisionImageProcessor,LlavaPreTrainedModel:()=>r.LlavaPreTrainedModel,LlavaProcessor:()=>y.LlavaProcessor,LlavaQwen2ForCausalLM:()=>r.LlavaQwen2ForCausalLM,LogitsProcessor:()=>x.LogitsProcessor,LogitsProcessorList:()=>x.LogitsProcessorList,LogitsWarper:()=>x.LogitsWarper,LongT5ForConditionalGeneration:()=>r.LongT5ForConditionalGeneration,LongT5Model:()=>r.LongT5Model,LongT5PreTrainedModel:()=>r.LongT5PreTrainedModel,M2M100ForConditionalGeneration:()=>r.M2M100ForConditionalGeneration,M2M100Model:()=>r.M2M100Model,M2M100PreTrainedModel:()=>r.M2M100PreTrainedModel,M2M100Tokenizer:()=>n.M2M100Tokenizer,MBart50Tokenizer:()=>n.MBart50Tokenizer,MBartForCausalLM:()=>r.MBartForCausalLM,MBartForConditionalGeneration:()=>r.MBartForConditionalGeneration,MBartForSequenceClassification:()=>r.MBartForSequenceClassification,MBartModel:()=>r.MBartModel,MBartPreTrainedModel:()=>r.MBartPreTrainedModel,MBartTokenizer:()=>n.MBartTokenizer,MPNetForMaskedLM:()=>r.MPNetForMaskedLM,MPNetForQuestionAnswering:()=>r.MPNetForQuestionAnswering,MPNetForSequenceClassification:()=>r.MPNetForSequenceClassification,MPNetForTokenClassification:()=>r.MPNetForTokenClassification,MPNetModel:()=>r.MPNetModel,MPNetPreTrainedModel:()=>r.MPNetPreTrainedModel,MPNetTokenizer:()=>n.MPNetTokenizer,MT5ForConditionalGeneration:()=>r.MT5ForConditionalGeneration,MT5Model:()=>r.MT5Model,MT5PreTrainedModel:()=>r.MT5PreTrainedModel,MarianMTModel:()=>r.MarianMTModel,MarianModel:()=>r.MarianModel,MarianPreTrainedModel:()=>r.MarianPreTrainedModel,MarianTokenizer:()=>n.MarianTokenizer,Mask2FormerImageProcessor:()=>f.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>f.MaskFormerFeatureExtractor,MaskFormerForInstanceSegmentation:()=>r.MaskFormerForInstanceSegmentation,MaskFormerImageProcessor:()=>f.MaskFormerImageProcessor,MaskFormerModel:()=>r.MaskFormerModel,MaskFormerPreTrainedModel:()=>r.MaskFormerPreTrainedModel,MaskedLMOutput:()=>r.MaskedLMOutput,MaxLengthCriteria:()=>b.MaxLengthCriteria,Metric3DForDepthEstimation:()=>r.Metric3DForDepthEstimation,Metric3DPreTrainedModel:()=>r.Metric3DPreTrainedModel,Metric3Dv2ForDepthEstimation:()=>r.Metric3Dv2ForDepthEstimation,Metric3Dv2PreTrainedModel:()=>r.Metric3Dv2PreTrainedModel,MgpstrForSceneTextRecognition:()=>r.MgpstrForSceneTextRecognition,MgpstrModelOutput:()=>r.MgpstrModelOutput,MgpstrPreTrainedModel:()=>r.MgpstrPreTrainedModel,MgpstrProcessor:()=>y.MgpstrProcessor,MgpstrTokenizer:()=>n.MgpstrTokenizer,MimiDecoderModel:()=>r.MimiDecoderModel,MimiDecoderOutput:()=>r.MimiDecoderOutput,MimiEncoderModel:()=>r.MimiEncoderModel,MimiEncoderOutput:()=>r.MimiEncoderOutput,MimiModel:()=>r.MimiModel,MimiPreTrainedModel:()=>r.MimiPreTrainedModel,MinLengthLogitsProcessor:()=>x.MinLengthLogitsProcessor,MinNewTokensLengthLogitsProcessor:()=>x.MinNewTokensLengthLogitsProcessor,MistralForCausalLM:()=>r.MistralForCausalLM,MistralModel:()=>r.MistralModel,MistralPreTrainedModel:()=>r.MistralPreTrainedModel,MobileBertForMaskedLM:()=>r.MobileBertForMaskedLM,MobileBertForQuestionAnswering:()=>r.MobileBertForQuestionAnswering,MobileBertForSequenceClassification:()=>r.MobileBertForSequenceClassification,MobileBertModel:()=>r.MobileBertModel,MobileBertPreTrainedModel:()=>r.MobileBertPreTrainedModel,MobileBertTokenizer:()=>n.MobileBertTokenizer,MobileLLMForCausalLM:()=>r.MobileLLMForCausalLM,MobileLLMModel:()=>r.MobileLLMModel,MobileLLMPreTrainedModel:()=>r.MobileLLMPreTrainedModel,MobileNetV1FeatureExtractor:()=>f.MobileNetV1FeatureExtractor,MobileNetV1ForImageClassification:()=>r.MobileNetV1ForImageClassification,MobileNetV1ForSemanticSegmentation:()=>r.MobileNetV1ForSemanticSegmentation,MobileNetV1ImageProcessor:()=>f.MobileNetV1ImageProcessor,MobileNetV1Model:()=>r.MobileNetV1Model,MobileNetV1PreTrainedModel:()=>r.MobileNetV1PreTrainedModel,MobileNetV2FeatureExtractor:()=>f.MobileNetV2FeatureExtractor,MobileNetV2ForImageClassification:()=>r.MobileNetV2ForImageClassification,MobileNetV2ForSemanticSegmentation:()=>r.MobileNetV2ForSemanticSegmentation,MobileNetV2ImageProcessor:()=>f.MobileNetV2ImageProcessor,MobileNetV2Model:()=>r.MobileNetV2Model,MobileNetV2PreTrainedModel:()=>r.MobileNetV2PreTrainedModel,MobileNetV3FeatureExtractor:()=>f.MobileNetV3FeatureExtractor,MobileNetV3ForImageClassification:()=>r.MobileNetV3ForImageClassification,MobileNetV3ForSemanticSegmentation:()=>r.MobileNetV3ForSemanticSegmentation,MobileNetV3ImageProcessor:()=>f.MobileNetV3ImageProcessor,MobileNetV3Model:()=>r.MobileNetV3Model,MobileNetV3PreTrainedModel:()=>r.MobileNetV3PreTrainedModel,MobileNetV4FeatureExtractor:()=>f.MobileNetV4FeatureExtractor,MobileNetV4ForImageClassification:()=>r.MobileNetV4ForImageClassification,MobileNetV4ForSemanticSegmentation:()=>r.MobileNetV4ForSemanticSegmentation,MobileNetV4ImageProcessor:()=>f.MobileNetV4ImageProcessor,MobileNetV4Model:()=>r.MobileNetV4Model,MobileNetV4PreTrainedModel:()=>r.MobileNetV4PreTrainedModel,MobileViTFeatureExtractor:()=>f.MobileViTFeatureExtractor,MobileViTForImageClassification:()=>r.MobileViTForImageClassification,MobileViTImageProcessor:()=>f.MobileViTImageProcessor,MobileViTModel:()=>r.MobileViTModel,MobileViTPreTrainedModel:()=>r.MobileViTPreTrainedModel,MobileViTV2ForImageClassification:()=>r.MobileViTV2ForImageClassification,MobileViTV2Model:()=>r.MobileViTV2Model,MobileViTV2PreTrainedModel:()=>r.MobileViTV2PreTrainedModel,ModelOutput:()=>r.ModelOutput,ModernBertDecoderForCausalLM:()=>r.ModernBertDecoderForCausalLM,ModernBertDecoderModel:()=>r.ModernBertDecoderModel,ModernBertDecoderPreTrainedModel:()=>r.ModernBertDecoderPreTrainedModel,ModernBertForMaskedLM:()=>r.ModernBertForMaskedLM,ModernBertForSequenceClassification:()=>r.ModernBertForSequenceClassification,ModernBertForTokenClassification:()=>r.ModernBertForTokenClassification,ModernBertModel:()=>r.ModernBertModel,ModernBertPreTrainedModel:()=>r.ModernBertPreTrainedModel,Moondream1ForConditionalGeneration:()=>r.Moondream1ForConditionalGeneration,MoonshineFeatureExtractor:()=>c.MoonshineFeatureExtractor,MoonshineForConditionalGeneration:()=>r.MoonshineForConditionalGeneration,MoonshineModel:()=>r.MoonshineModel,MoonshinePreTrainedModel:()=>r.MoonshinePreTrainedModel,MoonshineProcessor:()=>y.MoonshineProcessor,MptForCausalLM:()=>r.MptForCausalLM,MptModel:()=>r.MptModel,MptPreTrainedModel:()=>r.MptPreTrainedModel,MultiModalityCausalLM:()=>r.MultiModalityCausalLM,MultiModalityPreTrainedModel:()=>r.MultiModalityPreTrainedModel,MusicgenForCausalLM:()=>r.MusicgenForCausalLM,MusicgenForConditionalGeneration:()=>r.MusicgenForConditionalGeneration,MusicgenModel:()=>r.MusicgenModel,MusicgenPreTrainedModel:()=>r.MusicgenPreTrainedModel,NeoBertForMaskedLM:()=>r.NeoBertForMaskedLM,NeoBertForQuestionAnswering:()=>r.NeoBertForQuestionAnswering,NeoBertForSequenceClassification:()=>r.NeoBertForSequenceClassification,NeoBertForTokenClassification:()=>r.NeoBertForTokenClassification,NeoBertModel:()=>r.NeoBertModel,NeoBertPreTrainedModel:()=>r.NeoBertPreTrainedModel,NllbTokenizer:()=>n.NllbTokenizer,NoBadWordsLogitsProcessor:()=>x.NoBadWordsLogitsProcessor,NoRepeatNGramLogitsProcessor:()=>x.NoRepeatNGramLogitsProcessor,NomicBertModel:()=>r.NomicBertModel,NomicBertPreTrainedModel:()=>r.NomicBertPreTrainedModel,NougatImageProcessor:()=>f.NougatImageProcessor,NougatTokenizer:()=>n.NougatTokenizer,OPTForCausalLM:()=>r.OPTForCausalLM,OPTModel:()=>r.OPTModel,OPTPreTrainedModel:()=>r.OPTPreTrainedModel,ObjectDetectionPipeline:()=>t.ObjectDetectionPipeline,Olmo2ForCausalLM:()=>r.Olmo2ForCausalLM,Olmo2Model:()=>r.Olmo2Model,Olmo2PreTrainedModel:()=>r.Olmo2PreTrainedModel,OlmoForCausalLM:()=>r.OlmoForCausalLM,OlmoModel:()=>r.OlmoModel,OlmoPreTrainedModel:()=>r.OlmoPreTrainedModel,OpenELMForCausalLM:()=>r.OpenELMForCausalLM,OpenELMModel:()=>r.OpenELMModel,OpenELMPreTrainedModel:()=>r.OpenELMPreTrainedModel,OwlViTFeatureExtractor:()=>f.OwlViTFeatureExtractor,OwlViTForObjectDetection:()=>r.OwlViTForObjectDetection,OwlViTImageProcessor:()=>f.OwlViTImageProcessor,OwlViTModel:()=>r.OwlViTModel,OwlViTPreTrainedModel:()=>r.OwlViTPreTrainedModel,OwlViTProcessor:()=>y.OwlViTProcessor,Owlv2ForObjectDetection:()=>r.Owlv2ForObjectDetection,Owlv2ImageProcessor:()=>f.Owlv2ImageProcessor,Owlv2Model:()=>r.Owlv2Model,Owlv2PreTrainedModel:()=>r.Owlv2PreTrainedModel,PaliGemmaForConditionalGeneration:()=>r.PaliGemmaForConditionalGeneration,PaliGemmaPreTrainedModel:()=>r.PaliGemmaPreTrainedModel,PaliGemmaProcessor:()=>y.PaliGemmaProcessor,PatchTSMixerForPrediction:()=>r.PatchTSMixerForPrediction,PatchTSMixerModel:()=>r.PatchTSMixerModel,PatchTSMixerPreTrainedModel:()=>r.PatchTSMixerPreTrainedModel,PatchTSTForPrediction:()=>r.PatchTSTForPrediction,PatchTSTModel:()=>r.PatchTSTModel,PatchTSTPreTrainedModel:()=>r.PatchTSTPreTrainedModel,Phi3ForCausalLM:()=>r.Phi3ForCausalLM,Phi3Model:()=>r.Phi3Model,Phi3PreTrainedModel:()=>r.Phi3PreTrainedModel,Phi3VForCausalLM:()=>r.Phi3VForCausalLM,Phi3VImageProcessor:()=>f.Phi3VImageProcessor,Phi3VPreTrainedModel:()=>r.Phi3VPreTrainedModel,Phi3VProcessor:()=>y.Phi3VProcessor,PhiForCausalLM:()=>r.PhiForCausalLM,PhiModel:()=>r.PhiModel,PhiPreTrainedModel:()=>r.PhiPreTrainedModel,Pipeline:()=>t.Pipeline,PreTrainedModel:()=>r.PreTrainedModel,PreTrainedTokenizer:()=>n.PreTrainedTokenizer,PretrainedConfig:()=>i.PretrainedConfig,PretrainedMixin:()=>r.PretrainedMixin,Processor:()=>C.Processor,PvtForImageClassification:()=>r.PvtForImageClassification,PvtImageProcessor:()=>f.PvtImageProcessor,PvtModel:()=>r.PvtModel,PvtPreTrainedModel:()=>r.PvtPreTrainedModel,PyAnnoteFeatureExtractor:()=>c.PyAnnoteFeatureExtractor,PyAnnoteForAudioFrameClassification:()=>r.PyAnnoteForAudioFrameClassification,PyAnnoteModel:()=>r.PyAnnoteModel,PyAnnotePreTrainedModel:()=>r.PyAnnotePreTrainedModel,PyAnnoteProcessor:()=>y.PyAnnoteProcessor,QuestionAnsweringModelOutput:()=>r.QuestionAnsweringModelOutput,QuestionAnsweringPipeline:()=>t.QuestionAnsweringPipeline,Qwen2ForCausalLM:()=>r.Qwen2ForCausalLM,Qwen2Model:()=>r.Qwen2Model,Qwen2PreTrainedModel:()=>r.Qwen2PreTrainedModel,Qwen2Tokenizer:()=>n.Qwen2Tokenizer,Qwen2VLForConditionalGeneration:()=>r.Qwen2VLForConditionalGeneration,Qwen2VLImageProcessor:()=>f.Qwen2VLImageProcessor,Qwen2VLPreTrainedModel:()=>r.Qwen2VLPreTrainedModel,Qwen2VLProcessor:()=>y.Qwen2VLProcessor,Qwen3ForCausalLM:()=>r.Qwen3ForCausalLM,Qwen3Model:()=>r.Qwen3Model,Qwen3PreTrainedModel:()=>r.Qwen3PreTrainedModel,RFDetrForObjectDetection:()=>r.RFDetrForObjectDetection,RFDetrModel:()=>r.RFDetrModel,RFDetrObjectDetectionOutput:()=>r.RFDetrObjectDetectionOutput,RFDetrPreTrainedModel:()=>r.RFDetrPreTrainedModel,RTDetrForObjectDetection:()=>r.RTDetrForObjectDetection,RTDetrImageProcessor:()=>f.RTDetrImageProcessor,RTDetrModel:()=>r.RTDetrModel,RTDetrObjectDetectionOutput:()=>r.RTDetrObjectDetectionOutput,RTDetrPreTrainedModel:()=>r.RTDetrPreTrainedModel,RTDetrV2ForObjectDetection:()=>r.RTDetrV2ForObjectDetection,RTDetrV2Model:()=>r.RTDetrV2Model,RTDetrV2ObjectDetectionOutput:()=>r.RTDetrV2ObjectDetectionOutput,RTDetrV2PreTrainedModel:()=>r.RTDetrV2PreTrainedModel,RawAudio:()=>s.RawAudio,RawImage:()=>a.RawImage,RawVideo:()=>o.RawVideo,RawVideoFrame:()=>o.RawVideoFrame,RepetitionPenaltyLogitsProcessor:()=>x.RepetitionPenaltyLogitsProcessor,ResNetForImageClassification:()=>r.ResNetForImageClassification,ResNetModel:()=>r.ResNetModel,ResNetPreTrainedModel:()=>r.ResNetPreTrainedModel,RoFormerForMaskedLM:()=>r.RoFormerForMaskedLM,RoFormerForQuestionAnswering:()=>r.RoFormerForQuestionAnswering,RoFormerForSequenceClassification:()=>r.RoFormerForSequenceClassification,RoFormerForTokenClassification:()=>r.RoFormerForTokenClassification,RoFormerModel:()=>r.RoFormerModel,RoFormerPreTrainedModel:()=>r.RoFormerPreTrainedModel,RoFormerTokenizer:()=>n.RoFormerTokenizer,RobertaForMaskedLM:()=>r.RobertaForMaskedLM,RobertaForQuestionAnswering:()=>r.RobertaForQuestionAnswering,RobertaForSequenceClassification:()=>r.RobertaForSequenceClassification,RobertaForTokenClassification:()=>r.RobertaForTokenClassification,RobertaModel:()=>r.RobertaModel,RobertaPreTrainedModel:()=>r.RobertaPreTrainedModel,RobertaTokenizer:()=>n.RobertaTokenizer,SamImageProcessor:()=>f.SamImageProcessor,SamImageSegmentationOutput:()=>r.SamImageSegmentationOutput,SamModel:()=>r.SamModel,SamPreTrainedModel:()=>r.SamPreTrainedModel,SamProcessor:()=>y.SamProcessor,SapiensForDepthEstimation:()=>r.SapiensForDepthEstimation,SapiensForNormalEstimation:()=>r.SapiensForNormalEstimation,SapiensForSemanticSegmentation:()=>r.SapiensForSemanticSegmentation,SapiensPreTrainedModel:()=>r.SapiensPreTrainedModel,SeamlessM4TFeatureExtractor:()=>c.SeamlessM4TFeatureExtractor,SegformerFeatureExtractor:()=>f.SegformerFeatureExtractor,SegformerForImageClassification:()=>r.SegformerForImageClassification,SegformerForSemanticSegmentation:()=>r.SegformerForSemanticSegmentation,SegformerImageProcessor:()=>f.SegformerImageProcessor,SegformerModel:()=>r.SegformerModel,SegformerPreTrainedModel:()=>r.SegformerPreTrainedModel,Seq2SeqLMOutput:()=>r.Seq2SeqLMOutput,SequenceClassifierOutput:()=>r.SequenceClassifierOutput,SiglipImageProcessor:()=>f.SiglipImageProcessor,SiglipModel:()=>r.SiglipModel,SiglipPreTrainedModel:()=>r.SiglipPreTrainedModel,SiglipTextModel:()=>r.SiglipTextModel,SiglipTokenizer:()=>n.SiglipTokenizer,SiglipVisionModel:()=>r.SiglipVisionModel,SmolLM3ForCausalLM:()=>r.SmolLM3ForCausalLM,SmolLM3Model:()=>r.SmolLM3Model,SmolLM3PreTrainedModel:()=>r.SmolLM3PreTrainedModel,SmolVLMForConditionalGeneration:()=>r.SmolVLMForConditionalGeneration,SmolVLMImageProcessor:()=>f.SmolVLMImageProcessor,SmolVLMProcessor:()=>y.SmolVLMProcessor,SnacDecoderModel:()=>r.SnacDecoderModel,SnacEncoderModel:()=>r.SnacEncoderModel,SnacFeatureExtractor:()=>c.SnacFeatureExtractor,SnacModel:()=>r.SnacModel,SnacPreTrainedModel:()=>r.SnacPreTrainedModel,SpeechT5FeatureExtractor:()=>c.SpeechT5FeatureExtractor,SpeechT5ForSpeechToText:()=>r.SpeechT5ForSpeechToText,SpeechT5ForTextToSpeech:()=>r.SpeechT5ForTextToSpeech,SpeechT5HifiGan:()=>r.SpeechT5HifiGan,SpeechT5Model:()=>r.SpeechT5Model,SpeechT5PreTrainedModel:()=>r.SpeechT5PreTrainedModel,SpeechT5Processor:()=>y.SpeechT5Processor,SpeechT5Tokenizer:()=>n.SpeechT5Tokenizer,SqueezeBertForMaskedLM:()=>r.SqueezeBertForMaskedLM,SqueezeBertForQuestionAnswering:()=>r.SqueezeBertForQuestionAnswering,SqueezeBertForSequenceClassification:()=>r.SqueezeBertForSequenceClassification,SqueezeBertModel:()=>r.SqueezeBertModel,SqueezeBertPreTrainedModel:()=>r.SqueezeBertPreTrainedModel,SqueezeBertTokenizer:()=>n.SqueezeBertTokenizer,StableLmForCausalLM:()=>r.StableLmForCausalLM,StableLmModel:()=>r.StableLmModel,StableLmPreTrainedModel:()=>r.StableLmPreTrainedModel,Starcoder2ForCausalLM:()=>r.Starcoder2ForCausalLM,Starcoder2Model:()=>r.Starcoder2Model,Starcoder2PreTrainedModel:()=>r.Starcoder2PreTrainedModel,StoppingCriteria:()=>b.StoppingCriteria,StoppingCriteriaList:()=>b.StoppingCriteriaList,StyleTextToSpeech2Model:()=>r.StyleTextToSpeech2Model,StyleTextToSpeech2PreTrainedModel:()=>r.StyleTextToSpeech2PreTrainedModel,SummarizationPipeline:()=>t.SummarizationPipeline,SuppressTokensAtBeginLogitsProcessor:()=>x.SuppressTokensAtBeginLogitsProcessor,Swin2SRForImageSuperResolution:()=>r.Swin2SRForImageSuperResolution,Swin2SRImageProcessor:()=>f.Swin2SRImageProcessor,Swin2SRModel:()=>r.Swin2SRModel,Swin2SRPreTrainedModel:()=>r.Swin2SRPreTrainedModel,SwinForImageClassification:()=>r.SwinForImageClassification,SwinForSemanticSegmentation:()=>r.SwinForSemanticSegmentation,SwinModel:()=>r.SwinModel,SwinPreTrainedModel:()=>r.SwinPreTrainedModel,T5ForConditionalGeneration:()=>r.T5ForConditionalGeneration,T5Model:()=>r.T5Model,T5PreTrainedModel:()=>r.T5PreTrainedModel,T5Tokenizer:()=>n.T5Tokenizer,TableTransformerForObjectDetection:()=>r.TableTransformerForObjectDetection,TableTransformerModel:()=>r.TableTransformerModel,TableTransformerObjectDetectionOutput:()=>r.TableTransformerObjectDetectionOutput,TableTransformerPreTrainedModel:()=>r.TableTransformerPreTrainedModel,TemperatureLogitsWarper:()=>x.TemperatureLogitsWarper,Tensor:()=>l.Tensor,Text2TextGenerationPipeline:()=>t.Text2TextGenerationPipeline,TextClassificationPipeline:()=>t.TextClassificationPipeline,TextGenerationPipeline:()=>t.TextGenerationPipeline,TextStreamer:()=>P.TextStreamer,TextToAudioPipeline:()=>t.TextToAudioPipeline,TokenClassificationPipeline:()=>t.TokenClassificationPipeline,TokenClassifierOutput:()=>r.TokenClassifierOutput,TokenizerModel:()=>n.TokenizerModel,TopKLogitsWarper:()=>x.TopKLogitsWarper,TopPLogitsWarper:()=>x.TopPLogitsWarper,TrOCRForCausalLM:()=>r.TrOCRForCausalLM,TrOCRPreTrainedModel:()=>r.TrOCRPreTrainedModel,TranslationPipeline:()=>t.TranslationPipeline,UltravoxModel:()=>r.UltravoxModel,UltravoxPreTrainedModel:()=>r.UltravoxPreTrainedModel,UltravoxProcessor:()=>y.UltravoxProcessor,UniSpeechForCTC:()=>r.UniSpeechForCTC,UniSpeechForSequenceClassification:()=>r.UniSpeechForSequenceClassification,UniSpeechModel:()=>r.UniSpeechModel,UniSpeechPreTrainedModel:()=>r.UniSpeechPreTrainedModel,UniSpeechSatForAudioFrameClassification:()=>r.UniSpeechSatForAudioFrameClassification,UniSpeechSatForCTC:()=>r.UniSpeechSatForCTC,UniSpeechSatForSequenceClassification:()=>r.UniSpeechSatForSequenceClassification,UniSpeechSatModel:()=>r.UniSpeechSatModel,UniSpeechSatPreTrainedModel:()=>r.UniSpeechSatPreTrainedModel,VLChatProcessor:()=>y.VLChatProcessor,VLMImageProcessor:()=>f.VLMImageProcessor,ViTFeatureExtractor:()=>f.ViTFeatureExtractor,ViTForImageClassification:()=>r.ViTForImageClassification,ViTImageProcessor:()=>f.ViTImageProcessor,ViTMAEModel:()=>r.ViTMAEModel,ViTMAEPreTrainedModel:()=>r.ViTMAEPreTrainedModel,ViTMSNForImageClassification:()=>r.ViTMSNForImageClassification,ViTMSNModel:()=>r.ViTMSNModel,ViTMSNPreTrainedModel:()=>r.ViTMSNPreTrainedModel,ViTModel:()=>r.ViTModel,ViTPreTrainedModel:()=>r.ViTPreTrainedModel,VisionEncoderDecoderModel:()=>r.VisionEncoderDecoderModel,VitMatteForImageMatting:()=>r.VitMatteForImageMatting,VitMatteImageProcessor:()=>f.VitMatteImageProcessor,VitMattePreTrainedModel:()=>r.VitMattePreTrainedModel,VitPoseForPoseEstimation:()=>r.VitPoseForPoseEstimation,VitPoseImageProcessor:()=>f.VitPoseImageProcessor,VitPosePreTrainedModel:()=>r.VitPosePreTrainedModel,VitsModel:()=>r.VitsModel,VitsModelOutput:()=>r.VitsModelOutput,VitsPreTrainedModel:()=>r.VitsPreTrainedModel,VitsTokenizer:()=>n.VitsTokenizer,VoxtralForConditionalGeneration:()=>r.VoxtralForConditionalGeneration,VoxtralProcessor:()=>y.VoxtralProcessor,Wav2Vec2BertForCTC:()=>r.Wav2Vec2BertForCTC,Wav2Vec2BertForSequenceClassification:()=>r.Wav2Vec2BertForSequenceClassification,Wav2Vec2BertModel:()=>r.Wav2Vec2BertModel,Wav2Vec2BertPreTrainedModel:()=>r.Wav2Vec2BertPreTrainedModel,Wav2Vec2CTCTokenizer:()=>n.Wav2Vec2CTCTokenizer,Wav2Vec2FeatureExtractor:()=>c.Wav2Vec2FeatureExtractor,Wav2Vec2ForAudioFrameClassification:()=>r.Wav2Vec2ForAudioFrameClassification,Wav2Vec2ForCTC:()=>r.Wav2Vec2ForCTC,Wav2Vec2ForSequenceClassification:()=>r.Wav2Vec2ForSequenceClassification,Wav2Vec2Model:()=>r.Wav2Vec2Model,Wav2Vec2PreTrainedModel:()=>r.Wav2Vec2PreTrainedModel,Wav2Vec2Processor:()=>y.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>y.Wav2Vec2ProcessorWithLM,WavLMForAudioFrameClassification:()=>r.WavLMForAudioFrameClassification,WavLMForCTC:()=>r.WavLMForCTC,WavLMForSequenceClassification:()=>r.WavLMForSequenceClassification,WavLMForXVector:()=>r.WavLMForXVector,WavLMModel:()=>r.WavLMModel,WavLMPreTrainedModel:()=>r.WavLMPreTrainedModel,WeSpeakerFeatureExtractor:()=>c.WeSpeakerFeatureExtractor,WeSpeakerResNetModel:()=>r.WeSpeakerResNetModel,WeSpeakerResNetPreTrainedModel:()=>r.WeSpeakerResNetPreTrainedModel,WhisperFeatureExtractor:()=>c.WhisperFeatureExtractor,WhisperForConditionalGeneration:()=>r.WhisperForConditionalGeneration,WhisperModel:()=>r.WhisperModel,WhisperPreTrainedModel:()=>r.WhisperPreTrainedModel,WhisperProcessor:()=>y.WhisperProcessor,WhisperTextStreamer:()=>P.WhisperTextStreamer,WhisperTimeStampLogitsProcessor:()=>x.WhisperTimeStampLogitsProcessor,WhisperTokenizer:()=>n.WhisperTokenizer,XLMForQuestionAnswering:()=>r.XLMForQuestionAnswering,XLMForSequenceClassification:()=>r.XLMForSequenceClassification,XLMForTokenClassification:()=>r.XLMForTokenClassification,XLMModel:()=>r.XLMModel,XLMPreTrainedModel:()=>r.XLMPreTrainedModel,XLMRobertaForMaskedLM:()=>r.XLMRobertaForMaskedLM,XLMRobertaForQuestionAnswering:()=>r.XLMRobertaForQuestionAnswering,XLMRobertaForSequenceClassification:()=>r.XLMRobertaForSequenceClassification,XLMRobertaForTokenClassification:()=>r.XLMRobertaForTokenClassification,XLMRobertaModel:()=>r.XLMRobertaModel,XLMRobertaPreTrainedModel:()=>r.XLMRobertaPreTrainedModel,XLMRobertaTokenizer:()=>n.XLMRobertaTokenizer,XLMTokenizer:()=>n.XLMTokenizer,XLMWithLMHeadModel:()=>r.XLMWithLMHeadModel,XVectorOutput:()=>r.XVectorOutput,YolosFeatureExtractor:()=>f.YolosFeatureExtractor,YolosForObjectDetection:()=>r.YolosForObjectDetection,YolosImageProcessor:()=>f.YolosImageProcessor,YolosModel:()=>r.YolosModel,YolosObjectDetectionOutput:()=>r.YolosObjectDetectionOutput,YolosPreTrainedModel:()=>r.YolosPreTrainedModel,ZeroShotAudioClassificationPipeline:()=>t.ZeroShotAudioClassificationPipeline,ZeroShotClassificationPipeline:()=>t.ZeroShotClassificationPipeline,ZeroShotImageClassificationPipeline:()=>t.ZeroShotImageClassificationPipeline,ZeroShotObjectDetectionPipeline:()=>t.ZeroShotObjectDetectionPipeline,bankers_round:()=>u.bankers_round,cat:()=>l.cat,cos_sim:()=>u.cos_sim,dot:()=>u.dot,dynamic_time_warping:()=>u.dynamic_time_warping,env:()=>e.env,full:()=>l.full,full_like:()=>l.full_like,getCacheShapes:()=>i.getCacheShapes,hamming:()=>s.hamming,hanning:()=>s.hanning,interpolate:()=>l.interpolate,interpolate_4d:()=>l.interpolate_4d,interpolate_data:()=>u.interpolate_data,is_chinese_char:()=>n.is_chinese_char,layer_norm:()=>l.layer_norm,load_image:()=>a.load_image,load_video:()=>o.load_video,log_softmax:()=>u.log_softmax,magnitude:()=>u.magnitude,matmul:()=>l.matmul,max:()=>u.max,mean:()=>l.mean,mean_pooling:()=>l.mean_pooling,medianFilter:()=>u.medianFilter,mel_filter_bank:()=>s.mel_filter_bank,min:()=>u.min,ones:()=>l.ones,ones_like:()=>l.ones_like,permute:()=>l.permute,permute_data:()=>u.permute_data,pipeline:()=>t.pipeline,quantize_embeddings:()=>l.quantize_embeddings,rand:()=>l.rand,read_audio:()=>s.read_audio,rfft:()=>l.rfft,round:()=>u.round,slice:()=>l.slice,softmax:()=>u.softmax,spectrogram:()=>s.spectrogram,stack:()=>l.stack,std_mean:()=>l.std_mean,topk:()=>l.topk,window_function:()=>s.window_function,zeros:()=>l.zeros,zeros_like:()=>l.zeros_like});var e=ur("./src/env.js"),t=ur("./src/pipelines.js"),r=ur("./src/models.js"),n=ur("./src/tokenizers.js"),i=ur("./src/configs.js"),s=ur("./src/utils/audio.js"),a=ur("./src/utils/image.js"),o=ur("./src/utils/video.js"),l=ur("./src/utils/tensor.js"),u=ur("./src/utils/maths.js"),d=ur("./src/base/feature_extraction_utils.js"),c=ur("./src/models/feature_extractors.js"),p=ur("./src/models/auto/feature_extraction_auto.js"),m=ur("./src/base/image_processors_utils.js"),f=ur("./src/models/image_processors.js"),w=ur("./src/models/auto/image_processing_auto.js"),C=ur("./src/base/processing_utils.js"),y=ur("./src/models/processors.js"),g=ur("./src/models/auto/processing_auto.js"),P=ur("./src/generation/streamers.js"),b=ur("./src/generation/stopping_criteria.js"),x=ur("./src/generation/logits_process.js")})(),$.ASTFeatureExtractor,$.ASTForAudioClassification,$.ASTModel,$.ASTPreTrainedModel,$.AlbertForMaskedLM,$.AlbertForQuestionAnswering,$.AlbertForSequenceClassification,$.AlbertModel,$.AlbertPreTrainedModel,$.AlbertTokenizer,$.ArceeForCausalLM,$.ArceeModel,$.ArceePreTrainedModel,$.AudioClassificationPipeline,$.AutoConfig,$.AutoFeatureExtractor,$.AutoImageProcessor,$.AutoModel,$.AutoModelForAudioClassification,$.AutoModelForAudioFrameClassification,$.AutoModelForAudioTextToText,$.AutoModelForCTC,$.AutoModelForCausalLM,$.AutoModelForDepthEstimation,$.AutoModelForDocumentQuestionAnswering,$.AutoModelForImageClassification,$.AutoModelForImageFeatureExtraction,$.AutoModelForImageMatting,$.AutoModelForImageSegmentation,$.AutoModelForImageTextToText,$.AutoModelForImageToImage,$.AutoModelForMaskGeneration,$.AutoModelForMaskedLM,$.AutoModelForNormalEstimation,$.AutoModelForObjectDetection,$.AutoModelForPoseEstimation,$.AutoModelForQuestionAnswering,$.AutoModelForSemanticSegmentation,$.AutoModelForSeq2SeqLM,$.AutoModelForSequenceClassification,$.AutoModelForSpeechSeq2Seq,$.AutoModelForTextToSpectrogram,$.AutoModelForTextToWaveform,$.AutoModelForTokenClassification,$.AutoModelForUniversalSegmentation,$.AutoModelForVision2Seq,$.AutoModelForXVector,$.AutoModelForZeroShotObjectDetection,$.AutoProcessor,$.AutoTokenizer,$.AutomaticSpeechRecognitionPipeline,$.BackgroundRemovalPipeline,$.BartForConditionalGeneration,$.BartForSequenceClassification,$.BartModel,$.BartPretrainedModel,$.BartTokenizer,$.BaseModelOutput,$.BaseStreamer,$.BeitFeatureExtractor,$.BeitForImageClassification,$.BeitModel,$.BeitPreTrainedModel,$.BertForMaskedLM,$.BertForQuestionAnswering,$.BertForSequenceClassification,$.BertForTokenClassification,$.BertModel,$.BertPreTrainedModel,$.BertTokenizer,$.BitImageProcessor,$.BlenderbotForConditionalGeneration,$.BlenderbotModel,$.BlenderbotPreTrainedModel,$.BlenderbotSmallForConditionalGeneration,$.BlenderbotSmallModel,$.BlenderbotSmallPreTrainedModel,$.BlenderbotSmallTokenizer,$.BlenderbotTokenizer,$.BloomForCausalLM,$.BloomModel,$.BloomPreTrainedModel,$.BloomTokenizer,$.CLIPFeatureExtractor,$.CLIPImageProcessor,$.CLIPModel,$.CLIPPreTrainedModel,$.CLIPSegForImageSegmentation,$.CLIPSegModel,$.CLIPSegPreTrainedModel,$.CLIPTextModel,$.CLIPTextModelWithProjection,$.CLIPTokenizer,$.CLIPVisionModel,$.CLIPVisionModelWithProjection,$.CamembertForMaskedLM,$.CamembertForQuestionAnswering,$.CamembertForSequenceClassification,$.CamembertForTokenClassification,$.CamembertModel,$.CamembertPreTrainedModel,$.CamembertTokenizer,$.CausalLMOutput,$.CausalLMOutputWithPast,$.ChineseCLIPFeatureExtractor,$.ChineseCLIPModel,$.ChineseCLIPPreTrainedModel,$.ClapAudioModelWithProjection,$.ClapFeatureExtractor,$.ClapModel,$.ClapPreTrainedModel,$.ClapTextModelWithProjection,$.ClassifierFreeGuidanceLogitsProcessor,$.CodeGenForCausalLM,$.CodeGenModel,$.CodeGenPreTrainedModel,$.CodeGenTokenizer,$.CodeLlamaTokenizer,$.CohereForCausalLM,$.CohereModel,$.CoherePreTrainedModel,$.CohereTokenizer,$.ConvBertForMaskedLM,$.ConvBertForQuestionAnswering,$.ConvBertForSequenceClassification,$.ConvBertForTokenClassification,$.ConvBertModel,$.ConvBertPreTrainedModel,$.ConvBertTokenizer,$.ConvNextFeatureExtractor,$.ConvNextForImageClassification,$.ConvNextImageProcessor,$.ConvNextModel,$.ConvNextPreTrainedModel,$.ConvNextV2ForImageClassification,$.ConvNextV2Model,$.ConvNextV2PreTrainedModel,$.DFineForObjectDetection,$.DFineModel,$.DFinePreTrainedModel,$.DINOv3ConvNextModel,$.DINOv3ConvNextPreTrainedModel,$.DINOv3ViTImageProcessor,$.DINOv3ViTModel,$.DINOv3ViTPreTrainedModel,$.DPTFeatureExtractor,$.DPTForDepthEstimation,$.DPTImageProcessor,$.DPTModel,$.DPTPreTrainedModel,$.DacDecoderModel,$.DacDecoderOutput,$.DacEncoderModel,$.DacEncoderOutput,$.DacFeatureExtractor,$.DacModel,$.DacPreTrainedModel,$.DataTypeMap,$.DebertaForMaskedLM,$.DebertaForQuestionAnswering,$.DebertaForSequenceClassification,$.DebertaForTokenClassification,$.DebertaModel,$.DebertaPreTrainedModel,$.DebertaTokenizer,$.DebertaV2ForMaskedLM,$.DebertaV2ForQuestionAnswering,$.DebertaV2ForSequenceClassification,$.DebertaV2ForTokenClassification,$.DebertaV2Model,$.DebertaV2PreTrainedModel,$.DebertaV2Tokenizer,$.DecisionTransformerModel,$.DecisionTransformerPreTrainedModel,$.DeiTFeatureExtractor,$.DeiTForImageClassification,$.DeiTImageProcessor,$.DeiTModel,$.DeiTPreTrainedModel,$.DepthAnythingForDepthEstimation,$.DepthAnythingPreTrainedModel,$.DepthEstimationPipeline,$.DepthProForDepthEstimation,$.DepthProPreTrainedModel,$.DetrFeatureExtractor,$.DetrForObjectDetection,$.DetrForSegmentation,$.DetrImageProcessor,$.DetrModel,$.DetrObjectDetectionOutput,$.DetrPreTrainedModel,$.DetrSegmentationOutput,$.Dinov2ForImageClassification,$.Dinov2Model,$.Dinov2PreTrainedModel,$.Dinov2WithRegistersForImageClassification,$.Dinov2WithRegistersModel,$.Dinov2WithRegistersPreTrainedModel,$.DistilBertForMaskedLM,$.DistilBertForQuestionAnswering,$.DistilBertForSequenceClassification,$.DistilBertForTokenClassification,$.DistilBertModel,$.DistilBertPreTrainedModel,$.DistilBertTokenizer,$.DocumentQuestionAnsweringPipeline,$.DonutFeatureExtractor,$.DonutImageProcessor,$.DonutSwinModel,$.DonutSwinPreTrainedModel,$.EfficientNetForImageClassification,$.EfficientNetImageProcessor,$.EfficientNetModel,$.EfficientNetPreTrainedModel,$.ElectraForMaskedLM,$.ElectraForQuestionAnswering,$.ElectraForSequenceClassification,$.ElectraForTokenClassification,$.ElectraModel,$.ElectraPreTrainedModel,$.ElectraTokenizer,$.EncodecFeatureExtractor,$.EosTokenCriteria,$.Ernie4_5_ForCausalLM,$.Ernie4_5_Model,$.Ernie4_5_PretrainedModel,$.Ernie4_5_Tokenizer,$.EsmForMaskedLM,$.EsmForSequenceClassification,$.EsmForTokenClassification,$.EsmModel,$.EsmPreTrainedModel,$.EsmTokenizer,$.ExaoneForCausalLM,$.ExaoneModel,$.ExaonePreTrainedModel,$.FFT,$.FalconForCausalLM,$.FalconModel,$.FalconPreTrainedModel,$.FalconTokenizer,$.FastViTForImageClassification,$.FastViTModel,$.FastViTPreTrainedModel,$.FeatureExtractionPipeline,$.FeatureExtractor,$.FillMaskPipeline,$.Florence2ForConditionalGeneration,$.Florence2PreTrainedModel,$.Florence2Processor,$.ForcedBOSTokenLogitsProcessor,$.ForcedEOSTokenLogitsProcessor,$.GLPNFeatureExtractor,$.GLPNForDepthEstimation,$.GLPNModel,$.GLPNPreTrainedModel,$.GPT2LMHeadModel,$.GPT2Model,$.GPT2PreTrainedModel,$.GPT2Tokenizer,$.GPTBigCodeForCausalLM,$.GPTBigCodeModel,$.GPTBigCodePreTrainedModel,$.GPTJForCausalLM,$.GPTJModel,$.GPTJPreTrainedModel,$.GPTNeoForCausalLM,$.GPTNeoModel,$.GPTNeoPreTrainedModel,$.GPTNeoXForCausalLM,$.GPTNeoXModel,$.GPTNeoXPreTrainedModel,$.GPTNeoXTokenizer,$.Gemma2ForCausalLM,$.Gemma2Model,$.Gemma2PreTrainedModel,$.Gemma3ForCausalLM,$.Gemma3Model,$.Gemma3PreTrainedModel,$.Gemma3nAudioFeatureExtractor,$.Gemma3nForConditionalGeneration,$.Gemma3nPreTrainedModel,$.Gemma3nProcessor,$.GemmaForCausalLM,$.GemmaModel,$.GemmaPreTrainedModel,$.GemmaTokenizer,$.GlmForCausalLM,$.GlmModel,$.GlmPreTrainedModel,$.GraniteForCausalLM,$.GraniteModel,$.GranitePreTrainedModel,$.Grok1Tokenizer,$.GroundingDinoForObjectDetection,$.GroundingDinoImageProcessor,$.GroundingDinoPreTrainedModel,$.GroundingDinoProcessor,$.GroupViTModel,$.GroupViTPreTrainedModel,$.HeliumForCausalLM,$.HeliumModel,$.HeliumPreTrainedModel,$.HerbertTokenizer,$.HieraForImageClassification,$.HieraModel,$.HieraPreTrainedModel,$.HubertForCTC,$.HubertForSequenceClassification,$.HubertModel,$.HubertPreTrainedModel,$.IJepaForImageClassification,$.IJepaModel,$.IJepaPreTrainedModel,$.Idefics3ForConditionalGeneration,$.Idefics3ImageProcessor,$.Idefics3PreTrainedModel,$.Idefics3Processor,$.ImageClassificationPipeline,$.ImageFeatureExtractionPipeline,$.ImageFeatureExtractor,$.ImageMattingOutput,$.ImageProcessor,$.ImageSegmentationPipeline,$.ImageToImagePipeline,$.ImageToTextPipeline,$.InterruptableStoppingCriteria,$.JAISLMHeadModel,$.JAISModel,$.JAISPreTrainedModel,$.JinaCLIPImageProcessor,$.JinaCLIPModel,$.JinaCLIPPreTrainedModel,$.JinaCLIPProcessor,$.JinaCLIPTextModel,$.JinaCLIPVisionModel,$.Lfm2ForCausalLM,$.Lfm2Model,$.Lfm2PreTrainedModel,$.LiteWhisperForConditionalGeneration,$.LlamaForCausalLM,$.LlamaModel,$.LlamaPreTrainedModel,$.LlamaTokenizer,$.LlavaForConditionalGeneration,$.LlavaOnevisionForConditionalGeneration,$.LlavaOnevisionImageProcessor,$.LlavaPreTrainedModel,$.LlavaProcessor,$.LlavaQwen2ForCausalLM,$.LogitsProcessor,$.LogitsProcessorList,$.LogitsWarper,$.LongT5ForConditionalGeneration,$.LongT5Model,$.LongT5PreTrainedModel,$.M2M100ForConditionalGeneration,$.M2M100Model,$.M2M100PreTrainedModel,$.M2M100Tokenizer,$.MBart50Tokenizer,$.MBartForCausalLM,$.MBartForConditionalGeneration,$.MBartForSequenceClassification,$.MBartModel,$.MBartPreTrainedModel,$.MBartTokenizer,$.MPNetForMaskedLM,$.MPNetForQuestionAnswering,$.MPNetForSequenceClassification,$.MPNetForTokenClassification,$.MPNetModel,$.MPNetPreTrainedModel,$.MPNetTokenizer,$.MT5ForConditionalGeneration,$.MT5Model,$.MT5PreTrainedModel,$.MarianMTModel,$.MarianModel,$.MarianPreTrainedModel,$.MarianTokenizer,$.Mask2FormerImageProcessor,$.MaskFormerFeatureExtractor,$.MaskFormerForInstanceSegmentation,$.MaskFormerImageProcessor,$.MaskFormerModel,$.MaskFormerPreTrainedModel,$.MaskedLMOutput,$.MaxLengthCriteria,$.Metric3DForDepthEstimation,$.Metric3DPreTrainedModel,$.Metric3Dv2ForDepthEstimation,$.Metric3Dv2PreTrainedModel,$.MgpstrForSceneTextRecognition,$.MgpstrModelOutput,$.MgpstrPreTrainedModel,$.MgpstrProcessor,$.MgpstrTokenizer,$.MimiDecoderModel,$.MimiDecoderOutput,$.MimiEncoderModel,$.MimiEncoderOutput,$.MimiModel,$.MimiPreTrainedModel,$.MinLengthLogitsProcessor,$.MinNewTokensLengthLogitsProcessor,$.MistralForCausalLM,$.MistralModel,$.MistralPreTrainedModel,$.MobileBertForMaskedLM,$.MobileBertForQuestionAnswering,$.MobileBertForSequenceClassification,$.MobileBertModel,$.MobileBertPreTrainedModel,$.MobileBertTokenizer,$.MobileLLMForCausalLM,$.MobileLLMModel,$.MobileLLMPreTrainedModel,$.MobileNetV1FeatureExtractor,$.MobileNetV1ForImageClassification,$.MobileNetV1ForSemanticSegmentation,$.MobileNetV1ImageProcessor,$.MobileNetV1Model,$.MobileNetV1PreTrainedModel,$.MobileNetV2FeatureExtractor,$.MobileNetV2ForImageClassification,$.MobileNetV2ForSemanticSegmentation,$.MobileNetV2ImageProcessor,$.MobileNetV2Model,$.MobileNetV2PreTrainedModel,$.MobileNetV3FeatureExtractor,$.MobileNetV3ForImageClassification,$.MobileNetV3ForSemanticSegmentation,$.MobileNetV3ImageProcessor,$.MobileNetV3Model,$.MobileNetV3PreTrainedModel,$.MobileNetV4FeatureExtractor,$.MobileNetV4ForImageClassification,$.MobileNetV4ForSemanticSegmentation,$.MobileNetV4ImageProcessor,$.MobileNetV4Model,$.MobileNetV4PreTrainedModel,$.MobileViTFeatureExtractor,$.MobileViTForImageClassification,$.MobileViTImageProcessor,$.MobileViTModel,$.MobileViTPreTrainedModel,$.MobileViTV2ForImageClassification,$.MobileViTV2Model,$.MobileViTV2PreTrainedModel,$.ModelOutput,$.ModernBertDecoderForCausalLM,$.ModernBertDecoderModel,$.ModernBertDecoderPreTrainedModel,$.ModernBertForMaskedLM,$.ModernBertForSequenceClassification,$.ModernBertForTokenClassification,$.ModernBertModel,$.ModernBertPreTrainedModel,$.Moondream1ForConditionalGeneration,$.MoonshineFeatureExtractor,$.MoonshineForConditionalGeneration,$.MoonshineModel,$.MoonshinePreTrainedModel,$.MoonshineProcessor,$.MptForCausalLM,$.MptModel,$.MptPreTrainedModel,$.MultiModalityCausalLM,$.MultiModalityPreTrainedModel,$.MusicgenForCausalLM,$.MusicgenForConditionalGeneration,$.MusicgenModel,$.MusicgenPreTrainedModel,$.NeoBertForMaskedLM,$.NeoBertForQuestionAnswering,$.NeoBertForSequenceClassification,$.NeoBertForTokenClassification,$.NeoBertModel,$.NeoBertPreTrainedModel,$.NllbTokenizer,$.NoBadWordsLogitsProcessor,$.NoRepeatNGramLogitsProcessor,$.NomicBertModel,$.NomicBertPreTrainedModel,$.NougatImageProcessor,$.NougatTokenizer,$.OPTForCausalLM,$.OPTModel,$.OPTPreTrainedModel,$.ObjectDetectionPipeline,$.Olmo2ForCausalLM,$.Olmo2Model,$.Olmo2PreTrainedModel,$.OlmoForCausalLM,$.OlmoModel,$.OlmoPreTrainedModel,$.OpenELMForCausalLM,$.OpenELMModel,$.OpenELMPreTrainedModel,$.OwlViTFeatureExtractor,$.OwlViTForObjectDetection,$.OwlViTImageProcessor,$.OwlViTModel,$.OwlViTPreTrainedModel,$.OwlViTProcessor,$.Owlv2ForObjectDetection,$.Owlv2ImageProcessor,$.Owlv2Model,$.Owlv2PreTrainedModel,$.PaliGemmaForConditionalGeneration,$.PaliGemmaPreTrainedModel,$.PaliGemmaProcessor,$.PatchTSMixerForPrediction,$.PatchTSMixerModel,$.PatchTSMixerPreTrainedModel,$.PatchTSTForPrediction,$.PatchTSTModel,$.PatchTSTPreTrainedModel,$.Phi3ForCausalLM,$.Phi3Model,$.Phi3PreTrainedModel,$.Phi3VForCausalLM,$.Phi3VImageProcessor,$.Phi3VPreTrainedModel,$.Phi3VProcessor,$.PhiForCausalLM,$.PhiModel,$.PhiPreTrainedModel,$.Pipeline,$.PreTrainedModel,$.PreTrainedTokenizer,$.PretrainedConfig,$.PretrainedMixin,$.Processor,$.PvtForImageClassification,$.PvtImageProcessor,$.PvtModel,$.PvtPreTrainedModel,$.PyAnnoteFeatureExtractor,$.PyAnnoteForAudioFrameClassification,$.PyAnnoteModel,$.PyAnnotePreTrainedModel,$.PyAnnoteProcessor,$.QuestionAnsweringModelOutput,$.QuestionAnsweringPipeline,$.Qwen2ForCausalLM,$.Qwen2Model,$.Qwen2PreTrainedModel,$.Qwen2Tokenizer,$.Qwen2VLForConditionalGeneration,$.Qwen2VLImageProcessor,$.Qwen2VLPreTrainedModel,$.Qwen2VLProcessor,$.Qwen3ForCausalLM,$.Qwen3Model,$.Qwen3PreTrainedModel,$.RFDetrForObjectDetection,$.RFDetrModel,$.RFDetrObjectDetectionOutput,$.RFDetrPreTrainedModel,$.RTDetrForObjectDetection,$.RTDetrImageProcessor,$.RTDetrModel,$.RTDetrObjectDetectionOutput,$.RTDetrPreTrainedModel,$.RTDetrV2ForObjectDetection,$.RTDetrV2Model,$.RTDetrV2ObjectDetectionOutput,$.RTDetrV2PreTrainedModel,$.RawAudio,$.RawImage,$.RawVideo,$.RawVideoFrame,$.RepetitionPenaltyLogitsProcessor,$.ResNetForImageClassification,$.ResNetModel,$.ResNetPreTrainedModel,$.RoFormerForMaskedLM,$.RoFormerForQuestionAnswering,$.RoFormerForSequenceClassification,$.RoFormerForTokenClassification,$.RoFormerModel,$.RoFormerPreTrainedModel,$.RoFormerTokenizer,$.RobertaForMaskedLM,$.RobertaForQuestionAnswering,$.RobertaForSequenceClassification,$.RobertaForTokenClassification,$.RobertaModel,$.RobertaPreTrainedModel,$.RobertaTokenizer,$.SamImageProcessor,$.SamImageSegmentationOutput,$.SamModel,$.SamPreTrainedModel,$.SamProcessor,$.SapiensForDepthEstimation,$.SapiensForNormalEstimation,$.SapiensForSemanticSegmentation,$.SapiensPreTrainedModel,$.SeamlessM4TFeatureExtractor,$.SegformerFeatureExtractor,$.SegformerForImageClassification,$.SegformerForSemanticSegmentation,$.SegformerImageProcessor,$.SegformerModel,$.SegformerPreTrainedModel,$.Seq2SeqLMOutput,$.SequenceClassifierOutput,$.SiglipImageProcessor,$.SiglipModel,$.SiglipPreTrainedModel,$.SiglipTextModel,$.SiglipTokenizer,$.SiglipVisionModel,$.SmolLM3ForCausalLM,$.SmolLM3Model,$.SmolLM3PreTrainedModel,$.SmolVLMForConditionalGeneration,$.SmolVLMImageProcessor,$.SmolVLMProcessor,$.SnacDecoderModel,$.SnacEncoderModel,$.SnacFeatureExtractor,$.SnacModel,$.SnacPreTrainedModel,$.SpeechT5FeatureExtractor,$.SpeechT5ForSpeechToText,$.SpeechT5ForTextToSpeech,$.SpeechT5HifiGan,$.SpeechT5Model,$.SpeechT5PreTrainedModel,$.SpeechT5Processor,$.SpeechT5Tokenizer,$.SqueezeBertForMaskedLM,$.SqueezeBertForQuestionAnswering,$.SqueezeBertForSequenceClassification,$.SqueezeBertModel,$.SqueezeBertPreTrainedModel,$.SqueezeBertTokenizer,$.StableLmForCausalLM,$.StableLmModel,$.StableLmPreTrainedModel,$.Starcoder2ForCausalLM,$.Starcoder2Model,$.Starcoder2PreTrainedModel,$.StoppingCriteria,$.StoppingCriteriaList,$.StyleTextToSpeech2Model,$.StyleTextToSpeech2PreTrainedModel,$.SummarizationPipeline,$.SuppressTokensAtBeginLogitsProcessor,$.Swin2SRForImageSuperResolution,$.Swin2SRImageProcessor,$.Swin2SRModel,$.Swin2SRPreTrainedModel,$.SwinForImageClassification,$.SwinForSemanticSegmentation,$.SwinModel,$.SwinPreTrainedModel,$.T5ForConditionalGeneration,$.T5Model,$.T5PreTrainedModel,$.T5Tokenizer,$.TableTransformerForObjectDetection,$.TableTransformerModel,$.TableTransformerObjectDetectionOutput,$.TableTransformerPreTrainedModel,$.TemperatureLogitsWarper,$.Tensor,$.Text2TextGenerationPipeline,$.TextClassificationPipeline,$.TextGenerationPipeline,$.TextStreamer,$.TextToAudioPipeline,$.TokenClassificationPipeline,$.TokenClassifierOutput,$.TokenizerModel,$.TopKLogitsWarper,$.TopPLogitsWarper,$.TrOCRForCausalLM,$.TrOCRPreTrainedModel,$.TranslationPipeline,$.UltravoxModel,$.UltravoxPreTrainedModel,$.UltravoxProcessor,$.UniSpeechForCTC,$.UniSpeechForSequenceClassification,$.UniSpeechModel,$.UniSpeechPreTrainedModel,$.UniSpeechSatForAudioFrameClassification,$.UniSpeechSatForCTC,$.UniSpeechSatForSequenceClassification,$.UniSpeechSatModel,$.UniSpeechSatPreTrainedModel,$.VLChatProcessor,$.VLMImageProcessor,$.ViTFeatureExtractor,$.ViTForImageClassification,$.ViTImageProcessor,$.ViTMAEModel,$.ViTMAEPreTrainedModel,$.ViTMSNForImageClassification,$.ViTMSNModel,$.ViTMSNPreTrainedModel,$.ViTModel,$.ViTPreTrainedModel,$.VisionEncoderDecoderModel,$.VitMatteForImageMatting,$.VitMatteImageProcessor,$.VitMattePreTrainedModel,$.VitPoseForPoseEstimation,$.VitPoseImageProcessor,$.VitPosePreTrainedModel,$.VitsModel,$.VitsModelOutput,$.VitsPreTrainedModel,$.VitsTokenizer,$.VoxtralForConditionalGeneration,$.VoxtralProcessor,$.Wav2Vec2BertForCTC,$.Wav2Vec2BertForSequenceClassification,$.Wav2Vec2BertModel,$.Wav2Vec2BertPreTrainedModel,$.Wav2Vec2CTCTokenizer,$.Wav2Vec2FeatureExtractor,$.Wav2Vec2ForAudioFrameClassification,$.Wav2Vec2ForCTC,$.Wav2Vec2ForSequenceClassification,$.Wav2Vec2Model,$.Wav2Vec2PreTrainedModel,$.Wav2Vec2Processor,$.Wav2Vec2ProcessorWithLM,$.WavLMForAudioFrameClassification,$.WavLMForCTC,$.WavLMForSequenceClassification,$.WavLMForXVector,$.WavLMModel,$.WavLMPreTrainedModel,$.WeSpeakerFeatureExtractor,$.WeSpeakerResNetModel,$.WeSpeakerResNetPreTrainedModel,$.WhisperFeatureExtractor,$.WhisperForConditionalGeneration,$.WhisperModel,$.WhisperPreTrainedModel,$.WhisperProcessor,$.WhisperTextStreamer,$.WhisperTimeStampLogitsProcessor,$.WhisperTokenizer,$.XLMForQuestionAnswering,$.XLMForSequenceClassification,$.XLMForTokenClassification,$.XLMModel,$.XLMPreTrainedModel,$.XLMRobertaForMaskedLM,$.XLMRobertaForQuestionAnswering,$.XLMRobertaForSequenceClassification,$.XLMRobertaForTokenClassification,$.XLMRobertaModel,$.XLMRobertaPreTrainedModel,$.XLMRobertaTokenizer,$.XLMTokenizer,$.XLMWithLMHeadModel,$.XVectorOutput,$.YolosFeatureExtractor,$.YolosForObjectDetection,$.YolosImageProcessor,$.YolosModel,$.YolosObjectDetectionOutput,$.YolosPreTrainedModel,$.ZeroShotAudioClassificationPipeline,$.ZeroShotClassificationPipeline,$.ZeroShotImageClassificationPipeline,$.ZeroShotObjectDetectionPipeline,$.bankers_round,$.cat,$.cos_sim,$.dot,$.dynamic_time_warping,$.env,$.full,$.full_like,$.getCacheShapes,$.hamming,$.hanning,$.interpolate,$.interpolate_4d,$.interpolate_data,$.is_chinese_char,$.layer_norm,$.load_image,$.load_video,$.log_softmax,$.magnitude,$.matmul,$.max,$.mean,$.mean_pooling,$.medianFilter,$.mel_filter_bank,$.min,$.ones,$.ones_like,$.permute,$.permute_data;var Nz=$.pipeline;$.quantize_embeddings,$.rand,$.read_audio,$.rfft,$.round,$.slice,$.softmax,$.spectrogram,$.stack,$.std_mean,$.topk,$.window_function,$.zeros,$.zeros_like;const jz=qa.get("Transcriber");class Uz{constructor({dtype:t="q8",emit:r=jz.trace}){this.dtype=t,this.emit=r,this.instance=null}async initialize(){if(this.instance)return;this.emit("initialize",{value:0,message:"Loading transcription model..."});const t=Vv({emit:this.emit,messagePrefix:"Transcriber: Downloading model files"});this.instance=await Nz("automatic-speech-recognition","nsarang/distil-whisper-small.en",{progress_callback:t,dtype:this.dtype}),this.emit("initialize",{value:100,message:"Transcriber loaded successfully"})}async inference({audioData:t,sampleRate:r=24e3,chunk_length_s:n=30,stride_length_s:i=5}){if(this.emit("inference",{value:0,message:"Transcribing audio..."}),!this.instance)throw new Error("Model not loaded");this.dtype==="fp16"&&(t=t.to("float16"));const s=await this.instance(t.data,{chunk_length_s:n,stride_length_s:i,sampling_rate:r});return this.emit("inference",{value:100,message:"Transcription complete!"}),s.text}async dispose(){this.instance=null}}const Wz={f5tts:tD,transcriber:Uz},Rh=new Map;function Vz(e,t){if(typeof t.prototype.__serialize__=="function"&&typeof t.__deserialize__=="function"||typeof t.prototype.toJSON=="function"&&typeof t.fromJSON=="function")Rh.set(e,t);else throw new Error(`Type "${e}" must implement either __serialize__/__deserialize__ or toJSON/fromJSON.`)}function Gz(e){const t=Rh.get(e);if(!t)throw new Error(`Unknown type: ${e}`);return t}function uP(e){for(const[t,r]of Rh.entries())if(r===e)return t;throw new Error(`Class not registered: ${e.name}`)}function dP(e){return e!==null&&typeof e=="object"&&Object.getPrototypeOf(e)===Object.prototype}function Nh(e){if(e===null||typeof e!="object"||ArrayBuffer.isView(e))return e;if(Array.isArray(e))return e.map(Nh);if(dP(e))return Object.fromEntries(Object.entries(e).map(([n,i])=>[n,Nh(i)]));const t=uP(e.constructor),r=typeof e.__serialize__=="function"?e.__serialize__:e.toJSON;return{__type:t,__content:r.call(e)}}function jh(e){if(e===null||typeof e!="object"||ArrayBuffer.isView(e))return e;if(Array.isArray(e))return e.map(jh);if(e.__type){const t=Gz(e.__type);return(typeof t.__deserialize__=="function"?t.__deserialize__:t.fromJSON)(e.__content)}return Object.fromEntries(Object.entries(e).map(([t,r])=>[t,jh(r)]))}function Uh(e){try{return e===null||typeof e!="object"||ArrayBuffer.isView(e)?!0:Array.isArray(e)?e.every(Uh):dP(e)?Object.values(e).every(Uh):uP(e.constructor)!==null}catch{return!1}}Vz("Tensor",Bs);const qz=qa.get("WebWorker");qu.set("custom",{canHandle:e=>Uh(e),serialize:e=>[Nh(e),[]],deserialize:e=>jh(e)}),Hu({createAdapter(e,t,r){qz.debug(`Request to create adapter of type ${e} with config`,t);const n=Wz[e];if(!n)throw new Error(`Unknown adapter type: ${e}`);const i=new n({...t,emit:r});return mm(i)}})})();
